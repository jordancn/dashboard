enum AccountType {
  Checking
  Savings
  Credit
  Loan
  Investment
}

scalar DateIso
scalar DateTimeIso

type Entity {
  id: ID!
  name: String!
  accounts: [Account!]!
  transactions(
    dateRange: DateRange!
    pagination: Pagination
    categoryId: ID
    vendorId: ID
  ): [Transaction!]!
  transactionGroups(
    dateRange: DateRange!
    groupBy: GroupBy!
  ): [TransactionGroup!]!
  category(dateRange: DateRange!, categoryId: ID!): Category!
  categories(dateRange: DateRange!, changeThreshold: Float): [Category!]!
  currentBalance: Float!
  monthlyBalance(dateRange: DateRange!): [MonthlyBalance!]!
  dailyBalance(dateRange: DateRange!): [DailyBalance!]!
}

type Institution {
  id: ID!
  name: String!
  accounts: [Account!]!
}

scalar Base64Url

type Vendor {
  id: ID!
  name: String!
  image: Base64Url
  transactions(dateRange: DateRange!, pagination: Pagination): [Transaction!]!
  transactionGroups(
    dateRange: DateRange!
    groupBy: GroupBy!
  ): [TransactionGroup!]!
  total(dateRange: DateRange!): Float!
}

type CategoryChange {
  id: ID!
  category: Category!
  currentDateRange: DateRangeValue!
  currentTotal: Float!
  previousTotal: Float!
  previousDateRange: DateRangeValue!
  changePercent: Float

  proratedPreviousTotal: Float!
  proratedPreviousDateRange: DateRangeValue!
  proratedChangePercent: Float
}

enum CategoryType {
  Expense
  Income
}

type Category {
  id: ID!
  categoryId: ID!
  name: String!
  transactions(pagination: Pagination): [Transaction!]!
  transactionGroups(groupBy: GroupBy!): [TransactionGroup!]!
  total: Float!
  count: Int!

  budget: Budget
  change: CategoryChange!
  categoryType: CategoryType!
}

type Budget {
  id: ID!
  entity: Entity!
  category: Category!
  performance(groupBy: GroupBy!): [Performance!]!
  currentBudgeted: Float!
}

type Performance {
  id: ID!
  month: String!
  spent: Float!
  budgeted: Float!
}

type MonthlyBalance {
  id: ID!
  month: String!
  balance: Float!
}

type DailyBalance {
  id: ID!
  date: DateIso!
  balance: Float!
}

type Account {
  id: ID!
  externalId: String
  name: String!
  number: String!
  institution: Institution!
  lastRefreshed: DateTimeIso
  transactions(
    dateRange: DateRange!
    pagination: Pagination
    categoryId: ID
    vendorId: ID
  ): [Transaction!]!
  transactionGroups(
    dateRange: DateRange!
    groupBy: GroupBy!
  ): [TransactionGroup!]!
  entity: Entity!
  currentBalance: Float!
  accountType: AccountType!
  monthlyBalance(dateRange: DateRange!): [MonthlyBalance!]!
  dailyBalance(dateRange: DateRange!): [DailyBalance!]!
}

type TransactionGroup {
  id: ID!
  groupedBy: GroupBy!
  groupIdentifier: String!
  groupIndex: Int!
  start: DateIso!
  end: DateIso!
  total: Float!
  count: Int!

  totalIncome: Float!
  totalExpenses: Float!

  transactions(
    pagination: Pagination
    categoryId: ID
    vendorId: ID
  ): [Transaction!]!
}

type Transaction {
  id: ID!
  account: Account!
  date: DateIso!
  category: Category
  description: String!
  amount: Float!
  addedAt: DateTimeIso!
  vendor: Vendor
  pending: Boolean!
}

input Pagination {
  limit: Int!
  offset: Int!
}

enum GroupBy {
  Weekday
  Year
  Month
  Week
}

type DateRangeValue {
  id: ID!
  start: DateIso!
  end: DateIso!
}

input DateRange {
  start: DateIso!
  end: DateIso!
}

input IdOrName {
  id: ID
  name: String
}

input IdOrAddress {
  id: ID
  address: String
}

input IdOnly {
  id: ID!
}

input Scope {
  entityId: ID
  institutionId: ID
  vendorId: ID
  categoryId: ID
  accountId: ID
  transactionId: ID
  budgetId: ID
}

type Query {
  entity(entityId: ID, name: String): Entity
  institution(institutionId: ID, name: String): Institution
  vendor(vendorId: ID, name: String): Vendor
  category(categoryId: ID, name: String, dateRange: DateRange): Category
  account(accountId: ID, name: String): Account
  transaction(transactionId: ID!): Transaction

  currentBalance: Float!
  monthlyBalance(dateRange: DateRange!): [MonthlyBalance!]!
  dailyBalance(dateRange: DateRange!): [DailyBalance!]!

  lastRefreshed: DateIso!

  entities: [Entity!]!
  institutions: [Institution!]!
  categories(dateRange: DateRange!, changeThreshold: Float): [Category!]!
  vendors: [Vendor!]!
  accounts: [Account!]!
  transactions(
    dateRange: DateRange!
    pagination: Pagination
    entityId: ID
    accountId: ID
  ): [Transaction!]!
  transactionGroups(
    dateRange: DateRange!
    groupBy: GroupBy!
  ): [TransactionGroup!]!
  budget(entityId: ID!, categoryId: ID!): Budget
}

type Mutation {
  setCategory(transactionId: ID!, categoryId: ID): Transaction
  setVendor(transactionId: ID!, vendorId: ID): Transaction

  addCategory(name: String!): Category!
  addVendor(name: String!): Vendor!
}
