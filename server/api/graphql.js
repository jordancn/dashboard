"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn2, res) => function __init() {
  return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
};
var __commonJS = (cb, mod2) => function __require() {
  return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to2, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to2, key) && key !== except)
        __defProp(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to2;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
  mod2
));
var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);

// node_modules/@prisma/client/runtime/library.js
var require_library = __commonJS({
  "node_modules/@prisma/client/runtime/library.js"(exports, module) {
    "use strict";
    var zl = Object.create;
    var Lr = Object.defineProperty;
    var Yl = Object.getOwnPropertyDescriptor;
    var Zl = Object.getOwnPropertyNames;
    var Xl = Object.getPrototypeOf;
    var eu = Object.prototype.hasOwnProperty;
    var z = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports);
    var jt = (e, t) => {
      for (var r in t) Lr(e, r, { get: t[r], enumerable: true });
    };
    var mo = (e, t, r, n) => {
      if (t && typeof t == "object" || typeof t == "function") for (let i of Zl(t)) !eu.call(e, i) && i !== r && Lr(e, i, { get: () => t[i], enumerable: !(n = Yl(t, i)) || n.enumerable });
      return e;
    };
    var k = (e, t, r) => (r = e != null ? zl(Xl(e)) : {}, mo(t || !e || !e.__esModule ? Lr(r, "default", { value: e, enumerable: true }) : r, e));
    var tu = (e) => mo(Lr({}, "__esModule", { value: true }), e);
    var Mo = z((tf, Yn) => {
      "use strict";
      var v = Yn.exports;
      Yn.exports.default = v;
      var D = "\x1B[", Gt = "\x1B]", pt = "\x07", Qr = ";", Fo = process.env.TERM_PROGRAM === "Apple_Terminal";
      v.cursorTo = (e, t) => {
        if (typeof e != "number") throw new TypeError("The `x` argument is required");
        return typeof t != "number" ? D + (e + 1) + "G" : D + (t + 1) + ";" + (e + 1) + "H";
      };
      v.cursorMove = (e, t) => {
        if (typeof e != "number") throw new TypeError("The `x` argument is required");
        let r = "";
        return e < 0 ? r += D + -e + "D" : e > 0 && (r += D + e + "C"), t < 0 ? r += D + -t + "A" : t > 0 && (r += D + t + "B"), r;
      };
      v.cursorUp = (e = 1) => D + e + "A";
      v.cursorDown = (e = 1) => D + e + "B";
      v.cursorForward = (e = 1) => D + e + "C";
      v.cursorBackward = (e = 1) => D + e + "D";
      v.cursorLeft = D + "G";
      v.cursorSavePosition = Fo ? "\x1B7" : D + "s";
      v.cursorRestorePosition = Fo ? "\x1B8" : D + "u";
      v.cursorGetPosition = D + "6n";
      v.cursorNextLine = D + "E";
      v.cursorPrevLine = D + "F";
      v.cursorHide = D + "?25l";
      v.cursorShow = D + "?25h";
      v.eraseLines = (e) => {
        let t = "";
        for (let r = 0; r < e; r++) t += v.eraseLine + (r < e - 1 ? v.cursorUp() : "");
        return e && (t += v.cursorLeft), t;
      };
      v.eraseEndLine = D + "K";
      v.eraseStartLine = D + "1K";
      v.eraseLine = D + "2K";
      v.eraseDown = D + "J";
      v.eraseUp = D + "1J";
      v.eraseScreen = D + "2J";
      v.scrollUp = D + "S";
      v.scrollDown = D + "T";
      v.clearScreen = "\x1Bc";
      v.clearTerminal = process.platform === "win32" ? `${v.eraseScreen}${D}0f` : `${v.eraseScreen}${D}3J${D}H`;
      v.beep = pt;
      v.link = (e, t) => [Gt, "8", Qr, Qr, t, pt, e, Gt, "8", Qr, Qr, pt].join("");
      v.image = (e, t = {}) => {
        let r = `${Gt}1337;File=inline=1`;
        return t.width && (r += `;width=${t.width}`), t.height && (r += `;height=${t.height}`), t.preserveAspectRatio === false && (r += ";preserveAspectRatio=0"), r + ":" + e.toString("base64") + pt;
      };
      v.iTerm = { setCwd: (e = process.cwd()) => `${Gt}50;CurrentDir=${e}${pt}`, annotation: (e, t = {}) => {
        let r = `${Gt}1337;`, n = typeof t.x < "u", i = typeof t.y < "u";
        if ((n || i) && !(n && i && typeof t.length < "u")) throw new Error("`x`, `y` and `length` must be defined when `x` or `y` is defined");
        return e = e.replace(/\|/g, ""), r += t.isHidden ? "AddHiddenAnnotation=" : "AddAnnotation=", t.length > 0 ? r += (n ? [e, t.length, t.x, t.y] : [t.length, e]).join("|") : r += e, r + pt;
      } };
    });
    var Zn = z((rf, $o) => {
      "use strict";
      $o.exports = (e, t = process.argv) => {
        let r = e.startsWith("-") ? "" : e.length === 1 ? "-" : "--", n = t.indexOf(r + e), i = t.indexOf("--");
        return n !== -1 && (i === -1 || n < i);
      };
    });
    var Vo = z((nf, jo) => {
      "use strict";
      var ju = require("os"), qo = require("tty"), de = Zn(), { env: Q } = process, Qe;
      de("no-color") || de("no-colors") || de("color=false") || de("color=never") ? Qe = 0 : (de("color") || de("colors") || de("color=true") || de("color=always")) && (Qe = 1);
      "FORCE_COLOR" in Q && (Q.FORCE_COLOR === "true" ? Qe = 1 : Q.FORCE_COLOR === "false" ? Qe = 0 : Qe = Q.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(Q.FORCE_COLOR, 10), 3));
      function Xn(e) {
        return e === 0 ? false : { level: e, hasBasic: true, has256: e >= 2, has16m: e >= 3 };
      }
      function ei(e, t) {
        if (Qe === 0) return 0;
        if (de("color=16m") || de("color=full") || de("color=truecolor")) return 3;
        if (de("color=256")) return 2;
        if (e && !t && Qe === void 0) return 0;
        let r = Qe || 0;
        if (Q.TERM === "dumb") return r;
        if (process.platform === "win32") {
          let n = ju.release().split(".");
          return Number(n[0]) >= 10 && Number(n[2]) >= 10586 ? Number(n[2]) >= 14931 ? 3 : 2 : 1;
        }
        if ("CI" in Q) return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((n) => n in Q) || Q.CI_NAME === "codeship" ? 1 : r;
        if ("TEAMCITY_VERSION" in Q) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(Q.TEAMCITY_VERSION) ? 1 : 0;
        if (Q.COLORTERM === "truecolor") return 3;
        if ("TERM_PROGRAM" in Q) {
          let n = parseInt((Q.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
          switch (Q.TERM_PROGRAM) {
            case "iTerm.app":
              return n >= 3 ? 3 : 2;
            case "Apple_Terminal":
              return 2;
          }
        }
        return /-256(color)?$/i.test(Q.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Q.TERM) || "COLORTERM" in Q ? 1 : r;
      }
      function Vu(e) {
        let t = ei(e, e && e.isTTY);
        return Xn(t);
      }
      jo.exports = { supportsColor: Vu, stdout: Xn(ei(true, qo.isatty(1))), stderr: Xn(ei(true, qo.isatty(2))) };
    });
    var Qo = z((of, Uo) => {
      "use strict";
      var Bu = Vo(), dt = Zn();
      function Bo(e) {
        if (/^\d{3,4}$/.test(e)) {
          let r = /(\d{1,2})(\d{2})/.exec(e);
          return { major: 0, minor: parseInt(r[1], 10), patch: parseInt(r[2], 10) };
        }
        let t = (e || "").split(".").map((r) => parseInt(r, 10));
        return { major: t[0], minor: t[1], patch: t[2] };
      }
      function ti(e) {
        let { env: t } = process;
        if ("FORCE_HYPERLINK" in t) return !(t.FORCE_HYPERLINK.length > 0 && parseInt(t.FORCE_HYPERLINK, 10) === 0);
        if (dt("no-hyperlink") || dt("no-hyperlinks") || dt("hyperlink=false") || dt("hyperlink=never")) return false;
        if (dt("hyperlink=true") || dt("hyperlink=always") || "NETLIFY" in t) return true;
        if (!Bu.supportsColor(e) || e && !e.isTTY || process.platform === "win32" || "CI" in t || "TEAMCITY_VERSION" in t) return false;
        if ("TERM_PROGRAM" in t) {
          let r = Bo(t.TERM_PROGRAM_VERSION);
          switch (t.TERM_PROGRAM) {
            case "iTerm.app":
              return r.major === 3 ? r.minor >= 1 : r.major > 3;
            case "WezTerm":
              return r.major >= 20200620;
            case "vscode":
              return r.major > 1 || r.major === 1 && r.minor >= 72;
          }
        }
        if ("VTE_VERSION" in t) {
          if (t.VTE_VERSION === "0.50.0") return false;
          let r = Bo(t.VTE_VERSION);
          return r.major > 0 || r.minor >= 50;
        }
        return false;
      }
      Uo.exports = { supportsHyperlink: ti, stdout: ti(process.stdout), stderr: ti(process.stderr) };
    });
    var Jo = z((sf, Jt) => {
      "use strict";
      var Uu = Mo(), ri = Qo(), Go = (e, t, { target: r = "stdout", ...n } = {}) => ri[r] ? Uu.link(e, t) : n.fallback === false ? e : typeof n.fallback == "function" ? n.fallback(e, t) : `${e} (\u200B${t}\u200B)`;
      Jt.exports = (e, t, r = {}) => Go(e, t, r);
      Jt.exports.stderr = (e, t, r = {}) => Go(e, t, { target: "stderr", ...r });
      Jt.exports.isSupported = ri.stdout;
      Jt.exports.stderr.isSupported = ri.stderr;
    });
    var ii = z((hf, Qu) => {
      Qu.exports = { name: "@prisma/engines-version", version: "5.23.0-27.5dbef10bdbfb579e07d35cc85fb1518d357cb99e", main: "index.js", types: "index.d.ts", license: "Apache-2.0", author: "Tim Suchanek <suchanek@prisma.io>", prisma: { enginesVersion: "5dbef10bdbfb579e07d35cc85fb1518d357cb99e" }, repository: { type: "git", url: "https://github.com/prisma/engines-wrapper.git", directory: "packages/engines-version" }, devDependencies: { "@types/node": "18.19.34", typescript: "4.9.5" }, files: ["index.js", "index.d.ts"], scripts: { build: "tsc -d" } };
    });
    var oi = z((Gr) => {
      "use strict";
      Object.defineProperty(Gr, "__esModule", { value: true });
      Gr.enginesVersion = void 0;
      Gr.enginesVersion = ii().prisma.enginesVersion;
    });
    var zo = z((Nf, Wu) => {
      Wu.exports = { name: "dotenv", version: "16.0.3", description: "Loads environment variables from .env file", main: "lib/main.js", types: "lib/main.d.ts", exports: { ".": { require: "./lib/main.js", types: "./lib/main.d.ts", default: "./lib/main.js" }, "./config": "./config.js", "./config.js": "./config.js", "./lib/env-options": "./lib/env-options.js", "./lib/env-options.js": "./lib/env-options.js", "./lib/cli-options": "./lib/cli-options.js", "./lib/cli-options.js": "./lib/cli-options.js", "./package.json": "./package.json" }, scripts: { "dts-check": "tsc --project tests/types/tsconfig.json", lint: "standard", "lint-readme": "standard-markdown", pretest: "npm run lint && npm run dts-check", test: "tap tests/*.js --100 -Rspec", prerelease: "npm test", release: "standard-version" }, repository: { type: "git", url: "git://github.com/motdotla/dotenv.git" }, keywords: ["dotenv", "env", ".env", "environment", "variables", "config", "settings"], readmeFilename: "README.md", license: "BSD-2-Clause", devDependencies: { "@types/node": "^17.0.9", decache: "^4.6.1", dtslint: "^3.7.0", sinon: "^12.0.1", standard: "^16.0.4", "standard-markdown": "^7.1.0", "standard-version": "^9.3.2", tap: "^15.1.6", tar: "^6.1.11", typescript: "^4.5.4" }, engines: { node: ">=12" } };
    });
    var Zo = z((Ff, Wr) => {
      "use strict";
      var Hu = require("fs"), Yo = require("path"), Ku = require("os"), zu = zo(), Yu = zu.version, Zu = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
      function Xu(e) {
        let t = {}, r = e.toString();
        r = r.replace(/\r\n?/mg, `
`);
        let n;
        for (; (n = Zu.exec(r)) != null; ) {
          let i = n[1], o = n[2] || "";
          o = o.trim();
          let s = o[0];
          o = o.replace(/^(['"`])([\s\S]*)\1$/mg, "$2"), s === '"' && (o = o.replace(/\\n/g, `
`), o = o.replace(/\\r/g, "\r")), t[i] = o;
        }
        return t;
      }
      function ui(e) {
        console.log(`[dotenv@${Yu}][DEBUG] ${e}`);
      }
      function ec(e) {
        return e[0] === "~" ? Yo.join(Ku.homedir(), e.slice(1)) : e;
      }
      function tc(e) {
        let t = Yo.resolve(process.cwd(), ".env"), r = "utf8", n = !!(e && e.debug), i = !!(e && e.override);
        e && (e.path != null && (t = ec(e.path)), e.encoding != null && (r = e.encoding));
        try {
          let o = Jr.parse(Hu.readFileSync(t, { encoding: r }));
          return Object.keys(o).forEach(function(s) {
            Object.prototype.hasOwnProperty.call(process.env, s) ? (i === true && (process.env[s] = o[s]), n && ui(i === true ? `"${s}" is already defined in \`process.env\` and WAS overwritten` : `"${s}" is already defined in \`process.env\` and was NOT overwritten`)) : process.env[s] = o[s];
          }), { parsed: o };
        } catch (o) {
          return n && ui(`Failed to load ${t} ${o.message}`), { error: o };
        }
      }
      var Jr = { config: tc, parse: Xu };
      Wr.exports.config = Jr.config;
      Wr.exports.parse = Jr.parse;
      Wr.exports = Jr;
    });
    var is = z((Uf, ns) => {
      "use strict";
      ns.exports = (e) => {
        let t = e.match(/^[ \t]*(?=\S)/gm);
        return t ? t.reduce((r, n) => Math.min(r, n.length), 1 / 0) : 0;
      };
    });
    var ss = z((Qf, os3) => {
      "use strict";
      var oc = is();
      os3.exports = (e) => {
        let t = oc(e);
        if (t === 0) return e;
        let r = new RegExp(`^[ \\t]{${t}}`, "gm");
        return e.replace(r, "");
      };
    });
    var mi = z((zf, as) => {
      "use strict";
      as.exports = (e, t = 1, r) => {
        if (r = { indent: " ", includeEmptyLines: false, ...r }, typeof e != "string") throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof e}\``);
        if (typeof t != "number") throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof t}\``);
        if (typeof r.indent != "string") throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof r.indent}\``);
        if (t === 0) return e;
        let n = r.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
        return e.replace(n, r.indent.repeat(t));
      };
    });
    var ps = z((Xf, cs) => {
      "use strict";
      cs.exports = ({ onlyFirst: e = false } = {}) => {
        let t = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");
        return new RegExp(t, e ? void 0 : "g");
      };
    });
    var yi = z((eg, ds) => {
      "use strict";
      var mc = ps();
      ds.exports = (e) => typeof e == "string" ? e.replace(mc(), "") : e;
    });
    var ms = z((ng, zr) => {
      "use strict";
      zr.exports = (e = {}) => {
        let t;
        if (e.repoUrl) t = e.repoUrl;
        else if (e.user && e.repo) t = `https://github.com/${e.user}/${e.repo}`;
        else throw new Error("You need to specify either the `repoUrl` option or both the `user` and `repo` options");
        let r = new URL(`${t}/issues/new`), n = ["body", "title", "labels", "template", "milestone", "assignee", "projects"];
        for (let i of n) {
          let o = e[i];
          if (o !== void 0) {
            if (i === "labels" || i === "projects") {
              if (!Array.isArray(o)) throw new TypeError(`The \`${i}\` option should be an array`);
              o = o.join(",");
            }
            r.searchParams.set(i, o);
          }
        }
        return r.toString();
      };
      zr.exports.default = zr.exports;
    });
    var Si = z((dh, Ns) => {
      "use strict";
      Ns.exports = /* @__PURE__ */ function() {
        function e(t, r, n, i, o) {
          return t < r || n < r ? t > n ? n + 1 : t + 1 : i === o ? r : r + 1;
        }
        return function(t, r) {
          if (t === r) return 0;
          if (t.length > r.length) {
            var n = t;
            t = r, r = n;
          }
          for (var i = t.length, o = r.length; i > 0 && t.charCodeAt(i - 1) === r.charCodeAt(o - 1); ) i--, o--;
          for (var s = 0; s < i && t.charCodeAt(s) === r.charCodeAt(s); ) s++;
          if (i -= s, o -= s, i === 0 || o < 3) return o;
          var a = 0, l, u, c, p, d, f, g, h, O, T, S, C, E = [];
          for (l = 0; l < i; l++) E.push(l + 1), E.push(t.charCodeAt(s + l));
          for (var me = E.length - 1; a < o - 3; ) for (O = r.charCodeAt(s + (u = a)), T = r.charCodeAt(s + (c = a + 1)), S = r.charCodeAt(s + (p = a + 2)), C = r.charCodeAt(s + (d = a + 3)), f = a += 4, l = 0; l < me; l += 2) g = E[l], h = E[l + 1], u = e(g, u, c, O, h), c = e(u, c, p, T, h), p = e(c, p, d, S, h), f = e(p, d, f, C, h), E[l] = f, d = p, p = c, c = u, u = g;
          for (; a < o; ) for (O = r.charCodeAt(s + (u = a)), f = ++a, l = 0; l < me; l += 2) g = E[l], E[l] = f = e(g, u, f, O, E[l + 1]), u = g;
          return f;
        };
      }();
    });
    var Sm = {};
    jt(Sm, { Debug: () => Un, Decimal: () => xe, Extensions: () => qn, MetricsClient: () => At, PrismaClientInitializationError: () => R, PrismaClientKnownRequestError: () => Z, PrismaClientRustPanicError: () => le, PrismaClientUnknownRequestError: () => V, PrismaClientValidationError: () => X, Public: () => jn, Sql: () => oe, defineDmmfProperty: () => sa, deserializeJsonResponse: () => yt, dmmfToRuntimeDataModel: () => oa, empty: () => ca, getPrismaClient: () => Wl, getRuntime: () => An, join: () => ua, makeStrictEnum: () => Hl, makeTypedQueryFactory: () => aa, objectEnumValues: () => hn, raw: () => qi, serializeJsonQuery: () => Pn, skip: () => xn, sqltag: () => ji, warnEnvConflicts: () => Kl, warnOnce: () => Xt });
    module.exports = tu(Sm);
    var qn = {};
    jt(qn, { defineExtension: () => fo, getExtensionContext: () => go });
    function fo(e) {
      return typeof e == "function" ? e : (t) => t.$extends(e);
    }
    function go(e) {
      return e;
    }
    var jn = {};
    jt(jn, { validator: () => ho });
    function ho(...e) {
      return (t) => t;
    }
    var Nr = {};
    jt(Nr, { $: () => xo, bgBlack: () => pu, bgBlue: () => gu, bgCyan: () => yu, bgGreen: () => mu, bgMagenta: () => hu, bgRed: () => du, bgWhite: () => bu, bgYellow: () => fu, black: () => au, blue: () => et, bold: () => J, cyan: () => De, dim: () => Oe, gray: () => Vt, green: () => $e, grey: () => cu, hidden: () => ou, inverse: () => iu, italic: () => nu, magenta: () => lu, red: () => ce, reset: () => ru, strikethrough: () => su, underline: () => Y, white: () => uu, yellow: () => ke });
    var Vn;
    var yo;
    var bo;
    var Eo;
    var wo = true;
    typeof process < "u" && ({ FORCE_COLOR: Vn, NODE_DISABLE_COLORS: yo, NO_COLOR: bo, TERM: Eo } = process.env || {}, wo = process.stdout && process.stdout.isTTY);
    var xo = { enabled: !yo && bo == null && Eo !== "dumb" && (Vn != null && Vn !== "0" || wo) };
    function M(e, t) {
      let r = new RegExp(`\\x1b\\[${t}m`, "g"), n = `\x1B[${e}m`, i = `\x1B[${t}m`;
      return function(o) {
        return !xo.enabled || o == null ? o : n + (~("" + o).indexOf(i) ? o.replace(r, i + n) : o) + i;
      };
    }
    var ru = M(0, 0);
    var J = M(1, 22);
    var Oe = M(2, 22);
    var nu = M(3, 23);
    var Y = M(4, 24);
    var iu = M(7, 27);
    var ou = M(8, 28);
    var su = M(9, 29);
    var au = M(30, 39);
    var ce = M(31, 39);
    var $e = M(32, 39);
    var ke = M(33, 39);
    var et = M(34, 39);
    var lu = M(35, 39);
    var De = M(36, 39);
    var uu = M(37, 39);
    var Vt = M(90, 39);
    var cu = M(90, 39);
    var pu = M(40, 49);
    var du = M(41, 49);
    var mu = M(42, 49);
    var fu = M(43, 49);
    var gu = M(44, 49);
    var hu = M(45, 49);
    var yu = M(46, 49);
    var bu = M(47, 49);
    var Eu = 100;
    var Po = ["green", "yellow", "blue", "magenta", "cyan", "red"];
    var Bt = [];
    var vo = Date.now();
    var wu = 0;
    var Bn = typeof process < "u" ? process.env : {};
    globalThis.DEBUG ??= Bn.DEBUG ?? "";
    globalThis.DEBUG_COLORS ??= Bn.DEBUG_COLORS ? Bn.DEBUG_COLORS === "true" : true;
    var Ut = { enable(e) {
      typeof e == "string" && (globalThis.DEBUG = e);
    }, disable() {
      let e = globalThis.DEBUG;
      return globalThis.DEBUG = "", e;
    }, enabled(e) {
      let t = globalThis.DEBUG.split(",").map((i) => i.replace(/[.+?^${}()|[\]\\]/g, "\\$&")), r = t.some((i) => i === "" || i[0] === "-" ? false : e.match(RegExp(i.split("*").join(".*") + "$"))), n = t.some((i) => i === "" || i[0] !== "-" ? false : e.match(RegExp(i.slice(1).split("*").join(".*") + "$")));
      return r && !n;
    }, log: (...e) => {
      let [t, r, ...n] = e;
      (console.warn ?? console.log)(`${t} ${r}`, ...n);
    }, formatters: {} };
    function xu(e) {
      let t = { color: Po[wu++ % Po.length], enabled: Ut.enabled(e), namespace: e, log: Ut.log, extend: () => {
      } }, r = (...n) => {
        let { enabled: i, namespace: o, color: s, log: a } = t;
        if (n.length !== 0 && Bt.push([o, ...n]), Bt.length > Eu && Bt.shift(), Ut.enabled(o) || i) {
          let l = n.map((c) => typeof c == "string" ? c : Pu(c)), u = `+${Date.now() - vo}ms`;
          vo = Date.now(), globalThis.DEBUG_COLORS ? a(Nr[s](J(o)), ...l, Nr[s](u)) : a(o, ...l, u);
        }
      };
      return new Proxy(r, { get: (n, i) => t[i], set: (n, i, o) => t[i] = o });
    }
    var Un = new Proxy(xu, { get: (e, t) => Ut[t], set: (e, t, r) => Ut[t] = r });
    function Pu(e, t = 2) {
      let r = /* @__PURE__ */ new Set();
      return JSON.stringify(e, (n, i) => {
        if (typeof i == "object" && i !== null) {
          if (r.has(i)) return "[Circular *]";
          r.add(i);
        } else if (typeof i == "bigint") return i.toString();
        return i;
      }, t);
    }
    function To(e = 7500) {
      let t = Bt.map(([r, ...n]) => `${r} ${n.map((i) => typeof i == "string" ? i : JSON.stringify(i)).join(" ")}`).join(`
`);
      return t.length < e ? t : t.slice(-e);
    }
    function Ro() {
      Bt.length = 0;
    }
    var N = Un;
    var Co = k(require("fs"));
    function Qn() {
      let e = process.env.PRISMA_QUERY_ENGINE_LIBRARY;
      if (!(e && Co.default.existsSync(e)) && process.arch === "ia32") throw new Error('The default query engine type (Node-API, "library") is currently not supported for 32bit Node. Please set `engineType = "binary"` in the "generator" block of your "schema.prisma" file (or use the environment variables "PRISMA_CLIENT_ENGINE_TYPE=binary" and/or "PRISMA_CLI_QUERY_ENGINE_TYPE=binary".)');
    }
    var Gn = ["darwin", "darwin-arm64", "debian-openssl-1.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "rhel-openssl-1.0.x", "rhel-openssl-1.1.x", "rhel-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-1.0.x", "linux-arm64-openssl-3.0.x", "linux-arm-openssl-1.1.x", "linux-arm-openssl-1.0.x", "linux-arm-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-1.1.x", "linux-musl-arm64-openssl-3.0.x", "linux-nixos", "linux-static-x64", "linux-static-arm64", "windows", "freebsd11", "freebsd12", "freebsd13", "freebsd14", "freebsd15", "openbsd", "netbsd", "arm"];
    var Fr = "libquery_engine";
    function Mr(e, t) {
      let r = t === "url";
      return e.includes("windows") ? r ? "query_engine.dll.node" : `query_engine-${e}.dll.node` : e.includes("darwin") ? r ? `${Fr}.dylib.node` : `${Fr}-${e}.dylib.node` : r ? `${Fr}.so.node` : `${Fr}-${e}.so.node`;
    }
    var Oo = k(require("child_process"));
    var Kn = k(require("fs/promises"));
    var Br = k(require("os"));
    var _e = Symbol.for("@ts-pattern/matcher");
    var vu = Symbol.for("@ts-pattern/isVariadic");
    var qr = "@ts-pattern/anonymous-select-key";
    var Jn = (e) => !!(e && typeof e == "object");
    var $r = (e) => e && !!e[_e];
    var Ee = (e, t, r) => {
      if ($r(e)) {
        let n = e[_e](), { matched: i, selections: o } = n.match(t);
        return i && o && Object.keys(o).forEach((s) => r(s, o[s])), i;
      }
      if (Jn(e)) {
        if (!Jn(t)) return false;
        if (Array.isArray(e)) {
          if (!Array.isArray(t)) return false;
          let n = [], i = [], o = [];
          for (let s of e.keys()) {
            let a = e[s];
            $r(a) && a[vu] ? o.push(a) : o.length ? i.push(a) : n.push(a);
          }
          if (o.length) {
            if (o.length > 1) throw new Error("Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.");
            if (t.length < n.length + i.length) return false;
            let s = t.slice(0, n.length), a = i.length === 0 ? [] : t.slice(-i.length), l = t.slice(n.length, i.length === 0 ? 1 / 0 : -i.length);
            return n.every((u, c) => Ee(u, s[c], r)) && i.every((u, c) => Ee(u, a[c], r)) && (o.length === 0 || Ee(o[0], l, r));
          }
          return e.length === t.length && e.every((s, a) => Ee(s, t[a], r));
        }
        return Object.keys(e).every((n) => {
          let i = e[n];
          return (n in t || $r(o = i) && o[_e]().matcherType === "optional") && Ee(i, t[n], r);
          var o;
        });
      }
      return Object.is(t, e);
    };
    var Ue = (e) => {
      var t, r, n;
      return Jn(e) ? $r(e) ? (t = (r = (n = e[_e]()).getSelectionKeys) == null ? void 0 : r.call(n)) != null ? t : [] : Array.isArray(e) ? Qt(e, Ue) : Qt(Object.values(e), Ue) : [];
    };
    var Qt = (e, t) => e.reduce((r, n) => r.concat(t(n)), []);
    function pe(e) {
      return Object.assign(e, { optional: () => Tu(e), and: (t) => j(e, t), or: (t) => Ru(e, t), select: (t) => t === void 0 ? So(e) : So(t, e) });
    }
    function Tu(e) {
      return pe({ [_e]: () => ({ match: (t) => {
        let r = {}, n = (i, o) => {
          r[i] = o;
        };
        return t === void 0 ? (Ue(e).forEach((i) => n(i, void 0)), { matched: true, selections: r }) : { matched: Ee(e, t, n), selections: r };
      }, getSelectionKeys: () => Ue(e), matcherType: "optional" }) });
    }
    function j(...e) {
      return pe({ [_e]: () => ({ match: (t) => {
        let r = {}, n = (i, o) => {
          r[i] = o;
        };
        return { matched: e.every((i) => Ee(i, t, n)), selections: r };
      }, getSelectionKeys: () => Qt(e, Ue), matcherType: "and" }) });
    }
    function Ru(...e) {
      return pe({ [_e]: () => ({ match: (t) => {
        let r = {}, n = (i, o) => {
          r[i] = o;
        };
        return Qt(e, Ue).forEach((i) => n(i, void 0)), { matched: e.some((i) => Ee(i, t, n)), selections: r };
      }, getSelectionKeys: () => Qt(e, Ue), matcherType: "or" }) });
    }
    function I(e) {
      return { [_e]: () => ({ match: (t) => ({ matched: !!e(t) }) }) };
    }
    function So(...e) {
      let t = typeof e[0] == "string" ? e[0] : void 0, r = e.length === 2 ? e[1] : typeof e[0] == "string" ? void 0 : e[0];
      return pe({ [_e]: () => ({ match: (n) => {
        let i = { [t ?? qr]: n };
        return { matched: r === void 0 || Ee(r, n, (o, s) => {
          i[o] = s;
        }), selections: i };
      }, getSelectionKeys: () => [t ?? qr].concat(r === void 0 ? [] : Ue(r)) }) });
    }
    function ye(e) {
      return typeof e == "number";
    }
    function qe(e) {
      return typeof e == "string";
    }
    function je(e) {
      return typeof e == "bigint";
    }
    var jm = pe(I(function(e) {
      return true;
    }));
    var Ve = (e) => Object.assign(pe(e), { startsWith: (t) => {
      return Ve(j(e, (r = t, I((n) => qe(n) && n.startsWith(r)))));
      var r;
    }, endsWith: (t) => {
      return Ve(j(e, (r = t, I((n) => qe(n) && n.endsWith(r)))));
      var r;
    }, minLength: (t) => Ve(j(e, ((r) => I((n) => qe(n) && n.length >= r))(t))), length: (t) => Ve(j(e, ((r) => I((n) => qe(n) && n.length === r))(t))), maxLength: (t) => Ve(j(e, ((r) => I((n) => qe(n) && n.length <= r))(t))), includes: (t) => {
      return Ve(j(e, (r = t, I((n) => qe(n) && n.includes(r)))));
      var r;
    }, regex: (t) => {
      return Ve(j(e, (r = t, I((n) => qe(n) && !!n.match(r)))));
      var r;
    } });
    var Vm = Ve(I(qe));
    var be = (e) => Object.assign(pe(e), { between: (t, r) => be(j(e, ((n, i) => I((o) => ye(o) && n <= o && i >= o))(t, r))), lt: (t) => be(j(e, ((r) => I((n) => ye(n) && n < r))(t))), gt: (t) => be(j(e, ((r) => I((n) => ye(n) && n > r))(t))), lte: (t) => be(j(e, ((r) => I((n) => ye(n) && n <= r))(t))), gte: (t) => be(j(e, ((r) => I((n) => ye(n) && n >= r))(t))), int: () => be(j(e, I((t) => ye(t) && Number.isInteger(t)))), finite: () => be(j(e, I((t) => ye(t) && Number.isFinite(t)))), positive: () => be(j(e, I((t) => ye(t) && t > 0))), negative: () => be(j(e, I((t) => ye(t) && t < 0))) });
    var Bm = be(I(ye));
    var Be = (e) => Object.assign(pe(e), { between: (t, r) => Be(j(e, ((n, i) => I((o) => je(o) && n <= o && i >= o))(t, r))), lt: (t) => Be(j(e, ((r) => I((n) => je(n) && n < r))(t))), gt: (t) => Be(j(e, ((r) => I((n) => je(n) && n > r))(t))), lte: (t) => Be(j(e, ((r) => I((n) => je(n) && n <= r))(t))), gte: (t) => Be(j(e, ((r) => I((n) => je(n) && n >= r))(t))), positive: () => Be(j(e, I((t) => je(t) && t > 0))), negative: () => Be(j(e, I((t) => je(t) && t < 0))) });
    var Um = Be(I(je));
    var Qm = pe(I(function(e) {
      return typeof e == "boolean";
    }));
    var Gm = pe(I(function(e) {
      return typeof e == "symbol";
    }));
    var Jm = pe(I(function(e) {
      return e == null;
    }));
    var Wm = pe(I(function(e) {
      return e != null;
    }));
    var Wn = { matched: false, value: void 0 };
    function ct(e) {
      return new Hn(e, Wn);
    }
    var Hn = class e {
      constructor(t, r) {
        this.input = void 0, this.state = void 0, this.input = t, this.state = r;
      }
      with(...t) {
        if (this.state.matched) return this;
        let r = t[t.length - 1], n = [t[0]], i;
        t.length === 3 && typeof t[1] == "function" ? i = t[1] : t.length > 2 && n.push(...t.slice(1, t.length - 1));
        let o = false, s = {}, a = (u, c) => {
          o = true, s[u] = c;
        }, l = !n.some((u) => Ee(u, this.input, a)) || i && !i(this.input) ? Wn : { matched: true, value: r(o ? qr in s ? s[qr] : s : this.input, this.input) };
        return new e(this.input, l);
      }
      when(t, r) {
        if (this.state.matched) return this;
        let n = !!t(this.input);
        return new e(this.input, n ? { matched: true, value: r(this.input, this.input) } : Wn);
      }
      otherwise(t) {
        return this.state.matched ? this.state.value : t(this.input);
      }
      exhaustive() {
        if (this.state.matched) return this.state.value;
        let t;
        try {
          t = JSON.stringify(this.input);
        } catch {
          t = this.input;
        }
        throw new Error(`Pattern matching error: no pattern matches value ${t}`);
      }
      run() {
        return this.exhaustive();
      }
      returnType() {
        return this;
      }
    };
    var ko = require("util");
    var Cu = { warn: ke("prisma:warn") };
    var Su = { warn: () => !process.env.PRISMA_DISABLE_WARNINGS };
    function jr(e, ...t) {
      Su.warn() && console.warn(`${Cu.warn} ${e}`, ...t);
    }
    var Au = (0, ko.promisify)(Oo.default.exec);
    var te = N("prisma:get-platform");
    var Iu = ["1.0.x", "1.1.x", "3.0.x"];
    async function Do() {
      let e = Br.default.platform(), t = process.arch;
      if (e === "freebsd") {
        let s = await Ur("freebsd-version");
        if (s && s.trim().length > 0) {
          let l = /^(\d+)\.?/.exec(s);
          if (l) return { platform: "freebsd", targetDistro: `freebsd${l[1]}`, arch: t };
        }
      }
      if (e !== "linux") return { platform: e, arch: t };
      let r = await ku(), n = await qu(), i = _u({ arch: t, archFromUname: n, familyDistro: r.familyDistro }), { libssl: o } = await Lu(i);
      return { platform: "linux", libssl: o, arch: t, archFromUname: n, ...r };
    }
    function Ou(e) {
      let t = /^ID="?([^"\n]*)"?$/im, r = /^ID_LIKE="?([^"\n]*)"?$/im, n = t.exec(e), i = n && n[1] && n[1].toLowerCase() || "", o = r.exec(e), s = o && o[1] && o[1].toLowerCase() || "", a = ct({ id: i, idLike: s }).with({ id: "alpine" }, ({ id: l }) => ({ targetDistro: "musl", familyDistro: l, originalDistro: l })).with({ id: "raspbian" }, ({ id: l }) => ({ targetDistro: "arm", familyDistro: "debian", originalDistro: l })).with({ id: "nixos" }, ({ id: l }) => ({ targetDistro: "nixos", originalDistro: l, familyDistro: "nixos" })).with({ id: "debian" }, { id: "ubuntu" }, ({ id: l }) => ({ targetDistro: "debian", familyDistro: "debian", originalDistro: l })).with({ id: "rhel" }, { id: "centos" }, { id: "fedora" }, ({ id: l }) => ({ targetDistro: "rhel", familyDistro: "rhel", originalDistro: l })).when(({ idLike: l }) => l.includes("debian") || l.includes("ubuntu"), ({ id: l }) => ({ targetDistro: "debian", familyDistro: "debian", originalDistro: l })).when(({ idLike: l }) => i === "arch" || l.includes("arch"), ({ id: l }) => ({ targetDistro: "debian", familyDistro: "arch", originalDistro: l })).when(({ idLike: l }) => l.includes("centos") || l.includes("fedora") || l.includes("rhel") || l.includes("suse"), ({ id: l }) => ({ targetDistro: "rhel", familyDistro: "rhel", originalDistro: l })).otherwise(({ id: l }) => ({ targetDistro: void 0, familyDistro: void 0, originalDistro: l }));
      return te(`Found distro info:
${JSON.stringify(a, null, 2)}`), a;
    }
    async function ku() {
      let e = "/etc/os-release";
      try {
        let t = await Kn.default.readFile(e, { encoding: "utf-8" });
        return Ou(t);
      } catch {
        return { targetDistro: void 0, familyDistro: void 0, originalDistro: void 0 };
      }
    }
    function Du(e) {
      let t = /^OpenSSL\s(\d+\.\d+)\.\d+/.exec(e);
      if (t) {
        let r = `${t[1]}.x`;
        return _o(r);
      }
    }
    function Ao(e) {
      let t = /libssl\.so\.(\d)(\.\d)?/.exec(e);
      if (t) {
        let r = `${t[1]}${t[2] ?? ".0"}.x`;
        return _o(r);
      }
    }
    function _o(e) {
      let t = (() => {
        if (No(e)) return e;
        let r = e.split(".");
        return r[1] = "0", r.join(".");
      })();
      if (Iu.includes(t)) return t;
    }
    function _u(e) {
      return ct(e).with({ familyDistro: "musl" }, () => (te('Trying platform-specific paths for "alpine"'), ["/lib"])).with({ familyDistro: "debian" }, ({ archFromUname: t }) => (te('Trying platform-specific paths for "debian" (and "ubuntu")'), [`/usr/lib/${t}-linux-gnu`, `/lib/${t}-linux-gnu`])).with({ familyDistro: "rhel" }, () => (te('Trying platform-specific paths for "rhel"'), ["/lib64", "/usr/lib64"])).otherwise(({ familyDistro: t, arch: r, archFromUname: n }) => (te(`Don't know any platform-specific paths for "${t}" on ${r} (${n})`), []));
    }
    async function Lu(e) {
      let t = 'grep -v "libssl.so.0"', r = await Io(e);
      if (r) {
        te(`Found libssl.so file using platform-specific paths: ${r}`);
        let o = Ao(r);
        if (te(`The parsed libssl version is: ${o}`), o) return { libssl: o, strategy: "libssl-specific-path" };
      }
      te('Falling back to "ldconfig" and other generic paths');
      let n = await Ur(`ldconfig -p | sed "s/.*=>s*//" | sed "s|.*/||" | grep libssl | sort | ${t}`);
      if (n || (n = await Io(["/lib64", "/usr/lib64", "/lib"])), n) {
        te(`Found libssl.so file using "ldconfig" or other generic paths: ${n}`);
        let o = Ao(n);
        if (te(`The parsed libssl version is: ${o}`), o) return { libssl: o, strategy: "ldconfig" };
      }
      let i = await Ur("openssl version -v");
      if (i) {
        te(`Found openssl binary with version: ${i}`);
        let o = Du(i);
        if (te(`The parsed openssl version is: ${o}`), o) return { libssl: o, strategy: "openssl-binary" };
      }
      return te("Couldn't find any version of libssl or OpenSSL in the system"), {};
    }
    async function Io(e) {
      for (let t of e) {
        let r = await Nu(t);
        if (r) return r;
      }
    }
    async function Nu(e) {
      try {
        return (await Kn.default.readdir(e)).find((r) => r.startsWith("libssl.so.") && !r.startsWith("libssl.so.0"));
      } catch (t) {
        if (t.code === "ENOENT") return;
        throw t;
      }
    }
    async function tt() {
      let { binaryTarget: e } = await Lo();
      return e;
    }
    function Fu(e) {
      return e.binaryTarget !== void 0;
    }
    async function zn() {
      let { memoized: e, ...t } = await Lo();
      return t;
    }
    var Vr = {};
    async function Lo() {
      if (Fu(Vr)) return Promise.resolve({ ...Vr, memoized: true });
      let e = await Do(), t = Mu(e);
      return Vr = { ...e, binaryTarget: t }, { ...Vr, memoized: false };
    }
    function Mu(e) {
      let { platform: t, arch: r, archFromUname: n, libssl: i, targetDistro: o, familyDistro: s, originalDistro: a } = e;
      t === "linux" && !["x64", "arm64"].includes(r) && jr(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures (detected "${r}" instead). If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture "${n}".`);
      let l = "1.1.x";
      if (t === "linux" && i === void 0) {
        let c = ct({ familyDistro: s }).with({ familyDistro: "debian" }, () => "Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.").otherwise(() => "Please manually install OpenSSL and try installing Prisma again.");
        jr(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to "openssl-${l}".
${c}`);
      }
      let u = "debian";
      if (t === "linux" && o === void 0 && te(`Distro is "${a}". Falling back to Prisma engines built for "${u}".`), t === "darwin" && r === "arm64") return "darwin-arm64";
      if (t === "darwin") return "darwin";
      if (t === "win32") return "windows";
      if (t === "freebsd") return o;
      if (t === "openbsd") return "openbsd";
      if (t === "netbsd") return "netbsd";
      if (t === "linux" && o === "nixos") return "linux-nixos";
      if (t === "linux" && r === "arm64") return `${o === "musl" ? "linux-musl-arm64" : "linux-arm64"}-openssl-${i || l}`;
      if (t === "linux" && r === "arm") return `linux-arm-openssl-${i || l}`;
      if (t === "linux" && o === "musl") {
        let c = "linux-musl";
        return !i || No(i) ? c : `${c}-openssl-${i}`;
      }
      return t === "linux" && o && i ? `${o}-openssl-${i}` : (t !== "linux" && jr(`Prisma detected unknown OS "${t}" and may not work as expected. Defaulting to "linux".`), i ? `${u}-openssl-${i}` : o ? `${o}-openssl-${l}` : `${u}-openssl-${l}`);
    }
    async function $u(e) {
      try {
        return await e();
      } catch {
        return;
      }
    }
    function Ur(e) {
      return $u(async () => {
        let t = await Au(e);
        return te(`Command "${e}" successfully returned "${t.stdout}"`), t.stdout;
      });
    }
    async function qu() {
      return typeof Br.default.machine == "function" ? Br.default.machine() : (await Ur("uname -m"))?.trim();
    }
    function No(e) {
      return e.startsWith("1.");
    }
    var Wo = k(Jo());
    function ni(e) {
      return (0, Wo.default)(e, e, { fallback: Y });
    }
    var Gu = k(oi());
    var $ = k(require("path"));
    var Ju = k(oi());
    var Cf = N("prisma:engines");
    function Ho() {
      return $.default.join(__dirname, "../");
    }
    var Sf = "libquery-engine";
    $.default.join(__dirname, "../query-engine-darwin");
    $.default.join(__dirname, "../query-engine-darwin-arm64");
    $.default.join(__dirname, "../query-engine-debian-openssl-1.0.x");
    $.default.join(__dirname, "../query-engine-debian-openssl-1.1.x");
    $.default.join(__dirname, "../query-engine-debian-openssl-3.0.x");
    $.default.join(__dirname, "../query-engine-linux-static-x64");
    $.default.join(__dirname, "../query-engine-linux-static-arm64");
    $.default.join(__dirname, "../query-engine-rhel-openssl-1.0.x");
    $.default.join(__dirname, "../query-engine-rhel-openssl-1.1.x");
    $.default.join(__dirname, "../query-engine-rhel-openssl-3.0.x");
    $.default.join(__dirname, "../libquery_engine-darwin.dylib.node");
    $.default.join(__dirname, "../libquery_engine-darwin-arm64.dylib.node");
    $.default.join(__dirname, "../libquery_engine-debian-openssl-1.0.x.so.node");
    $.default.join(__dirname, "../libquery_engine-debian-openssl-1.1.x.so.node");
    $.default.join(__dirname, "../libquery_engine-debian-openssl-3.0.x.so.node");
    $.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-1.0.x.so.node");
    $.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-1.1.x.so.node");
    $.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-3.0.x.so.node");
    $.default.join(__dirname, "../libquery_engine-linux-musl.so.node");
    $.default.join(__dirname, "../libquery_engine-linux-musl-openssl-3.0.x.so.node");
    $.default.join(__dirname, "../libquery_engine-rhel-openssl-1.0.x.so.node");
    $.default.join(__dirname, "../libquery_engine-rhel-openssl-1.1.x.so.node");
    $.default.join(__dirname, "../libquery_engine-rhel-openssl-3.0.x.so.node");
    $.default.join(__dirname, "../query_engine-windows.dll.node");
    var si = k(require("fs"));
    var Ko = N("chmodPlusX");
    function ai(e) {
      if (process.platform === "win32") return;
      let t = si.default.statSync(e), r = t.mode | 64 | 8 | 1;
      if (t.mode === r) {
        Ko(`Execution permissions of ${e} are fine`);
        return;
      }
      let n = r.toString(8).slice(-3);
      Ko(`Have to call chmodPlusX on ${e}`), si.default.chmodSync(e, n);
    }
    function li(e) {
      let t = e.e, r = (a) => `Prisma cannot find the required \`${a}\` system library in your system`, n = t.message.includes("cannot open shared object file"), i = `Please refer to the documentation about Prisma's system requirements: ${ni("https://pris.ly/d/system-requirements")}`, o = `Unable to require(\`${Oe(e.id)}\`).`, s = ct({ message: t.message, code: t.code }).with({ code: "ENOENT" }, () => "File does not exist.").when(({ message: a }) => n && a.includes("libz"), () => `${r("libz")}. Please install it and try again.`).when(({ message: a }) => n && a.includes("libgcc_s"), () => `${r("libgcc_s")}. Please install it and try again.`).when(({ message: a }) => n && a.includes("libssl"), () => {
        let a = e.platformInfo.libssl ? `openssl-${e.platformInfo.libssl}` : "openssl";
        return `${r("libssl")}. Please install ${a} and try again.`;
      }).when(({ message: a }) => a.includes("GLIBC"), () => `Prisma has detected an incompatible version of the \`glibc\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i}`).when(({ message: a }) => e.platformInfo.platform === "linux" && a.includes("symbol not found"), () => `The Prisma engines are not compatible with your system ${e.platformInfo.originalDistro} on (${e.platformInfo.archFromUname}) which uses the \`${e.platformInfo.binaryTarget}\` binaryTarget by default. ${i}`).otherwise(() => `The Prisma engines do not seem to be compatible with your system. ${i}`);
      return `${o}
${s}

Details: ${t.message}`;
    }
    var pi = k(Zo());
    var Hr = k(require("fs"));
    var mt = k(require("path"));
    function Xo(e) {
      let t = e.ignoreProcessEnv ? {} : process.env, r = (n) => n.match(/(.?\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o, s) {
        let a = /(.?)\${([a-zA-Z0-9_]+)?}/g.exec(s);
        if (!a) return o;
        let l = a[1], u, c;
        if (l === "\\") c = a[0], u = c.replace("\\$", "$");
        else {
          let p = a[2];
          c = a[0].substring(l.length), u = Object.hasOwnProperty.call(t, p) ? t[p] : e.parsed[p] || "", u = r(u);
        }
        return o.replace(c, u);
      }, n) ?? n;
      for (let n in e.parsed) {
        let i = Object.hasOwnProperty.call(t, n) ? t[n] : e.parsed[n];
        e.parsed[n] = r(i);
      }
      for (let n in e.parsed) t[n] = e.parsed[n];
      return e;
    }
    var ci = N("prisma:tryLoadEnv");
    function Wt({ rootEnvPath: e, schemaEnvPath: t }, r = { conflictCheck: "none" }) {
      let n = es(e);
      r.conflictCheck !== "none" && rc(n, t, r.conflictCheck);
      let i = null;
      return ts(n?.path, t) || (i = es(t)), !n && !i && ci("No Environment variables loaded"), i?.dotenvResult.error ? console.error(ce(J("Schema Env Error: ")) + i.dotenvResult.error) : { message: [n?.message, i?.message].filter(Boolean).join(`
`), parsed: { ...n?.dotenvResult?.parsed, ...i?.dotenvResult?.parsed } };
    }
    function rc(e, t, r) {
      let n = e?.dotenvResult.parsed, i = !ts(e?.path, t);
      if (n && t && i && Hr.default.existsSync(t)) {
        let o = pi.default.parse(Hr.default.readFileSync(t)), s = [];
        for (let a in o) n[a] === o[a] && s.push(a);
        if (s.length > 0) {
          let a = mt.default.relative(process.cwd(), e.path), l = mt.default.relative(process.cwd(), t);
          if (r === "error") {
            let u = `There is a conflict between env var${s.length > 1 ? "s" : ""} in ${Y(a)} and ${Y(l)}
Conflicting env vars:
${s.map((c) => `  ${J(c)}`).join(`
`)}

We suggest to move the contents of ${Y(l)} to ${Y(a)} to consolidate your env vars.
`;
            throw new Error(u);
          } else if (r === "warn") {
            let u = `Conflict for env var${s.length > 1 ? "s" : ""} ${s.map((c) => J(c)).join(", ")} in ${Y(a)} and ${Y(l)}
Env vars from ${Y(l)} overwrite the ones from ${Y(a)}
      `;
            console.warn(`${ke("warn(prisma)")} ${u}`);
          }
        }
      }
    }
    function es(e) {
      if (nc(e)) {
        ci(`Environment variables loaded from ${e}`);
        let t = pi.default.config({ path: e, debug: process.env.DOTENV_CONFIG_DEBUG ? true : void 0 });
        return { dotenvResult: Xo(t), message: Oe(`Environment variables loaded from ${mt.default.relative(process.cwd(), e)}`), path: e };
      } else ci(`Environment variables not found at ${e}`);
      return null;
    }
    function ts(e, t) {
      return e && t && mt.default.resolve(e) === mt.default.resolve(t);
    }
    function nc(e) {
      return !!(e && Hr.default.existsSync(e));
    }
    var rs = "library";
    function Ht(e) {
      let t = ic();
      return t || (e?.config.engineType === "library" ? "library" : e?.config.engineType === "binary" ? "binary" : rs);
    }
    function ic() {
      let e = process.env.PRISMA_CLIENT_ENGINE_TYPE;
      return e === "library" ? "library" : e === "binary" ? "binary" : void 0;
    }
    var Kt;
    ((t) => {
      let e;
      ((E) => (E.findUnique = "findUnique", E.findUniqueOrThrow = "findUniqueOrThrow", E.findFirst = "findFirst", E.findFirstOrThrow = "findFirstOrThrow", E.findMany = "findMany", E.create = "create", E.createMany = "createMany", E.createManyAndReturn = "createManyAndReturn", E.update = "update", E.updateMany = "updateMany", E.upsert = "upsert", E.delete = "delete", E.deleteMany = "deleteMany", E.groupBy = "groupBy", E.count = "count", E.aggregate = "aggregate", E.findRaw = "findRaw", E.aggregateRaw = "aggregateRaw"))(e = t.ModelAction ||= {});
    })(Kt ||= {});
    var zt = k(require("path"));
    function di(e) {
      return zt.default.sep === zt.default.posix.sep ? e : e.split(zt.default.sep).join(zt.default.posix.sep);
    }
    var ls = k(mi());
    function gi(e) {
      return String(new fi(e));
    }
    var fi = class {
      constructor(t) {
        this.config = t;
      }
      toString() {
        let { config: t } = this, r = t.provider.fromEnvVar ? `env("${t.provider.fromEnvVar}")` : t.provider.value, n = JSON.parse(JSON.stringify({ provider: r, binaryTargets: sc(t.binaryTargets) }));
        return `generator ${t.name} {
${(0, ls.default)(ac(n), 2)}
}`;
      }
    };
    function sc(e) {
      let t;
      if (e.length > 0) {
        let r = e.find((n) => n.fromEnvVar !== null);
        r ? t = `env("${r.fromEnvVar}")` : t = e.map((n) => n.native ? "native" : n.value);
      } else t = void 0;
      return t;
    }
    function ac(e) {
      let t = Object.keys(e).reduce((r, n) => Math.max(r, n.length), 0);
      return Object.entries(e).map(([r, n]) => `${r.padEnd(t)} = ${lc(n)}`).join(`
`);
    }
    function lc(e) {
      return JSON.parse(JSON.stringify(e, (t, r) => Array.isArray(r) ? `[${r.map((n) => JSON.stringify(n)).join(", ")}]` : JSON.stringify(r)));
    }
    var Zt = {};
    jt(Zt, { error: () => pc, info: () => cc, log: () => uc, query: () => dc, should: () => us, tags: () => Yt, warn: () => hi });
    var Yt = { error: ce("prisma:error"), warn: ke("prisma:warn"), info: De("prisma:info"), query: et("prisma:query") };
    var us = { warn: () => !process.env.PRISMA_DISABLE_WARNINGS };
    function uc(...e) {
      console.log(...e);
    }
    function hi(e, ...t) {
      us.warn() && console.warn(`${Yt.warn} ${e}`, ...t);
    }
    function cc(e, ...t) {
      console.info(`${Yt.info} ${e}`, ...t);
    }
    function pc(e, ...t) {
      console.error(`${Yt.error} ${e}`, ...t);
    }
    function dc(e, ...t) {
      console.log(`${Yt.query} ${e}`, ...t);
    }
    function Kr(e, t) {
      if (!e) throw new Error(`${t}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`);
    }
    function Le(e, t) {
      throw new Error(t);
    }
    function bi(e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }
    var Ei = (e, t) => e.reduce((r, n) => (r[t(n)] = n, r), {});
    function ft(e, t) {
      let r = {};
      for (let n of Object.keys(e)) r[n] = t(e[n], n);
      return r;
    }
    function wi(e, t) {
      if (e.length === 0) return;
      let r = e[0];
      for (let n = 1; n < e.length; n++) t(r, e[n]) < 0 && (r = e[n]);
      return r;
    }
    function x(e, t) {
      Object.defineProperty(e, "name", { value: t, configurable: true });
    }
    var fs = /* @__PURE__ */ new Set();
    var Xt = (e, t, ...r) => {
      fs.has(e) || (fs.add(e), hi(t, ...r));
    };
    var R = class e extends Error {
      constructor(t, r, n) {
        super(t), this.name = "PrismaClientInitializationError", this.clientVersion = r, this.errorCode = n, Error.captureStackTrace(e);
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientInitializationError";
      }
    };
    x(R, "PrismaClientInitializationError");
    var Z = class extends Error {
      constructor(t, { code: r, clientVersion: n, meta: i, batchRequestIdx: o }) {
        super(t), this.name = "PrismaClientKnownRequestError", this.code = r, this.clientVersion = n, this.meta = i, Object.defineProperty(this, "batchRequestIdx", { value: o, enumerable: false, writable: true });
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientKnownRequestError";
      }
    };
    x(Z, "PrismaClientKnownRequestError");
    var le = class extends Error {
      constructor(t, r) {
        super(t), this.name = "PrismaClientRustPanicError", this.clientVersion = r;
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientRustPanicError";
      }
    };
    x(le, "PrismaClientRustPanicError");
    var V = class extends Error {
      constructor(t, { clientVersion: r, batchRequestIdx: n }) {
        super(t), this.name = "PrismaClientUnknownRequestError", this.clientVersion = r, Object.defineProperty(this, "batchRequestIdx", { value: n, writable: true, enumerable: false });
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientUnknownRequestError";
      }
    };
    x(V, "PrismaClientUnknownRequestError");
    var X = class extends Error {
      constructor(r, { clientVersion: n }) {
        super(r);
        this.name = "PrismaClientValidationError";
        this.clientVersion = n;
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientValidationError";
      }
    };
    x(X, "PrismaClientValidationError");
    var gt = 9e15;
    var He = 1e9;
    var xi = "0123456789abcdef";
    var Xr = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058";
    var en = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789";
    var Pi = { precision: 20, rounding: 4, modulo: 1, toExpNeg: -7, toExpPos: 21, minE: -gt, maxE: gt, crypto: false };
    var bs;
    var Ne;
    var w = true;
    var rn = "[DecimalError] ";
    var We = rn + "Invalid argument: ";
    var Es = rn + "Precision limit exceeded";
    var ws = rn + "crypto unavailable";
    var xs = "[object Decimal]";
    var ee = Math.floor;
    var U = Math.pow;
    var fc = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i;
    var gc = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i;
    var hc = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i;
    var Ps = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
    var ge = 1e7;
    var b = 7;
    var yc = 9007199254740991;
    var bc = Xr.length - 1;
    var vi = en.length - 1;
    var m = { toStringTag: xs };
    m.absoluteValue = m.abs = function() {
      var e = new this.constructor(this);
      return e.s < 0 && (e.s = 1), y(e);
    };
    m.ceil = function() {
      return y(new this.constructor(this), this.e + 1, 2);
    };
    m.clampedTo = m.clamp = function(e, t) {
      var r, n = this, i = n.constructor;
      if (e = new i(e), t = new i(t), !e.s || !t.s) return new i(NaN);
      if (e.gt(t)) throw Error(We + t);
      return r = n.cmp(e), r < 0 ? e : n.cmp(t) > 0 ? t : new i(n);
    };
    m.comparedTo = m.cmp = function(e) {
      var t, r, n, i, o = this, s = o.d, a = (e = new o.constructor(e)).d, l = o.s, u = e.s;
      if (!s || !a) return !l || !u ? NaN : l !== u ? l : s === a ? 0 : !s ^ l < 0 ? 1 : -1;
      if (!s[0] || !a[0]) return s[0] ? l : a[0] ? -u : 0;
      if (l !== u) return l;
      if (o.e !== e.e) return o.e > e.e ^ l < 0 ? 1 : -1;
      for (n = s.length, i = a.length, t = 0, r = n < i ? n : i; t < r; ++t) if (s[t] !== a[t]) return s[t] > a[t] ^ l < 0 ? 1 : -1;
      return n === i ? 0 : n > i ^ l < 0 ? 1 : -1;
    };
    m.cosine = m.cos = function() {
      var e, t, r = this, n = r.constructor;
      return r.d ? r.d[0] ? (e = n.precision, t = n.rounding, n.precision = e + Math.max(r.e, r.sd()) + b, n.rounding = 1, r = Ec(n, Ss(n, r)), n.precision = e, n.rounding = t, y(Ne == 2 || Ne == 3 ? r.neg() : r, e, t, true)) : new n(1) : new n(NaN);
    };
    m.cubeRoot = m.cbrt = function() {
      var e, t, r, n, i, o, s, a, l, u, c = this, p = c.constructor;
      if (!c.isFinite() || c.isZero()) return new p(c);
      for (w = false, o = c.s * U(c.s * c, 1 / 3), !o || Math.abs(o) == 1 / 0 ? (r = W(c.d), e = c.e, (o = (e - r.length + 1) % 3) && (r += o == 1 || o == -2 ? "0" : "00"), o = U(r, 1 / 3), e = ee((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2)), o == 1 / 0 ? r = "5e" + e : (r = o.toExponential(), r = r.slice(0, r.indexOf("e") + 1) + e), n = new p(r), n.s = c.s) : n = new p(o.toString()), s = (e = p.precision) + 3; ; ) if (a = n, l = a.times(a).times(a), u = l.plus(c), n = F(u.plus(c).times(a), u.plus(l), s + 2, 1), W(a.d).slice(0, s) === (r = W(n.d)).slice(0, s)) if (r = r.slice(s - 3, s + 1), r == "9999" || !i && r == "4999") {
        if (!i && (y(a, e + 1, 0), a.times(a).times(a).eq(c))) {
          n = a;
          break;
        }
        s += 4, i = 1;
      } else {
        (!+r || !+r.slice(1) && r.charAt(0) == "5") && (y(n, e + 1, 1), t = !n.times(n).times(n).eq(c));
        break;
      }
      return w = true, y(n, e, p.rounding, t);
    };
    m.decimalPlaces = m.dp = function() {
      var e, t = this.d, r = NaN;
      if (t) {
        if (e = t.length - 1, r = (e - ee(this.e / b)) * b, e = t[e], e) for (; e % 10 == 0; e /= 10) r--;
        r < 0 && (r = 0);
      }
      return r;
    };
    m.dividedBy = m.div = function(e) {
      return F(this, new this.constructor(e));
    };
    m.dividedToIntegerBy = m.divToInt = function(e) {
      var t = this, r = t.constructor;
      return y(F(t, new r(e), 0, 1, 1), r.precision, r.rounding);
    };
    m.equals = m.eq = function(e) {
      return this.cmp(e) === 0;
    };
    m.floor = function() {
      return y(new this.constructor(this), this.e + 1, 3);
    };
    m.greaterThan = m.gt = function(e) {
      return this.cmp(e) > 0;
    };
    m.greaterThanOrEqualTo = m.gte = function(e) {
      var t = this.cmp(e);
      return t == 1 || t === 0;
    };
    m.hyperbolicCosine = m.cosh = function() {
      var e, t, r, n, i, o = this, s = o.constructor, a = new s(1);
      if (!o.isFinite()) return new s(o.s ? 1 / 0 : NaN);
      if (o.isZero()) return a;
      r = s.precision, n = s.rounding, s.precision = r + Math.max(o.e, o.sd()) + 4, s.rounding = 1, i = o.d.length, i < 32 ? (e = Math.ceil(i / 3), t = (1 / on(4, e)).toString()) : (e = 16, t = "2.3283064365386962890625e-10"), o = ht(s, 1, o.times(t), new s(1), true);
      for (var l, u = e, c = new s(8); u--; ) l = o.times(o), o = a.minus(l.times(c.minus(l.times(c))));
      return y(o, s.precision = r, s.rounding = n, true);
    };
    m.hyperbolicSine = m.sinh = function() {
      var e, t, r, n, i = this, o = i.constructor;
      if (!i.isFinite() || i.isZero()) return new o(i);
      if (t = o.precision, r = o.rounding, o.precision = t + Math.max(i.e, i.sd()) + 4, o.rounding = 1, n = i.d.length, n < 3) i = ht(o, 2, i, i, true);
      else {
        e = 1.4 * Math.sqrt(n), e = e > 16 ? 16 : e | 0, i = i.times(1 / on(5, e)), i = ht(o, 2, i, i, true);
        for (var s, a = new o(5), l = new o(16), u = new o(20); e--; ) s = i.times(i), i = i.times(a.plus(s.times(l.times(s).plus(u))));
      }
      return o.precision = t, o.rounding = r, y(i, t, r, true);
    };
    m.hyperbolicTangent = m.tanh = function() {
      var e, t, r = this, n = r.constructor;
      return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 7, n.rounding = 1, F(r.sinh(), r.cosh(), n.precision = e, n.rounding = t)) : new n(r.s);
    };
    m.inverseCosine = m.acos = function() {
      var e, t = this, r = t.constructor, n = t.abs().cmp(1), i = r.precision, o = r.rounding;
      return n !== -1 ? n === 0 ? t.isNeg() ? fe(r, i, o) : new r(0) : new r(NaN) : t.isZero() ? fe(r, i + 4, o).times(0.5) : (r.precision = i + 6, r.rounding = 1, t = t.asin(), e = fe(r, i + 4, o).times(0.5), r.precision = i, r.rounding = o, e.minus(t));
    };
    m.inverseHyperbolicCosine = m.acosh = function() {
      var e, t, r = this, n = r.constructor;
      return r.lte(1) ? new n(r.eq(1) ? 0 : NaN) : r.isFinite() ? (e = n.precision, t = n.rounding, n.precision = e + Math.max(Math.abs(r.e), r.sd()) + 4, n.rounding = 1, w = false, r = r.times(r).minus(1).sqrt().plus(r), w = true, n.precision = e, n.rounding = t, r.ln()) : new n(r);
    };
    m.inverseHyperbolicSine = m.asinh = function() {
      var e, t, r = this, n = r.constructor;
      return !r.isFinite() || r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 2 * Math.max(Math.abs(r.e), r.sd()) + 6, n.rounding = 1, w = false, r = r.times(r).plus(1).sqrt().plus(r), w = true, n.precision = e, n.rounding = t, r.ln());
    };
    m.inverseHyperbolicTangent = m.atanh = function() {
      var e, t, r, n, i = this, o = i.constructor;
      return i.isFinite() ? i.e >= 0 ? new o(i.abs().eq(1) ? i.s / 0 : i.isZero() ? i : NaN) : (e = o.precision, t = o.rounding, n = i.sd(), Math.max(n, e) < 2 * -i.e - 1 ? y(new o(i), e, t, true) : (o.precision = r = n - i.e, i = F(i.plus(1), new o(1).minus(i), r + e, 1), o.precision = e + 4, o.rounding = 1, i = i.ln(), o.precision = e, o.rounding = t, i.times(0.5))) : new o(NaN);
    };
    m.inverseSine = m.asin = function() {
      var e, t, r, n, i = this, o = i.constructor;
      return i.isZero() ? new o(i) : (t = i.abs().cmp(1), r = o.precision, n = o.rounding, t !== -1 ? t === 0 ? (e = fe(o, r + 4, n).times(0.5), e.s = i.s, e) : new o(NaN) : (o.precision = r + 6, o.rounding = 1, i = i.div(new o(1).minus(i.times(i)).sqrt().plus(1)).atan(), o.precision = r, o.rounding = n, i.times(2)));
    };
    m.inverseTangent = m.atan = function() {
      var e, t, r, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding;
      if (u.isFinite()) {
        if (u.isZero()) return new c(u);
        if (u.abs().eq(1) && p + 4 <= vi) return s = fe(c, p + 4, d).times(0.25), s.s = u.s, s;
      } else {
        if (!u.s) return new c(NaN);
        if (p + 4 <= vi) return s = fe(c, p + 4, d).times(0.5), s.s = u.s, s;
      }
      for (c.precision = a = p + 10, c.rounding = 1, r = Math.min(28, a / b + 2 | 0), e = r; e; --e) u = u.div(u.times(u).plus(1).sqrt().plus(1));
      for (w = false, t = Math.ceil(a / b), n = 1, l = u.times(u), s = new c(u), i = u; e !== -1; ) if (i = i.times(l), o = s.minus(i.div(n += 2)), i = i.times(l), s = o.plus(i.div(n += 2)), s.d[t] !== void 0) for (e = t; s.d[e] === o.d[e] && e--; ) ;
      return r && (s = s.times(2 << r - 1)), w = true, y(s, c.precision = p, c.rounding = d, true);
    };
    m.isFinite = function() {
      return !!this.d;
    };
    m.isInteger = m.isInt = function() {
      return !!this.d && ee(this.e / b) > this.d.length - 2;
    };
    m.isNaN = function() {
      return !this.s;
    };
    m.isNegative = m.isNeg = function() {
      return this.s < 0;
    };
    m.isPositive = m.isPos = function() {
      return this.s > 0;
    };
    m.isZero = function() {
      return !!this.d && this.d[0] === 0;
    };
    m.lessThan = m.lt = function(e) {
      return this.cmp(e) < 0;
    };
    m.lessThanOrEqualTo = m.lte = function(e) {
      return this.cmp(e) < 1;
    };
    m.logarithm = m.log = function(e) {
      var t, r, n, i, o, s, a, l, u = this, c = u.constructor, p = c.precision, d = c.rounding, f = 5;
      if (e == null) e = new c(10), t = true;
      else {
        if (e = new c(e), r = e.d, e.s < 0 || !r || !r[0] || e.eq(1)) return new c(NaN);
        t = e.eq(10);
      }
      if (r = u.d, u.s < 0 || !r || !r[0] || u.eq(1)) return new c(r && !r[0] ? -1 / 0 : u.s != 1 ? NaN : r ? 0 : 1 / 0);
      if (t) if (r.length > 1) o = true;
      else {
        for (i = r[0]; i % 10 === 0; ) i /= 10;
        o = i !== 1;
      }
      if (w = false, a = p + f, s = Je(u, a), n = t ? tn(c, a + 10) : Je(e, a), l = F(s, n, a, 1), er(l.d, i = p, d)) do
        if (a += 10, s = Je(u, a), n = t ? tn(c, a + 10) : Je(e, a), l = F(s, n, a, 1), !o) {
          +W(l.d).slice(i + 1, i + 15) + 1 == 1e14 && (l = y(l, p + 1, 0));
          break;
        }
      while (er(l.d, i += 10, d));
      return w = true, y(l, p, d);
    };
    m.minus = m.sub = function(e) {
      var t, r, n, i, o, s, a, l, u, c, p, d, f = this, g = f.constructor;
      if (e = new g(e), !f.d || !e.d) return !f.s || !e.s ? e = new g(NaN) : f.d ? e.s = -e.s : e = new g(e.d || f.s !== e.s ? f : NaN), e;
      if (f.s != e.s) return e.s = -e.s, f.plus(e);
      if (u = f.d, d = e.d, a = g.precision, l = g.rounding, !u[0] || !d[0]) {
        if (d[0]) e.s = -e.s;
        else if (u[0]) e = new g(f);
        else return new g(l === 3 ? -0 : 0);
        return w ? y(e, a, l) : e;
      }
      if (r = ee(e.e / b), c = ee(f.e / b), u = u.slice(), o = c - r, o) {
        for (p = o < 0, p ? (t = u, o = -o, s = d.length) : (t = d, r = c, s = u.length), n = Math.max(Math.ceil(a / b), s) + 2, o > n && (o = n, t.length = 1), t.reverse(), n = o; n--; ) t.push(0);
        t.reverse();
      } else {
        for (n = u.length, s = d.length, p = n < s, p && (s = n), n = 0; n < s; n++) if (u[n] != d[n]) {
          p = u[n] < d[n];
          break;
        }
        o = 0;
      }
      for (p && (t = u, u = d, d = t, e.s = -e.s), s = u.length, n = d.length - s; n > 0; --n) u[s++] = 0;
      for (n = d.length; n > o; ) {
        if (u[--n] < d[n]) {
          for (i = n; i && u[--i] === 0; ) u[i] = ge - 1;
          --u[i], u[n] += ge;
        }
        u[n] -= d[n];
      }
      for (; u[--s] === 0; ) u.pop();
      for (; u[0] === 0; u.shift()) --r;
      return u[0] ? (e.d = u, e.e = nn(u, r), w ? y(e, a, l) : e) : new g(l === 3 ? -0 : 0);
    };
    m.modulo = m.mod = function(e) {
      var t, r = this, n = r.constructor;
      return e = new n(e), !r.d || !e.s || e.d && !e.d[0] ? new n(NaN) : !e.d || r.d && !r.d[0] ? y(new n(r), n.precision, n.rounding) : (w = false, n.modulo == 9 ? (t = F(r, e.abs(), 0, 3, 1), t.s *= e.s) : t = F(r, e, 0, n.modulo, 1), t = t.times(e), w = true, r.minus(t));
    };
    m.naturalExponential = m.exp = function() {
      return Ti(this);
    };
    m.naturalLogarithm = m.ln = function() {
      return Je(this);
    };
    m.negated = m.neg = function() {
      var e = new this.constructor(this);
      return e.s = -e.s, y(e);
    };
    m.plus = m.add = function(e) {
      var t, r, n, i, o, s, a, l, u, c, p = this, d = p.constructor;
      if (e = new d(e), !p.d || !e.d) return !p.s || !e.s ? e = new d(NaN) : p.d || (e = new d(e.d || p.s === e.s ? p : NaN)), e;
      if (p.s != e.s) return e.s = -e.s, p.minus(e);
      if (u = p.d, c = e.d, a = d.precision, l = d.rounding, !u[0] || !c[0]) return c[0] || (e = new d(p)), w ? y(e, a, l) : e;
      if (o = ee(p.e / b), n = ee(e.e / b), u = u.slice(), i = o - n, i) {
        for (i < 0 ? (r = u, i = -i, s = c.length) : (r = c, n = o, s = u.length), o = Math.ceil(a / b), s = o > s ? o + 1 : s + 1, i > s && (i = s, r.length = 1), r.reverse(); i--; ) r.push(0);
        r.reverse();
      }
      for (s = u.length, i = c.length, s - i < 0 && (i = s, r = c, c = u, u = r), t = 0; i; ) t = (u[--i] = u[i] + c[i] + t) / ge | 0, u[i] %= ge;
      for (t && (u.unshift(t), ++n), s = u.length; u[--s] == 0; ) u.pop();
      return e.d = u, e.e = nn(u, n), w ? y(e, a, l) : e;
    };
    m.precision = m.sd = function(e) {
      var t, r = this;
      if (e !== void 0 && e !== !!e && e !== 1 && e !== 0) throw Error(We + e);
      return r.d ? (t = vs(r.d), e && r.e + 1 > t && (t = r.e + 1)) : t = NaN, t;
    };
    m.round = function() {
      var e = this, t = e.constructor;
      return y(new t(e), e.e + 1, t.rounding);
    };
    m.sine = m.sin = function() {
      var e, t, r = this, n = r.constructor;
      return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + Math.max(r.e, r.sd()) + b, n.rounding = 1, r = xc(n, Ss(n, r)), n.precision = e, n.rounding = t, y(Ne > 2 ? r.neg() : r, e, t, true)) : new n(NaN);
    };
    m.squareRoot = m.sqrt = function() {
      var e, t, r, n, i, o, s = this, a = s.d, l = s.e, u = s.s, c = s.constructor;
      if (u !== 1 || !a || !a[0]) return new c(!u || u < 0 && (!a || a[0]) ? NaN : a ? s : 1 / 0);
      for (w = false, u = Math.sqrt(+s), u == 0 || u == 1 / 0 ? (t = W(a), (t.length + l) % 2 == 0 && (t += "0"), u = Math.sqrt(t), l = ee((l + 1) / 2) - (l < 0 || l % 2), u == 1 / 0 ? t = "5e" + l : (t = u.toExponential(), t = t.slice(0, t.indexOf("e") + 1) + l), n = new c(t)) : n = new c(u.toString()), r = (l = c.precision) + 3; ; ) if (o = n, n = o.plus(F(s, o, r + 2, 1)).times(0.5), W(o.d).slice(0, r) === (t = W(n.d)).slice(0, r)) if (t = t.slice(r - 3, r + 1), t == "9999" || !i && t == "4999") {
        if (!i && (y(o, l + 1, 0), o.times(o).eq(s))) {
          n = o;
          break;
        }
        r += 4, i = 1;
      } else {
        (!+t || !+t.slice(1) && t.charAt(0) == "5") && (y(n, l + 1, 1), e = !n.times(n).eq(s));
        break;
      }
      return w = true, y(n, l, c.rounding, e);
    };
    m.tangent = m.tan = function() {
      var e, t, r = this, n = r.constructor;
      return r.isFinite() ? r.isZero() ? new n(r) : (e = n.precision, t = n.rounding, n.precision = e + 10, n.rounding = 1, r = r.sin(), r.s = 1, r = F(r, new n(1).minus(r.times(r)).sqrt(), e + 10, 0), n.precision = e, n.rounding = t, y(Ne == 2 || Ne == 4 ? r.neg() : r, e, t, true)) : new n(NaN);
    };
    m.times = m.mul = function(e) {
      var t, r, n, i, o, s, a, l, u, c = this, p = c.constructor, d = c.d, f = (e = new p(e)).d;
      if (e.s *= c.s, !d || !d[0] || !f || !f[0]) return new p(!e.s || d && !d[0] && !f || f && !f[0] && !d ? NaN : !d || !f ? e.s / 0 : e.s * 0);
      for (r = ee(c.e / b) + ee(e.e / b), l = d.length, u = f.length, l < u && (o = d, d = f, f = o, s = l, l = u, u = s), o = [], s = l + u, n = s; n--; ) o.push(0);
      for (n = u; --n >= 0; ) {
        for (t = 0, i = l + n; i > n; ) a = o[i] + f[n] * d[i - n - 1] + t, o[i--] = a % ge | 0, t = a / ge | 0;
        o[i] = (o[i] + t) % ge | 0;
      }
      for (; !o[--s]; ) o.pop();
      return t ? ++r : o.shift(), e.d = o, e.e = nn(o, r), w ? y(e, p.precision, p.rounding) : e;
    };
    m.toBinary = function(e, t) {
      return Ci(this, 2, e, t);
    };
    m.toDecimalPlaces = m.toDP = function(e, t) {
      var r = this, n = r.constructor;
      return r = new n(r), e === void 0 ? r : (ie(e, 0, He), t === void 0 ? t = n.rounding : ie(t, 0, 8), y(r, e + r.e + 1, t));
    };
    m.toExponential = function(e, t) {
      var r, n = this, i = n.constructor;
      return e === void 0 ? r = we(n, true) : (ie(e, 0, He), t === void 0 ? t = i.rounding : ie(t, 0, 8), n = y(new i(n), e + 1, t), r = we(n, true, e + 1)), n.isNeg() && !n.isZero() ? "-" + r : r;
    };
    m.toFixed = function(e, t) {
      var r, n, i = this, o = i.constructor;
      return e === void 0 ? r = we(i) : (ie(e, 0, He), t === void 0 ? t = o.rounding : ie(t, 0, 8), n = y(new o(i), e + i.e + 1, t), r = we(n, false, e + n.e + 1)), i.isNeg() && !i.isZero() ? "-" + r : r;
    };
    m.toFraction = function(e) {
      var t, r, n, i, o, s, a, l, u, c, p, d, f = this, g = f.d, h = f.constructor;
      if (!g) return new h(f);
      if (u = r = new h(1), n = l = new h(0), t = new h(n), o = t.e = vs(g) - f.e - 1, s = o % b, t.d[0] = U(10, s < 0 ? b + s : s), e == null) e = o > 0 ? t : u;
      else {
        if (a = new h(e), !a.isInt() || a.lt(u)) throw Error(We + a);
        e = a.gt(t) ? o > 0 ? t : u : a;
      }
      for (w = false, a = new h(W(g)), c = h.precision, h.precision = o = g.length * b * 2; p = F(a, t, 0, 1, 1), i = r.plus(p.times(n)), i.cmp(e) != 1; ) r = n, n = i, i = u, u = l.plus(p.times(i)), l = i, i = t, t = a.minus(p.times(i)), a = i;
      return i = F(e.minus(r), n, 0, 1, 1), l = l.plus(i.times(u)), r = r.plus(i.times(n)), l.s = u.s = f.s, d = F(u, n, o, 1).minus(f).abs().cmp(F(l, r, o, 1).minus(f).abs()) < 1 ? [u, n] : [l, r], h.precision = c, w = true, d;
    };
    m.toHexadecimal = m.toHex = function(e, t) {
      return Ci(this, 16, e, t);
    };
    m.toNearest = function(e, t) {
      var r = this, n = r.constructor;
      if (r = new n(r), e == null) {
        if (!r.d) return r;
        e = new n(1), t = n.rounding;
      } else {
        if (e = new n(e), t === void 0 ? t = n.rounding : ie(t, 0, 8), !r.d) return e.s ? r : e;
        if (!e.d) return e.s && (e.s = r.s), e;
      }
      return e.d[0] ? (w = false, r = F(r, e, 0, t, 1).times(e), w = true, y(r)) : (e.s = r.s, r = e), r;
    };
    m.toNumber = function() {
      return +this;
    };
    m.toOctal = function(e, t) {
      return Ci(this, 8, e, t);
    };
    m.toPower = m.pow = function(e) {
      var t, r, n, i, o, s, a = this, l = a.constructor, u = +(e = new l(e));
      if (!a.d || !e.d || !a.d[0] || !e.d[0]) return new l(U(+a, u));
      if (a = new l(a), a.eq(1)) return a;
      if (n = l.precision, o = l.rounding, e.eq(1)) return y(a, n, o);
      if (t = ee(e.e / b), t >= e.d.length - 1 && (r = u < 0 ? -u : u) <= yc) return i = Ts(l, a, r, n), e.s < 0 ? new l(1).div(i) : y(i, n, o);
      if (s = a.s, s < 0) {
        if (t < e.d.length - 1) return new l(NaN);
        if (e.d[t] & 1 || (s = 1), a.e == 0 && a.d[0] == 1 && a.d.length == 1) return a.s = s, a;
      }
      return r = U(+a, u), t = r == 0 || !isFinite(r) ? ee(u * (Math.log("0." + W(a.d)) / Math.LN10 + a.e + 1)) : new l(r + "").e, t > l.maxE + 1 || t < l.minE - 1 ? new l(t > 0 ? s / 0 : 0) : (w = false, l.rounding = a.s = 1, r = Math.min(12, (t + "").length), i = Ti(e.times(Je(a, n + r)), n), i.d && (i = y(i, n + 5, 1), er(i.d, n, o) && (t = n + 10, i = y(Ti(e.times(Je(a, t + r)), t), t + 5, 1), +W(i.d).slice(n + 1, n + 15) + 1 == 1e14 && (i = y(i, n + 1, 0)))), i.s = s, w = true, l.rounding = o, y(i, n, o));
    };
    m.toPrecision = function(e, t) {
      var r, n = this, i = n.constructor;
      return e === void 0 ? r = we(n, n.e <= i.toExpNeg || n.e >= i.toExpPos) : (ie(e, 1, He), t === void 0 ? t = i.rounding : ie(t, 0, 8), n = y(new i(n), e, t), r = we(n, e <= n.e || n.e <= i.toExpNeg, e)), n.isNeg() && !n.isZero() ? "-" + r : r;
    };
    m.toSignificantDigits = m.toSD = function(e, t) {
      var r = this, n = r.constructor;
      return e === void 0 ? (e = n.precision, t = n.rounding) : (ie(e, 1, He), t === void 0 ? t = n.rounding : ie(t, 0, 8)), y(new n(r), e, t);
    };
    m.toString = function() {
      var e = this, t = e.constructor, r = we(e, e.e <= t.toExpNeg || e.e >= t.toExpPos);
      return e.isNeg() && !e.isZero() ? "-" + r : r;
    };
    m.truncated = m.trunc = function() {
      return y(new this.constructor(this), this.e + 1, 1);
    };
    m.valueOf = m.toJSON = function() {
      var e = this, t = e.constructor, r = we(e, e.e <= t.toExpNeg || e.e >= t.toExpPos);
      return e.isNeg() ? "-" + r : r;
    };
    function W(e) {
      var t, r, n, i = e.length - 1, o = "", s = e[0];
      if (i > 0) {
        for (o += s, t = 1; t < i; t++) n = e[t] + "", r = b - n.length, r && (o += Ge(r)), o += n;
        s = e[t], n = s + "", r = b - n.length, r && (o += Ge(r));
      } else if (s === 0) return "0";
      for (; s % 10 === 0; ) s /= 10;
      return o + s;
    }
    function ie(e, t, r) {
      if (e !== ~~e || e < t || e > r) throw Error(We + e);
    }
    function er(e, t, r, n) {
      var i, o, s, a;
      for (o = e[0]; o >= 10; o /= 10) --t;
      return --t < 0 ? (t += b, i = 0) : (i = Math.ceil((t + 1) / b), t %= b), o = U(10, b - t), a = e[i] % o | 0, n == null ? t < 3 ? (t == 0 ? a = a / 100 | 0 : t == 1 && (a = a / 10 | 0), s = r < 4 && a == 99999 || r > 3 && a == 49999 || a == 5e4 || a == 0) : s = (r < 4 && a + 1 == o || r > 3 && a + 1 == o / 2) && (e[i + 1] / o / 100 | 0) == U(10, t - 2) - 1 || (a == o / 2 || a == 0) && (e[i + 1] / o / 100 | 0) == 0 : t < 4 ? (t == 0 ? a = a / 1e3 | 0 : t == 1 ? a = a / 100 | 0 : t == 2 && (a = a / 10 | 0), s = (n || r < 4) && a == 9999 || !n && r > 3 && a == 4999) : s = ((n || r < 4) && a + 1 == o || !n && r > 3 && a + 1 == o / 2) && (e[i + 1] / o / 1e3 | 0) == U(10, t - 3) - 1, s;
    }
    function Zr(e, t, r) {
      for (var n, i = [0], o, s = 0, a = e.length; s < a; ) {
        for (o = i.length; o--; ) i[o] *= t;
        for (i[0] += xi.indexOf(e.charAt(s++)), n = 0; n < i.length; n++) i[n] > r - 1 && (i[n + 1] === void 0 && (i[n + 1] = 0), i[n + 1] += i[n] / r | 0, i[n] %= r);
      }
      return i.reverse();
    }
    function Ec(e, t) {
      var r, n, i;
      if (t.isZero()) return t;
      n = t.d.length, n < 32 ? (r = Math.ceil(n / 3), i = (1 / on(4, r)).toString()) : (r = 16, i = "2.3283064365386962890625e-10"), e.precision += r, t = ht(e, 1, t.times(i), new e(1));
      for (var o = r; o--; ) {
        var s = t.times(t);
        t = s.times(s).minus(s).times(8).plus(1);
      }
      return e.precision -= r, t;
    }
    var F = /* @__PURE__ */ function() {
      function e(n, i, o) {
        var s, a = 0, l = n.length;
        for (n = n.slice(); l--; ) s = n[l] * i + a, n[l] = s % o | 0, a = s / o | 0;
        return a && n.unshift(a), n;
      }
      function t(n, i, o, s) {
        var a, l;
        if (o != s) l = o > s ? 1 : -1;
        else for (a = l = 0; a < o; a++) if (n[a] != i[a]) {
          l = n[a] > i[a] ? 1 : -1;
          break;
        }
        return l;
      }
      function r(n, i, o, s) {
        for (var a = 0; o--; ) n[o] -= a, a = n[o] < i[o] ? 1 : 0, n[o] = a * s + n[o] - i[o];
        for (; !n[0] && n.length > 1; ) n.shift();
      }
      return function(n, i, o, s, a, l) {
        var u, c, p, d, f, g, h, O, T, S, C, E, me, ae, qt, B, ne, Ie, H, ut, _r = n.constructor, $n = n.s == i.s ? 1 : -1, K = n.d, _5 = i.d;
        if (!K || !K[0] || !_5 || !_5[0]) return new _r(!n.s || !i.s || (K ? _5 && K[0] == _5[0] : !_5) ? NaN : K && K[0] == 0 || !_5 ? $n * 0 : $n / 0);
        for (l ? (f = 1, c = n.e - i.e) : (l = ge, f = b, c = ee(n.e / f) - ee(i.e / f)), H = _5.length, ne = K.length, T = new _r($n), S = T.d = [], p = 0; _5[p] == (K[p] || 0); p++) ;
        if (_5[p] > (K[p] || 0) && c--, o == null ? (ae = o = _r.precision, s = _r.rounding) : a ? ae = o + (n.e - i.e) + 1 : ae = o, ae < 0) S.push(1), g = true;
        else {
          if (ae = ae / f + 2 | 0, p = 0, H == 1) {
            for (d = 0, _5 = _5[0], ae++; (p < ne || d) && ae--; p++) qt = d * l + (K[p] || 0), S[p] = qt / _5 | 0, d = qt % _5 | 0;
            g = d || p < ne;
          } else {
            for (d = l / (_5[0] + 1) | 0, d > 1 && (_5 = e(_5, d, l), K = e(K, d, l), H = _5.length, ne = K.length), B = H, C = K.slice(0, H), E = C.length; E < H; ) C[E++] = 0;
            ut = _5.slice(), ut.unshift(0), Ie = _5[0], _5[1] >= l / 2 && ++Ie;
            do
              d = 0, u = t(_5, C, H, E), u < 0 ? (me = C[0], H != E && (me = me * l + (C[1] || 0)), d = me / Ie | 0, d > 1 ? (d >= l && (d = l - 1), h = e(_5, d, l), O = h.length, E = C.length, u = t(h, C, O, E), u == 1 && (d--, r(h, H < O ? ut : _5, O, l))) : (d == 0 && (u = d = 1), h = _5.slice()), O = h.length, O < E && h.unshift(0), r(C, h, E, l), u == -1 && (E = C.length, u = t(_5, C, H, E), u < 1 && (d++, r(C, H < E ? ut : _5, E, l))), E = C.length) : u === 0 && (d++, C = [0]), S[p++] = d, u && C[0] ? C[E++] = K[B] || 0 : (C = [K[B]], E = 1);
            while ((B++ < ne || C[0] !== void 0) && ae--);
            g = C[0] !== void 0;
          }
          S[0] || S.shift();
        }
        if (f == 1) T.e = c, bs = g;
        else {
          for (p = 1, d = S[0]; d >= 10; d /= 10) p++;
          T.e = p + c * f - 1, y(T, a ? o + T.e + 1 : o, s, g);
        }
        return T;
      };
    }();
    function y(e, t, r, n) {
      var i, o, s, a, l, u, c, p, d, f = e.constructor;
      e: if (t != null) {
        if (p = e.d, !p) return e;
        for (i = 1, a = p[0]; a >= 10; a /= 10) i++;
        if (o = t - i, o < 0) o += b, s = t, c = p[d = 0], l = c / U(10, i - s - 1) % 10 | 0;
        else if (d = Math.ceil((o + 1) / b), a = p.length, d >= a) if (n) {
          for (; a++ <= d; ) p.push(0);
          c = l = 0, i = 1, o %= b, s = o - b + 1;
        } else break e;
        else {
          for (c = a = p[d], i = 1; a >= 10; a /= 10) i++;
          o %= b, s = o - b + i, l = s < 0 ? 0 : c / U(10, i - s - 1) % 10 | 0;
        }
        if (n = n || t < 0 || p[d + 1] !== void 0 || (s < 0 ? c : c % U(10, i - s - 1)), u = r < 4 ? (l || n) && (r == 0 || r == (e.s < 0 ? 3 : 2)) : l > 5 || l == 5 && (r == 4 || n || r == 6 && (o > 0 ? s > 0 ? c / U(10, i - s) : 0 : p[d - 1]) % 10 & 1 || r == (e.s < 0 ? 8 : 7)), t < 1 || !p[0]) return p.length = 0, u ? (t -= e.e + 1, p[0] = U(10, (b - t % b) % b), e.e = -t || 0) : p[0] = e.e = 0, e;
        if (o == 0 ? (p.length = d, a = 1, d--) : (p.length = d + 1, a = U(10, b - o), p[d] = s > 0 ? (c / U(10, i - s) % U(10, s) | 0) * a : 0), u) for (; ; ) if (d == 0) {
          for (o = 1, s = p[0]; s >= 10; s /= 10) o++;
          for (s = p[0] += a, a = 1; s >= 10; s /= 10) a++;
          o != a && (e.e++, p[0] == ge && (p[0] = 1));
          break;
        } else {
          if (p[d] += a, p[d] != ge) break;
          p[d--] = 0, a = 1;
        }
        for (o = p.length; p[--o] === 0; ) p.pop();
      }
      return w && (e.e > f.maxE ? (e.d = null, e.e = NaN) : e.e < f.minE && (e.e = 0, e.d = [0])), e;
    }
    function we(e, t, r) {
      if (!e.isFinite()) return Cs(e);
      var n, i = e.e, o = W(e.d), s = o.length;
      return t ? (r && (n = r - s) > 0 ? o = o.charAt(0) + "." + o.slice(1) + Ge(n) : s > 1 && (o = o.charAt(0) + "." + o.slice(1)), o = o + (e.e < 0 ? "e" : "e+") + e.e) : i < 0 ? (o = "0." + Ge(-i - 1) + o, r && (n = r - s) > 0 && (o += Ge(n))) : i >= s ? (o += Ge(i + 1 - s), r && (n = r - i - 1) > 0 && (o = o + "." + Ge(n))) : ((n = i + 1) < s && (o = o.slice(0, n) + "." + o.slice(n)), r && (n = r - s) > 0 && (i + 1 === s && (o += "."), o += Ge(n))), o;
    }
    function nn(e, t) {
      var r = e[0];
      for (t *= b; r >= 10; r /= 10) t++;
      return t;
    }
    function tn(e, t, r) {
      if (t > bc) throw w = true, r && (e.precision = r), Error(Es);
      return y(new e(Xr), t, 1, true);
    }
    function fe(e, t, r) {
      if (t > vi) throw Error(Es);
      return y(new e(en), t, r, true);
    }
    function vs(e) {
      var t = e.length - 1, r = t * b + 1;
      if (t = e[t], t) {
        for (; t % 10 == 0; t /= 10) r--;
        for (t = e[0]; t >= 10; t /= 10) r++;
      }
      return r;
    }
    function Ge(e) {
      for (var t = ""; e--; ) t += "0";
      return t;
    }
    function Ts(e, t, r, n) {
      var i, o = new e(1), s = Math.ceil(n / b + 4);
      for (w = false; ; ) {
        if (r % 2 && (o = o.times(t), hs(o.d, s) && (i = true)), r = ee(r / 2), r === 0) {
          r = o.d.length - 1, i && o.d[r] === 0 && ++o.d[r];
          break;
        }
        t = t.times(t), hs(t.d, s);
      }
      return w = true, o;
    }
    function gs(e) {
      return e.d[e.d.length - 1] & 1;
    }
    function Rs(e, t, r) {
      for (var n, i = new e(t[0]), o = 0; ++o < t.length; ) if (n = new e(t[o]), n.s) i[r](n) && (i = n);
      else {
        i = n;
        break;
      }
      return i;
    }
    function Ti(e, t) {
      var r, n, i, o, s, a, l, u = 0, c = 0, p = 0, d = e.constructor, f = d.rounding, g = d.precision;
      if (!e.d || !e.d[0] || e.e > 17) return new d(e.d ? e.d[0] ? e.s < 0 ? 0 : 1 / 0 : 1 : e.s ? e.s < 0 ? 0 : e : NaN);
      for (t == null ? (w = false, l = g) : l = t, a = new d(0.03125); e.e > -2; ) e = e.times(a), p += 5;
      for (n = Math.log(U(2, p)) / Math.LN10 * 2 + 5 | 0, l += n, r = o = s = new d(1), d.precision = l; ; ) {
        if (o = y(o.times(e), l, 1), r = r.times(++c), a = s.plus(F(o, r, l, 1)), W(a.d).slice(0, l) === W(s.d).slice(0, l)) {
          for (i = p; i--; ) s = y(s.times(s), l, 1);
          if (t == null) if (u < 3 && er(s.d, l - n, f, u)) d.precision = l += 10, r = o = a = new d(1), c = 0, u++;
          else return y(s, d.precision = g, f, w = true);
          else return d.precision = g, s;
        }
        s = a;
      }
    }
    function Je(e, t) {
      var r, n, i, o, s, a, l, u, c, p, d, f = 1, g = 10, h = e, O = h.d, T = h.constructor, S = T.rounding, C = T.precision;
      if (h.s < 0 || !O || !O[0] || !h.e && O[0] == 1 && O.length == 1) return new T(O && !O[0] ? -1 / 0 : h.s != 1 ? NaN : O ? 0 : h);
      if (t == null ? (w = false, c = C) : c = t, T.precision = c += g, r = W(O), n = r.charAt(0), Math.abs(o = h.e) < 15e14) {
        for (; n < 7 && n != 1 || n == 1 && r.charAt(1) > 3; ) h = h.times(e), r = W(h.d), n = r.charAt(0), f++;
        o = h.e, n > 1 ? (h = new T("0." + r), o++) : h = new T(n + "." + r.slice(1));
      } else return u = tn(T, c + 2, C).times(o + ""), h = Je(new T(n + "." + r.slice(1)), c - g).plus(u), T.precision = C, t == null ? y(h, C, S, w = true) : h;
      for (p = h, l = s = h = F(h.minus(1), h.plus(1), c, 1), d = y(h.times(h), c, 1), i = 3; ; ) {
        if (s = y(s.times(d), c, 1), u = l.plus(F(s, new T(i), c, 1)), W(u.d).slice(0, c) === W(l.d).slice(0, c)) if (l = l.times(2), o !== 0 && (l = l.plus(tn(T, c + 2, C).times(o + ""))), l = F(l, new T(f), c, 1), t == null) if (er(l.d, c - g, S, a)) T.precision = c += g, u = s = h = F(p.minus(1), p.plus(1), c, 1), d = y(h.times(h), c, 1), i = a = 1;
        else return y(l, T.precision = C, S, w = true);
        else return T.precision = C, l;
        l = u, i += 2;
      }
    }
    function Cs(e) {
      return String(e.s * e.s / 0);
    }
    function Ri(e, t) {
      var r, n, i;
      for ((r = t.indexOf(".")) > -1 && (t = t.replace(".", "")), (n = t.search(/e/i)) > 0 ? (r < 0 && (r = n), r += +t.slice(n + 1), t = t.substring(0, n)) : r < 0 && (r = t.length), n = 0; t.charCodeAt(n) === 48; n++) ;
      for (i = t.length; t.charCodeAt(i - 1) === 48; --i) ;
      if (t = t.slice(n, i), t) {
        if (i -= n, e.e = r = r - n - 1, e.d = [], n = (r + 1) % b, r < 0 && (n += b), n < i) {
          for (n && e.d.push(+t.slice(0, n)), i -= b; n < i; ) e.d.push(+t.slice(n, n += b));
          t = t.slice(n), n = b - t.length;
        } else n -= i;
        for (; n--; ) t += "0";
        e.d.push(+t), w && (e.e > e.constructor.maxE ? (e.d = null, e.e = NaN) : e.e < e.constructor.minE && (e.e = 0, e.d = [0]));
      } else e.e = 0, e.d = [0];
      return e;
    }
    function wc(e, t) {
      var r, n, i, o, s, a, l, u, c;
      if (t.indexOf("_") > -1) {
        if (t = t.replace(/(\d)_(?=\d)/g, "$1"), Ps.test(t)) return Ri(e, t);
      } else if (t === "Infinity" || t === "NaN") return +t || (e.s = NaN), e.e = NaN, e.d = null, e;
      if (gc.test(t)) r = 16, t = t.toLowerCase();
      else if (fc.test(t)) r = 2;
      else if (hc.test(t)) r = 8;
      else throw Error(We + t);
      for (o = t.search(/p/i), o > 0 ? (l = +t.slice(o + 1), t = t.substring(2, o)) : t = t.slice(2), o = t.indexOf("."), s = o >= 0, n = e.constructor, s && (t = t.replace(".", ""), a = t.length, o = a - o, i = Ts(n, new n(r), o, o * 2)), u = Zr(t, r, ge), c = u.length - 1, o = c; u[o] === 0; --o) u.pop();
      return o < 0 ? new n(e.s * 0) : (e.e = nn(u, c), e.d = u, w = false, s && (e = F(e, i, a * 4)), l && (e = e.times(Math.abs(l) < 54 ? U(2, l) : rt.pow(2, l))), w = true, e);
    }
    function xc(e, t) {
      var r, n = t.d.length;
      if (n < 3) return t.isZero() ? t : ht(e, 2, t, t);
      r = 1.4 * Math.sqrt(n), r = r > 16 ? 16 : r | 0, t = t.times(1 / on(5, r)), t = ht(e, 2, t, t);
      for (var i, o = new e(5), s = new e(16), a = new e(20); r--; ) i = t.times(t), t = t.times(o.plus(i.times(s.times(i).minus(a))));
      return t;
    }
    function ht(e, t, r, n, i) {
      var o, s, a, l, u = 1, c = e.precision, p = Math.ceil(c / b);
      for (w = false, l = r.times(r), a = new e(n); ; ) {
        if (s = F(a.times(l), new e(t++ * t++), c, 1), a = i ? n.plus(s) : n.minus(s), n = F(s.times(l), new e(t++ * t++), c, 1), s = a.plus(n), s.d[p] !== void 0) {
          for (o = p; s.d[o] === a.d[o] && o--; ) ;
          if (o == -1) break;
        }
        o = a, a = n, n = s, s = o, u++;
      }
      return w = true, s.d.length = p + 1, s;
    }
    function on(e, t) {
      for (var r = e; --t; ) r *= e;
      return r;
    }
    function Ss(e, t) {
      var r, n = t.s < 0, i = fe(e, e.precision, 1), o = i.times(0.5);
      if (t = t.abs(), t.lte(o)) return Ne = n ? 4 : 1, t;
      if (r = t.divToInt(i), r.isZero()) Ne = n ? 3 : 2;
      else {
        if (t = t.minus(r.times(i)), t.lte(o)) return Ne = gs(r) ? n ? 2 : 3 : n ? 4 : 1, t;
        Ne = gs(r) ? n ? 1 : 4 : n ? 3 : 2;
      }
      return t.minus(i).abs();
    }
    function Ci(e, t, r, n) {
      var i, o, s, a, l, u, c, p, d, f = e.constructor, g = r !== void 0;
      if (g ? (ie(r, 1, He), n === void 0 ? n = f.rounding : ie(n, 0, 8)) : (r = f.precision, n = f.rounding), !e.isFinite()) c = Cs(e);
      else {
        for (c = we(e), s = c.indexOf("."), g ? (i = 2, t == 16 ? r = r * 4 - 3 : t == 8 && (r = r * 3 - 2)) : i = t, s >= 0 && (c = c.replace(".", ""), d = new f(1), d.e = c.length - s, d.d = Zr(we(d), 10, i), d.e = d.d.length), p = Zr(c, 10, i), o = l = p.length; p[--l] == 0; ) p.pop();
        if (!p[0]) c = g ? "0p+0" : "0";
        else {
          if (s < 0 ? o-- : (e = new f(e), e.d = p, e.e = o, e = F(e, d, r, n, 0, i), p = e.d, o = e.e, u = bs), s = p[r], a = i / 2, u = u || p[r + 1] !== void 0, u = n < 4 ? (s !== void 0 || u) && (n === 0 || n === (e.s < 0 ? 3 : 2)) : s > a || s === a && (n === 4 || u || n === 6 && p[r - 1] & 1 || n === (e.s < 0 ? 8 : 7)), p.length = r, u) for (; ++p[--r] > i - 1; ) p[r] = 0, r || (++o, p.unshift(1));
          for (l = p.length; !p[l - 1]; --l) ;
          for (s = 0, c = ""; s < l; s++) c += xi.charAt(p[s]);
          if (g) {
            if (l > 1) if (t == 16 || t == 8) {
              for (s = t == 16 ? 4 : 3, --l; l % s; l++) c += "0";
              for (p = Zr(c, i, t), l = p.length; !p[l - 1]; --l) ;
              for (s = 1, c = "1."; s < l; s++) c += xi.charAt(p[s]);
            } else c = c.charAt(0) + "." + c.slice(1);
            c = c + (o < 0 ? "p" : "p+") + o;
          } else if (o < 0) {
            for (; ++o; ) c = "0" + c;
            c = "0." + c;
          } else if (++o > l) for (o -= l; o--; ) c += "0";
          else o < l && (c = c.slice(0, o) + "." + c.slice(o));
        }
        c = (t == 16 ? "0x" : t == 2 ? "0b" : t == 8 ? "0o" : "") + c;
      }
      return e.s < 0 ? "-" + c : c;
    }
    function hs(e, t) {
      if (e.length > t) return e.length = t, true;
    }
    function Pc(e) {
      return new this(e).abs();
    }
    function vc(e) {
      return new this(e).acos();
    }
    function Tc(e) {
      return new this(e).acosh();
    }
    function Rc(e, t) {
      return new this(e).plus(t);
    }
    function Cc(e) {
      return new this(e).asin();
    }
    function Sc(e) {
      return new this(e).asinh();
    }
    function Ac(e) {
      return new this(e).atan();
    }
    function Ic(e) {
      return new this(e).atanh();
    }
    function Oc(e, t) {
      e = new this(e), t = new this(t);
      var r, n = this.precision, i = this.rounding, o = n + 4;
      return !e.s || !t.s ? r = new this(NaN) : !e.d && !t.d ? (r = fe(this, o, 1).times(t.s > 0 ? 0.25 : 0.75), r.s = e.s) : !t.d || e.isZero() ? (r = t.s < 0 ? fe(this, n, i) : new this(0), r.s = e.s) : !e.d || t.isZero() ? (r = fe(this, o, 1).times(0.5), r.s = e.s) : t.s < 0 ? (this.precision = o, this.rounding = 1, r = this.atan(F(e, t, o, 1)), t = fe(this, o, 1), this.precision = n, this.rounding = i, r = e.s < 0 ? r.minus(t) : r.plus(t)) : r = this.atan(F(e, t, o, 1)), r;
    }
    function kc(e) {
      return new this(e).cbrt();
    }
    function Dc(e) {
      return y(e = new this(e), e.e + 1, 2);
    }
    function _c(e, t, r) {
      return new this(e).clamp(t, r);
    }
    function Lc(e) {
      if (!e || typeof e != "object") throw Error(rn + "Object expected");
      var t, r, n, i = e.defaults === true, o = ["precision", 1, He, "rounding", 0, 8, "toExpNeg", -gt, 0, "toExpPos", 0, gt, "maxE", 0, gt, "minE", -gt, 0, "modulo", 0, 9];
      for (t = 0; t < o.length; t += 3) if (r = o[t], i && (this[r] = Pi[r]), (n = e[r]) !== void 0) if (ee(n) === n && n >= o[t + 1] && n <= o[t + 2]) this[r] = n;
      else throw Error(We + r + ": " + n);
      if (r = "crypto", i && (this[r] = Pi[r]), (n = e[r]) !== void 0) if (n === true || n === false || n === 0 || n === 1) if (n) if (typeof crypto < "u" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[r] = true;
      else throw Error(ws);
      else this[r] = false;
      else throw Error(We + r + ": " + n);
      return this;
    }
    function Nc(e) {
      return new this(e).cos();
    }
    function Fc(e) {
      return new this(e).cosh();
    }
    function As(e) {
      var t, r, n;
      function i(o) {
        var s, a, l, u = this;
        if (!(u instanceof i)) return new i(o);
        if (u.constructor = i, ys(o)) {
          u.s = o.s, w ? !o.d || o.e > i.maxE ? (u.e = NaN, u.d = null) : o.e < i.minE ? (u.e = 0, u.d = [0]) : (u.e = o.e, u.d = o.d.slice()) : (u.e = o.e, u.d = o.d ? o.d.slice() : o.d);
          return;
        }
        if (l = typeof o, l === "number") {
          if (o === 0) {
            u.s = 1 / o < 0 ? -1 : 1, u.e = 0, u.d = [0];
            return;
          }
          if (o < 0 ? (o = -o, u.s = -1) : u.s = 1, o === ~~o && o < 1e7) {
            for (s = 0, a = o; a >= 10; a /= 10) s++;
            w ? s > i.maxE ? (u.e = NaN, u.d = null) : s < i.minE ? (u.e = 0, u.d = [0]) : (u.e = s, u.d = [o]) : (u.e = s, u.d = [o]);
            return;
          } else if (o * 0 !== 0) {
            o || (u.s = NaN), u.e = NaN, u.d = null;
            return;
          }
          return Ri(u, o.toString());
        } else if (l !== "string") throw Error(We + o);
        return (a = o.charCodeAt(0)) === 45 ? (o = o.slice(1), u.s = -1) : (a === 43 && (o = o.slice(1)), u.s = 1), Ps.test(o) ? Ri(u, o) : wc(u, o);
      }
      if (i.prototype = m, i.ROUND_UP = 0, i.ROUND_DOWN = 1, i.ROUND_CEIL = 2, i.ROUND_FLOOR = 3, i.ROUND_HALF_UP = 4, i.ROUND_HALF_DOWN = 5, i.ROUND_HALF_EVEN = 6, i.ROUND_HALF_CEIL = 7, i.ROUND_HALF_FLOOR = 8, i.EUCLID = 9, i.config = i.set = Lc, i.clone = As, i.isDecimal = ys, i.abs = Pc, i.acos = vc, i.acosh = Tc, i.add = Rc, i.asin = Cc, i.asinh = Sc, i.atan = Ac, i.atanh = Ic, i.atan2 = Oc, i.cbrt = kc, i.ceil = Dc, i.clamp = _c, i.cos = Nc, i.cosh = Fc, i.div = Mc, i.exp = $c, i.floor = qc, i.hypot = jc, i.ln = Vc, i.log = Bc, i.log10 = Qc, i.log2 = Uc, i.max = Gc, i.min = Jc, i.mod = Wc, i.mul = Hc, i.pow = Kc, i.random = zc, i.round = Yc, i.sign = Zc, i.sin = Xc, i.sinh = ep, i.sqrt = tp, i.sub = rp, i.sum = np, i.tan = ip, i.tanh = op, i.trunc = sp, e === void 0 && (e = {}), e && e.defaults !== true) for (n = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"], t = 0; t < n.length; ) e.hasOwnProperty(r = n[t++]) || (e[r] = this[r]);
      return i.config(e), i;
    }
    function Mc(e, t) {
      return new this(e).div(t);
    }
    function $c(e) {
      return new this(e).exp();
    }
    function qc(e) {
      return y(e = new this(e), e.e + 1, 3);
    }
    function jc() {
      var e, t, r = new this(0);
      for (w = false, e = 0; e < arguments.length; ) if (t = new this(arguments[e++]), t.d) r.d && (r = r.plus(t.times(t)));
      else {
        if (t.s) return w = true, new this(1 / 0);
        r = t;
      }
      return w = true, r.sqrt();
    }
    function ys(e) {
      return e instanceof rt || e && e.toStringTag === xs || false;
    }
    function Vc(e) {
      return new this(e).ln();
    }
    function Bc(e, t) {
      return new this(e).log(t);
    }
    function Uc(e) {
      return new this(e).log(2);
    }
    function Qc(e) {
      return new this(e).log(10);
    }
    function Gc() {
      return Rs(this, arguments, "lt");
    }
    function Jc() {
      return Rs(this, arguments, "gt");
    }
    function Wc(e, t) {
      return new this(e).mod(t);
    }
    function Hc(e, t) {
      return new this(e).mul(t);
    }
    function Kc(e, t) {
      return new this(e).pow(t);
    }
    function zc(e) {
      var t, r, n, i, o = 0, s = new this(1), a = [];
      if (e === void 0 ? e = this.precision : ie(e, 1, He), n = Math.ceil(e / b), this.crypto) if (crypto.getRandomValues) for (t = crypto.getRandomValues(new Uint32Array(n)); o < n; ) i = t[o], i >= 429e7 ? t[o] = crypto.getRandomValues(new Uint32Array(1))[0] : a[o++] = i % 1e7;
      else if (crypto.randomBytes) {
        for (t = crypto.randomBytes(n *= 4); o < n; ) i = t[o] + (t[o + 1] << 8) + (t[o + 2] << 16) + ((t[o + 3] & 127) << 24), i >= 214e7 ? crypto.randomBytes(4).copy(t, o) : (a.push(i % 1e7), o += 4);
        o = n / 4;
      } else throw Error(ws);
      else for (; o < n; ) a[o++] = Math.random() * 1e7 | 0;
      for (n = a[--o], e %= b, n && e && (i = U(10, b - e), a[o] = (n / i | 0) * i); a[o] === 0; o--) a.pop();
      if (o < 0) r = 0, a = [0];
      else {
        for (r = -1; a[0] === 0; r -= b) a.shift();
        for (n = 1, i = a[0]; i >= 10; i /= 10) n++;
        n < b && (r -= b - n);
      }
      return s.e = r, s.d = a, s;
    }
    function Yc(e) {
      return y(e = new this(e), e.e + 1, this.rounding);
    }
    function Zc(e) {
      return e = new this(e), e.d ? e.d[0] ? e.s : 0 * e.s : e.s || NaN;
    }
    function Xc(e) {
      return new this(e).sin();
    }
    function ep(e) {
      return new this(e).sinh();
    }
    function tp(e) {
      return new this(e).sqrt();
    }
    function rp(e, t) {
      return new this(e).sub(t);
    }
    function np() {
      var e = 0, t = arguments, r = new this(t[e]);
      for (w = false; r.s && ++e < t.length; ) r = r.plus(t[e]);
      return w = true, y(r, this.precision, this.rounding);
    }
    function ip(e) {
      return new this(e).tan();
    }
    function op(e) {
      return new this(e).tanh();
    }
    function sp(e) {
      return y(e = new this(e), e.e + 1, 1);
    }
    m[Symbol.for("nodejs.util.inspect.custom")] = m.toString;
    m[Symbol.toStringTag] = "Decimal";
    var rt = m.constructor = As(Pi);
    Xr = new rt(Xr);
    en = new rt(en);
    var xe = rt;
    function yt(e) {
      return e === null ? e : Array.isArray(e) ? e.map(yt) : typeof e == "object" ? ap(e) ? lp(e) : ft(e, yt) : e;
    }
    function ap(e) {
      return e !== null && typeof e == "object" && typeof e.$type == "string";
    }
    function lp({ $type: e, value: t }) {
      switch (e) {
        case "BigInt":
          return BigInt(t);
        case "Bytes": {
          let { buffer: r, byteOffset: n, byteLength: i } = Buffer.from(t, "base64");
          return new Uint8Array(r, n, i);
        }
        case "DateTime":
          return new Date(t);
        case "Decimal":
          return new xe(t);
        case "Json":
          return JSON.parse(t);
        default:
          Le(t, "Unknown tagged value");
      }
    }
    function bt(e) {
      return e.substring(0, 1).toLowerCase() + e.substring(1);
    }
    function Et(e) {
      return e instanceof Date || Object.prototype.toString.call(e) === "[object Date]";
    }
    function sn(e) {
      return e.toString() !== "Invalid Date";
    }
    function wt(e) {
      return rt.isDecimal(e) ? true : e !== null && typeof e == "object" && typeof e.s == "number" && typeof e.e == "number" && typeof e.toFixed == "function" && Array.isArray(e.d);
    }
    var Ls = k(mi());
    var _s = k(require("fs"));
    var Is = { keyword: De, entity: De, value: (e) => J(et(e)), punctuation: et, directive: De, function: De, variable: (e) => J(et(e)), string: (e) => J($e(e)), boolean: ke, number: De, comment: Vt };
    var up = (e) => e;
    var an = {};
    var cp = 0;
    var P = { manual: an.Prism && an.Prism.manual, disableWorkerMessageHandler: an.Prism && an.Prism.disableWorkerMessageHandler, util: { encode: function(e) {
      if (e instanceof he) {
        let t = e;
        return new he(t.type, P.util.encode(t.content), t.alias);
      } else return Array.isArray(e) ? e.map(P.util.encode) : e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
    }, type: function(e) {
      return Object.prototype.toString.call(e).slice(8, -1);
    }, objId: function(e) {
      return e.__id || Object.defineProperty(e, "__id", { value: ++cp }), e.__id;
    }, clone: function e(t, r) {
      let n, i, o = P.util.type(t);
      switch (r = r || {}, o) {
        case "Object":
          if (i = P.util.objId(t), r[i]) return r[i];
          n = {}, r[i] = n;
          for (let s in t) t.hasOwnProperty(s) && (n[s] = e(t[s], r));
          return n;
        case "Array":
          return i = P.util.objId(t), r[i] ? r[i] : (n = [], r[i] = n, t.forEach(function(s, a) {
            n[a] = e(s, r);
          }), n);
        default:
          return t;
      }
    } }, languages: { extend: function(e, t) {
      let r = P.util.clone(P.languages[e]);
      for (let n in t) r[n] = t[n];
      return r;
    }, insertBefore: function(e, t, r, n) {
      n = n || P.languages;
      let i = n[e], o = {};
      for (let a in i) if (i.hasOwnProperty(a)) {
        if (a == t) for (let l in r) r.hasOwnProperty(l) && (o[l] = r[l]);
        r.hasOwnProperty(a) || (o[a] = i[a]);
      }
      let s = n[e];
      return n[e] = o, P.languages.DFS(P.languages, function(a, l) {
        l === s && a != e && (this[a] = o);
      }), o;
    }, DFS: function e(t, r, n, i) {
      i = i || {};
      let o = P.util.objId;
      for (let s in t) if (t.hasOwnProperty(s)) {
        r.call(t, s, t[s], n || s);
        let a = t[s], l = P.util.type(a);
        l === "Object" && !i[o(a)] ? (i[o(a)] = true, e(a, r, null, i)) : l === "Array" && !i[o(a)] && (i[o(a)] = true, e(a, r, s, i));
      }
    } }, plugins: {}, highlight: function(e, t, r) {
      let n = { code: e, grammar: t, language: r };
      return P.hooks.run("before-tokenize", n), n.tokens = P.tokenize(n.code, n.grammar), P.hooks.run("after-tokenize", n), he.stringify(P.util.encode(n.tokens), n.language);
    }, matchGrammar: function(e, t, r, n, i, o, s) {
      for (let h in r) {
        if (!r.hasOwnProperty(h) || !r[h]) continue;
        if (h == s) return;
        let O = r[h];
        O = P.util.type(O) === "Array" ? O : [O];
        for (let T = 0; T < O.length; ++T) {
          let S = O[T], C = S.inside, E = !!S.lookbehind, me = !!S.greedy, ae = 0, qt = S.alias;
          if (me && !S.pattern.global) {
            let B = S.pattern.toString().match(/[imuy]*$/)[0];
            S.pattern = RegExp(S.pattern.source, B + "g");
          }
          S = S.pattern || S;
          for (let B = n, ne = i; B < t.length; ne += t[B].length, ++B) {
            let Ie = t[B];
            if (t.length > e.length) return;
            if (Ie instanceof he) continue;
            if (me && B != t.length - 1) {
              S.lastIndex = ne;
              var p = S.exec(e);
              if (!p) break;
              var c = p.index + (E ? p[1].length : 0), d = p.index + p[0].length, a = B, l = ne;
              for (let _5 = t.length; a < _5 && (l < d || !t[a].type && !t[a - 1].greedy); ++a) l += t[a].length, c >= l && (++B, ne = l);
              if (t[B] instanceof he) continue;
              u = a - B, Ie = e.slice(ne, l), p.index -= ne;
            } else {
              S.lastIndex = 0;
              var p = S.exec(Ie), u = 1;
            }
            if (!p) {
              if (o) break;
              continue;
            }
            E && (ae = p[1] ? p[1].length : 0);
            var c = p.index + ae, p = p[0].slice(ae), d = c + p.length, f = Ie.slice(0, c), g = Ie.slice(d);
            let H = [B, u];
            f && (++B, ne += f.length, H.push(f));
            let ut = new he(h, C ? P.tokenize(p, C) : p, qt, p, me);
            if (H.push(ut), g && H.push(g), Array.prototype.splice.apply(t, H), u != 1 && P.matchGrammar(e, t, r, B, ne, true, h), o) break;
          }
        }
      }
    }, tokenize: function(e, t) {
      let r = [e], n = t.rest;
      if (n) {
        for (let i in n) t[i] = n[i];
        delete t.rest;
      }
      return P.matchGrammar(e, r, t, 0, 0, false), r;
    }, hooks: { all: {}, add: function(e, t) {
      let r = P.hooks.all;
      r[e] = r[e] || [], r[e].push(t);
    }, run: function(e, t) {
      let r = P.hooks.all[e];
      if (!(!r || !r.length)) for (var n = 0, i; i = r[n++]; ) i(t);
    } }, Token: he };
    P.languages.clike = { comment: [{ pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/, lookbehind: true }, { pattern: /(^|[^\\:])\/\/.*/, lookbehind: true, greedy: true }], string: { pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: true }, "class-name": { pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i, lookbehind: true, inside: { punctuation: /[.\\]/ } }, keyword: /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/, boolean: /\b(?:true|false)\b/, function: /\w+(?=\()/, number: /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i, operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/, punctuation: /[{}[\];(),.:]/ };
    P.languages.javascript = P.languages.extend("clike", { "class-name": [P.languages.clike["class-name"], { pattern: /(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/, lookbehind: true }], keyword: [{ pattern: /((?:^|})\s*)(?:catch|finally)\b/, lookbehind: true }, { pattern: /(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/, lookbehind: true }], number: /\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/, function: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/, operator: /-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/ });
    P.languages.javascript["class-name"][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/;
    P.languages.insertBefore("javascript", "keyword", { regex: { pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=\s*($|[\r\n,.;})\]]))/, lookbehind: true, greedy: true }, "function-variable": { pattern: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/, alias: "function" }, parameter: [{ pattern: /(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/, lookbehind: true, inside: P.languages.javascript }, { pattern: /[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i, inside: P.languages.javascript }, { pattern: /(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/, lookbehind: true, inside: P.languages.javascript }, { pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/, lookbehind: true, inside: P.languages.javascript }], constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/ });
    P.languages.markup && P.languages.markup.tag.addInlined("script", "javascript");
    P.languages.js = P.languages.javascript;
    P.languages.typescript = P.languages.extend("javascript", { keyword: /\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\b/, builtin: /\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\b/ });
    P.languages.ts = P.languages.typescript;
    function he(e, t, r, n, i) {
      this.type = e, this.content = t, this.alias = r, this.length = (n || "").length | 0, this.greedy = !!i;
    }
    he.stringify = function(e, t) {
      return typeof e == "string" ? e : Array.isArray(e) ? e.map(function(r) {
        return he.stringify(r, t);
      }).join("") : pp(e.type)(e.content);
    };
    function pp(e) {
      return Is[e] || up;
    }
    function Os(e) {
      return dp(e, P.languages.javascript);
    }
    function dp(e, t) {
      return P.tokenize(e, t).map((n) => he.stringify(n)).join("");
    }
    var ks = k(ss());
    function Ds(e) {
      return (0, ks.default)(e);
    }
    var ln = class e {
      static read(t) {
        let r;
        try {
          r = _s.default.readFileSync(t, "utf-8");
        } catch {
          return null;
        }
        return e.fromContent(r);
      }
      static fromContent(t) {
        let r = t.split(/\r?\n/);
        return new e(1, r);
      }
      constructor(t, r) {
        this.firstLineNumber = t, this.lines = r;
      }
      get lastLineNumber() {
        return this.firstLineNumber + this.lines.length - 1;
      }
      mapLineAt(t, r) {
        if (t < this.firstLineNumber || t > this.lines.length + this.firstLineNumber) return this;
        let n = t - this.firstLineNumber, i = [...this.lines];
        return i[n] = r(i[n]), new e(this.firstLineNumber, i);
      }
      mapLines(t) {
        return new e(this.firstLineNumber, this.lines.map((r, n) => t(r, this.firstLineNumber + n)));
      }
      lineAt(t) {
        return this.lines[t - this.firstLineNumber];
      }
      prependSymbolAt(t, r) {
        return this.mapLines((n, i) => i === t ? `${r} ${n}` : `  ${n}`);
      }
      slice(t, r) {
        let n = this.lines.slice(t - 1, r).join(`
`);
        return new e(t, Ds(n).split(`
`));
      }
      highlight() {
        let t = Os(this.toString());
        return new e(this.firstLineNumber, t.split(`
`));
      }
      toString() {
        return this.lines.join(`
`);
      }
    };
    var mp = { red: ce, gray: Vt, dim: Oe, bold: J, underline: Y, highlightSource: (e) => e.highlight() };
    var fp = { red: (e) => e, gray: (e) => e, dim: (e) => e, bold: (e) => e, underline: (e) => e, highlightSource: (e) => e };
    function gp({ message: e, originalMethod: t, isPanic: r, callArguments: n }) {
      return { functionName: `prisma.${t}()`, message: e, isPanic: r ?? false, callArguments: n };
    }
    function hp({ callsite: e, message: t, originalMethod: r, isPanic: n, callArguments: i }, o) {
      let s = gp({ message: t, originalMethod: r, isPanic: n, callArguments: i });
      if (!e || typeof window < "u" || process.env.NODE_ENV === "production") return s;
      let a = e.getLocation();
      if (!a || !a.lineNumber || !a.columnNumber) return s;
      let l = Math.max(1, a.lineNumber - 3), u = ln.read(a.fileName)?.slice(l, a.lineNumber), c = u?.lineAt(a.lineNumber);
      if (u && c) {
        let p = bp(c), d = yp(c);
        if (!d) return s;
        s.functionName = `${d.code})`, s.location = a, n || (u = u.mapLineAt(a.lineNumber, (g) => g.slice(0, d.openingBraceIndex))), u = o.highlightSource(u);
        let f = String(u.lastLineNumber).length;
        if (s.contextLines = u.mapLines((g, h) => o.gray(String(h).padStart(f)) + " " + g).mapLines((g) => o.dim(g)).prependSymbolAt(a.lineNumber, o.bold(o.red("\u2192"))), i) {
          let g = p + f + 1;
          g += 2, s.callArguments = (0, Ls.default)(i, g).slice(g);
        }
      }
      return s;
    }
    function yp(e) {
      let t = Object.keys(Kt.ModelAction).join("|"), n = new RegExp(String.raw`\.(${t})\(`).exec(e);
      if (n) {
        let i = n.index + n[0].length, o = e.lastIndexOf(" ", n.index) + 1;
        return { code: e.slice(o, i), openingBraceIndex: i };
      }
      return null;
    }
    function bp(e) {
      let t = 0;
      for (let r = 0; r < e.length; r++) {
        if (e.charAt(r) !== " ") return t;
        t++;
      }
      return t;
    }
    function Ep({ functionName: e, location: t, message: r, isPanic: n, contextLines: i, callArguments: o }, s) {
      let a = [""], l = t ? " in" : ":";
      if (n ? (a.push(s.red(`Oops, an unknown error occurred! This is ${s.bold("on us")}, you did nothing wrong.`)), a.push(s.red(`It occurred in the ${s.bold(`\`${e}\``)} invocation${l}`))) : a.push(s.red(`Invalid ${s.bold(`\`${e}\``)} invocation${l}`)), t && a.push(s.underline(wp(t))), i) {
        a.push("");
        let u = [i.toString()];
        o && (u.push(o), u.push(s.dim(")"))), a.push(u.join("")), o && a.push("");
      } else a.push(""), o && a.push(o), a.push("");
      return a.push(r), a.join(`
`);
    }
    function wp(e) {
      let t = [e.fileName];
      return e.lineNumber && t.push(String(e.lineNumber)), e.columnNumber && t.push(String(e.columnNumber)), t.join(":");
    }
    function un(e) {
      let t = e.showColors ? mp : fp, r;
      return r = hp(e, t), Ep(r, t);
    }
    var Vs = k(Si());
    function $s(e, t, r) {
      let n = qs(e), i = xp(n), o = vp(i);
      o ? cn(o, t, r) : t.addErrorMessage(() => "Unknown error");
    }
    function qs(e) {
      return e.errors.flatMap((t) => t.kind === "Union" ? qs(t) : [t]);
    }
    function xp(e) {
      let t = /* @__PURE__ */ new Map(), r = [];
      for (let n of e) {
        if (n.kind !== "InvalidArgumentType") {
          r.push(n);
          continue;
        }
        let i = `${n.selectionPath.join(".")}:${n.argumentPath.join(".")}`, o = t.get(i);
        o ? t.set(i, { ...n, argument: { ...n.argument, typeNames: Pp(o.argument.typeNames, n.argument.typeNames) } }) : t.set(i, n);
      }
      return r.push(...t.values()), r;
    }
    function Pp(e, t) {
      return [...new Set(e.concat(t))];
    }
    function vp(e) {
      return wi(e, (t, r) => {
        let n = Fs(t), i = Fs(r);
        return n !== i ? n - i : Ms(t) - Ms(r);
      });
    }
    function Fs(e) {
      let t = 0;
      return Array.isArray(e.selectionPath) && (t += e.selectionPath.length), Array.isArray(e.argumentPath) && (t += e.argumentPath.length), t;
    }
    function Ms(e) {
      switch (e.kind) {
        case "InvalidArgumentValue":
        case "ValueTooLarge":
          return 20;
        case "InvalidArgumentType":
          return 10;
        case "RequiredArgumentMissing":
          return -10;
        default:
          return 0;
      }
    }
    var ue = class {
      constructor(t, r) {
        this.name = t;
        this.value = r;
        this.isRequired = false;
      }
      makeRequired() {
        return this.isRequired = true, this;
      }
      write(t) {
        let { colors: { green: r } } = t.context;
        t.addMarginSymbol(r(this.isRequired ? "+" : "?")), t.write(r(this.name)), this.isRequired || t.write(r("?")), t.write(r(": ")), typeof this.value == "string" ? t.write(r(this.value)) : t.write(this.value);
      }
    };
    var xt = class {
      constructor(t = 0, r) {
        this.context = r;
        this.lines = [];
        this.currentLine = "";
        this.currentIndent = 0;
        this.currentIndent = t;
      }
      write(t) {
        return typeof t == "string" ? this.currentLine += t : t.write(this), this;
      }
      writeJoined(t, r, n = (i, o) => o.write(i)) {
        let i = r.length - 1;
        for (let o = 0; o < r.length; o++) n(r[o], this), o !== i && this.write(t);
        return this;
      }
      writeLine(t) {
        return this.write(t).newLine();
      }
      newLine() {
        this.lines.push(this.indentedCurrentLine()), this.currentLine = "", this.marginSymbol = void 0;
        let t = this.afterNextNewLineCallback;
        return this.afterNextNewLineCallback = void 0, t?.(), this;
      }
      withIndent(t) {
        return this.indent(), t(this), this.unindent(), this;
      }
      afterNextNewline(t) {
        return this.afterNextNewLineCallback = t, this;
      }
      indent() {
        return this.currentIndent++, this;
      }
      unindent() {
        return this.currentIndent > 0 && this.currentIndent--, this;
      }
      addMarginSymbol(t) {
        return this.marginSymbol = t, this;
      }
      toString() {
        return this.lines.concat(this.indentedCurrentLine()).join(`
`);
      }
      getCurrentLineLength() {
        return this.currentLine.length;
      }
      indentedCurrentLine() {
        let t = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);
        return this.marginSymbol ? this.marginSymbol + t.slice(1) : t;
      }
    };
    var pn = class {
      constructor(t) {
        this.value = t;
      }
      write(t) {
        t.write(this.value);
      }
      markAsError() {
        this.value.markAsError();
      }
    };
    var dn = (e) => e;
    var mn = { bold: dn, red: dn, green: dn, dim: dn, enabled: false };
    var js = { bold: J, red: ce, green: $e, dim: Oe, enabled: true };
    var Pt = { write(e) {
      e.writeLine(",");
    } };
    var Pe = class {
      constructor(t) {
        this.contents = t;
        this.isUnderlined = false;
        this.color = (t2) => t2;
      }
      underline() {
        return this.isUnderlined = true, this;
      }
      setColor(t) {
        return this.color = t, this;
      }
      write(t) {
        let r = t.getCurrentLineLength();
        t.write(this.color(this.contents)), this.isUnderlined && t.afterNextNewline(() => {
          t.write(" ".repeat(r)).writeLine(this.color("~".repeat(this.contents.length)));
        });
      }
    };
    var Ke = class {
      constructor() {
        this.hasError = false;
      }
      markAsError() {
        return this.hasError = true, this;
      }
    };
    var vt = class extends Ke {
      constructor() {
        super(...arguments);
        this.items = [];
      }
      addItem(r) {
        return this.items.push(new pn(r)), this;
      }
      getField(r) {
        return this.items[r];
      }
      getPrintWidth() {
        return this.items.length === 0 ? 2 : Math.max(...this.items.map((n) => n.value.getPrintWidth())) + 2;
      }
      write(r) {
        if (this.items.length === 0) {
          this.writeEmpty(r);
          return;
        }
        this.writeWithItems(r);
      }
      writeEmpty(r) {
        let n = new Pe("[]");
        this.hasError && n.setColor(r.context.colors.red).underline(), r.write(n);
      }
      writeWithItems(r) {
        let { colors: n } = r.context;
        r.writeLine("[").withIndent(() => r.writeJoined(Pt, this.items).newLine()).write("]"), this.hasError && r.afterNextNewline(() => {
          r.writeLine(n.red("~".repeat(this.getPrintWidth())));
        });
      }
      asObject() {
      }
    };
    var Tt = class e extends Ke {
      constructor() {
        super(...arguments);
        this.fields = {};
        this.suggestions = [];
      }
      addField(r) {
        this.fields[r.name] = r;
      }
      addSuggestion(r) {
        this.suggestions.push(r);
      }
      getField(r) {
        return this.fields[r];
      }
      getDeepField(r) {
        let [n, ...i] = r, o = this.getField(n);
        if (!o) return;
        let s = o;
        for (let a of i) {
          let l;
          if (s.value instanceof e ? l = s.value.getField(a) : s.value instanceof vt && (l = s.value.getField(Number(a))), !l) return;
          s = l;
        }
        return s;
      }
      getDeepFieldValue(r) {
        return r.length === 0 ? this : this.getDeepField(r)?.value;
      }
      hasField(r) {
        return !!this.getField(r);
      }
      removeAllFields() {
        this.fields = {};
      }
      removeField(r) {
        delete this.fields[r];
      }
      getFields() {
        return this.fields;
      }
      isEmpty() {
        return Object.keys(this.fields).length === 0;
      }
      getFieldValue(r) {
        return this.getField(r)?.value;
      }
      getDeepSubSelectionValue(r) {
        let n = this;
        for (let i of r) {
          if (!(n instanceof e)) return;
          let o = n.getSubSelectionValue(i);
          if (!o) return;
          n = o;
        }
        return n;
      }
      getDeepSelectionParent(r) {
        let n = this.getSelectionParent();
        if (!n) return;
        let i = n;
        for (let o of r) {
          let s = i.value.getFieldValue(o);
          if (!s || !(s instanceof e)) return;
          let a = s.getSelectionParent();
          if (!a) return;
          i = a;
        }
        return i;
      }
      getSelectionParent() {
        let r = this.getField("select")?.value.asObject();
        if (r) return { kind: "select", value: r };
        let n = this.getField("include")?.value.asObject();
        if (n) return { kind: "include", value: n };
      }
      getSubSelectionValue(r) {
        return this.getSelectionParent()?.value.fields[r].value;
      }
      getPrintWidth() {
        let r = Object.values(this.fields);
        return r.length == 0 ? 2 : Math.max(...r.map((i) => i.getPrintWidth())) + 2;
      }
      write(r) {
        let n = Object.values(this.fields);
        if (n.length === 0 && this.suggestions.length === 0) {
          this.writeEmpty(r);
          return;
        }
        this.writeWithContents(r, n);
      }
      asObject() {
        return this;
      }
      writeEmpty(r) {
        let n = new Pe("{}");
        this.hasError && n.setColor(r.context.colors.red).underline(), r.write(n);
      }
      writeWithContents(r, n) {
        r.writeLine("{").withIndent(() => {
          r.writeJoined(Pt, [...n, ...this.suggestions]).newLine();
        }), r.write("}"), this.hasError && r.afterNextNewline(() => {
          r.writeLine(r.context.colors.red("~".repeat(this.getPrintWidth())));
        });
      }
    };
    var G = class extends Ke {
      constructor(r) {
        super();
        this.text = r;
      }
      getPrintWidth() {
        return this.text.length;
      }
      write(r) {
        let n = new Pe(this.text);
        this.hasError && n.underline().setColor(r.context.colors.red), r.write(n);
      }
      asObject() {
      }
    };
    var tr = class {
      constructor() {
        this.fields = [];
      }
      addField(t, r) {
        return this.fields.push({ write(n) {
          let { green: i, dim: o } = n.context.colors;
          n.write(i(o(`${t}: ${r}`))).addMarginSymbol(i(o("+")));
        } }), this;
      }
      write(t) {
        let { colors: { green: r } } = t.context;
        t.writeLine(r("{")).withIndent(() => {
          t.writeJoined(Pt, this.fields).newLine();
        }).write(r("}")).addMarginSymbol(r("+"));
      }
    };
    function cn(e, t, r) {
      switch (e.kind) {
        case "MutuallyExclusiveFields":
          Rp(e, t);
          break;
        case "IncludeOnScalar":
          Cp(e, t);
          break;
        case "EmptySelection":
          Sp(e, t, r);
          break;
        case "UnknownSelectionField":
          kp(e, t);
          break;
        case "InvalidSelectionValue":
          Dp(e, t);
          break;
        case "UnknownArgument":
          _p(e, t);
          break;
        case "UnknownInputField":
          Lp(e, t);
          break;
        case "RequiredArgumentMissing":
          Np(e, t);
          break;
        case "InvalidArgumentType":
          Fp(e, t);
          break;
        case "InvalidArgumentValue":
          Mp(e, t);
          break;
        case "ValueTooLarge":
          $p(e, t);
          break;
        case "SomeFieldsMissing":
          qp(e, t);
          break;
        case "TooManyFieldsGiven":
          jp(e, t);
          break;
        case "Union":
          $s(e, t, r);
          break;
        default:
          throw new Error("not implemented: " + e.kind);
      }
    }
    function Rp(e, t) {
      let r = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
      r && (r.getField(e.firstField)?.markAsError(), r.getField(e.secondField)?.markAsError()), t.addErrorMessage((n) => `Please ${n.bold("either")} use ${n.green(`\`${e.firstField}\``)} or ${n.green(`\`${e.secondField}\``)}, but ${n.red("not both")} at the same time.`);
    }
    function Cp(e, t) {
      let [r, n] = rr(e.selectionPath), i = e.outputType, o = t.arguments.getDeepSelectionParent(r)?.value;
      if (o && (o.getField(n)?.markAsError(), i)) for (let s of i.fields) s.isRelation && o.addSuggestion(new ue(s.name, "true"));
      t.addErrorMessage((s) => {
        let a = `Invalid scalar field ${s.red(`\`${n}\``)} for ${s.bold("include")} statement`;
        return i ? a += ` on model ${s.bold(i.name)}. ${nr(s)}` : a += ".", a += `
Note that ${s.bold("include")} statements only accept relation fields.`, a;
      });
    }
    function Sp(e, t, r) {
      let n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
      if (n) {
        let i = n.getField("omit")?.value.asObject();
        if (i) {
          Ap(e, t, i);
          return;
        }
        if (n.hasField("select")) {
          Ip(e, t);
          return;
        }
      }
      if (r?.[bt(e.outputType.name)]) {
        Op(e, t);
        return;
      }
      t.addErrorMessage(() => `Unknown field at "${e.selectionPath.join(".")} selection"`);
    }
    function Ap(e, t, r) {
      r.removeAllFields();
      for (let n of e.outputType.fields) r.addSuggestion(new ue(n.name, "false"));
      t.addErrorMessage((n) => `The ${n.red("omit")} statement includes every field of the model ${n.bold(e.outputType.name)}. At least one field must be included in the result`);
    }
    function Ip(e, t) {
      let r = e.outputType, n = t.arguments.getDeepSelectionParent(e.selectionPath)?.value, i = n?.isEmpty() ?? false;
      n && (n.removeAllFields(), Qs(n, r)), t.addErrorMessage((o) => i ? `The ${o.red("`select`")} statement for type ${o.bold(r.name)} must not be empty. ${nr(o)}` : `The ${o.red("`select`")} statement for type ${o.bold(r.name)} needs ${o.bold("at least one truthy value")}.`);
    }
    function Op(e, t) {
      let r = new tr();
      for (let i of e.outputType.fields) i.isRelation || r.addField(i.name, "false");
      let n = new ue("omit", r).makeRequired();
      if (e.selectionPath.length === 0) t.arguments.addSuggestion(n);
      else {
        let [i, o] = rr(e.selectionPath), a = t.arguments.getDeepSelectionParent(i)?.value.asObject()?.getField(o);
        if (a) {
          let l = a?.value.asObject() ?? new Tt();
          l.addSuggestion(n), a.value = l;
        }
      }
      t.addErrorMessage((i) => `The global ${i.red("omit")} configuration excludes every field of the model ${i.bold(e.outputType.name)}. At least one field must be included in the result`);
    }
    function kp(e, t) {
      let r = Gs(e.selectionPath, t);
      if (r.parentKind !== "unknown") {
        r.field.markAsError();
        let n = r.parent;
        switch (r.parentKind) {
          case "select":
            Qs(n, e.outputType);
            break;
          case "include":
            Vp(n, e.outputType);
            break;
          case "omit":
            Bp(n, e.outputType);
            break;
        }
      }
      t.addErrorMessage((n) => {
        let i = [`Unknown field ${n.red(`\`${r.fieldName}\``)}`];
        return r.parentKind !== "unknown" && i.push(`for ${n.bold(r.parentKind)} statement`), i.push(`on model ${n.bold(`\`${e.outputType.name}\``)}.`), i.push(nr(n)), i.join(" ");
      });
    }
    function Dp(e, t) {
      let r = Gs(e.selectionPath, t);
      r.parentKind !== "unknown" && r.field.value.markAsError(), t.addErrorMessage((n) => `Invalid value for selection field \`${n.red(r.fieldName)}\`: ${e.underlyingError}`);
    }
    function _p(e, t) {
      let r = e.argumentPath[0], n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
      n && (n.getField(r)?.markAsError(), Up(n, e.arguments)), t.addErrorMessage((i) => Bs(i, r, e.arguments.map((o) => o.name)));
    }
    function Lp(e, t) {
      let [r, n] = rr(e.argumentPath), i = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
      if (i) {
        i.getDeepField(e.argumentPath)?.markAsError();
        let o = i.getDeepFieldValue(r)?.asObject();
        o && Js(o, e.inputType);
      }
      t.addErrorMessage((o) => Bs(o, n, e.inputType.fields.map((s) => s.name)));
    }
    function Bs(e, t, r) {
      let n = [`Unknown argument \`${e.red(t)}\`.`], i = Gp(t, r);
      return i && n.push(`Did you mean \`${e.green(i)}\`?`), r.length > 0 && n.push(nr(e)), n.join(" ");
    }
    function Np(e, t) {
      let r;
      t.addErrorMessage((l) => r?.value instanceof G && r.value.text === "null" ? `Argument \`${l.green(o)}\` must not be ${l.red("null")}.` : `Argument \`${l.green(o)}\` is missing.`);
      let n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
      if (!n) return;
      let [i, o] = rr(e.argumentPath), s = new tr(), a = n.getDeepFieldValue(i)?.asObject();
      if (a) if (r = a.getField(o), r && a.removeField(o), e.inputTypes.length === 1 && e.inputTypes[0].kind === "object") {
        for (let l of e.inputTypes[0].fields) s.addField(l.name, l.typeNames.join(" | "));
        a.addSuggestion(new ue(o, s).makeRequired());
      } else {
        let l = e.inputTypes.map(Us).join(" | ");
        a.addSuggestion(new ue(o, l).makeRequired());
      }
    }
    function Us(e) {
      return e.kind === "list" ? `${Us(e.elementType)}[]` : e.name;
    }
    function Fp(e, t) {
      let r = e.argument.name, n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
      n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), t.addErrorMessage((i) => {
        let o = fn("or", e.argument.typeNames.map((s) => i.green(s)));
        return `Argument \`${i.bold(r)}\`: Invalid value provided. Expected ${o}, provided ${i.red(e.inferredType)}.`;
      });
    }
    function Mp(e, t) {
      let r = e.argument.name, n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
      n && n.getDeepFieldValue(e.argumentPath)?.markAsError(), t.addErrorMessage((i) => {
        let o = [`Invalid value for argument \`${i.bold(r)}\``];
        if (e.underlyingError && o.push(`: ${e.underlyingError}`), o.push("."), e.argument.typeNames.length > 0) {
          let s = fn("or", e.argument.typeNames.map((a) => i.green(a)));
          o.push(` Expected ${s}.`);
        }
        return o.join("");
      });
    }
    function $p(e, t) {
      let r = e.argument.name, n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i;
      if (n) {
        let s = n.getDeepField(e.argumentPath)?.value;
        s?.markAsError(), s instanceof G && (i = s.text);
      }
      t.addErrorMessage((o) => {
        let s = ["Unable to fit value"];
        return i && s.push(o.red(i)), s.push(`into a 64-bit signed integer for field \`${o.bold(r)}\``), s.join(" ");
      });
    }
    function qp(e, t) {
      let r = e.argumentPath[e.argumentPath.length - 1], n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject();
      if (n) {
        let i = n.getDeepFieldValue(e.argumentPath)?.asObject();
        i && Js(i, e.inputType);
      }
      t.addErrorMessage((i) => {
        let o = [`Argument \`${i.bold(r)}\` of type ${i.bold(e.inputType.name)} needs`];
        return e.constraints.minFieldCount === 1 ? e.constraints.requiredFields ? o.push(`${i.green("at least one of")} ${fn("or", e.constraints.requiredFields.map((s) => `\`${i.bold(s)}\``))} arguments.`) : o.push(`${i.green("at least one")} argument.`) : o.push(`${i.green(`at least ${e.constraints.minFieldCount}`)} arguments.`), o.push(nr(i)), o.join(" ");
      });
    }
    function jp(e, t) {
      let r = e.argumentPath[e.argumentPath.length - 1], n = t.arguments.getDeepSubSelectionValue(e.selectionPath)?.asObject(), i = [];
      if (n) {
        let o = n.getDeepFieldValue(e.argumentPath)?.asObject();
        o && (o.markAsError(), i = Object.keys(o.getFields()));
      }
      t.addErrorMessage((o) => {
        let s = [`Argument \`${o.bold(r)}\` of type ${o.bold(e.inputType.name)} needs`];
        return e.constraints.minFieldCount === 1 && e.constraints.maxFieldCount == 1 ? s.push(`${o.green("exactly one")} argument,`) : e.constraints.maxFieldCount == 1 ? s.push(`${o.green("at most one")} argument,`) : s.push(`${o.green(`at most ${e.constraints.maxFieldCount}`)} arguments,`), s.push(`but you provided ${fn("and", i.map((a) => o.red(a)))}. Please choose`), e.constraints.maxFieldCount === 1 ? s.push("one.") : s.push(`${e.constraints.maxFieldCount}.`), s.join(" ");
      });
    }
    function Qs(e, t) {
      for (let r of t.fields) e.hasField(r.name) || e.addSuggestion(new ue(r.name, "true"));
    }
    function Vp(e, t) {
      for (let r of t.fields) r.isRelation && !e.hasField(r.name) && e.addSuggestion(new ue(r.name, "true"));
    }
    function Bp(e, t) {
      for (let r of t.fields) !e.hasField(r.name) && !r.isRelation && e.addSuggestion(new ue(r.name, "true"));
    }
    function Up(e, t) {
      for (let r of t) e.hasField(r.name) || e.addSuggestion(new ue(r.name, r.typeNames.join(" | ")));
    }
    function Gs(e, t) {
      let [r, n] = rr(e), i = t.arguments.getDeepSubSelectionValue(r)?.asObject();
      if (!i) return { parentKind: "unknown", fieldName: n };
      let o = i.getFieldValue("select")?.asObject(), s = i.getFieldValue("include")?.asObject(), a = i.getFieldValue("omit")?.asObject(), l = o?.getField(n);
      return o && l ? { parentKind: "select", parent: o, field: l, fieldName: n } : (l = s?.getField(n), s && l ? { parentKind: "include", field: l, parent: s, fieldName: n } : (l = a?.getField(n), a && l ? { parentKind: "omit", field: l, parent: a, fieldName: n } : { parentKind: "unknown", fieldName: n }));
    }
    function Js(e, t) {
      if (t.kind === "object") for (let r of t.fields) e.hasField(r.name) || e.addSuggestion(new ue(r.name, r.typeNames.join(" | ")));
    }
    function rr(e) {
      let t = [...e], r = t.pop();
      if (!r) throw new Error("unexpected empty path");
      return [t, r];
    }
    function nr({ green: e, enabled: t }) {
      return "Available options are " + (t ? `listed in ${e("green")}` : "marked with ?") + ".";
    }
    function fn(e, t) {
      if (t.length === 1) return t[0];
      let r = [...t], n = r.pop();
      return `${r.join(", ")} ${e} ${n}`;
    }
    var Qp = 3;
    function Gp(e, t) {
      let r = 1 / 0, n;
      for (let i of t) {
        let o = (0, Vs.default)(e, i);
        o > Qp || o < r && (r = o, n = i);
      }
      return n;
    }
    function Ws(e) {
      return e.substring(0, 1).toLowerCase() + e.substring(1);
    }
    var ir = class {
      constructor(t, r, n, i, o) {
        this.modelName = t, this.name = r, this.typeName = n, this.isList = i, this.isEnum = o;
      }
      _toGraphQLInputType() {
        let t = this.isList ? "List" : "", r = this.isEnum ? "Enum" : "";
        return `${t}${r}${this.typeName}FieldRefInput<${this.modelName}>`;
      }
    };
    function Rt(e) {
      return e instanceof ir;
    }
    var gn = Symbol();
    var Ai = /* @__PURE__ */ new WeakMap();
    var Fe = class {
      constructor(t) {
        t === gn ? Ai.set(this, `Prisma.${this._getName()}`) : Ai.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);
      }
      _getName() {
        return this.constructor.name;
      }
      toString() {
        return Ai.get(this);
      }
    };
    var or = class extends Fe {
      _getNamespace() {
        return "NullTypes";
      }
    };
    var sr = class extends or {
    };
    Ii(sr, "DbNull");
    var ar = class extends or {
    };
    Ii(ar, "JsonNull");
    var lr = class extends or {
    };
    Ii(lr, "AnyNull");
    var hn = { classes: { DbNull: sr, JsonNull: ar, AnyNull: lr }, instances: { DbNull: new sr(gn), JsonNull: new ar(gn), AnyNull: new lr(gn) } };
    function Ii(e, t) {
      Object.defineProperty(e, "name", { value: t, configurable: true });
    }
    var Hs = ": ";
    var yn = class {
      constructor(t, r) {
        this.name = t;
        this.value = r;
        this.hasError = false;
      }
      markAsError() {
        this.hasError = true;
      }
      getPrintWidth() {
        return this.name.length + this.value.getPrintWidth() + Hs.length;
      }
      write(t) {
        let r = new Pe(this.name);
        this.hasError && r.underline().setColor(t.context.colors.red), t.write(r).write(Hs).write(this.value);
      }
    };
    var Oi = class {
      constructor(t) {
        this.errorMessages = [];
        this.arguments = t;
      }
      write(t) {
        t.write(this.arguments);
      }
      addErrorMessage(t) {
        this.errorMessages.push(t);
      }
      renderAllMessages(t) {
        return this.errorMessages.map((r) => r(t)).join(`
`);
      }
    };
    function Ct(e) {
      return new Oi(Ks(e));
    }
    function Ks(e) {
      let t = new Tt();
      for (let [r, n] of Object.entries(e)) {
        let i = new yn(r, zs(n));
        t.addField(i);
      }
      return t;
    }
    function zs(e) {
      if (typeof e == "string") return new G(JSON.stringify(e));
      if (typeof e == "number" || typeof e == "boolean") return new G(String(e));
      if (typeof e == "bigint") return new G(`${e}n`);
      if (e === null) return new G("null");
      if (e === void 0) return new G("undefined");
      if (wt(e)) return new G(`new Prisma.Decimal("${e.toFixed()}")`);
      if (e instanceof Uint8Array) return Buffer.isBuffer(e) ? new G(`Buffer.alloc(${e.byteLength})`) : new G(`new Uint8Array(${e.byteLength})`);
      if (e instanceof Date) {
        let t = sn(e) ? e.toISOString() : "Invalid Date";
        return new G(`new Date("${t}")`);
      }
      return e instanceof Fe ? new G(`Prisma.${e._getName()}`) : Rt(e) ? new G(`prisma.${Ws(e.modelName)}.$fields.${e.name}`) : Array.isArray(e) ? Jp(e) : typeof e == "object" ? Ks(e) : new G(Object.prototype.toString.call(e));
    }
    function Jp(e) {
      let t = new vt();
      for (let r of e) t.addItem(zs(r));
      return t;
    }
    function bn(e, t) {
      let r = t === "pretty" ? js : mn, n = e.renderAllMessages(r), i = new xt(0, { colors: r }).write(e).toString();
      return { message: n, args: i };
    }
    function En({ args: e, errors: t, errorFormat: r, callsite: n, originalMethod: i, clientVersion: o, globalOmit: s }) {
      let a = Ct(e);
      for (let p of t) cn(p, a, s);
      let { message: l, args: u } = bn(a, r), c = un({ message: l, callsite: n, originalMethod: i, showColors: r === "pretty", callArguments: u });
      throw new X(c, { clientVersion: o });
    }
    var ve = class {
      constructor() {
        this._map = /* @__PURE__ */ new Map();
      }
      get(t) {
        return this._map.get(t)?.value;
      }
      set(t, r) {
        this._map.set(t, { value: r });
      }
      getOrCreate(t, r) {
        let n = this._map.get(t);
        if (n) return n.value;
        let i = r();
        return this.set(t, i), i;
      }
    };
    function ur(e) {
      let t;
      return { get() {
        return t || (t = { value: e() }), t.value;
      } };
    }
    function Te(e) {
      return e.replace(/^./, (t) => t.toLowerCase());
    }
    function Zs(e, t, r) {
      let n = Te(r);
      return !t.result || !(t.result.$allModels || t.result[n]) ? e : Wp({ ...e, ...Ys(t.name, e, t.result.$allModels), ...Ys(t.name, e, t.result[n]) });
    }
    function Wp(e) {
      let t = new ve(), r = (n, i) => t.getOrCreate(n, () => i.has(n) ? [n] : (i.add(n), e[n] ? e[n].needs.flatMap((o) => r(o, i)) : [n]));
      return ft(e, (n) => ({ ...n, needs: r(n.name, /* @__PURE__ */ new Set()) }));
    }
    function Ys(e, t, r) {
      return r ? ft(r, ({ needs: n, compute: i }, o) => ({ name: o, needs: n ? Object.keys(n).filter((s) => n[s]) : [], compute: Hp(t, o, i) })) : {};
    }
    function Hp(e, t, r) {
      let n = e?.[t]?.compute;
      return n ? (i) => r({ ...i, [t]: n(i) }) : r;
    }
    function Xs(e, t) {
      if (!t) return e;
      let r = { ...e };
      for (let n of Object.values(t)) if (e[n.name]) for (let i of n.needs) r[i] = true;
      return r;
    }
    function ea(e, t) {
      if (!t) return e;
      let r = { ...e };
      for (let n of Object.values(t)) if (!e[n.name]) for (let i of n.needs) delete r[i];
      return r;
    }
    var wn = class {
      constructor(t, r) {
        this.extension = t;
        this.previous = r;
        this.computedFieldsCache = new ve();
        this.modelExtensionsCache = new ve();
        this.queryCallbacksCache = new ve();
        this.clientExtensions = ur(() => this.extension.client ? { ...this.previous?.getAllClientExtensions(), ...this.extension.client } : this.previous?.getAllClientExtensions());
        this.batchCallbacks = ur(() => {
          let t2 = this.previous?.getAllBatchQueryCallbacks() ?? [], r2 = this.extension.query?.$__internalBatch;
          return r2 ? t2.concat(r2) : t2;
        });
      }
      getAllComputedFields(t) {
        return this.computedFieldsCache.getOrCreate(t, () => Zs(this.previous?.getAllComputedFields(t), this.extension, t));
      }
      getAllClientExtensions() {
        return this.clientExtensions.get();
      }
      getAllModelExtensions(t) {
        return this.modelExtensionsCache.getOrCreate(t, () => {
          let r = Te(t);
          return !this.extension.model || !(this.extension.model[r] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(t) : { ...this.previous?.getAllModelExtensions(t), ...this.extension.model.$allModels, ...this.extension.model[r] };
        });
      }
      getAllQueryCallbacks(t, r) {
        return this.queryCallbacksCache.getOrCreate(`${t}:${r}`, () => {
          let n = this.previous?.getAllQueryCallbacks(t, r) ?? [], i = [], o = this.extension.query;
          return !o || !(o[t] || o.$allModels || o[r] || o.$allOperations) ? n : (o[t] !== void 0 && (o[t][r] !== void 0 && i.push(o[t][r]), o[t].$allOperations !== void 0 && i.push(o[t].$allOperations)), t !== "$none" && o.$allModels !== void 0 && (o.$allModels[r] !== void 0 && i.push(o.$allModels[r]), o.$allModels.$allOperations !== void 0 && i.push(o.$allModels.$allOperations)), o[r] !== void 0 && i.push(o[r]), o.$allOperations !== void 0 && i.push(o.$allOperations), n.concat(i));
        });
      }
      getAllBatchQueryCallbacks() {
        return this.batchCallbacks.get();
      }
    };
    var St = class e {
      constructor(t) {
        this.head = t;
      }
      static empty() {
        return new e();
      }
      static single(t) {
        return new e(new wn(t));
      }
      isEmpty() {
        return this.head === void 0;
      }
      append(t) {
        return new e(new wn(t, this.head));
      }
      getAllComputedFields(t) {
        return this.head?.getAllComputedFields(t);
      }
      getAllClientExtensions() {
        return this.head?.getAllClientExtensions();
      }
      getAllModelExtensions(t) {
        return this.head?.getAllModelExtensions(t);
      }
      getAllQueryCallbacks(t, r) {
        return this.head?.getAllQueryCallbacks(t, r) ?? [];
      }
      getAllBatchQueryCallbacks() {
        return this.head?.getAllBatchQueryCallbacks() ?? [];
      }
    };
    var ta = Symbol();
    var cr = class {
      constructor(t) {
        if (t !== ta) throw new Error("Skip instance can not be constructed directly");
      }
      ifUndefined(t) {
        return t === void 0 ? xn : t;
      }
    };
    var xn = new cr(ta);
    function Re(e) {
      return e instanceof cr;
    }
    var Kp = { findUnique: "findUnique", findUniqueOrThrow: "findUniqueOrThrow", findFirst: "findFirst", findFirstOrThrow: "findFirstOrThrow", findMany: "findMany", count: "aggregate", create: "createOne", createMany: "createMany", createManyAndReturn: "createManyAndReturn", update: "updateOne", updateMany: "updateMany", upsert: "upsertOne", delete: "deleteOne", deleteMany: "deleteMany", executeRaw: "executeRaw", queryRaw: "queryRaw", aggregate: "aggregate", groupBy: "groupBy", runCommandRaw: "runCommandRaw", findRaw: "findRaw", aggregateRaw: "aggregateRaw" };
    var ra = "explicitly `undefined` values are not allowed";
    function Pn({ modelName: e, action: t, args: r, runtimeDataModel: n, extensions: i = St.empty(), callsite: o, clientMethod: s, errorFormat: a, clientVersion: l, previewFeatures: u, globalOmit: c }) {
      let p = new ki({ runtimeDataModel: n, modelName: e, action: t, rootArgs: r, callsite: o, extensions: i, selectionPath: [], argumentPath: [], originalMethod: s, errorFormat: a, clientVersion: l, previewFeatures: u, globalOmit: c });
      return { modelName: e, action: Kp[t], query: pr(r, p) };
    }
    function pr({ select: e, include: t, ...r } = {}, n) {
      let i;
      return n.isPreviewFeatureOn("omitApi") && (i = r.omit, delete r.omit), { arguments: ia(r, n), selection: zp(e, t, i, n) };
    }
    function zp(e, t, r, n) {
      return e ? (t ? n.throwValidationError({ kind: "MutuallyExclusiveFields", firstField: "include", secondField: "select", selectionPath: n.getSelectionPath() }) : r && n.isPreviewFeatureOn("omitApi") && n.throwValidationError({ kind: "MutuallyExclusiveFields", firstField: "omit", secondField: "select", selectionPath: n.getSelectionPath() }), ed(e, n)) : Yp(n, t, r);
    }
    function Yp(e, t, r) {
      let n = {};
      return e.modelOrType && !e.isRawAction() && (n.$composites = true, n.$scalars = true), t && Zp(n, t, e), e.isPreviewFeatureOn("omitApi") && Xp(n, r, e), n;
    }
    function Zp(e, t, r) {
      for (let [n, i] of Object.entries(t)) {
        if (Re(i)) continue;
        let o = r.nestSelection(n);
        if (Di(i, o), i === false || i === void 0) {
          e[n] = false;
          continue;
        }
        let s = r.findField(n);
        if (s && s.kind !== "object" && r.throwValidationError({ kind: "IncludeOnScalar", selectionPath: r.getSelectionPath().concat(n), outputType: r.getOutputTypeDescription() }), s) {
          e[n] = pr(i === true ? {} : i, o);
          continue;
        }
        if (i === true) {
          e[n] = true;
          continue;
        }
        e[n] = pr(i, o);
      }
    }
    function Xp(e, t, r) {
      let n = r.getComputedFields(), i = { ...r.getGlobalOmit(), ...t }, o = ea(i, n);
      for (let [s, a] of Object.entries(o)) {
        if (Re(a)) continue;
        Di(a, r.nestSelection(s));
        let l = r.findField(s);
        n?.[s] && !l || (e[s] = !a);
      }
    }
    function ed(e, t) {
      let r = {}, n = t.getComputedFields(), i = Xs(e, n);
      for (let [o, s] of Object.entries(i)) {
        if (Re(s)) continue;
        let a = t.nestSelection(o);
        Di(s, a);
        let l = t.findField(o);
        if (!(n?.[o] && !l)) {
          if (s === false || s === void 0 || Re(s)) {
            r[o] = false;
            continue;
          }
          if (s === true) {
            l?.kind === "object" ? r[o] = pr({}, a) : r[o] = true;
            continue;
          }
          r[o] = pr(s, a);
        }
      }
      return r;
    }
    function na(e, t) {
      if (e === null) return null;
      if (typeof e == "string" || typeof e == "number" || typeof e == "boolean") return e;
      if (typeof e == "bigint") return { $type: "BigInt", value: String(e) };
      if (Et(e)) {
        if (sn(e)) return { $type: "DateTime", value: e.toISOString() };
        t.throwValidationError({ kind: "InvalidArgumentValue", selectionPath: t.getSelectionPath(), argumentPath: t.getArgumentPath(), argument: { name: t.getArgumentName(), typeNames: ["Date"] }, underlyingError: "Provided Date object is invalid" });
      }
      if (Rt(e)) return { $type: "FieldRef", value: { _ref: e.name, _container: e.modelName } };
      if (Array.isArray(e)) return td(e, t);
      if (ArrayBuffer.isView(e)) {
        let { buffer: r, byteOffset: n, byteLength: i } = e;
        return { $type: "Bytes", value: Buffer.from(r, n, i).toString("base64") };
      }
      if (rd(e)) return e.values;
      if (wt(e)) return { $type: "Decimal", value: e.toFixed() };
      if (e instanceof Fe) {
        if (e !== hn.instances[e._getName()]) throw new Error("Invalid ObjectEnumValue");
        return { $type: "Enum", value: e._getName() };
      }
      if (nd(e)) return e.toJSON();
      if (typeof e == "object") return ia(e, t);
      t.throwValidationError({ kind: "InvalidArgumentValue", selectionPath: t.getSelectionPath(), argumentPath: t.getArgumentPath(), argument: { name: t.getArgumentName(), typeNames: [] }, underlyingError: `We could not serialize ${Object.prototype.toString.call(e)} value. Serialize the object to JSON or implement a ".toJSON()" method on it` });
    }
    function ia(e, t) {
      if (e.$type) return { $type: "Raw", value: e };
      let r = {};
      for (let n in e) {
        let i = e[n], o = t.nestArgument(n);
        Re(i) || (i !== void 0 ? r[n] = na(i, o) : t.isPreviewFeatureOn("strictUndefinedChecks") && t.throwValidationError({ kind: "InvalidArgumentValue", argumentPath: o.getArgumentPath(), selectionPath: t.getSelectionPath(), argument: { name: t.getArgumentName(), typeNames: [] }, underlyingError: ra }));
      }
      return r;
    }
    function td(e, t) {
      let r = [];
      for (let n = 0; n < e.length; n++) {
        let i = t.nestArgument(String(n)), o = e[n];
        if (o === void 0 || Re(o)) {
          let s = o === void 0 ? "undefined" : "Prisma.skip";
          t.throwValidationError({ kind: "InvalidArgumentValue", selectionPath: i.getSelectionPath(), argumentPath: i.getArgumentPath(), argument: { name: `${t.getArgumentName()}[${n}]`, typeNames: [] }, underlyingError: `Can not use \`${s}\` value within array. Use \`null\` or filter out \`${s}\` values` });
        }
        r.push(na(o, i));
      }
      return r;
    }
    function rd(e) {
      return typeof e == "object" && e !== null && e.__prismaRawParameters__ === true;
    }
    function nd(e) {
      return typeof e == "object" && e !== null && typeof e.toJSON == "function";
    }
    function Di(e, t) {
      e === void 0 && t.isPreviewFeatureOn("strictUndefinedChecks") && t.throwValidationError({ kind: "InvalidSelectionValue", selectionPath: t.getSelectionPath(), underlyingError: ra });
    }
    var ki = class e {
      constructor(t) {
        this.params = t;
        this.params.modelName && (this.modelOrType = this.params.runtimeDataModel.models[this.params.modelName] ?? this.params.runtimeDataModel.types[this.params.modelName]);
      }
      throwValidationError(t) {
        En({ errors: [t], originalMethod: this.params.originalMethod, args: this.params.rootArgs ?? {}, callsite: this.params.callsite, errorFormat: this.params.errorFormat, clientVersion: this.params.clientVersion, globalOmit: this.params.globalOmit });
      }
      getSelectionPath() {
        return this.params.selectionPath;
      }
      getArgumentPath() {
        return this.params.argumentPath;
      }
      getArgumentName() {
        return this.params.argumentPath[this.params.argumentPath.length - 1];
      }
      getOutputTypeDescription() {
        if (!(!this.params.modelName || !this.modelOrType)) return { name: this.params.modelName, fields: this.modelOrType.fields.map((t) => ({ name: t.name, typeName: "boolean", isRelation: t.kind === "object" })) };
      }
      isRawAction() {
        return ["executeRaw", "queryRaw", "runCommandRaw", "findRaw", "aggregateRaw"].includes(this.params.action);
      }
      isPreviewFeatureOn(t) {
        return this.params.previewFeatures.includes(t);
      }
      getComputedFields() {
        if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);
      }
      findField(t) {
        return this.modelOrType?.fields.find((r) => r.name === t);
      }
      nestSelection(t) {
        let r = this.findField(t), n = r?.kind === "object" ? r.type : void 0;
        return new e({ ...this.params, modelName: n, selectionPath: this.params.selectionPath.concat(t) });
      }
      getGlobalOmit() {
        return this.params.modelName && this.shouldApplyGlobalOmit() ? this.params.globalOmit?.[bt(this.params.modelName)] ?? {} : {};
      }
      shouldApplyGlobalOmit() {
        switch (this.params.action) {
          case "findFirst":
          case "findFirstOrThrow":
          case "findUniqueOrThrow":
          case "findMany":
          case "upsert":
          case "findUnique":
          case "createManyAndReturn":
          case "create":
          case "update":
          case "delete":
            return true;
          case "executeRaw":
          case "aggregateRaw":
          case "runCommandRaw":
          case "findRaw":
          case "createMany":
          case "deleteMany":
          case "groupBy":
          case "updateMany":
          case "count":
          case "aggregate":
          case "queryRaw":
            return false;
          default:
            Le(this.params.action, "Unknown action");
        }
      }
      nestArgument(t) {
        return new e({ ...this.params, argumentPath: this.params.argumentPath.concat(t) });
      }
    };
    var At = class {
      constructor(t) {
        this._engine = t;
      }
      prometheus(t) {
        return this._engine.metrics({ format: "prometheus", ...t });
      }
      json(t) {
        return this._engine.metrics({ format: "json", ...t });
      }
    };
    function oa(e) {
      return { models: _i(e.models), enums: _i(e.enums), types: _i(e.types) };
    }
    function _i(e) {
      let t = {};
      for (let { name: r, ...n } of e) t[r] = n;
      return t;
    }
    function sa(e, t) {
      let r = ur(() => id(t));
      Object.defineProperty(e, "dmmf", { get: () => r.get() });
    }
    function id(e) {
      return { datamodel: { models: Li(e.models), enums: Li(e.enums), types: Li(e.types) } };
    }
    function Li(e) {
      return Object.entries(e).map(([t, r]) => ({ name: t, ...r }));
    }
    var Ni = /* @__PURE__ */ new WeakMap();
    var vn = "$$PrismaTypedSql";
    var Fi = class {
      constructor(t, r) {
        Ni.set(this, { sql: t, values: r }), Object.defineProperty(this, vn, { value: vn });
      }
      get sql() {
        return Ni.get(this).sql;
      }
      get values() {
        return Ni.get(this).values;
      }
    };
    function aa(e) {
      return (...t) => new Fi(e, t);
    }
    function la(e) {
      return e != null && e[vn] === vn;
    }
    function dr(e) {
      return { ok: false, error: e, map() {
        return dr(e);
      }, flatMap() {
        return dr(e);
      } };
    }
    var Mi = class {
      constructor() {
        this.registeredErrors = [];
      }
      consumeError(t) {
        return this.registeredErrors[t];
      }
      registerNewError(t) {
        let r = 0;
        for (; this.registeredErrors[r] !== void 0; ) r++;
        return this.registeredErrors[r] = { error: t }, r;
      }
    };
    var $i = (e) => {
      let t = new Mi(), r = Ce(t, e.transactionContext.bind(e)), n = { adapterName: e.adapterName, errorRegistry: t, queryRaw: Ce(t, e.queryRaw.bind(e)), executeRaw: Ce(t, e.executeRaw.bind(e)), provider: e.provider, transactionContext: async (...i) => (await r(...i)).map((s) => od(t, s)) };
      return e.getConnectionInfo && (n.getConnectionInfo = ad(t, e.getConnectionInfo.bind(e))), n;
    };
    var od = (e, t) => {
      let r = Ce(e, t.startTransaction.bind(t));
      return { adapterName: t.adapterName, provider: t.provider, queryRaw: Ce(e, t.queryRaw.bind(t)), executeRaw: Ce(e, t.executeRaw.bind(t)), startTransaction: async (...n) => (await r(...n)).map((o) => sd(e, o)) };
    };
    var sd = (e, t) => ({ adapterName: t.adapterName, provider: t.provider, options: t.options, queryRaw: Ce(e, t.queryRaw.bind(t)), executeRaw: Ce(e, t.executeRaw.bind(t)), commit: Ce(e, t.commit.bind(t)), rollback: Ce(e, t.rollback.bind(t)) });
    function Ce(e, t) {
      return async (...r) => {
        try {
          return await t(...r);
        } catch (n) {
          let i = e.registerNewError(n);
          return dr({ kind: "GenericJs", id: i });
        }
      };
    }
    function ad(e, t) {
      return (...r) => {
        try {
          return t(...r);
        } catch (n) {
          let i = e.registerNewError(n);
          return dr({ kind: "GenericJs", id: i });
        }
      };
    }
    var Ul = k(ii());
    var Ql = require("async_hooks");
    var Gl = require("events");
    var Jl = k(require("fs"));
    var Dr = k(require("path"));
    var oe = class e {
      constructor(t, r) {
        if (t.length - 1 !== r.length) throw t.length === 0 ? new TypeError("Expected at least 1 string") : new TypeError(`Expected ${t.length} strings to have ${t.length - 1} values`);
        let n = r.reduce((s, a) => s + (a instanceof e ? a.values.length : 1), 0);
        this.values = new Array(n), this.strings = new Array(n + 1), this.strings[0] = t[0];
        let i = 0, o = 0;
        for (; i < r.length; ) {
          let s = r[i++], a = t[i];
          if (s instanceof e) {
            this.strings[o] += s.strings[0];
            let l = 0;
            for (; l < s.values.length; ) this.values[o++] = s.values[l++], this.strings[o] = s.strings[l];
            this.strings[o] += a;
          } else this.values[o++] = s, this.strings[o] = a;
        }
      }
      get sql() {
        let t = this.strings.length, r = 1, n = this.strings[0];
        for (; r < t; ) n += `?${this.strings[r++]}`;
        return n;
      }
      get statement() {
        let t = this.strings.length, r = 1, n = this.strings[0];
        for (; r < t; ) n += `:${r}${this.strings[r++]}`;
        return n;
      }
      get text() {
        let t = this.strings.length, r = 1, n = this.strings[0];
        for (; r < t; ) n += `$${r}${this.strings[r++]}`;
        return n;
      }
      inspect() {
        return { sql: this.sql, statement: this.statement, text: this.text, values: this.values };
      }
    };
    function ua(e, t = ",", r = "", n = "") {
      if (e.length === 0) throw new TypeError("Expected `join([])` to be called with an array of multiple elements, but got an empty array");
      return new oe([r, ...Array(e.length - 1).fill(t), n], e);
    }
    function qi(e) {
      return new oe([e], []);
    }
    var ca = qi("");
    function ji(e, ...t) {
      return new oe(e, t);
    }
    function mr(e) {
      return { getKeys() {
        return Object.keys(e);
      }, getPropertyValue(t) {
        return e[t];
      } };
    }
    function re(e, t) {
      return { getKeys() {
        return [e];
      }, getPropertyValue() {
        return t();
      } };
    }
    function nt(e) {
      let t = new ve();
      return { getKeys() {
        return e.getKeys();
      }, getPropertyValue(r) {
        return t.getOrCreate(r, () => e.getPropertyValue(r));
      }, getPropertyDescriptor(r) {
        return e.getPropertyDescriptor?.(r);
      } };
    }
    var Tn = { enumerable: true, configurable: true, writable: true };
    function Rn(e) {
      let t = new Set(e);
      return { getOwnPropertyDescriptor: () => Tn, has: (r, n) => t.has(n), set: (r, n, i) => t.add(n) && Reflect.set(r, n, i), ownKeys: () => [...t] };
    }
    var pa = Symbol.for("nodejs.util.inspect.custom");
    function Se(e, t) {
      let r = ld(t), n = /* @__PURE__ */ new Set(), i = new Proxy(e, { get(o, s) {
        if (n.has(s)) return o[s];
        let a = r.get(s);
        return a ? a.getPropertyValue(s) : o[s];
      }, has(o, s) {
        if (n.has(s)) return true;
        let a = r.get(s);
        return a ? a.has?.(s) ?? true : Reflect.has(o, s);
      }, ownKeys(o) {
        let s = da(Reflect.ownKeys(o), r), a = da(Array.from(r.keys()), r);
        return [.../* @__PURE__ */ new Set([...s, ...a, ...n])];
      }, set(o, s, a) {
        return r.get(s)?.getPropertyDescriptor?.(s)?.writable === false ? false : (n.add(s), Reflect.set(o, s, a));
      }, getOwnPropertyDescriptor(o, s) {
        let a = Reflect.getOwnPropertyDescriptor(o, s);
        if (a && !a.configurable) return a;
        let l = r.get(s);
        return l ? l.getPropertyDescriptor ? { ...Tn, ...l?.getPropertyDescriptor(s) } : Tn : a;
      }, defineProperty(o, s, a) {
        return n.add(s), Reflect.defineProperty(o, s, a);
      } });
      return i[pa] = function() {
        let o = { ...this };
        return delete o[pa], o;
      }, i;
    }
    function ld(e) {
      let t = /* @__PURE__ */ new Map();
      for (let r of e) {
        let n = r.getKeys();
        for (let i of n) t.set(i, r);
      }
      return t;
    }
    function da(e, t) {
      return e.filter((r) => t.get(r)?.has?.(r) ?? true);
    }
    function It(e) {
      return { getKeys() {
        return e;
      }, has() {
        return false;
      }, getPropertyValue() {
      } };
    }
    function Ot(e, t) {
      return { batch: e, transaction: t?.kind === "batch" ? { isolationLevel: t.options.isolationLevel } : void 0 };
    }
    function ma(e) {
      if (e === void 0) return "";
      let t = Ct(e);
      return new xt(0, { colors: mn }).write(t).toString();
    }
    var ud = "P2037";
    function kt({ error: e, user_facing_error: t }, r, n) {
      return t.error_code ? new Z(cd(t, n), { code: t.error_code, clientVersion: r, meta: t.meta, batchRequestIdx: t.batch_request_idx }) : new V(e, { clientVersion: r, batchRequestIdx: t.batch_request_idx });
    }
    function cd(e, t) {
      let r = e.message;
      return (t === "postgresql" || t === "postgres" || t === "mysql") && e.error_code === ud && (r += `
Prisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`), r;
    }
    var fr = "<unknown>";
    function fa(e) {
      var t = e.split(`
`);
      return t.reduce(function(r, n) {
        var i = md(n) || gd(n) || bd(n) || Pd(n) || wd(n);
        return i && r.push(i), r;
      }, []);
    }
    var pd = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
    var dd = /\((\S*)(?::(\d+))(?::(\d+))\)/;
    function md(e) {
      var t = pd.exec(e);
      if (!t) return null;
      var r = t[2] && t[2].indexOf("native") === 0, n = t[2] && t[2].indexOf("eval") === 0, i = dd.exec(t[2]);
      return n && i != null && (t[2] = i[1], t[3] = i[2], t[4] = i[3]), { file: r ? null : t[2], methodName: t[1] || fr, arguments: r ? [t[2]] : [], lineNumber: t[3] ? +t[3] : null, column: t[4] ? +t[4] : null };
    }
    var fd = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
    function gd(e) {
      var t = fd.exec(e);
      return t ? { file: t[2], methodName: t[1] || fr, arguments: [], lineNumber: +t[3], column: t[4] ? +t[4] : null } : null;
    }
    var hd = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i;
    var yd = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
    function bd(e) {
      var t = hd.exec(e);
      if (!t) return null;
      var r = t[3] && t[3].indexOf(" > eval") > -1, n = yd.exec(t[3]);
      return r && n != null && (t[3] = n[1], t[4] = n[2], t[5] = null), { file: t[3], methodName: t[1] || fr, arguments: t[2] ? t[2].split(",") : [], lineNumber: t[4] ? +t[4] : null, column: t[5] ? +t[5] : null };
    }
    var Ed = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i;
    function wd(e) {
      var t = Ed.exec(e);
      return t ? { file: t[3], methodName: t[1] || fr, arguments: [], lineNumber: +t[4], column: t[5] ? +t[5] : null } : null;
    }
    var xd = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
    function Pd(e) {
      var t = xd.exec(e);
      return t ? { file: t[2], methodName: t[1] || fr, arguments: [], lineNumber: +t[3], column: t[4] ? +t[4] : null } : null;
    }
    var Vi = class {
      getLocation() {
        return null;
      }
    };
    var Bi = class {
      constructor() {
        this._error = new Error();
      }
      getLocation() {
        let t = this._error.stack;
        if (!t) return null;
        let n = fa(t).find((i) => {
          if (!i.file) return false;
          let o = di(i.file);
          return o !== "<anonymous>" && !o.includes("@prisma") && !o.includes("/packages/client/src/runtime/") && !o.endsWith("/runtime/binary.js") && !o.endsWith("/runtime/library.js") && !o.endsWith("/runtime/edge.js") && !o.endsWith("/runtime/edge-esm.js") && !o.startsWith("internal/") && !i.methodName.includes("new ") && !i.methodName.includes("getCallSite") && !i.methodName.includes("Proxy.") && i.methodName.split(".").length < 4;
        });
        return !n || !n.file ? null : { fileName: n.file, lineNumber: n.lineNumber, columnNumber: n.column };
      }
    };
    function ze(e) {
      return e === "minimal" ? typeof $EnabledCallSite == "function" && e !== "minimal" ? new $EnabledCallSite() : new Vi() : new Bi();
    }
    var ga = { _avg: true, _count: true, _sum: true, _min: true, _max: true };
    function Dt(e = {}) {
      let t = Td(e);
      return Object.entries(t).reduce((n, [i, o]) => (ga[i] !== void 0 ? n.select[i] = { select: o } : n[i] = o, n), { select: {} });
    }
    function Td(e = {}) {
      return typeof e._count == "boolean" ? { ...e, _count: { _all: e._count } } : e;
    }
    function Cn(e = {}) {
      return (t) => (typeof e._count == "boolean" && (t._count = t._count._all), t);
    }
    function ha(e, t) {
      let r = Cn(e);
      return t({ action: "aggregate", unpacker: r, argsMapper: Dt })(e);
    }
    function Rd(e = {}) {
      let { select: t, ...r } = e;
      return typeof t == "object" ? Dt({ ...r, _count: t }) : Dt({ ...r, _count: { _all: true } });
    }
    function Cd(e = {}) {
      return typeof e.select == "object" ? (t) => Cn(e)(t)._count : (t) => Cn(e)(t)._count._all;
    }
    function ya(e, t) {
      return t({ action: "count", unpacker: Cd(e), argsMapper: Rd })(e);
    }
    function Sd(e = {}) {
      let t = Dt(e);
      if (Array.isArray(t.by)) for (let r of t.by) typeof r == "string" && (t.select[r] = true);
      else typeof t.by == "string" && (t.select[t.by] = true);
      return t;
    }
    function Ad(e = {}) {
      return (t) => (typeof e?._count == "boolean" && t.forEach((r) => {
        r._count = r._count._all;
      }), t);
    }
    function ba(e, t) {
      return t({ action: "groupBy", unpacker: Ad(e), argsMapper: Sd })(e);
    }
    function Ea(e, t, r) {
      if (t === "aggregate") return (n) => ha(n, r);
      if (t === "count") return (n) => ya(n, r);
      if (t === "groupBy") return (n) => ba(n, r);
    }
    function wa(e, t) {
      let r = t.fields.filter((i) => !i.relationName), n = Ei(r, (i) => i.name);
      return new Proxy({}, { get(i, o) {
        if (o in i || typeof o == "symbol") return i[o];
        let s = n[o];
        if (s) return new ir(e, o, s.type, s.isList, s.kind === "enum");
      }, ...Rn(Object.keys(n)) });
    }
    var xa = (e) => Array.isArray(e) ? e : e.split(".");
    var Ui = (e, t) => xa(t).reduce((r, n) => r && r[n], e);
    var Pa = (e, t, r) => xa(t).reduceRight((n, i, o, s) => Object.assign({}, Ui(e, s.slice(0, o)), { [i]: n }), r);
    function Id(e, t) {
      return e === void 0 || t === void 0 ? [] : [...t, "select", e];
    }
    function Od(e, t, r) {
      return t === void 0 ? e ?? {} : Pa(t, r, e || true);
    }
    function Qi(e, t, r, n, i, o) {
      let a = e._runtimeDataModel.models[t].fields.reduce((l, u) => ({ ...l, [u.name]: u }), {});
      return (l) => {
        let u = ze(e._errorFormat), c = Id(n, i), p = Od(l, o, c), d = r({ dataPath: c, callsite: u })(p), f = kd(e, t);
        return new Proxy(d, { get(g, h) {
          if (!f.includes(h)) return g[h];
          let T = [a[h].type, r, h], S = [c, p];
          return Qi(e, ...T, ...S);
        }, ...Rn([...f, ...Object.getOwnPropertyNames(d)]) });
      };
    }
    function kd(e, t) {
      return e._runtimeDataModel.models[t].fields.filter((r) => r.kind === "object").map((r) => r.name);
    }
    var Dd = ["findUnique", "findUniqueOrThrow", "findFirst", "findFirstOrThrow", "create", "update", "upsert", "delete"];
    var _d = ["aggregate", "count", "groupBy"];
    function Gi(e, t) {
      let r = e._extensions.getAllModelExtensions(t) ?? {}, n = [Ld(e, t), Fd(e, t), mr(r), re("name", () => t), re("$name", () => t), re("$parent", () => e._appliedParent)];
      return Se({}, n);
    }
    function Ld(e, t) {
      let r = Te(t), n = Object.keys(Kt.ModelAction).concat("count");
      return { getKeys() {
        return n;
      }, getPropertyValue(i) {
        let o = i, s = (a) => (l) => {
          let u = ze(e._errorFormat);
          return e._createPrismaPromise((c) => {
            let p = { args: l, dataPath: [], action: o, model: t, clientMethod: `${r}.${i}`, jsModelName: r, transaction: c, callsite: u };
            return e._request({ ...p, ...a });
          });
        };
        return Dd.includes(o) ? Qi(e, t, s) : Nd(i) ? Ea(e, i, s) : s({});
      } };
    }
    function Nd(e) {
      return _d.includes(e);
    }
    function Fd(e, t) {
      return nt(re("fields", () => {
        let r = e._runtimeDataModel.models[t];
        return wa(t, r);
      }));
    }
    function va(e) {
      return e.replace(/^./, (t) => t.toUpperCase());
    }
    var Ji = Symbol();
    function gr(e) {
      let t = [Md(e), re(Ji, () => e), re("$parent", () => e._appliedParent)], r = e._extensions.getAllClientExtensions();
      return r && t.push(mr(r)), Se(e, t);
    }
    function Md(e) {
      let t = Object.keys(e._runtimeDataModel.models), r = t.map(Te), n = [...new Set(t.concat(r))];
      return nt({ getKeys() {
        return n;
      }, getPropertyValue(i) {
        let o = va(i);
        if (e._runtimeDataModel.models[o] !== void 0) return Gi(e, o);
        if (e._runtimeDataModel.models[i] !== void 0) return Gi(e, i);
      }, getPropertyDescriptor(i) {
        if (!r.includes(i)) return { enumerable: false };
      } });
    }
    function Ta(e) {
      return e[Ji] ? e[Ji] : e;
    }
    function Ra(e) {
      if (typeof e == "function") return e(this);
      if (e.client?.__AccelerateEngine) {
        let r = e.client.__AccelerateEngine;
        this._originalClient._engine = new r(this._originalClient._accelerateEngineConfig);
      }
      let t = Object.create(this._originalClient, { _extensions: { value: this._extensions.append(e) }, _appliedParent: { value: this, configurable: true }, $use: { value: void 0 }, $on: { value: void 0 } });
      return gr(t);
    }
    function Ca({ result: e, modelName: t, select: r, omit: n, extensions: i }) {
      let o = i.getAllComputedFields(t);
      if (!o) return e;
      let s = [], a = [];
      for (let l of Object.values(o)) {
        if (n) {
          if (n[l.name]) continue;
          let u = l.needs.filter((c) => n[c]);
          u.length > 0 && a.push(It(u));
        } else if (r) {
          if (!r[l.name]) continue;
          let u = l.needs.filter((c) => !r[c]);
          u.length > 0 && a.push(It(u));
        }
        $d(e, l.needs) && s.push(qd(l, Se(e, s)));
      }
      return s.length > 0 || a.length > 0 ? Se(e, [...s, ...a]) : e;
    }
    function $d(e, t) {
      return t.every((r) => bi(e, r));
    }
    function qd(e, t) {
      return nt(re(e.name, () => e.compute(t)));
    }
    function Sn({ visitor: e, result: t, args: r, runtimeDataModel: n, modelName: i }) {
      if (Array.isArray(t)) {
        for (let s = 0; s < t.length; s++) t[s] = Sn({ result: t[s], args: r, modelName: i, runtimeDataModel: n, visitor: e });
        return t;
      }
      let o = e(t, i, r) ?? t;
      return r.include && Sa({ includeOrSelect: r.include, result: o, parentModelName: i, runtimeDataModel: n, visitor: e }), r.select && Sa({ includeOrSelect: r.select, result: o, parentModelName: i, runtimeDataModel: n, visitor: e }), o;
    }
    function Sa({ includeOrSelect: e, result: t, parentModelName: r, runtimeDataModel: n, visitor: i }) {
      for (let [o, s] of Object.entries(e)) {
        if (!s || t[o] == null || Re(s)) continue;
        let l = n.models[r].fields.find((c) => c.name === o);
        if (!l || l.kind !== "object" || !l.relationName) continue;
        let u = typeof s == "object" ? s : {};
        t[o] = Sn({ visitor: i, result: t[o], args: u, modelName: l.type, runtimeDataModel: n });
      }
    }
    function Aa({ result: e, modelName: t, args: r, extensions: n, runtimeDataModel: i, globalOmit: o }) {
      return n.isEmpty() || e == null || typeof e != "object" || !i.models[t] ? e : Sn({ result: e, args: r ?? {}, modelName: t, runtimeDataModel: i, visitor: (a, l, u) => {
        let c = Te(l);
        return Ca({ result: a, modelName: c, select: u.select, omit: u.select ? void 0 : { ...o?.[c], ...u.omit }, extensions: n });
      } });
    }
    function Ia(e) {
      if (e instanceof oe) return jd(e);
      if (Array.isArray(e)) {
        let r = [e[0]];
        for (let n = 1; n < e.length; n++) r[n] = hr(e[n]);
        return r;
      }
      let t = {};
      for (let r in e) t[r] = hr(e[r]);
      return t;
    }
    function jd(e) {
      return new oe(e.strings, e.values);
    }
    function hr(e) {
      if (typeof e != "object" || e == null || e instanceof Fe || Rt(e)) return e;
      if (wt(e)) return new xe(e.toFixed());
      if (Et(e)) return /* @__PURE__ */ new Date(+e);
      if (ArrayBuffer.isView(e)) return e.slice(0);
      if (Array.isArray(e)) {
        let t = e.length, r;
        for (r = Array(t); t--; ) r[t] = hr(e[t]);
        return r;
      }
      if (typeof e == "object") {
        let t = {};
        for (let r in e) r === "__proto__" ? Object.defineProperty(t, r, { value: hr(e[r]), configurable: true, enumerable: true, writable: true }) : t[r] = hr(e[r]);
        return t;
      }
      Le(e, "Unknown value");
    }
    function ka(e, t, r, n = 0) {
      return e._createPrismaPromise((i) => {
        let o = t.customDataProxyFetch;
        return "transaction" in t && i !== void 0 && (t.transaction?.kind === "batch" && t.transaction.lock.then(), t.transaction = i), n === r.length ? e._executeRequest(t) : r[n]({ model: t.model, operation: t.model ? t.action : t.clientMethod, args: Ia(t.args ?? {}), __internalParams: t, query: (s, a = t) => {
          let l = a.customDataProxyFetch;
          return a.customDataProxyFetch = Na(o, l), a.args = s, ka(e, a, r, n + 1);
        } });
      });
    }
    function Da(e, t) {
      let { jsModelName: r, action: n, clientMethod: i } = t, o = r ? n : i;
      if (e._extensions.isEmpty()) return e._executeRequest(t);
      let s = e._extensions.getAllQueryCallbacks(r ?? "$none", o);
      return ka(e, t, s);
    }
    function _a(e) {
      return (t) => {
        let r = { requests: t }, n = t[0].extensions.getAllBatchQueryCallbacks();
        return n.length ? La(r, n, 0, e) : e(r);
      };
    }
    function La(e, t, r, n) {
      if (r === t.length) return n(e);
      let i = e.customDataProxyFetch, o = e.requests[0].transaction;
      return t[r]({ args: { queries: e.requests.map((s) => ({ model: s.modelName, operation: s.action, args: s.args })), transaction: o ? { isolationLevel: o.kind === "batch" ? o.isolationLevel : void 0 } : void 0 }, __internalParams: e, query(s, a = e) {
        let l = a.customDataProxyFetch;
        return a.customDataProxyFetch = Na(i, l), La(a, t, r + 1, n);
      } });
    }
    var Oa = (e) => e;
    function Na(e = Oa, t = Oa) {
      return (r) => e(t(r));
    }
    var Fa = N("prisma:client");
    var Ma = { Vercel: "vercel", "Netlify CI": "netlify" };
    function $a({ postinstall: e, ciName: t, clientVersion: r }) {
      if (Fa("checkPlatformCaching:postinstall", e), Fa("checkPlatformCaching:ciName", t), e === true && t && t in Ma) {
        let n = `Prisma has detected that this project was built on ${t}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \`prisma generate\` command during the build process.

Learn how: https://pris.ly/d/${Ma[t]}-build`;
        throw console.error(n), new R(n, r);
      }
    }
    function qa(e, t) {
      return e ? e.datasources ? e.datasources : e.datasourceUrl ? { [t[0]]: { url: e.datasourceUrl } } : {} : {};
    }
    var Vd = "Cloudflare-Workers";
    var Bd = "node";
    function ja() {
      return typeof Netlify == "object" ? "netlify" : typeof EdgeRuntime == "string" ? "edge-light" : globalThis.navigator?.userAgent === Vd ? "workerd" : globalThis.Deno ? "deno" : globalThis.__lagon__ ? "lagon" : globalThis.process?.release?.name === Bd ? "node" : globalThis.Bun ? "bun" : globalThis.fastly ? "fastly" : "unknown";
    }
    var Ud = { node: "Node.js", workerd: "Cloudflare Workers", deno: "Deno and Deno Deploy", netlify: "Netlify Edge Functions", "edge-light": "Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)" };
    function An() {
      let e = ja();
      return { id: e, prettyName: Ud[e] || e, isEdge: ["workerd", "deno", "netlify", "edge-light"].includes(e) };
    }
    var Ga = k(require("fs"));
    var yr = k(require("path"));
    function In(e) {
      let { runtimeBinaryTarget: t } = e;
      return `Add "${t}" to \`binaryTargets\` in the "schema.prisma" file and run \`prisma generate\` after saving it:

${Qd(e)}`;
    }
    function Qd(e) {
      let { generator: t, generatorBinaryTargets: r, runtimeBinaryTarget: n } = e, i = { fromEnvVar: null, value: n }, o = [...r, i];
      return gi({ ...t, binaryTargets: o });
    }
    function Ye(e) {
      let { runtimeBinaryTarget: t } = e;
      return `Prisma Client could not locate the Query Engine for runtime "${t}".`;
    }
    function Ze(e) {
      let { searchedLocations: t } = e;
      return `The following locations have been searched:
${[...new Set(t)].map((i) => `  ${i}`).join(`
`)}`;
    }
    function Va(e) {
      let { runtimeBinaryTarget: t } = e;
      return `${Ye(e)}

This happened because \`binaryTargets\` have been pinned, but the actual deployment also required "${t}".
${In(e)}

${Ze(e)}`;
    }
    function On(e) {
      return `We would appreciate if you could take the time to share some information with us.
Please help us by answering a few questions: https://pris.ly/${e}`;
    }
    function kn(e) {
      let { errorStack: t } = e;
      return t?.match(/\/\.next|\/next@|\/next\//) ? `

We detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : "";
    }
    function Ba(e) {
      let { queryEngineName: t } = e;
      return `${Ye(e)}${kn(e)}

This is likely caused by a bundler that has not copied "${t}" next to the resulting bundle.
Ensure that "${t}" has been copied next to the bundle or in "${e.expectedLocation}".

${On("engine-not-found-bundler-investigation")}

${Ze(e)}`;
    }
    function Ua(e) {
      let { runtimeBinaryTarget: t, generatorBinaryTargets: r } = e, n = r.find((i) => i.native);
      return `${Ye(e)}

This happened because Prisma Client was generated for "${n?.value ?? "unknown"}", but the actual deployment required "${t}".
${In(e)}

${Ze(e)}`;
    }
    function Qa(e) {
      let { queryEngineName: t } = e;
      return `${Ye(e)}${kn(e)}

This is likely caused by tooling that has not copied "${t}" to the deployment folder.
Ensure that you ran \`prisma generate\` and that "${t}" has been copied to "${e.expectedLocation}".

${On("engine-not-found-tooling-investigation")}

${Ze(e)}`;
    }
    var Gd = N("prisma:client:engines:resolveEnginePath");
    var Jd = () => new RegExp("runtime[\\\\/]library\\.m?js$");
    async function Ja(e, t) {
      let r = { binary: process.env.PRISMA_QUERY_ENGINE_BINARY, library: process.env.PRISMA_QUERY_ENGINE_LIBRARY }[e] ?? t.prismaPath;
      if (r !== void 0) return r;
      let { enginePath: n, searchedLocations: i } = await Wd(e, t);
      if (Gd("enginePath", n), n !== void 0 && e === "binary" && ai(n), n !== void 0) return t.prismaPath = n;
      let o = await tt(), s = t.generator?.binaryTargets ?? [], a = s.some((d) => d.native), l = !s.some((d) => d.value === o), u = __filename.match(Jd()) === null, c = { searchedLocations: i, generatorBinaryTargets: s, generator: t.generator, runtimeBinaryTarget: o, queryEngineName: Wa(e, o), expectedLocation: yr.default.relative(process.cwd(), t.dirname), errorStack: new Error().stack }, p;
      throw a && l ? p = Ua(c) : l ? p = Va(c) : u ? p = Ba(c) : p = Qa(c), new R(p, t.clientVersion);
    }
    async function Wd(engineType, config) {
      let binaryTarget = await tt(), searchedLocations = [], dirname = eval("__dirname"), searchLocations = [config.dirname, yr.default.resolve(dirname, ".."), config.generator?.output?.value ?? dirname, yr.default.resolve(dirname, "../../../.prisma/client"), "/tmp/prisma-engines", config.cwd];
      __filename.includes("resolveEnginePath") && searchLocations.push(Ho());
      for (let e of searchLocations) {
        let t = Wa(engineType, binaryTarget), r = yr.default.join(e, t);
        if (searchedLocations.push(e), Ga.default.existsSync(r)) return { enginePath: r, searchedLocations };
      }
      return { enginePath: void 0, searchedLocations };
    }
    function Wa(e, t) {
      return e === "library" ? Mr(t, "fs") : `query-engine-${t}${t === "windows" ? ".exe" : ""}`;
    }
    var Wi = k(yi());
    function Ha(e) {
      return e ? e.replace(/".*"/g, '"X"').replace(/[\s:\[]([+-]?([0-9]*[.])?[0-9]+)/g, (t) => `${t[0]}5`) : "";
    }
    function Ka(e) {
      return e.split(`
`).map((t) => t.replace(/^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)\s*/, "").replace(/\+\d+\s*ms$/, "")).join(`
`);
    }
    var za = k(ms());
    function Ya({ title: e, user: t = "prisma", repo: r = "prisma", template: n = "bug_report.yml", body: i }) {
      return (0, za.default)({ user: t, repo: r, template: n, title: e, body: i });
    }
    function Za({ version: e, binaryTarget: t, title: r, description: n, engineVersion: i, database: o, query: s }) {
      let a = To(6e3 - (s?.length ?? 0)), l = Ka((0, Wi.default)(a)), u = n ? `# Description
\`\`\`
${n}
\`\`\`` : "", c = (0, Wi.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | ${process.version?.padEnd(19)}| 
| OS              | ${t?.padEnd(19)}|
| Prisma Client   | ${e?.padEnd(19)}|
| Query Engine    | ${i?.padEnd(19)}|
| Database        | ${o?.padEnd(19)}|

${u}

## Logs
\`\`\`
${l}
\`\`\`

## Client Snippet
\`\`\`ts
// PLEASE FILL YOUR CODE SNIPPET HERE
\`\`\`

## Schema
\`\`\`prisma
// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE
\`\`\`

## Prisma Engine Query
\`\`\`
${s ? Ha(s) : ""}
\`\`\`
`), p = Ya({ title: r, body: c });
      return `${r}

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

${Y(p)}

If you want the Prisma team to look into it, please open the link above \u{1F64F}
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue. 
`;
    }
    function _t({ inlineDatasources: e, overrideDatasources: t, env: r, clientVersion: n }) {
      let i, o = Object.keys(e)[0], s = e[o]?.url, a = t[o]?.url;
      if (o === void 0 ? i = void 0 : a ? i = a : s?.value ? i = s.value : s?.fromEnvVar && (i = r[s.fromEnvVar]), s?.fromEnvVar !== void 0 && i === void 0) throw new R(`error: Environment variable not found: ${s.fromEnvVar}.`, n);
      if (i === void 0) throw new R("error: Missing URL environment variable, value, or override.", n);
      return i;
    }
    var Dn = class extends Error {
      constructor(t, r) {
        super(t), this.clientVersion = r.clientVersion, this.cause = r.cause;
      }
      get [Symbol.toStringTag]() {
        return this.name;
      }
    };
    var se = class extends Dn {
      constructor(t, r) {
        super(t, r), this.isRetryable = r.isRetryable ?? true;
      }
    };
    function A(e, t) {
      return { ...e, isRetryable: t };
    }
    var Lt = class extends se {
      constructor(r) {
        super("This request must be retried", A(r, true));
        this.name = "ForcedRetryError";
        this.code = "P5001";
      }
    };
    x(Lt, "ForcedRetryError");
    var it = class extends se {
      constructor(r, n) {
        super(r, A(n, false));
        this.name = "InvalidDatasourceError";
        this.code = "P6001";
      }
    };
    x(it, "InvalidDatasourceError");
    var ot = class extends se {
      constructor(r, n) {
        super(r, A(n, false));
        this.name = "NotImplementedYetError";
        this.code = "P5004";
      }
    };
    x(ot, "NotImplementedYetError");
    var q = class extends se {
      constructor(t, r) {
        super(t, r), this.response = r.response;
        let n = this.response.headers.get("prisma-request-id");
        if (n) {
          let i = `(The request id was: ${n})`;
          this.message = this.message + " " + i;
        }
      }
    };
    var st = class extends q {
      constructor(r) {
        super("Schema needs to be uploaded", A(r, true));
        this.name = "SchemaMissingError";
        this.code = "P5005";
      }
    };
    x(st, "SchemaMissingError");
    var Hi = "This request could not be understood by the server";
    var br = class extends q {
      constructor(r, n, i) {
        super(n || Hi, A(r, false));
        this.name = "BadRequestError";
        this.code = "P5000";
        i && (this.code = i);
      }
    };
    x(br, "BadRequestError");
    var Er = class extends q {
      constructor(r, n) {
        super("Engine not started: healthcheck timeout", A(r, true));
        this.name = "HealthcheckTimeoutError";
        this.code = "P5013";
        this.logs = n;
      }
    };
    x(Er, "HealthcheckTimeoutError");
    var wr = class extends q {
      constructor(r, n, i) {
        super(n, A(r, true));
        this.name = "EngineStartupError";
        this.code = "P5014";
        this.logs = i;
      }
    };
    x(wr, "EngineStartupError");
    var xr = class extends q {
      constructor(r) {
        super("Engine version is not supported", A(r, false));
        this.name = "EngineVersionNotSupportedError";
        this.code = "P5012";
      }
    };
    x(xr, "EngineVersionNotSupportedError");
    var Ki = "Request timed out";
    var Pr = class extends q {
      constructor(r, n = Ki) {
        super(n, A(r, false));
        this.name = "GatewayTimeoutError";
        this.code = "P5009";
      }
    };
    x(Pr, "GatewayTimeoutError");
    var Hd = "Interactive transaction error";
    var vr = class extends q {
      constructor(r, n = Hd) {
        super(n, A(r, false));
        this.name = "InteractiveTransactionError";
        this.code = "P5015";
      }
    };
    x(vr, "InteractiveTransactionError");
    var Kd = "Request parameters are invalid";
    var Tr = class extends q {
      constructor(r, n = Kd) {
        super(n, A(r, false));
        this.name = "InvalidRequestError";
        this.code = "P5011";
      }
    };
    x(Tr, "InvalidRequestError");
    var zi = "Requested resource does not exist";
    var Rr = class extends q {
      constructor(r, n = zi) {
        super(n, A(r, false));
        this.name = "NotFoundError";
        this.code = "P5003";
      }
    };
    x(Rr, "NotFoundError");
    var Yi = "Unknown server error";
    var Nt = class extends q {
      constructor(r, n, i) {
        super(n || Yi, A(r, true));
        this.name = "ServerError";
        this.code = "P5006";
        this.logs = i;
      }
    };
    x(Nt, "ServerError");
    var Zi = "Unauthorized, check your connection string";
    var Cr = class extends q {
      constructor(r, n = Zi) {
        super(n, A(r, false));
        this.name = "UnauthorizedError";
        this.code = "P5007";
      }
    };
    x(Cr, "UnauthorizedError");
    var Xi = "Usage exceeded, retry again later";
    var Sr = class extends q {
      constructor(r, n = Xi) {
        super(n, A(r, true));
        this.name = "UsageExceededError";
        this.code = "P5008";
      }
    };
    x(Sr, "UsageExceededError");
    async function zd(e) {
      let t;
      try {
        t = await e.text();
      } catch {
        return { type: "EmptyError" };
      }
      try {
        let r = JSON.parse(t);
        if (typeof r == "string") switch (r) {
          case "InternalDataProxyError":
            return { type: "DataProxyError", body: r };
          default:
            return { type: "UnknownTextError", body: r };
        }
        if (typeof r == "object" && r !== null) {
          if ("is_panic" in r && "message" in r && "error_code" in r) return { type: "QueryEngineError", body: r };
          if ("EngineNotStarted" in r || "InteractiveTransactionMisrouted" in r || "InvalidRequestError" in r) {
            let n = Object.values(r)[0].reason;
            return typeof n == "string" && !["SchemaMissing", "EngineVersionNotSupported"].includes(n) ? { type: "UnknownJsonError", body: r } : { type: "DataProxyError", body: r };
          }
        }
        return { type: "UnknownJsonError", body: r };
      } catch {
        return t === "" ? { type: "EmptyError" } : { type: "UnknownTextError", body: t };
      }
    }
    async function Ar(e, t) {
      if (e.ok) return;
      let r = { clientVersion: t, response: e }, n = await zd(e);
      if (n.type === "QueryEngineError") throw new Z(n.body.message, { code: n.body.error_code, clientVersion: t });
      if (n.type === "DataProxyError") {
        if (n.body === "InternalDataProxyError") throw new Nt(r, "Internal Data Proxy error");
        if ("EngineNotStarted" in n.body) {
          if (n.body.EngineNotStarted.reason === "SchemaMissing") return new st(r);
          if (n.body.EngineNotStarted.reason === "EngineVersionNotSupported") throw new xr(r);
          if ("EngineStartupError" in n.body.EngineNotStarted.reason) {
            let { msg: i, logs: o } = n.body.EngineNotStarted.reason.EngineStartupError;
            throw new wr(r, i, o);
          }
          if ("KnownEngineStartupError" in n.body.EngineNotStarted.reason) {
            let { msg: i, error_code: o } = n.body.EngineNotStarted.reason.KnownEngineStartupError;
            throw new R(i, t, o);
          }
          if ("HealthcheckTimeout" in n.body.EngineNotStarted.reason) {
            let { logs: i } = n.body.EngineNotStarted.reason.HealthcheckTimeout;
            throw new Er(r, i);
          }
        }
        if ("InteractiveTransactionMisrouted" in n.body) {
          let i = { IDParseError: "Could not parse interactive transaction ID", NoQueryEngineFoundError: "Could not find Query Engine for the specified host and transaction ID", TransactionStartError: "Could not start interactive transaction" };
          throw new vr(r, i[n.body.InteractiveTransactionMisrouted.reason]);
        }
        if ("InvalidRequestError" in n.body) throw new Tr(r, n.body.InvalidRequestError.reason);
      }
      if (e.status === 401 || e.status === 403) throw new Cr(r, Ft(Zi, n));
      if (e.status === 404) return new Rr(r, Ft(zi, n));
      if (e.status === 429) throw new Sr(r, Ft(Xi, n));
      if (e.status === 504) throw new Pr(r, Ft(Ki, n));
      if (e.status >= 500) throw new Nt(r, Ft(Yi, n));
      if (e.status >= 400) throw new br(r, Ft(Hi, n));
    }
    function Ft(e, t) {
      return t.type === "EmptyError" ? e : `${e}: ${JSON.stringify(t)}`;
    }
    function Xa(e) {
      let t = Math.pow(2, e) * 50, r = Math.ceil(Math.random() * t) - Math.ceil(t / 2), n = t + r;
      return new Promise((i) => setTimeout(() => i(n), n));
    }
    var Me = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    function el(e) {
      let t = new TextEncoder().encode(e), r = "", n = t.byteLength, i = n % 3, o = n - i, s, a, l, u, c;
      for (let p = 0; p < o; p = p + 3) c = t[p] << 16 | t[p + 1] << 8 | t[p + 2], s = (c & 16515072) >> 18, a = (c & 258048) >> 12, l = (c & 4032) >> 6, u = c & 63, r += Me[s] + Me[a] + Me[l] + Me[u];
      return i == 1 ? (c = t[o], s = (c & 252) >> 2, a = (c & 3) << 4, r += Me[s] + Me[a] + "==") : i == 2 && (c = t[o] << 8 | t[o + 1], s = (c & 64512) >> 10, a = (c & 1008) >> 4, l = (c & 15) << 2, r += Me[s] + Me[a] + Me[l] + "="), r;
    }
    function tl(e) {
      if (!!e.generator?.previewFeatures.some((r) => r.toLowerCase().includes("metrics"))) throw new R("The `metrics` preview feature is not yet available with Accelerate.\nPlease remove `metrics` from the `previewFeatures` in your schema.\n\nMore information about Accelerate: https://pris.ly/d/accelerate", e.clientVersion);
    }
    function Yd(e) {
      return e[0] * 1e3 + e[1] / 1e6;
    }
    function rl(e) {
      return new Date(Yd(e));
    }
    var nl = { "@prisma/debug": "workspace:*", "@prisma/engines-version": "5.23.0-27.5dbef10bdbfb579e07d35cc85fb1518d357cb99e", "@prisma/fetch-engine": "workspace:*", "@prisma/get-platform": "workspace:*" };
    var Ir = class extends se {
      constructor(r, n) {
        super(`Cannot fetch data from service:
${r}`, A(n, true));
        this.name = "RequestError";
        this.code = "P5010";
      }
    };
    x(Ir, "RequestError");
    async function at(e, t, r = (n) => n) {
      let { clientVersion: n, ...i } = t, o = r(fetch);
      try {
        return await o(e, i);
      } catch (s) {
        let a = s.message ?? "Unknown error";
        throw new Ir(a, { clientVersion: n, cause: s });
      }
    }
    var Xd = /^[1-9][0-9]*\.[0-9]+\.[0-9]+$/;
    var il = N("prisma:client:dataproxyEngine");
    async function em(e, t) {
      let r = nl["@prisma/engines-version"], n = t.clientVersion ?? "unknown";
      if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;
      if (e.includes("accelerate") && n !== "0.0.0" && n !== "in-memory") return n;
      let [i, o] = n?.split("-") ?? [];
      if (o === void 0 && Xd.test(i)) return i;
      if (o !== void 0 || n === "0.0.0" || n === "in-memory") {
        if (e.startsWith("localhost") || e.startsWith("127.0.0.1")) return "0.0.0";
        let [s] = r.split("-") ?? [], [a, l, u] = s.split("."), c = tm(`<=${a}.${l}.${u}`), p = await at(c, { clientVersion: n });
        if (!p.ok) throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p.status} ${p.statusText}, response body: ${await p.text() || "<empty body>"}`);
        let d = await p.text();
        il("length of body fetched from unpkg.com", d.length);
        let f;
        try {
          f = JSON.parse(d);
        } catch (g) {
          throw console.error("JSON.parse error: body fetched from unpkg.com: ", d), g;
        }
        return f.version;
      }
      throw new ot("Only `major.minor.patch` versions are supported by Accelerate.", { clientVersion: n });
    }
    async function ol(e, t) {
      let r = await em(e, t);
      return il("version", r), r;
    }
    function tm(e) {
      return encodeURI(`https://unpkg.com/prisma@${e}/package.json`);
    }
    var sl = 3;
    var eo = N("prisma:client:dataproxyEngine");
    var to = class {
      constructor({ apiKey: t, tracingHelper: r, logLevel: n, logQueries: i, engineHash: o }) {
        this.apiKey = t, this.tracingHelper = r, this.logLevel = n, this.logQueries = i, this.engineHash = o;
      }
      build({ traceparent: t, interactiveTransaction: r } = {}) {
        let n = { Authorization: `Bearer ${this.apiKey}`, "Prisma-Engine-Hash": this.engineHash };
        this.tracingHelper.isEnabled() && (n.traceparent = t ?? this.tracingHelper.getTraceParent()), r && (n["X-transaction-id"] = r.id);
        let i = this.buildCaptureSettings();
        return i.length > 0 && (n["X-capture-telemetry"] = i.join(", ")), n;
      }
      buildCaptureSettings() {
        let t = [];
        return this.tracingHelper.isEnabled() && t.push("tracing"), this.logLevel && t.push(this.logLevel), this.logQueries && t.push("query"), t;
      }
    };
    var Or = class {
      constructor(t) {
        this.name = "DataProxyEngine";
        tl(t), this.config = t, this.env = { ...t.env, ...typeof process < "u" ? process.env : {} }, this.inlineSchema = el(t.inlineSchema), this.inlineDatasources = t.inlineDatasources, this.inlineSchemaHash = t.inlineSchemaHash, this.clientVersion = t.clientVersion, this.engineHash = t.engineVersion, this.logEmitter = t.logEmitter, this.tracingHelper = t.tracingHelper;
      }
      apiKey() {
        return this.headerBuilder.apiKey;
      }
      version() {
        return this.engineHash;
      }
      async start() {
        this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async () => {
          let [t, r] = this.extractHostAndApiKey();
          this.host = t, this.headerBuilder = new to({ apiKey: r, tracingHelper: this.tracingHelper, logLevel: this.config.logLevel, logQueries: this.config.logQueries, engineHash: this.engineHash }), this.remoteClientVersion = await ol(t, this.config), eo("host", this.host);
        })(), await this.startPromise;
      }
      async stop() {
      }
      propagateResponseExtensions(t) {
        t?.logs?.length && t.logs.forEach((r) => {
          switch (r.level) {
            case "debug":
            case "error":
            case "trace":
            case "warn":
            case "info":
              break;
            case "query": {
              let n = typeof r.attributes.query == "string" ? r.attributes.query : "";
              if (!this.tracingHelper.isEnabled()) {
                let [i] = n.split("/* traceparent");
                n = i;
              }
              this.logEmitter.emit("query", { query: n, timestamp: rl(r.timestamp), duration: Number(r.attributes.duration_ms), params: r.attributes.params, target: r.attributes.target });
            }
          }
        }), t?.traces?.length && this.tracingHelper.createEngineSpan({ span: true, spans: t.traces });
      }
      onBeforeExit() {
        throw new Error('"beforeExit" hook is not applicable to the remote query engine');
      }
      async url(t) {
        return await this.start(), `https://${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${t}`;
      }
      async uploadSchema() {
        let t = { name: "schemaUpload", internal: true };
        return this.tracingHelper.runInChildSpan(t, async () => {
          let r = await at(await this.url("schema"), { method: "PUT", headers: this.headerBuilder.build(), body: this.inlineSchema, clientVersion: this.clientVersion });
          r.ok || eo("schema response status", r.status);
          let n = await Ar(r, this.clientVersion);
          if (n) throw this.logEmitter.emit("warn", { message: `Error while uploading schema: ${n.message}`, timestamp: /* @__PURE__ */ new Date(), target: "" }), n;
          this.logEmitter.emit("info", { message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`, timestamp: /* @__PURE__ */ new Date(), target: "" });
        });
      }
      request(t, { traceparent: r, interactiveTransaction: n, customDataProxyFetch: i }) {
        return this.requestInternal({ body: t, traceparent: r, interactiveTransaction: n, customDataProxyFetch: i });
      }
      async requestBatch(t, { traceparent: r, transaction: n, customDataProxyFetch: i }) {
        let o = n?.kind === "itx" ? n.options : void 0, s = Ot(t, n);
        return (await this.requestInternal({ body: s, customDataProxyFetch: i, interactiveTransaction: o, traceparent: r })).map((l) => (l.extensions && this.propagateResponseExtensions(l.extensions), "errors" in l ? this.convertProtocolErrorsToClientError(l.errors) : l));
      }
      requestInternal({ body: t, traceparent: r, customDataProxyFetch: n, interactiveTransaction: i }) {
        return this.withRetry({ actionGerund: "querying", callback: async ({ logHttpCall: o }) => {
          let s = i ? `${i.payload.endpoint}/graphql` : await this.url("graphql");
          o(s);
          let a = await at(s, { method: "POST", headers: this.headerBuilder.build({ traceparent: r, interactiveTransaction: i }), body: JSON.stringify(t), clientVersion: this.clientVersion }, n);
          a.ok || eo("graphql response status", a.status), await this.handleError(await Ar(a, this.clientVersion));
          let l = await a.json();
          if (l.extensions && this.propagateResponseExtensions(l.extensions), "errors" in l) throw this.convertProtocolErrorsToClientError(l.errors);
          return "batchResult" in l ? l.batchResult : l;
        } });
      }
      async transaction(t, r, n) {
        let i = { start: "starting", commit: "committing", rollback: "rolling back" };
        return this.withRetry({ actionGerund: `${i[t]} transaction`, callback: async ({ logHttpCall: o }) => {
          if (t === "start") {
            let s = JSON.stringify({ max_wait: n.maxWait, timeout: n.timeout, isolation_level: n.isolationLevel }), a = await this.url("transaction/start");
            o(a);
            let l = await at(a, { method: "POST", headers: this.headerBuilder.build({ traceparent: r.traceparent }), body: s, clientVersion: this.clientVersion });
            await this.handleError(await Ar(l, this.clientVersion));
            let u = await l.json(), { extensions: c } = u;
            c && this.propagateResponseExtensions(c);
            let p = u.id, d = u["data-proxy"].endpoint;
            return { id: p, payload: { endpoint: d } };
          } else {
            let s = `${n.payload.endpoint}/${t}`;
            o(s);
            let a = await at(s, { method: "POST", headers: this.headerBuilder.build({ traceparent: r.traceparent }), clientVersion: this.clientVersion });
            await this.handleError(await Ar(a, this.clientVersion));
            let l = await a.json(), { extensions: u } = l;
            u && this.propagateResponseExtensions(u);
            return;
          }
        } });
      }
      extractHostAndApiKey() {
        let t = { clientVersion: this.clientVersion }, r = Object.keys(this.inlineDatasources)[0], n = _t({ inlineDatasources: this.inlineDatasources, overrideDatasources: this.config.overrideDatasources, clientVersion: this.clientVersion, env: this.env }), i;
        try {
          i = new URL(n);
        } catch {
          throw new it(`Error validating datasource \`${r}\`: the URL must start with the protocol \`prisma://\``, t);
        }
        let { protocol: o, host: s, searchParams: a } = i;
        if (o !== "prisma:" && o !== "prisma+postgres:") throw new it(`Error validating datasource \`${r}\`: the URL must start with the protocol \`prisma://\``, t);
        let l = a.get("api_key");
        if (l === null || l.length < 1) throw new it(`Error validating datasource \`${r}\`: the URL must contain a valid API key`, t);
        return [s, l];
      }
      metrics() {
        throw new ot("Metrics are not yet supported for Accelerate", { clientVersion: this.clientVersion });
      }
      async withRetry(t) {
        for (let r = 0; ; r++) {
          let n = (i) => {
            this.logEmitter.emit("info", { message: `Calling ${i} (n=${r})`, timestamp: /* @__PURE__ */ new Date(), target: "" });
          };
          try {
            return await t.callback({ logHttpCall: n });
          } catch (i) {
            if (!(i instanceof se) || !i.isRetryable) throw i;
            if (r >= sl) throw i instanceof Lt ? i.cause : i;
            this.logEmitter.emit("warn", { message: `Attempt ${r + 1}/${sl} failed for ${t.actionGerund}: ${i.message ?? "(unknown)"}`, timestamp: /* @__PURE__ */ new Date(), target: "" });
            let o = await Xa(r);
            this.logEmitter.emit("warn", { message: `Retrying after ${o}ms`, timestamp: /* @__PURE__ */ new Date(), target: "" });
          }
        }
      }
      async handleError(t) {
        if (t instanceof st) throw await this.uploadSchema(), new Lt({ clientVersion: this.clientVersion, cause: t });
        if (t) throw t;
      }
      convertProtocolErrorsToClientError(t) {
        return t.length === 1 ? kt(t[0], this.config.clientVersion, this.config.activeProvider) : new V(JSON.stringify(t), { clientVersion: this.config.clientVersion });
      }
      applyPendingMigrations() {
        throw new Error("Method not implemented.");
      }
    };
    function al(e) {
      if (e?.kind === "itx") return e.options.id;
    }
    var no = k(require("os"));
    var ll = k(require("path"));
    var ro = Symbol("PrismaLibraryEngineCache");
    function rm() {
      let e = globalThis;
      return e[ro] === void 0 && (e[ro] = {}), e[ro];
    }
    function nm(e) {
      let t = rm();
      if (t[e] !== void 0) return t[e];
      let r = ll.default.toNamespacedPath(e), n = { exports: {} }, i = 0;
      return process.platform !== "win32" && (i = no.default.constants.dlopen.RTLD_LAZY | no.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n, r, i), t[e] = n.exports, n.exports;
    }
    var ul = { async loadLibrary(e) {
      let t = await zn(), r = await Ja("library", e);
      try {
        return e.tracingHelper.runInChildSpan({ name: "loadLibrary", internal: true }, () => nm(r));
      } catch (n) {
        let i = li({ e: n, platformInfo: t, id: r });
        throw new R(i, e.clientVersion);
      }
    } };
    var io;
    var cl = { async loadLibrary(e) {
      let { clientVersion: t, adapter: r, engineWasm: n } = e;
      if (r === void 0) throw new R(`The \`adapter\` option for \`PrismaClient\` is required in this context (${An().prettyName})`, t);
      if (n === void 0) throw new R("WASM engine was unexpectedly `undefined`", t);
      io === void 0 && (io = (async () => {
        let o = n.getRuntime(), s = await n.getQueryEngineWasmModule();
        if (s == null) throw new R("The loaded wasm module was unexpectedly `undefined` or `null` once loaded", t);
        let a = { "./query_engine_bg.js": o }, l = new WebAssembly.Instance(s, a);
        return o.__wbg_set_wasm(l.exports), o.QueryEngine;
      })());
      let i = await io;
      return { debugPanic() {
        return Promise.reject("{}");
      }, dmmf() {
        return Promise.resolve("{}");
      }, version() {
        return { commit: "unknown", version: "unknown" };
      }, QueryEngine: i };
    } };
    var im = "P2036";
    var Ae = N("prisma:client:libraryEngine");
    function om(e) {
      return e.item_type === "query" && "query" in e;
    }
    function sm(e) {
      return "level" in e ? e.level === "error" && e.message === "PANIC" : false;
    }
    var pl = [...Gn, "native"];
    var kr = class {
      constructor(t, r) {
        this.name = "LibraryEngine";
        this.libraryLoader = r ?? ul, t.engineWasm !== void 0 && (this.libraryLoader = r ?? cl), this.config = t, this.libraryStarted = false, this.logQueries = t.logQueries ?? false, this.logLevel = t.logLevel ?? "error", this.logEmitter = t.logEmitter, this.datamodel = t.inlineSchema, t.enableDebugLogs && (this.logLevel = "debug");
        let n = Object.keys(t.overrideDatasources)[0], i = t.overrideDatasources[n]?.url;
        n !== void 0 && i !== void 0 && (this.datasourceOverrides = { [n]: i }), this.libraryInstantiationPromise = this.instantiateLibrary();
      }
      async applyPendingMigrations() {
        throw new Error("Cannot call this method from this type of engine instance");
      }
      async transaction(t, r, n) {
        await this.start();
        let i = JSON.stringify(r), o;
        if (t === "start") {
          let a = JSON.stringify({ max_wait: n.maxWait, timeout: n.timeout, isolation_level: n.isolationLevel });
          o = await this.engine?.startTransaction(a, i);
        } else t === "commit" ? o = await this.engine?.commitTransaction(n.id, i) : t === "rollback" && (o = await this.engine?.rollbackTransaction(n.id, i));
        let s = this.parseEngineResponse(o);
        if (am(s)) {
          let a = this.getExternalAdapterError(s);
          throw a ? a.error : new Z(s.message, { code: s.error_code, clientVersion: this.config.clientVersion, meta: s.meta });
        }
        return s;
      }
      async instantiateLibrary() {
        if (Ae("internalSetup"), this.libraryInstantiationPromise) return this.libraryInstantiationPromise;
        Qn(), this.binaryTarget = await this.getCurrentBinaryTarget(), await this.loadEngine(), this.version();
      }
      async getCurrentBinaryTarget() {
        {
          if (this.binaryTarget) return this.binaryTarget;
          let t = await tt();
          if (!pl.includes(t)) throw new R(`Unknown ${ce("PRISMA_QUERY_ENGINE_LIBRARY")} ${ce(J(t))}. Possible binaryTargets: ${$e(pl.join(", "))} or a path to the query engine library.
You may have to run ${$e("prisma generate")} for your changes to take effect.`, this.config.clientVersion);
          return t;
        }
      }
      parseEngineResponse(t) {
        if (!t) throw new V("Response from the Engine was empty", { clientVersion: this.config.clientVersion });
        try {
          return JSON.parse(t);
        } catch {
          throw new V("Unable to JSON.parse response from engine", { clientVersion: this.config.clientVersion });
        }
      }
      async loadEngine() {
        if (!this.engine) {
          this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(this.config), this.QueryEngineConstructor = this.library.QueryEngine);
          try {
            let t = new WeakRef(this), { adapter: r } = this.config;
            r && Ae("Using driver adapter: %O", r), this.engine = new this.QueryEngineConstructor({ datamodel: this.datamodel, env: process.env, logQueries: this.config.logQueries ?? false, ignoreEnvVarErrors: true, datasourceOverrides: this.datasourceOverrides ?? {}, logLevel: this.logLevel, configDir: this.config.cwd, engineProtocol: "json" }, (n) => {
              t.deref()?.logger(n);
            }, r);
          } catch (t) {
            let r = t, n = this.parseInitError(r.message);
            throw typeof n == "string" ? r : new R(n.message, this.config.clientVersion, n.error_code);
          }
        }
      }
      logger(t) {
        let r = this.parseEngineResponse(t);
        if (r) {
          if ("span" in r) {
            this.config.tracingHelper.createEngineSpan(r);
            return;
          }
          r.level = r?.level.toLowerCase() ?? "unknown", om(r) ? this.logEmitter.emit("query", { timestamp: /* @__PURE__ */ new Date(), query: r.query, params: r.params, duration: Number(r.duration_ms), target: r.module_path }) : sm(r) ? this.loggerRustPanic = new le(oo(this, `${r.message}: ${r.reason} in ${r.file}:${r.line}:${r.column}`), this.config.clientVersion) : this.logEmitter.emit(r.level, { timestamp: /* @__PURE__ */ new Date(), message: r.message, target: r.module_path });
        }
      }
      parseInitError(t) {
        try {
          return JSON.parse(t);
        } catch {
        }
        return t;
      }
      parseRequestError(t) {
        try {
          return JSON.parse(t);
        } catch {
        }
        return t;
      }
      onBeforeExit() {
        throw new Error('"beforeExit" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');
      }
      async start() {
        if (await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise) return Ae(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;
        if (this.libraryStarted) return;
        let t = async () => {
          Ae("library starting");
          try {
            let r = { traceparent: this.config.tracingHelper.getTraceParent() };
            await this.engine?.connect(JSON.stringify(r)), this.libraryStarted = true, Ae("library started");
          } catch (r) {
            let n = this.parseInitError(r.message);
            throw typeof n == "string" ? r : new R(n.message, this.config.clientVersion, n.error_code);
          } finally {
            this.libraryStartingPromise = void 0;
          }
        };
        return this.libraryStartingPromise = this.config.tracingHelper.runInChildSpan("connect", t), this.libraryStartingPromise;
      }
      async stop() {
        if (await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise) return Ae("library is already stopping"), this.libraryStoppingPromise;
        if (!this.libraryStarted) return;
        let t = async () => {
          await new Promise((n) => setTimeout(n, 5)), Ae("library stopping");
          let r = { traceparent: this.config.tracingHelper.getTraceParent() };
          await this.engine?.disconnect(JSON.stringify(r)), this.libraryStarted = false, this.libraryStoppingPromise = void 0, Ae("library stopped");
        };
        return this.libraryStoppingPromise = this.config.tracingHelper.runInChildSpan("disconnect", t), this.libraryStoppingPromise;
      }
      version() {
        return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? "unknown";
      }
      debugPanic(t) {
        return this.library?.debugPanic(t);
      }
      async request(t, { traceparent: r, interactiveTransaction: n }) {
        Ae(`sending request, this.libraryStarted: ${this.libraryStarted}`);
        let i = JSON.stringify({ traceparent: r }), o = JSON.stringify(t);
        try {
          await this.start(), this.executingQueryPromise = this.engine?.query(o, i, n?.id), this.lastQuery = o;
          let s = this.parseEngineResponse(await this.executingQueryPromise);
          if (s.errors) throw s.errors.length === 1 ? this.buildQueryError(s.errors[0]) : new V(JSON.stringify(s.errors), { clientVersion: this.config.clientVersion });
          if (this.loggerRustPanic) throw this.loggerRustPanic;
          return { data: s };
        } catch (s) {
          if (s instanceof R) throw s;
          if (s.code === "GenericFailure" && s.message?.startsWith("PANIC:")) throw new le(oo(this, s.message), this.config.clientVersion);
          let a = this.parseRequestError(s.message);
          throw typeof a == "string" ? s : new V(`${a.message}
${a.backtrace}`, { clientVersion: this.config.clientVersion });
        }
      }
      async requestBatch(t, { transaction: r, traceparent: n }) {
        Ae("requestBatch");
        let i = Ot(t, r);
        await this.start(), this.lastQuery = JSON.stringify(i), this.executingQueryPromise = this.engine.query(this.lastQuery, JSON.stringify({ traceparent: n }), al(r));
        let o = await this.executingQueryPromise, s = this.parseEngineResponse(o);
        if (s.errors) throw s.errors.length === 1 ? this.buildQueryError(s.errors[0]) : new V(JSON.stringify(s.errors), { clientVersion: this.config.clientVersion });
        let { batchResult: a, errors: l } = s;
        if (Array.isArray(a)) return a.map((u) => u.errors && u.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(u.errors[0]) : { data: u });
        throw l && l.length === 1 ? new Error(l[0].error) : new Error(JSON.stringify(s));
      }
      buildQueryError(t) {
        if (t.user_facing_error.is_panic) return new le(oo(this, t.user_facing_error.message), this.config.clientVersion);
        let r = this.getExternalAdapterError(t.user_facing_error);
        return r ? r.error : kt(t, this.config.clientVersion, this.config.activeProvider);
      }
      getExternalAdapterError(t) {
        if (t.error_code === im && this.config.adapter) {
          let r = t.meta?.id;
          Kr(typeof r == "number", "Malformed external JS error received from the engine");
          let n = this.config.adapter.errorRegistry.consumeError(r);
          return Kr(n, "External error with reported id was not registered"), n;
        }
      }
      async metrics(t) {
        await this.start();
        let r = await this.engine.metrics(JSON.stringify(t));
        return t.format === "prometheus" ? r : this.parseEngineResponse(r);
      }
    };
    function am(e) {
      return typeof e == "object" && e !== null && e.error_code !== void 0;
    }
    function oo(e, t) {
      return Za({ binaryTarget: e.binaryTarget, title: t, version: e.config.clientVersion, engineVersion: e.versionInfo?.commit, database: e.config.activeProvider, query: e.lastQuery });
    }
    function dl({ copyEngine: e = true }, t) {
      let r;
      try {
        r = _t({ inlineDatasources: t.inlineDatasources, overrideDatasources: t.overrideDatasources, env: { ...t.env, ...process.env }, clientVersion: t.clientVersion });
      } catch {
      }
      let n = !!(r?.startsWith("prisma://") || r?.startsWith("prisma+postgres://"));
      e && n && Xt("recommend--no-engine", "In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)");
      let i = Ht(t.generator), o = n || !e, s = !!t.adapter, a = i === "library", l = i === "binary";
      if (o && s || s && false) {
        let u;
        throw e ? r?.startsWith("prisma://") ? u = ["Prisma Client was configured to use the `adapter` option but the URL was a `prisma://` URL.", "Please either use the `prisma://` URL or remove the `adapter` from the Prisma Client constructor."] : u = ["Prisma Client was configured to use both the `adapter` and Accelerate, please chose one."] : u = ["Prisma Client was configured to use the `adapter` option but `prisma generate` was run with `--no-engine`.", "Please run `prisma generate` without `--no-engine` to be able to use Prisma Client with the adapter."], new X(u.join(`
`), { clientVersion: t.clientVersion });
      }
      if (o) return new Or(t);
      if (a) return new kr(t);
      throw new X("Invalid client engine type, please use `library` or `binary`", { clientVersion: t.clientVersion });
    }
    function _n({ generator: e }) {
      return e?.previewFeatures ?? [];
    }
    var ml = (e) => ({ command: e });
    var fl = (e) => e.strings.reduce((t, r, n) => `${t}@P${n}${r}`);
    function Mt(e) {
      try {
        return gl(e, "fast");
      } catch {
        return gl(e, "slow");
      }
    }
    function gl(e, t) {
      return JSON.stringify(e.map((r) => yl(r, t)));
    }
    function yl(e, t) {
      if (Array.isArray(e)) return e.map((r) => yl(r, t));
      if (typeof e == "bigint") return { prisma__type: "bigint", prisma__value: e.toString() };
      if (Et(e)) return { prisma__type: "date", prisma__value: e.toJSON() };
      if (xe.isDecimal(e)) return { prisma__type: "decimal", prisma__value: e.toJSON() };
      if (Buffer.isBuffer(e)) return { prisma__type: "bytes", prisma__value: e.toString("base64") };
      if (lm(e)) return { prisma__type: "bytes", prisma__value: Buffer.from(e).toString("base64") };
      if (ArrayBuffer.isView(e)) {
        let { buffer: r, byteOffset: n, byteLength: i } = e;
        return { prisma__type: "bytes", prisma__value: Buffer.from(r, n, i).toString("base64") };
      }
      return typeof e == "object" && t === "slow" ? bl(e) : e;
    }
    function lm(e) {
      return e instanceof ArrayBuffer || e instanceof SharedArrayBuffer ? true : typeof e == "object" && e !== null ? e[Symbol.toStringTag] === "ArrayBuffer" || e[Symbol.toStringTag] === "SharedArrayBuffer" : false;
    }
    function bl(e) {
      if (typeof e != "object" || e === null) return e;
      if (typeof e.toJSON == "function") return e.toJSON();
      if (Array.isArray(e)) return e.map(hl);
      let t = {};
      for (let r of Object.keys(e)) t[r] = hl(e[r]);
      return t;
    }
    function hl(e) {
      return typeof e == "bigint" ? e.toString() : bl(e);
    }
    var um = ["$connect", "$disconnect", "$on", "$transaction", "$use", "$extends"];
    var El = um;
    var cm = /^(\s*alter\s)/i;
    var wl = N("prisma:client");
    function so(e, t, r, n) {
      if (!(e !== "postgresql" && e !== "cockroachdb") && r.length > 0 && cm.exec(t)) throw new Error(`Running ALTER using ${n} is not supported
Using the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.

Example:
  await prisma.$executeRawUnsafe(\`ALTER USER prisma WITH PASSWORD '\${password}'\`)

More Information: https://pris.ly/d/execute-raw
`);
    }
    var ao = ({ clientMethod: e, activeProvider: t }) => (r) => {
      let n = "", i;
      if (la(r)) n = r.sql, i = { values: Mt(r.values), __prismaRawParameters__: true };
      else if (Array.isArray(r)) {
        let [o, ...s] = r;
        n = o, i = { values: Mt(s || []), __prismaRawParameters__: true };
      } else switch (t) {
        case "sqlite":
        case "mysql": {
          n = r.sql, i = { values: Mt(r.values), __prismaRawParameters__: true };
          break;
        }
        case "cockroachdb":
        case "postgresql":
        case "postgres": {
          n = r.text, i = { values: Mt(r.values), __prismaRawParameters__: true };
          break;
        }
        case "sqlserver": {
          n = fl(r), i = { values: Mt(r.values), __prismaRawParameters__: true };
          break;
        }
        default:
          throw new Error(`The ${t} provider does not support ${e}`);
      }
      return i?.values ? wl(`prisma.${e}(${n}, ${i.values})`) : wl(`prisma.${e}(${n})`), { query: n, parameters: i };
    };
    var xl = { requestArgsToMiddlewareArgs(e) {
      return [e.strings, ...e.values];
    }, middlewareArgsToRequestArgs(e) {
      let [t, ...r] = e;
      return new oe(t, r);
    } };
    var Pl = { requestArgsToMiddlewareArgs(e) {
      return [e];
    }, middlewareArgsToRequestArgs(e) {
      return e[0];
    } };
    function lo(e) {
      return function(r) {
        let n, i = (o = e) => {
          try {
            return o === void 0 || o?.kind === "itx" ? n ??= vl(r(o)) : vl(r(o));
          } catch (s) {
            return Promise.reject(s);
          }
        };
        return { then(o, s) {
          return i().then(o, s);
        }, catch(o) {
          return i().catch(o);
        }, finally(o) {
          return i().finally(o);
        }, requestTransaction(o) {
          let s = i(o);
          return s.requestTransaction ? s.requestTransaction(o) : s;
        }, [Symbol.toStringTag]: "PrismaPromise" };
      };
    }
    function vl(e) {
      return typeof e.then == "function" ? e : Promise.resolve(e);
    }
    var Tl = { isEnabled() {
      return false;
    }, getTraceParent() {
      return "00-10-10-00";
    }, async createEngineSpan() {
    }, getActiveContext() {
    }, runInChildSpan(e, t) {
      return t();
    } };
    var uo = class {
      isEnabled() {
        return this.getGlobalTracingHelper().isEnabled();
      }
      getTraceParent(t) {
        return this.getGlobalTracingHelper().getTraceParent(t);
      }
      createEngineSpan(t) {
        return this.getGlobalTracingHelper().createEngineSpan(t);
      }
      getActiveContext() {
        return this.getGlobalTracingHelper().getActiveContext();
      }
      runInChildSpan(t, r) {
        return this.getGlobalTracingHelper().runInChildSpan(t, r);
      }
      getGlobalTracingHelper() {
        return globalThis.PRISMA_INSTRUMENTATION?.helper ?? Tl;
      }
    };
    function Rl(e) {
      return e.includes("tracing") ? new uo() : Tl;
    }
    function Cl(e, t = () => {
    }) {
      let r, n = new Promise((i) => r = i);
      return { then(i) {
        return --e === 0 && r(t()), i?.(n);
      } };
    }
    function Sl(e) {
      return typeof e == "string" ? e : e.reduce((t, r) => {
        let n = typeof r == "string" ? r : r.level;
        return n === "query" ? t : t && (r === "info" || t === "info") ? "info" : n;
      }, void 0);
    }
    var Ln = class {
      constructor() {
        this._middlewares = [];
      }
      use(t) {
        this._middlewares.push(t);
      }
      get(t) {
        return this._middlewares[t];
      }
      has(t) {
        return !!this._middlewares[t];
      }
      length() {
        return this._middlewares.length;
      }
    };
    var Ol = k(yi());
    function Nn(e) {
      return typeof e.batchRequestIdx == "number";
    }
    function Al(e) {
      if (e.action !== "findUnique" && e.action !== "findUniqueOrThrow") return;
      let t = [];
      return e.modelName && t.push(e.modelName), e.query.arguments && t.push(co(e.query.arguments)), t.push(co(e.query.selection)), t.join("");
    }
    function co(e) {
      return `(${Object.keys(e).sort().map((r) => {
        let n = e[r];
        return typeof n == "object" && n !== null ? `(${r} ${co(n)})` : r;
      }).join(" ")})`;
    }
    var pm = { aggregate: false, aggregateRaw: false, createMany: true, createManyAndReturn: true, createOne: true, deleteMany: true, deleteOne: true, executeRaw: true, findFirst: false, findFirstOrThrow: false, findMany: false, findRaw: false, findUnique: false, findUniqueOrThrow: false, groupBy: false, queryRaw: false, runCommandRaw: true, updateMany: true, updateOne: true, upsertOne: true };
    function po(e) {
      return pm[e];
    }
    var Fn = class {
      constructor(t) {
        this.options = t;
        this.tickActive = false;
        this.batches = {};
      }
      request(t) {
        let r = this.options.batchBy(t);
        return r ? (this.batches[r] || (this.batches[r] = [], this.tickActive || (this.tickActive = true, process.nextTick(() => {
          this.dispatchBatches(), this.tickActive = false;
        }))), new Promise((n, i) => {
          this.batches[r].push({ request: t, resolve: n, reject: i });
        })) : this.options.singleLoader(t);
      }
      dispatchBatches() {
        for (let t in this.batches) {
          let r = this.batches[t];
          delete this.batches[t], r.length === 1 ? this.options.singleLoader(r[0].request).then((n) => {
            n instanceof Error ? r[0].reject(n) : r[0].resolve(n);
          }).catch((n) => {
            r[0].reject(n);
          }) : (r.sort((n, i) => this.options.batchOrder(n.request, i.request)), this.options.batchLoader(r.map((n) => n.request)).then((n) => {
            if (n instanceof Error) for (let i = 0; i < r.length; i++) r[i].reject(n);
            else for (let i = 0; i < r.length; i++) {
              let o = n[i];
              o instanceof Error ? r[i].reject(o) : r[i].resolve(o);
            }
          }).catch((n) => {
            for (let i = 0; i < r.length; i++) r[i].reject(n);
          }));
        }
      }
      get [Symbol.toStringTag]() {
        return "DataLoader";
      }
    };
    function lt(e, t) {
      if (t === null) return t;
      switch (e) {
        case "bigint":
          return BigInt(t);
        case "bytes": {
          let { buffer: r, byteOffset: n, byteLength: i } = Buffer.from(t, "base64");
          return new Uint8Array(r, n, i);
        }
        case "decimal":
          return new xe(t);
        case "datetime":
        case "date":
          return new Date(t);
        case "time":
          return /* @__PURE__ */ new Date(`1970-01-01T${t}Z`);
        case "bigint-array":
          return t.map((r) => lt("bigint", r));
        case "bytes-array":
          return t.map((r) => lt("bytes", r));
        case "decimal-array":
          return t.map((r) => lt("decimal", r));
        case "datetime-array":
          return t.map((r) => lt("datetime", r));
        case "date-array":
          return t.map((r) => lt("date", r));
        case "time-array":
          return t.map((r) => lt("time", r));
        default:
          return t;
      }
    }
    function Il(e) {
      let t = [], r = dm(e);
      for (let n = 0; n < e.rows.length; n++) {
        let i = e.rows[n], o = { ...r };
        for (let s = 0; s < i.length; s++) o[e.columns[s]] = lt(e.types[s], i[s]);
        t.push(o);
      }
      return t;
    }
    function dm(e) {
      let t = {};
      for (let r = 0; r < e.columns.length; r++) t[e.columns[r]] = null;
      return t;
    }
    var mm = N("prisma:client:request_handler");
    var Mn = class {
      constructor(t, r) {
        this.logEmitter = r, this.client = t, this.dataloader = new Fn({ batchLoader: _a(async ({ requests: n, customDataProxyFetch: i }) => {
          let { transaction: o, otelParentCtx: s } = n[0], a = n.map((p) => p.protocolQuery), l = this.client._tracingHelper.getTraceParent(s), u = n.some((p) => po(p.protocolQuery.action));
          return (await this.client._engine.requestBatch(a, { traceparent: l, transaction: fm(o), containsWrite: u, customDataProxyFetch: i })).map((p, d) => {
            if (p instanceof Error) return p;
            try {
              return this.mapQueryEngineResult(n[d], p);
            } catch (f) {
              return f;
            }
          });
        }), singleLoader: async (n) => {
          let i = n.transaction?.kind === "itx" ? kl(n.transaction) : void 0, o = await this.client._engine.request(n.protocolQuery, { traceparent: this.client._tracingHelper.getTraceParent(), interactiveTransaction: i, isWrite: po(n.protocolQuery.action), customDataProxyFetch: n.customDataProxyFetch });
          return this.mapQueryEngineResult(n, o);
        }, batchBy: (n) => n.transaction?.id ? `transaction-${n.transaction.id}` : Al(n.protocolQuery), batchOrder(n, i) {
          return n.transaction?.kind === "batch" && i.transaction?.kind === "batch" ? n.transaction.index - i.transaction.index : 0;
        } });
      }
      async request(t) {
        try {
          return await this.dataloader.request(t);
        } catch (r) {
          let { clientMethod: n, callsite: i, transaction: o, args: s, modelName: a } = t;
          this.handleAndLogRequestError({ error: r, clientMethod: n, callsite: i, transaction: o, args: s, modelName: a, globalOmit: t.globalOmit });
        }
      }
      mapQueryEngineResult({ dataPath: t, unpacker: r }, n) {
        let i = n?.data, o = this.unpack(i, t, r);
        return process.env.PRISMA_CLIENT_GET_TIME ? { data: o } : o;
      }
      handleAndLogRequestError(t) {
        try {
          this.handleRequestError(t);
        } catch (r) {
          throw this.logEmitter && this.logEmitter.emit("error", { message: r.message, target: t.clientMethod, timestamp: /* @__PURE__ */ new Date() }), r;
        }
      }
      handleRequestError({ error: t, clientMethod: r, callsite: n, transaction: i, args: o, modelName: s, globalOmit: a }) {
        if (mm(t), gm(t, i)) throw t;
        if (t instanceof Z && hm(t)) {
          let u = Dl(t.meta);
          En({ args: o, errors: [u], callsite: n, errorFormat: this.client._errorFormat, originalMethod: r, clientVersion: this.client._clientVersion, globalOmit: a });
        }
        let l = t.message;
        if (n && (l = un({ callsite: n, originalMethod: r, isPanic: t.isPanic, showColors: this.client._errorFormat === "pretty", message: l })), l = this.sanitizeMessage(l), t.code) {
          let u = s ? { modelName: s, ...t.meta } : t.meta;
          throw new Z(l, { code: t.code, clientVersion: this.client._clientVersion, meta: u, batchRequestIdx: t.batchRequestIdx });
        } else {
          if (t.isPanic) throw new le(l, this.client._clientVersion);
          if (t instanceof V) throw new V(l, { clientVersion: this.client._clientVersion, batchRequestIdx: t.batchRequestIdx });
          if (t instanceof R) throw new R(l, this.client._clientVersion);
          if (t instanceof le) throw new le(l, this.client._clientVersion);
        }
        throw t.clientVersion = this.client._clientVersion, t;
      }
      sanitizeMessage(t) {
        return this.client._errorFormat && this.client._errorFormat !== "pretty" ? (0, Ol.default)(t) : t;
      }
      unpack(t, r, n) {
        if (!t || (t.data && (t = t.data), !t)) return t;
        let i = Object.keys(t)[0], o = Object.values(t)[0], s = r.filter((u) => u !== "select" && u !== "include"), a = Ui(o, s), l = i === "queryRaw" ? Il(a) : yt(a);
        return n ? n(l) : l;
      }
      get [Symbol.toStringTag]() {
        return "RequestHandler";
      }
    };
    function fm(e) {
      if (e) {
        if (e.kind === "batch") return { kind: "batch", options: { isolationLevel: e.isolationLevel } };
        if (e.kind === "itx") return { kind: "itx", options: kl(e) };
        Le(e, "Unknown transaction kind");
      }
    }
    function kl(e) {
      return { id: e.id, payload: e.payload };
    }
    function gm(e, t) {
      return Nn(e) && t?.kind === "batch" && e.batchRequestIdx !== t.index;
    }
    function hm(e) {
      return e.code === "P2009" || e.code === "P2012";
    }
    function Dl(e) {
      if (e.kind === "Union") return { kind: "Union", errors: e.errors.map(Dl) };
      if (Array.isArray(e.selectionPath)) {
        let [, ...t] = e.selectionPath;
        return { ...e, selectionPath: t };
      }
      return e;
    }
    var _l = "6.0.1";
    var Ll = _l;
    var ql = k(Si());
    var L = class extends Error {
      constructor(t) {
        super(t + `
Read more at https://pris.ly/d/client-constructor`), this.name = "PrismaClientConstructorValidationError";
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientConstructorValidationError";
      }
    };
    x(L, "PrismaClientConstructorValidationError");
    var Nl = ["datasources", "datasourceUrl", "errorFormat", "adapter", "log", "transactionOptions", "omit", "__internal"];
    var Fl = ["pretty", "colorless", "minimal"];
    var Ml = ["info", "query", "warn", "error"];
    var bm = { datasources: (e, { datasourceNames: t }) => {
      if (e) {
        if (typeof e != "object" || Array.isArray(e)) throw new L(`Invalid value ${JSON.stringify(e)} for "datasources" provided to PrismaClient constructor`);
        for (let [r, n] of Object.entries(e)) {
          if (!t.includes(r)) {
            let i = $t(r, t) || ` Available datasources: ${t.join(", ")}`;
            throw new L(`Unknown datasource ${r} provided to PrismaClient constructor.${i}`);
          }
          if (typeof n != "object" || Array.isArray(n)) throw new L(`Invalid value ${JSON.stringify(e)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
          if (n && typeof n == "object") for (let [i, o] of Object.entries(n)) {
            if (i !== "url") throw new L(`Invalid value ${JSON.stringify(e)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
            if (typeof o != "string") throw new L(`Invalid value ${JSON.stringify(o)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
          }
        }
      }
    }, adapter: (e, t) => {
      if (e === null) return;
      if (e === void 0) throw new L('"adapter" property must not be undefined, use null to conditionally disable driver adapters.');
      if (!_n(t).includes("driverAdapters")) throw new L('"adapter" property can only be provided to PrismaClient constructor when "driverAdapters" preview feature is enabled.');
      if (Ht() === "binary") throw new L('Cannot use a driver adapter with the "binary" Query Engine. Please use the "library" Query Engine.');
    }, datasourceUrl: (e) => {
      if (typeof e < "u" && typeof e != "string") throw new L(`Invalid value ${JSON.stringify(e)} for "datasourceUrl" provided to PrismaClient constructor.
Expected string or undefined.`);
    }, errorFormat: (e) => {
      if (e) {
        if (typeof e != "string") throw new L(`Invalid value ${JSON.stringify(e)} for "errorFormat" provided to PrismaClient constructor.`);
        if (!Fl.includes(e)) {
          let t = $t(e, Fl);
          throw new L(`Invalid errorFormat ${e} provided to PrismaClient constructor.${t}`);
        }
      }
    }, log: (e) => {
      if (!e) return;
      if (!Array.isArray(e)) throw new L(`Invalid value ${JSON.stringify(e)} for "log" provided to PrismaClient constructor.`);
      function t(r) {
        if (typeof r == "string" && !Ml.includes(r)) {
          let n = $t(r, Ml);
          throw new L(`Invalid log level "${r}" provided to PrismaClient constructor.${n}`);
        }
      }
      for (let r of e) {
        t(r);
        let n = { level: t, emit: (i) => {
          let o = ["stdout", "event"];
          if (!o.includes(i)) {
            let s = $t(i, o);
            throw new L(`Invalid value ${JSON.stringify(i)} for "emit" in logLevel provided to PrismaClient constructor.${s}`);
          }
        } };
        if (r && typeof r == "object") for (let [i, o] of Object.entries(r)) if (n[i]) n[i](o);
        else throw new L(`Invalid property ${i} for "log" provided to PrismaClient constructor`);
      }
    }, transactionOptions: (e) => {
      if (!e) return;
      let t = e.maxWait;
      if (t != null && t <= 0) throw new L(`Invalid value ${t} for maxWait in "transactionOptions" provided to PrismaClient constructor. maxWait needs to be greater than 0`);
      let r = e.timeout;
      if (r != null && r <= 0) throw new L(`Invalid value ${r} for timeout in "transactionOptions" provided to PrismaClient constructor. timeout needs to be greater than 0`);
    }, omit: (e, t) => {
      if (typeof e != "object") throw new L('"omit" option is expected to be an object.');
      if (e === null) throw new L('"omit" option can not be `null`');
      let r = [];
      for (let [n, i] of Object.entries(e)) {
        let o = wm(n, t.runtimeDataModel);
        if (!o) {
          r.push({ kind: "UnknownModel", modelKey: n });
          continue;
        }
        for (let [s, a] of Object.entries(i)) {
          let l = o.fields.find((u) => u.name === s);
          if (!l) {
            r.push({ kind: "UnknownField", modelKey: n, fieldName: s });
            continue;
          }
          if (l.relationName) {
            r.push({ kind: "RelationInOmit", modelKey: n, fieldName: s });
            continue;
          }
          typeof a != "boolean" && r.push({ kind: "InvalidFieldValue", modelKey: n, fieldName: s });
        }
      }
      if (r.length > 0) throw new L(xm(e, r));
    }, __internal: (e) => {
      if (!e) return;
      let t = ["debug", "engine", "configOverride"];
      if (typeof e != "object") throw new L(`Invalid value ${JSON.stringify(e)} for "__internal" to PrismaClient constructor`);
      for (let [r] of Object.entries(e)) if (!t.includes(r)) {
        let n = $t(r, t);
        throw new L(`Invalid property ${JSON.stringify(r)} for "__internal" provided to PrismaClient constructor.${n}`);
      }
    } };
    function jl(e, t) {
      for (let [r, n] of Object.entries(e)) {
        if (!Nl.includes(r)) {
          let i = $t(r, Nl);
          throw new L(`Unknown property ${r} provided to PrismaClient constructor.${i}`);
        }
        bm[r](n, t);
      }
      if (e.datasourceUrl && e.datasources) throw new L('Can not use "datasourceUrl" and "datasources" options at the same time. Pick one of them');
    }
    function $t(e, t) {
      if (t.length === 0 || typeof e != "string") return "";
      let r = Em(e, t);
      return r ? ` Did you mean "${r}"?` : "";
    }
    function Em(e, t) {
      if (t.length === 0) return null;
      let r = t.map((i) => ({ value: i, distance: (0, ql.default)(e, i) }));
      r.sort((i, o) => i.distance < o.distance ? -1 : 1);
      let n = r[0];
      return n.distance < 3 ? n.value : null;
    }
    function wm(e, t) {
      return $l(t.models, e) ?? $l(t.types, e);
    }
    function $l(e, t) {
      let r = Object.keys(e).find((n) => bt(n) === t);
      if (r) return e[r];
    }
    function xm(e, t) {
      let r = Ct(e);
      for (let o of t) switch (o.kind) {
        case "UnknownModel":
          r.arguments.getField(o.modelKey)?.markAsError(), r.addErrorMessage(() => `Unknown model name: ${o.modelKey}.`);
          break;
        case "UnknownField":
          r.arguments.getDeepField([o.modelKey, o.fieldName])?.markAsError(), r.addErrorMessage(() => `Model "${o.modelKey}" does not have a field named "${o.fieldName}".`);
          break;
        case "RelationInOmit":
          r.arguments.getDeepField([o.modelKey, o.fieldName])?.markAsError(), r.addErrorMessage(() => 'Relations are already excluded by default and can not be specified in "omit".');
          break;
        case "InvalidFieldValue":
          r.arguments.getDeepFieldValue([o.modelKey, o.fieldName])?.markAsError(), r.addErrorMessage(() => "Omit field option value must be a boolean.");
          break;
      }
      let { message: n, args: i } = bn(r, "colorless");
      return `Error validating "omit" option:

${i}

${n}`;
    }
    function Vl(e) {
      return e.length === 0 ? Promise.resolve([]) : new Promise((t, r) => {
        let n = new Array(e.length), i = null, o = false, s = 0, a = () => {
          o || (s++, s === e.length && (o = true, i ? r(i) : t(n)));
        }, l = (u) => {
          o || (o = true, r(u));
        };
        for (let u = 0; u < e.length; u++) e[u].then((c) => {
          n[u] = c, a();
        }, (c) => {
          if (!Nn(c)) {
            l(c);
            return;
          }
          c.batchRequestIdx === u ? l(c) : (i || (i = c), a());
        });
      });
    }
    var Xe = N("prisma:client");
    typeof globalThis == "object" && (globalThis.NODE_CLIENT = true);
    var Pm = { requestArgsToMiddlewareArgs: (e) => e, middlewareArgsToRequestArgs: (e) => e };
    var vm = Symbol.for("prisma.client.transaction.id");
    var Tm = { id: 0, nextId() {
      return ++this.id;
    } };
    function Wl(e) {
      class t {
        constructor(n) {
          this._originalClient = this;
          this._middlewares = new Ln();
          this._createPrismaPromise = lo();
          this.$extends = Ra;
          e = n?.__internal?.configOverride?.(e) ?? e, $a(e), n && jl(n, e);
          let i = new Gl.EventEmitter().on("error", () => {
          });
          this._extensions = St.empty(), this._previewFeatures = _n(e), this._clientVersion = e.clientVersion ?? Ll, this._activeProvider = e.activeProvider, this._globalOmit = n?.omit, this._tracingHelper = Rl(this._previewFeatures);
          let o = { rootEnvPath: e.relativeEnvPaths.rootEnvPath && Dr.default.resolve(e.dirname, e.relativeEnvPaths.rootEnvPath), schemaEnvPath: e.relativeEnvPaths.schemaEnvPath && Dr.default.resolve(e.dirname, e.relativeEnvPaths.schemaEnvPath) }, s;
          if (n?.adapter) {
            s = $i(n.adapter);
            let l = e.activeProvider === "postgresql" ? "postgres" : e.activeProvider;
            if (s.provider !== l) throw new R(`The Driver Adapter \`${s.adapterName}\`, based on \`${s.provider}\`, is not compatible with the provider \`${l}\` specified in the Prisma schema.`, this._clientVersion);
            if (n.datasources || n.datasourceUrl !== void 0) throw new R("Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.", this._clientVersion);
          }
          let a = !s && Wt(o, { conflictCheck: "none" }) || e.injectableEdgeEnv?.();
          try {
            let l = n ?? {}, u = l.__internal ?? {}, c = u.debug === true;
            c && N.enable("prisma:client");
            let p = Dr.default.resolve(e.dirname, e.relativePath);
            Jl.default.existsSync(p) || (p = e.dirname), Xe("dirname", e.dirname), Xe("relativePath", e.relativePath), Xe("cwd", p);
            let d = u.engine || {};
            if (l.errorFormat ? this._errorFormat = l.errorFormat : process.env.NODE_ENV === "production" ? this._errorFormat = "minimal" : process.env.NO_COLOR ? this._errorFormat = "colorless" : this._errorFormat = "colorless", this._runtimeDataModel = e.runtimeDataModel, this._engineConfig = { cwd: p, dirname: e.dirname, enableDebugLogs: c, allowTriggerPanic: d.allowTriggerPanic, datamodelPath: Dr.default.join(e.dirname, e.filename ?? "schema.prisma"), prismaPath: d.binaryPath ?? void 0, engineEndpoint: d.endpoint, generator: e.generator, showColors: this._errorFormat === "pretty", logLevel: l.log && Sl(l.log), logQueries: l.log && !!(typeof l.log == "string" ? l.log === "query" : l.log.find((f) => typeof f == "string" ? f === "query" : f.level === "query")), env: a?.parsed ?? {}, flags: [], engineWasm: e.engineWasm, clientVersion: e.clientVersion, engineVersion: e.engineVersion, previewFeatures: this._previewFeatures, activeProvider: e.activeProvider, inlineSchema: e.inlineSchema, overrideDatasources: qa(l, e.datasourceNames), inlineDatasources: e.inlineDatasources, inlineSchemaHash: e.inlineSchemaHash, tracingHelper: this._tracingHelper, transactionOptions: { maxWait: l.transactionOptions?.maxWait ?? 2e3, timeout: l.transactionOptions?.timeout ?? 5e3, isolationLevel: l.transactionOptions?.isolationLevel }, logEmitter: i, isBundled: e.isBundled, adapter: s }, this._accelerateEngineConfig = { ...this._engineConfig, accelerateUtils: { resolveDatasourceUrl: _t, getBatchRequestPayload: Ot, prismaGraphQLToJSError: kt, PrismaClientUnknownRequestError: V, PrismaClientInitializationError: R, PrismaClientKnownRequestError: Z, debug: N("prisma:client:accelerateEngine"), engineVersion: Ul.version, clientVersion: e.clientVersion } }, Xe("clientVersion", e.clientVersion), this._engine = dl(e, this._engineConfig), this._requestHandler = new Mn(this, i), l.log) for (let f of l.log) {
              let g = typeof f == "string" ? f : f.emit === "stdout" ? f.level : null;
              g && this.$on(g, (h) => {
                Zt.log(`${Zt.tags[g] ?? ""}`, h.message || h.query);
              });
            }
            this._metrics = new At(this._engine);
          } catch (l) {
            throw l.clientVersion = this._clientVersion, l;
          }
          return this._appliedParent = gr(this);
        }
        get [Symbol.toStringTag]() {
          return "PrismaClient";
        }
        $use(n) {
          this._middlewares.use(n);
        }
        $on(n, i) {
          n === "beforeExit" ? this._engine.onBeforeExit(i) : n && this._engineConfig.logEmitter.on(n, i);
        }
        $connect() {
          try {
            return this._engine.start();
          } catch (n) {
            throw n.clientVersion = this._clientVersion, n;
          }
        }
        async $disconnect() {
          try {
            await this._engine.stop();
          } catch (n) {
            throw n.clientVersion = this._clientVersion, n;
          } finally {
            Ro();
          }
        }
        $executeRawInternal(n, i, o, s) {
          let a = this._activeProvider;
          return this._request({ action: "executeRaw", args: o, transaction: n, clientMethod: i, argsMapper: ao({ clientMethod: i, activeProvider: a }), callsite: ze(this._errorFormat), dataPath: [], middlewareArgsMapper: s });
        }
        $executeRaw(n, ...i) {
          return this._createPrismaPromise((o) => {
            if (n.raw !== void 0 || n.sql !== void 0) {
              let [s, a] = Bl(n, i);
              return so(this._activeProvider, s.text, s.values, Array.isArray(n) ? "prisma.$executeRaw`<SQL>`" : "prisma.$executeRaw(sql`<SQL>`)"), this.$executeRawInternal(o, "$executeRaw", s, a);
            }
            throw new X("`$executeRaw` is a tag function, please use it like the following:\n```\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\n```\n\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\n", { clientVersion: this._clientVersion });
          });
        }
        $executeRawUnsafe(n, ...i) {
          return this._createPrismaPromise((o) => (so(this._activeProvider, n, i, "prisma.$executeRawUnsafe(<SQL>, [...values])"), this.$executeRawInternal(o, "$executeRawUnsafe", [n, ...i])));
        }
        $runCommandRaw(n) {
          if (e.activeProvider !== "mongodb") throw new X(`The ${e.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, { clientVersion: this._clientVersion });
          return this._createPrismaPromise((i) => this._request({ args: n, clientMethod: "$runCommandRaw", dataPath: [], action: "runCommandRaw", argsMapper: ml, callsite: ze(this._errorFormat), transaction: i }));
        }
        async $queryRawInternal(n, i, o, s) {
          let a = this._activeProvider;
          return this._request({ action: "queryRaw", args: o, transaction: n, clientMethod: i, argsMapper: ao({ clientMethod: i, activeProvider: a }), callsite: ze(this._errorFormat), dataPath: [], middlewareArgsMapper: s });
        }
        $queryRaw(n, ...i) {
          return this._createPrismaPromise((o) => {
            if (n.raw !== void 0 || n.sql !== void 0) return this.$queryRawInternal(o, "$queryRaw", ...Bl(n, i));
            throw new X("`$queryRaw` is a tag function, please use it like the following:\n```\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\n```\n\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\n", { clientVersion: this._clientVersion });
          });
        }
        $queryRawTyped(n) {
          return this._createPrismaPromise((i) => {
            if (!this._hasPreviewFlag("typedSql")) throw new X("`typedSql` preview feature must be enabled in order to access $queryRawTyped API", { clientVersion: this._clientVersion });
            return this.$queryRawInternal(i, "$queryRawTyped", n);
          });
        }
        $queryRawUnsafe(n, ...i) {
          return this._createPrismaPromise((o) => this.$queryRawInternal(o, "$queryRawUnsafe", [n, ...i]));
        }
        _transactionWithArray({ promises: n, options: i }) {
          let o = Tm.nextId(), s = Cl(n.length), a = n.map((l, u) => {
            if (l?.[Symbol.toStringTag] !== "PrismaPromise") throw new Error("All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.");
            let c = i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel, p = { kind: "batch", id: o, index: u, isolationLevel: c, lock: s };
            return l.requestTransaction?.(p) ?? l;
          });
          return Vl(a);
        }
        async _transactionWithCallback({ callback: n, options: i }) {
          let o = { traceparent: this._tracingHelper.getTraceParent() }, s = { maxWait: i?.maxWait ?? this._engineConfig.transactionOptions.maxWait, timeout: i?.timeout ?? this._engineConfig.transactionOptions.timeout, isolationLevel: i?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel }, a = await this._engine.transaction("start", o, s), l;
          try {
            let u = { kind: "itx", ...a };
            l = await n(this._createItxClient(u)), await this._engine.transaction("commit", o, a);
          } catch (u) {
            throw await this._engine.transaction("rollback", o, a).catch(() => {
            }), u;
          }
          return l;
        }
        _createItxClient(n) {
          return gr(Se(Ta(this), [re("_appliedParent", () => this._appliedParent._createItxClient(n)), re("_createPrismaPromise", () => lo(n)), re(vm, () => n.id), It(El)]));
        }
        $transaction(n, i) {
          let o;
          typeof n == "function" ? this._engineConfig.adapter?.adapterName === "@prisma/adapter-d1" ? o = () => {
            throw new Error("Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.");
          } : o = () => this._transactionWithCallback({ callback: n, options: i }) : o = () => this._transactionWithArray({ promises: n, options: i });
          let s = { name: "transaction", attributes: { method: "$transaction" } };
          return this._tracingHelper.runInChildSpan(s, o);
        }
        _request(n) {
          n.otelParentCtx = this._tracingHelper.getActiveContext();
          let i = n.middlewareArgsMapper ?? Pm, o = { args: i.requestArgsToMiddlewareArgs(n.args), dataPath: n.dataPath, runInTransaction: !!n.transaction, action: n.action, model: n.model }, s = { middleware: { name: "middleware", middleware: true, attributes: { method: "$use" }, active: false }, operation: { name: "operation", attributes: { method: o.action, model: o.model, name: o.model ? `${o.model}.${o.action}` : o.action } } }, a = -1, l = async (u) => {
            let c = this._middlewares.get(++a);
            if (c) return this._tracingHelper.runInChildSpan(s.middleware, (O) => c(u, (T) => (O?.end(), l(T))));
            let { runInTransaction: p, args: d, ...f } = u, g = { ...n, ...f };
            d && (g.args = i.middlewareArgsToRequestArgs(d)), n.transaction !== void 0 && p === false && delete g.transaction;
            let h = await Da(this, g);
            return g.model ? Aa({ result: h, modelName: g.model, args: g.args, extensions: this._extensions, runtimeDataModel: this._runtimeDataModel, globalOmit: this._globalOmit }) : h;
          };
          return this._tracingHelper.runInChildSpan(s.operation, () => new Ql.AsyncResource("prisma-client-request").runInAsyncScope(() => l(o)));
        }
        async _executeRequest({ args: n, clientMethod: i, dataPath: o, callsite: s, action: a, model: l, argsMapper: u, transaction: c, unpacker: p, otelParentCtx: d, customDataProxyFetch: f }) {
          try {
            n = u ? u(n) : n;
            let g = { name: "serialize" }, h = this._tracingHelper.runInChildSpan(g, () => Pn({ modelName: l, runtimeDataModel: this._runtimeDataModel, action: a, args: n, clientMethod: i, callsite: s, extensions: this._extensions, errorFormat: this._errorFormat, clientVersion: this._clientVersion, previewFeatures: this._previewFeatures, globalOmit: this._globalOmit }));
            return N.enabled("prisma:client") && (Xe("Prisma Client call:"), Xe(`prisma.${i}(${ma(n)})`), Xe("Generated request:"), Xe(JSON.stringify(h, null, 2) + `
`)), c?.kind === "batch" && await c.lock, this._requestHandler.request({ protocolQuery: h, modelName: l, action: a, clientMethod: i, dataPath: o, callsite: s, args: n, extensions: this._extensions, transaction: c, unpacker: p, otelParentCtx: d, otelChildCtx: this._tracingHelper.getActiveContext(), globalOmit: this._globalOmit, customDataProxyFetch: f });
          } catch (g) {
            throw g.clientVersion = this._clientVersion, g;
          }
        }
        get $metrics() {
          if (!this._hasPreviewFlag("metrics")) throw new X("`metrics` preview feature must be enabled in order to access metrics API", { clientVersion: this._clientVersion });
          return this._metrics;
        }
        _hasPreviewFlag(n) {
          return !!this._engineConfig.previewFeatures?.includes(n);
        }
        $applyPendingMigrations() {
          return this._engine.applyPendingMigrations();
        }
      }
      return t;
    }
    function Bl(e, t) {
      return Rm(e) ? [new oe(e, t), xl] : [e, Pl];
    }
    function Rm(e) {
      return Array.isArray(e) && Array.isArray(e.raw);
    }
    var Cm = /* @__PURE__ */ new Set(["toJSON", "$$typeof", "asymmetricMatch", Symbol.iterator, Symbol.toStringTag, Symbol.isConcatSpreadable, Symbol.toPrimitive]);
    function Hl(e) {
      return new Proxy(e, { get(t, r) {
        if (r in t) return t[r];
        if (!Cm.has(r)) throw new TypeError(`Invalid enum value: ${String(r)}`);
      } });
    }
    function Kl(e) {
      Wt(e, { conflictCheck: "warn" });
    }
  }
});

// node_modules/.prisma/client/index.js
var require_client = __commonJS({
  "node_modules/.prisma/client/index.js"(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    var {
      PrismaClientKnownRequestError: PrismaClientKnownRequestError2,
      PrismaClientUnknownRequestError: PrismaClientUnknownRequestError2,
      PrismaClientRustPanicError: PrismaClientRustPanicError2,
      PrismaClientInitializationError: PrismaClientInitializationError2,
      PrismaClientValidationError: PrismaClientValidationError2,
      getPrismaClient: getPrismaClient2,
      sqltag: sqltag2,
      empty: empty2,
      join: join3,
      raw: raw2,
      skip: skip2,
      Decimal: Decimal2,
      Debug: Debug2,
      objectEnumValues: objectEnumValues2,
      makeStrictEnum: makeStrictEnum2,
      Extensions: Extensions2,
      warnOnce: warnOnce2,
      defineDmmfProperty: defineDmmfProperty2,
      Public: Public2,
      getRuntime: getRuntime2
    } = require_library();
    var Prisma2 = {};
    exports2.Prisma = Prisma2;
    exports2.$Enums = {};
    Prisma2.prismaVersion = {
      client: "6.0.1",
      engine: "5dbef10bdbfb579e07d35cc85fb1518d357cb99e"
    };
    Prisma2.PrismaClientKnownRequestError = PrismaClientKnownRequestError2;
    Prisma2.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError2;
    Prisma2.PrismaClientRustPanicError = PrismaClientRustPanicError2;
    Prisma2.PrismaClientInitializationError = PrismaClientInitializationError2;
    Prisma2.PrismaClientValidationError = PrismaClientValidationError2;
    Prisma2.Decimal = Decimal2;
    Prisma2.sql = sqltag2;
    Prisma2.empty = empty2;
    Prisma2.join = join3;
    Prisma2.raw = raw2;
    Prisma2.validator = Public2.validator;
    Prisma2.getExtensionContext = Extensions2.getExtensionContext;
    Prisma2.defineExtension = Extensions2.defineExtension;
    Prisma2.DbNull = objectEnumValues2.instances.DbNull;
    Prisma2.JsonNull = objectEnumValues2.instances.JsonNull;
    Prisma2.AnyNull = objectEnumValues2.instances.AnyNull;
    Prisma2.NullTypes = {
      DbNull: objectEnumValues2.classes.DbNull,
      JsonNull: objectEnumValues2.classes.JsonNull,
      AnyNull: objectEnumValues2.classes.AnyNull
    };
    var path2 = require("path");
    exports2.Prisma.TransactionIsolationLevel = makeStrictEnum2({
      ReadUncommitted: "ReadUncommitted",
      ReadCommitted: "ReadCommitted",
      RepeatableRead: "RepeatableRead",
      Serializable: "Serializable"
    });
    exports2.Prisma.EntityScalarFieldEnum = {
      id: "id",
      name: "name",
      includeInOverall: "includeInOverall"
    };
    exports2.Prisma.InstitutionScalarFieldEnum = {
      id: "id",
      name: "name"
    };
    exports2.Prisma.CategoryScalarFieldEnum = {
      id: "id",
      name: "name",
      categoryType: "categoryType"
    };
    exports2.Prisma.VendorScalarFieldEnum = {
      id: "id",
      name: "name",
      image: "image"
    };
    exports2.Prisma.AccountScalarFieldEnum = {
      id: "id",
      externalId: "externalId",
      name: "name",
      number: "number",
      institutionId: "institutionId",
      entityId: "entityId",
      accountType: "accountType"
    };
    exports2.Prisma.RefreshLogScalarFieldEnum = {
      id: "id",
      refreshedAt: "refreshedAt",
      accountId: "accountId"
    };
    exports2.Prisma.BalanceScalarFieldEnum = {
      id: "id",
      addedAt: "addedAt",
      balance: "balance",
      accountId: "accountId"
    };
    exports2.Prisma.TransactionScalarFieldEnum = {
      id: "id",
      accountId: "accountId",
      date: "date",
      addedAt: "addedAt",
      categoryId: "categoryId",
      description: "description",
      amount: "amount",
      availableBalance: "availableBalance",
      propertyId: "propertyId",
      pending: "pending",
      vendorId: "vendorId"
    };
    exports2.Prisma.BudgetScalarFieldEnum = {
      id: "id",
      entityId: "entityId",
      categoryId: "categoryId"
    };
    exports2.Prisma.BudgetAmountScalarFieldEnum = {
      id: "id",
      amount: "amount",
      startingAt: "startingAt",
      budgetId: "budgetId"
    };
    exports2.Prisma.PropertyScalarFieldEnum = {
      id: "id",
      externalId: "externalId",
      entityId: "entityId",
      address: "address",
      city: "city",
      state: "state",
      zip: "zip",
      propertyType: "propertyType",
      propertyPurpose: "propertyPurpose",
      latitude: "latitude",
      longitude: "longitude",
      acquired: "acquired",
      dispositioned: "dispositioned"
    };
    exports2.Prisma.MortgageScalarFieldEnum = {
      id: "id",
      propertyId: "propertyId",
      payment: "payment",
      accountId: "accountId",
      startingBalance: "startingBalance"
    };
    exports2.Prisma.ValueScalarFieldEnum = {
      id: "id",
      addedAt: "addedAt",
      propertyId: "propertyId",
      value: "value"
    };
    exports2.Prisma.SortOrder = {
      asc: "asc",
      desc: "desc"
    };
    exports2.Prisma.QueryMode = {
      default: "default",
      insensitive: "insensitive"
    };
    exports2.Prisma.NullsOrder = {
      first: "first",
      last: "last"
    };
    exports2.AccountType = exports2.$Enums.AccountType = {
      Checking: "Checking",
      Savings: "Savings",
      Retirement: "Retirement",
      Credit: "Credit",
      Mortgage: "Mortgage"
    };
    exports2.PropertyType = exports2.$Enums.PropertyType = {
      SingleFamily: "SingleFamily",
      Duplex: "Duplex"
    };
    exports2.PropertyPurpose = exports2.$Enums.PropertyPurpose = {
      Rental: "Rental",
      LandContract: "LandContract",
      Lender: "Lender",
      Wholesale: "Wholesale"
    };
    exports2.CategoryType = exports2.$Enums.CategoryType = {
      Expense: "Expense",
      Income: "Income"
    };
    exports2.Prisma.ModelName = {
      Entity: "Entity",
      Institution: "Institution",
      Category: "Category",
      Vendor: "Vendor",
      Account: "Account",
      RefreshLog: "RefreshLog",
      Balance: "Balance",
      Transaction: "Transaction",
      Budget: "Budget",
      BudgetAmount: "BudgetAmount",
      Property: "Property",
      Mortgage: "Mortgage",
      Value: "Value"
    };
    var config2 = {
      "generator": {
        "name": "client",
        "provider": {
          "fromEnvVar": null,
          "value": "prisma-client-js"
        },
        "output": {
          "value": "/Users/jordan/repos/dashboard/server/node_modules/@prisma/client",
          "fromEnvVar": null
        },
        "config": {
          "engineType": "library"
        },
        "binaryTargets": [
          {
            "fromEnvVar": null,
            "value": "darwin-arm64",
            "native": true
          }
        ],
        "previewFeatures": [],
        "sourceFilePath": "/Users/jordan/repos/dashboard/server/prisma/schema.prisma"
      },
      "relativeEnvPaths": {
        "rootEnvPath": null,
        "schemaEnvPath": "../../../.env"
      },
      "relativePath": "../../../prisma",
      "clientVersion": "6.0.1",
      "engineVersion": "5dbef10bdbfb579e07d35cc85fb1518d357cb99e",
      "datasourceNames": [
        "db"
      ],
      "activeProvider": "postgresql",
      "postinstall": false,
      "inlineDatasources": {
        "db": {
          "url": {
            "fromEnvVar": "DATABASE_URL",
            "value": null
          }
        }
      },
      "inlineSchema": '// Profit margin for each propert and active\n// Current quarter and rolling 4 quarters\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\nenum AccountType {\n  Checking\n  Savings\n  Retirement\n  Credit\n  Mortgage\n}\n\nenum PropertyType {\n  SingleFamily\n  Duplex\n}\n\nenum PropertyPurpose {\n  Rental\n  LandContract\n  Lender\n  Wholesale\n}\n\nenum CategoryType {\n  Expense\n  Income\n}\n\nmodel Entity {\n  id               String     @id @default(uuid())\n  name             String     @unique\n  Account          Account[]\n  Property         Property[]\n  Budget           Budget[]\n  includeInOverall Boolean    @default(false)\n}\n\nmodel Institution {\n  id      String    @id @default(uuid())\n  name    String    @unique\n  Account Account[]\n}\n\nmodel Category {\n  id           String        @id @default(uuid())\n  name         String        @unique\n  categoryType CategoryType  @default(Expense)\n  Transaction  Transaction[]\n  Budget       Budget[]\n}\n\nmodel Vendor {\n  id          String        @id @default(uuid())\n  name        String\n  image       Bytes?\n  Transaction Transaction[]\n}\n\nmodel Account {\n  id            String        @id @default(uuid())\n  externalId    String?\n  name          String\n  number        String\n  institution   Institution   @relation(fields: [institutionId], references: [id])\n  institutionId String\n  RefreshLog    RefreshLog[]\n  Transaction   Transaction[]\n  entity        Entity        @relation(fields: [entityId], references: [id])\n  entityId      String\n  Balance       Balance[]\n  accountType   AccountType\n  Mortgage      Mortgage[]\n\n  @@unique([institutionId, entityId, name])\n}\n\nmodel RefreshLog {\n  id          String   @id @default(uuid())\n  refreshedAt DateTime @default(now()) @db.Timestamptz\n  account     Account  @relation(fields: [accountId], references: [id])\n  accountId   String\n}\n\nmodel Balance {\n  id        String   @id @default(uuid())\n  account   Account  @relation(fields: [accountId], references: [id])\n  addedAt   DateTime @default(now()) @db.Timestamptz\n  balance   Decimal\n  accountId String\n}\n\nmodel Transaction {\n  id               String    @id @default(uuid())\n  account          Account   @relation(fields: [accountId], references: [id])\n  accountId        String\n  date             DateTime  @db.Date\n  addedAt          DateTime  @default(now()) @db.Timestamptz\n  category         Category? @relation(fields: [categoryId], references: [id])\n  categoryId       String?\n  description      String\n  amount           Decimal\n  availableBalance Decimal\n  property         Property? @relation(fields: [propertyId], references: [id])\n  propertyId       String?\n  pending          Boolean   @default(false)\n  vendor           Vendor?   @relation(fields: [vendorId], references: [id])\n  vendorId         String?\n\n  @@unique([accountId, date, description, amount, availableBalance])\n}\n\nmodel Budget {\n  id       String @id @default(uuid())\n  entity   Entity @relation(fields: [entityId], references: [id])\n  entityId String\n\n  category   Category @relation(fields: [categoryId], references: [id])\n  categoryId String\n\n  BudgetAmount BudgetAmount[]\n}\n\nmodel BudgetAmount {\n  id         String    @id @default(uuid())\n  amount     Decimal\n  startingAt DateTime? @db.Date\n\n  budget Budget @relation(fields: [budgetId], references: [id])\n\n  budgetId String\n}\n\nmodel Property {\n  id              String          @id @default(uuid())\n  externalId      String?         @unique\n  entity          Entity          @relation(fields: [entityId], references: [id])\n  entityId        String\n  address         String\n  city            String\n  state           String\n  zip             String\n  propertyType    PropertyType\n  propertyPurpose PropertyPurpose\n  latitude        Decimal\n  longitude       Decimal\n  acquired        DateTime?       @db.Date\n  dispositioned   DateTime?       @db.Date\n  Mortgage        Mortgage[]\n  Value           Value[]\n\n  Transaction Transaction[]\n\n  @@unique([entityId, address, city, state, zip])\n}\n\nmodel Mortgage {\n  id              String   @id @default(uuid())\n  property        Property @relation(fields: [propertyId], references: [id])\n  propertyId      String\n  payment         Decimal\n  account         Account  @relation(fields: [accountId], references: [id])\n  accountId       String\n  startingBalance Decimal\n}\n\nmodel Value {\n  id         String   @id @default(uuid())\n  addedAt    DateTime @default(now()) @db.Timestamptz\n  property   Property @relation(fields: [propertyId], references: [id])\n  propertyId String\n  value      Decimal\n}\n',
      "inlineSchemaHash": "f6333c992160407ac9c10c0b8356af6195e66f9090967b7b359879c771e0f4c3",
      "copyEngine": true
    };
    var fs3 = require("fs");
    config2.dirname = __dirname;
    if (!fs3.existsSync(path2.join(__dirname, "schema.prisma"))) {
      const alternativePaths = [
        "node_modules/.prisma/client",
        ".prisma/client"
      ];
      const alternativePath = alternativePaths.find((altPath) => {
        return fs3.existsSync(path2.join(process.cwd(), altPath, "schema.prisma"));
      }) ?? alternativePaths[0];
      config2.dirname = path2.join(process.cwd(), alternativePath);
      config2.isBundled = true;
    }
    config2.runtimeDataModel = JSON.parse('{"models":{"Entity":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"name","kind":"scalar","isList":false,"isRequired":true,"isUnique":true,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"Account","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Account","nativeType":null,"relationName":"AccountToEntity","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"Property","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Property","nativeType":null,"relationName":"EntityToProperty","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"Budget","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Budget","nativeType":null,"relationName":"BudgetToEntity","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"includeInOverall","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"Boolean","nativeType":null,"default":false,"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"Institution":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"name","kind":"scalar","isList":false,"isRequired":true,"isUnique":true,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"Account","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Account","nativeType":null,"relationName":"AccountToInstitution","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"Category":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"name","kind":"scalar","isList":false,"isRequired":true,"isUnique":true,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"categoryType","kind":"enum","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"CategoryType","nativeType":null,"default":"Expense","isGenerated":false,"isUpdatedAt":false},{"name":"Transaction","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Transaction","nativeType":null,"relationName":"CategoryToTransaction","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"Budget","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Budget","nativeType":null,"relationName":"BudgetToCategory","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"Vendor":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"name","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"image","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Bytes","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"Transaction","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Transaction","nativeType":null,"relationName":"TransactionToVendor","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"Account":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"externalId","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"name","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"number","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"institution","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Institution","nativeType":null,"relationName":"AccountToInstitution","relationFromFields":["institutionId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"institutionId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"RefreshLog","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"RefreshLog","nativeType":null,"relationName":"AccountToRefreshLog","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"Transaction","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Transaction","nativeType":null,"relationName":"AccountToTransaction","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"entity","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Entity","nativeType":null,"relationName":"AccountToEntity","relationFromFields":["entityId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"entityId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"Balance","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Balance","nativeType":null,"relationName":"AccountToBalance","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"accountType","kind":"enum","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"AccountType","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"Mortgage","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Mortgage","nativeType":null,"relationName":"AccountToMortgage","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[["institutionId","entityId","name"]],"uniqueIndexes":[{"name":null,"fields":["institutionId","entityId","name"]}],"isGenerated":false},"RefreshLog":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"refreshedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":["Timestamptz",[]],"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"account","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Account","nativeType":null,"relationName":"AccountToRefreshLog","relationFromFields":["accountId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"accountId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"Balance":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"account","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Account","nativeType":null,"relationName":"AccountToBalance","relationFromFields":["accountId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"addedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":["Timestamptz",[]],"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"balance","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Decimal","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"accountId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"Transaction":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"account","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Account","nativeType":null,"relationName":"AccountToTransaction","relationFromFields":["accountId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"accountId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"date","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":["Date",[]],"isGenerated":false,"isUpdatedAt":false},{"name":"addedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":["Timestamptz",[]],"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"category","kind":"object","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Category","nativeType":null,"relationName":"CategoryToTransaction","relationFromFields":["categoryId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"categoryId","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"description","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"amount","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Decimal","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"availableBalance","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Decimal","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"property","kind":"object","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Property","nativeType":null,"relationName":"PropertyToTransaction","relationFromFields":["propertyId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"propertyId","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"pending","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"Boolean","nativeType":null,"default":false,"isGenerated":false,"isUpdatedAt":false},{"name":"vendor","kind":"object","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Vendor","nativeType":null,"relationName":"TransactionToVendor","relationFromFields":["vendorId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"vendorId","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[["accountId","date","description","amount","availableBalance"]],"uniqueIndexes":[{"name":null,"fields":["accountId","date","description","amount","availableBalance"]}],"isGenerated":false},"Budget":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"entity","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Entity","nativeType":null,"relationName":"BudgetToEntity","relationFromFields":["entityId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"entityId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"category","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Category","nativeType":null,"relationName":"BudgetToCategory","relationFromFields":["categoryId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"categoryId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"BudgetAmount","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"BudgetAmount","nativeType":null,"relationName":"BudgetToBudgetAmount","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"BudgetAmount":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"amount","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Decimal","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"startingAt","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":["Date",[]],"isGenerated":false,"isUpdatedAt":false},{"name":"budget","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Budget","nativeType":null,"relationName":"BudgetToBudgetAmount","relationFromFields":["budgetId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"budgetId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"Property":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"externalId","kind":"scalar","isList":false,"isRequired":false,"isUnique":true,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"entity","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Entity","nativeType":null,"relationName":"EntityToProperty","relationFromFields":["entityId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"entityId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"address","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"city","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"state","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"zip","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"propertyType","kind":"enum","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"PropertyType","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"propertyPurpose","kind":"enum","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"PropertyPurpose","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"latitude","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Decimal","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"longitude","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Decimal","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"acquired","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":["Date",[]],"isGenerated":false,"isUpdatedAt":false},{"name":"dispositioned","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":["Date",[]],"isGenerated":false,"isUpdatedAt":false},{"name":"Mortgage","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Mortgage","nativeType":null,"relationName":"MortgageToProperty","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"Value","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Value","nativeType":null,"relationName":"PropertyToValue","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"Transaction","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Transaction","nativeType":null,"relationName":"PropertyToTransaction","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[["entityId","address","city","state","zip"]],"uniqueIndexes":[{"name":null,"fields":["entityId","address","city","state","zip"]}],"isGenerated":false},"Mortgage":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"property","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Property","nativeType":null,"relationName":"MortgageToProperty","relationFromFields":["propertyId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"propertyId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"payment","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Decimal","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"account","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Account","nativeType":null,"relationName":"AccountToMortgage","relationFromFields":["accountId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"accountId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"startingBalance","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Decimal","nativeType":null,"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"Value":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"addedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":["Timestamptz",[]],"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"property","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Property","nativeType":null,"relationName":"PropertyToValue","relationFromFields":["propertyId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"propertyId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"value","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Decimal","nativeType":null,"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false}},"enums":{"AccountType":{"values":[{"name":"Checking","dbName":null},{"name":"Savings","dbName":null},{"name":"Retirement","dbName":null},{"name":"Credit","dbName":null},{"name":"Mortgage","dbName":null}],"dbName":null},"PropertyType":{"values":[{"name":"SingleFamily","dbName":null},{"name":"Duplex","dbName":null}],"dbName":null},"PropertyPurpose":{"values":[{"name":"Rental","dbName":null},{"name":"LandContract","dbName":null},{"name":"Lender","dbName":null},{"name":"Wholesale","dbName":null}],"dbName":null},"CategoryType":{"values":[{"name":"Expense","dbName":null},{"name":"Income","dbName":null}],"dbName":null}},"types":{}}');
    defineDmmfProperty2(exports2.Prisma, config2.runtimeDataModel);
    config2.engineWasm = void 0;
    var { warnEnvConflicts: warnEnvConflicts2 } = require_library();
    warnEnvConflicts2({
      rootEnvPath: config2.relativeEnvPaths.rootEnvPath && path2.resolve(config2.dirname, config2.relativeEnvPaths.rootEnvPath),
      schemaEnvPath: config2.relativeEnvPaths.schemaEnvPath && path2.resolve(config2.dirname, config2.relativeEnvPaths.schemaEnvPath)
    });
    var PrismaClient2 = getPrismaClient2(config2);
    exports2.PrismaClient = PrismaClient2;
    Object.assign(exports2, Prisma2);
    path2.join(__dirname, "libquery_engine-darwin-arm64.dylib.node");
    path2.join(process.cwd(), "node_modules/.prisma/client/libquery_engine-darwin-arm64.dylib.node");
    path2.join(__dirname, "schema.prisma");
    path2.join(process.cwd(), "node_modules/.prisma/client/schema.prisma");
  }
});

// node_modules/.prisma/client/default.js
var require_default = __commonJS({
  "node_modules/.prisma/client/default.js"(exports2, module2) {
    module2.exports = { ...require_client() };
  }
});

// node_modules/@prisma/client/default.js
var require_default2 = __commonJS({
  "node_modules/@prisma/client/default.js"(exports2, module2) {
    module2.exports = {
      ...require_default()
    };
  }
});

// node_modules/sql-formatter/lib/core/tokenTypes.js
var require_tokenTypes = __commonJS({
  "node_modules/sql-formatter/lib/core/tokenTypes.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _default = {
      WORD: "word",
      STRING: "string",
      RESERVED: "reserved",
      RESERVED_TOP_LEVEL: "reserved-top-level",
      RESERVED_TOP_LEVEL_NO_INDENT: "reserved-top-level-no-indent",
      RESERVED_NEWLINE: "reserved-newline",
      OPERATOR: "operator",
      OPEN_PAREN: "open-paren",
      CLOSE_PAREN: "close-paren",
      LINE_COMMENT: "line-comment",
      BLOCK_COMMENT: "block-comment",
      NUMBER: "number",
      PLACEHOLDER: "placeholder"
    };
    exports2["default"] = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/utils.js
var require_utils = __commonJS({
  "node_modules/sql-formatter/lib/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.sortByLengthDesc = exports2.escapeRegExp = exports2.isEmpty = exports2.last = exports2.trimSpacesEnd = void 0;
    var trimSpacesEnd = function trimSpacesEnd2(str) {
      return str.replace(/[\t ]+$/, "");
    };
    exports2.trimSpacesEnd = trimSpacesEnd;
    var last = function last2(arr) {
      return arr[arr.length - 1];
    };
    exports2.last = last;
    var isEmpty = function isEmpty2(arr) {
      return !Array.isArray(arr) || arr.length === 0;
    };
    exports2.isEmpty = isEmpty;
    var escapeRegExp = function escapeRegExp2(string) {
      return string.replace(/[\$\(-\+\.\?\[-\^\{-\}]/g, "\\$&");
    };
    exports2.escapeRegExp = escapeRegExp;
    var sortByLengthDesc = function sortByLengthDesc2(strings) {
      return strings.sort(function(a, b2) {
        return b2.length - a.length || a.localeCompare(b2);
      });
    };
    exports2.sortByLengthDesc = sortByLengthDesc;
  }
});

// node_modules/sql-formatter/lib/core/Indentation.js
var require_Indentation = __commonJS({
  "node_modules/sql-formatter/lib/core/Indentation.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _utils = require_utils();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var INDENT_TYPE_TOP_LEVEL = "top-level";
    var INDENT_TYPE_BLOCK_LEVEL = "block-level";
    var Indentation = /* @__PURE__ */ function() {
      function Indentation2(indent2) {
        _classCallCheck(this, Indentation2);
        this.indent = indent2 || "  ";
        this.indentTypes = [];
      }
      _createClass(Indentation2, [{
        key: "getIndent",
        value: function getIndent() {
          return this.indent.repeat(this.indentTypes.length);
        }
        /**
         * Increases indentation by one top-level indent.
         */
      }, {
        key: "increaseTopLevel",
        value: function increaseTopLevel() {
          this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);
        }
        /**
         * Increases indentation by one block-level indent.
         */
      }, {
        key: "increaseBlockLevel",
        value: function increaseBlockLevel() {
          this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);
        }
        /**
         * Decreases indentation by one top-level indent.
         * Does nothing when the previous indent is not top-level.
         */
      }, {
        key: "decreaseTopLevel",
        value: function decreaseTopLevel() {
          if (this.indentTypes.length > 0 && (0, _utils.last)(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {
            this.indentTypes.pop();
          }
        }
        /**
         * Decreases indentation by one block-level indent.
         * If there are top-level indents within the block-level indent,
         * throws away these as well.
         */
      }, {
        key: "decreaseBlockLevel",
        value: function decreaseBlockLevel() {
          while (this.indentTypes.length > 0) {
            var type = this.indentTypes.pop();
            if (type !== INDENT_TYPE_TOP_LEVEL) {
              break;
            }
          }
        }
      }, {
        key: "resetIndentation",
        value: function resetIndentation() {
          this.indentTypes = [];
        }
      }]);
      return Indentation2;
    }();
    exports2["default"] = Indentation;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/core/InlineBlock.js
var require_InlineBlock = __commonJS({
  "node_modules/sql-formatter/lib/core/InlineBlock.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _tokenTypes = _interopRequireDefault(require_tokenTypes());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var INLINE_MAX_LENGTH = 50;
    var InlineBlock = /* @__PURE__ */ function() {
      function InlineBlock2() {
        _classCallCheck(this, InlineBlock2);
        this.level = 0;
      }
      _createClass(InlineBlock2, [{
        key: "beginIfPossible",
        value: function beginIfPossible(tokens, index) {
          if (this.level === 0 && this.isInlineBlock(tokens, index)) {
            this.level = 1;
          } else if (this.level > 0) {
            this.level++;
          } else {
            this.level = 0;
          }
        }
        /**
         * Finishes current inline block.
         * There might be several nested ones.
         */
      }, {
        key: "end",
        value: function end() {
          this.level--;
        }
        /**
         * True when inside an inline block
         * @return {Boolean}
         */
      }, {
        key: "isActive",
        value: function isActive() {
          return this.level > 0;
        }
        // Check if this should be an inline parentheses block
        // Examples are "NOW()", "COUNT(*)", "int(10)", key(`somecolumn`), DECIMAL(7,2)
      }, {
        key: "isInlineBlock",
        value: function isInlineBlock(tokens, index) {
          var length = 0;
          var level = 0;
          for (var i = index; i < tokens.length; i++) {
            var token = tokens[i];
            length += token.value.length;
            if (length > INLINE_MAX_LENGTH) {
              return false;
            }
            if (token.type === _tokenTypes["default"].OPEN_PAREN) {
              level++;
            } else if (token.type === _tokenTypes["default"].CLOSE_PAREN) {
              level--;
              if (level === 0) {
                return true;
              }
            }
            if (this.isForbiddenToken(token)) {
              return false;
            }
          }
          return false;
        }
        // Reserved words that cause newlines, comments and semicolons
        // are not allowed inside inline parentheses block
      }, {
        key: "isForbiddenToken",
        value: function isForbiddenToken(_ref) {
          var type = _ref.type, value = _ref.value;
          return type === _tokenTypes["default"].RESERVED_TOP_LEVEL || type === _tokenTypes["default"].RESERVED_NEWLINE || type === _tokenTypes["default"].COMMENT || type === _tokenTypes["default"].BLOCK_COMMENT || value === ";";
        }
      }]);
      return InlineBlock2;
    }();
    exports2["default"] = InlineBlock;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/core/Params.js
var require_Params = __commonJS({
  "node_modules/sql-formatter/lib/core/Params.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Params = /* @__PURE__ */ function() {
      function Params2(params) {
        _classCallCheck(this, Params2);
        this.params = params;
        this.index = 0;
      }
      _createClass(Params2, [{
        key: "get",
        value: function get(_ref) {
          var key = _ref.key, value = _ref.value;
          if (!this.params) {
            return value;
          }
          if (key) {
            return this.params[key];
          }
          return this.params[this.index++];
        }
      }]);
      return Params2;
    }();
    exports2["default"] = Params;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/core/token.js
var require_token = __commonJS({
  "node_modules/sql-formatter/lib/core/token.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.isEnd = exports2.isWindow = exports2.isBy = exports2.isSet = exports2.isLimit = exports2.isBetween = exports2.isAnd = void 0;
    var _tokenTypes = _interopRequireDefault(require_tokenTypes());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var isToken = function isToken2(type, regex) {
      return function(token) {
        return (token === null || token === void 0 ? void 0 : token.type) === type && regex.test(token === null || token === void 0 ? void 0 : token.value);
      };
    };
    var isAnd = isToken(_tokenTypes["default"].RESERVED_NEWLINE, /^AND$/i);
    exports2.isAnd = isAnd;
    var isBetween = isToken(_tokenTypes["default"].RESERVED, /^BETWEEN$/i);
    exports2.isBetween = isBetween;
    var isLimit = isToken(_tokenTypes["default"].RESERVED_TOP_LEVEL, /^LIMIT$/i);
    exports2.isLimit = isLimit;
    var isSet = isToken(_tokenTypes["default"].RESERVED_TOP_LEVEL, /^[S\u017F]ET$/i);
    exports2.isSet = isSet;
    var isBy = isToken(_tokenTypes["default"].RESERVED, /^BY$/i);
    exports2.isBy = isBy;
    var isWindow = isToken(_tokenTypes["default"].RESERVED_TOP_LEVEL, /^WINDOW$/i);
    exports2.isWindow = isWindow;
    var isEnd = isToken(_tokenTypes["default"].CLOSE_PAREN, /^END$/i);
    exports2.isEnd = isEnd;
  }
});

// node_modules/sql-formatter/lib/core/Formatter.js
var require_Formatter = __commonJS({
  "node_modules/sql-formatter/lib/core/Formatter.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _tokenTypes = _interopRequireDefault(require_tokenTypes());
    var _Indentation = _interopRequireDefault(require_Indentation());
    var _InlineBlock = _interopRequireDefault(require_InlineBlock());
    var _Params = _interopRequireDefault(require_Params());
    var _utils = require_utils();
    var _token = require_token();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Formatter = /* @__PURE__ */ function() {
      function Formatter2(cfg) {
        _classCallCheck(this, Formatter2);
        this.cfg = cfg;
        this.indentation = new _Indentation["default"](this.cfg.indent);
        this.inlineBlock = new _InlineBlock["default"]();
        this.params = new _Params["default"](this.cfg.params);
        this.previousReservedToken = {};
        this.tokens = [];
        this.index = 0;
      }
      _createClass(Formatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          throw new Error("tokenizer() not implemented by subclass");
        }
        /**
         * Reprocess and modify a token based on parsed context.
         *
         * @param {Object} token The token to modify
         *  @param {String} token.type
         *  @param {String} token.value
         * @return {Object} new token or the original
         *  @return {String} token.type
         *  @return {String} token.value
         */
      }, {
        key: "tokenOverride",
        value: function tokenOverride(token) {
          return token;
        }
        /**
         * Formats whitespace in a SQL string to make it easier to read.
         *
         * @param {String} query The SQL query string
         * @return {String} formatted query
         */
      }, {
        key: "format",
        value: function format3(query) {
          this.tokens = this.tokenizer().tokenize(query);
          var formattedQuery = this.getFormattedQueryFromTokens();
          return formattedQuery.trim();
        }
      }, {
        key: "getFormattedQueryFromTokens",
        value: function getFormattedQueryFromTokens() {
          var _this = this;
          var formattedQuery = "";
          this.tokens.forEach(function(token, index) {
            _this.index = index;
            token = _this.tokenOverride(token);
            if (token.type === _tokenTypes["default"].LINE_COMMENT) {
              formattedQuery = _this.formatLineComment(token, formattedQuery);
            } else if (token.type === _tokenTypes["default"].BLOCK_COMMENT) {
              formattedQuery = _this.formatBlockComment(token, formattedQuery);
            } else if (token.type === _tokenTypes["default"].RESERVED_TOP_LEVEL) {
              formattedQuery = _this.formatTopLevelReservedWord(token, formattedQuery);
              _this.previousReservedToken = token;
            } else if (token.type === _tokenTypes["default"].RESERVED_TOP_LEVEL_NO_INDENT) {
              formattedQuery = _this.formatTopLevelReservedWordNoIndent(token, formattedQuery);
              _this.previousReservedToken = token;
            } else if (token.type === _tokenTypes["default"].RESERVED_NEWLINE) {
              formattedQuery = _this.formatNewlineReservedWord(token, formattedQuery);
              _this.previousReservedToken = token;
            } else if (token.type === _tokenTypes["default"].RESERVED) {
              formattedQuery = _this.formatWithSpaces(token, formattedQuery);
              _this.previousReservedToken = token;
            } else if (token.type === _tokenTypes["default"].OPEN_PAREN) {
              formattedQuery = _this.formatOpeningParentheses(token, formattedQuery);
            } else if (token.type === _tokenTypes["default"].CLOSE_PAREN) {
              formattedQuery = _this.formatClosingParentheses(token, formattedQuery);
            } else if (token.type === _tokenTypes["default"].PLACEHOLDER) {
              formattedQuery = _this.formatPlaceholder(token, formattedQuery);
            } else if (token.value === ",") {
              formattedQuery = _this.formatComma(token, formattedQuery);
            } else if (token.value === ":") {
              formattedQuery = _this.formatWithSpaceAfter(token, formattedQuery);
            } else if (token.value === ".") {
              formattedQuery = _this.formatWithoutSpaces(token, formattedQuery);
            } else if (token.value === ";") {
              formattedQuery = _this.formatQuerySeparator(token, formattedQuery);
            } else {
              formattedQuery = _this.formatWithSpaces(token, formattedQuery);
            }
          });
          return formattedQuery;
        }
      }, {
        key: "formatLineComment",
        value: function formatLineComment(token, query) {
          return this.addNewline(query + this.show(token));
        }
      }, {
        key: "formatBlockComment",
        value: function formatBlockComment(token, query) {
          return this.addNewline(this.addNewline(query) + this.indentComment(token.value));
        }
      }, {
        key: "indentComment",
        value: function indentComment(comment) {
          return comment.replace(/\n[\t ]*/g, "\n" + this.indentation.getIndent() + " ");
        }
      }, {
        key: "formatTopLevelReservedWordNoIndent",
        value: function formatTopLevelReservedWordNoIndent(token, query) {
          this.indentation.decreaseTopLevel();
          query = this.addNewline(query) + this.equalizeWhitespace(this.show(token));
          return this.addNewline(query);
        }
      }, {
        key: "formatTopLevelReservedWord",
        value: function formatTopLevelReservedWord(token, query) {
          this.indentation.decreaseTopLevel();
          query = this.addNewline(query);
          this.indentation.increaseTopLevel();
          query += this.equalizeWhitespace(this.show(token));
          return this.addNewline(query);
        }
      }, {
        key: "formatNewlineReservedWord",
        value: function formatNewlineReservedWord(token, query) {
          if ((0, _token.isAnd)(token) && (0, _token.isBetween)(this.tokenLookBehind(2))) {
            return this.formatWithSpaces(token, query);
          }
          return this.addNewline(query) + this.equalizeWhitespace(this.show(token)) + " ";
        }
        // Replace any sequence of whitespace characters with single space
      }, {
        key: "equalizeWhitespace",
        value: function equalizeWhitespace(string) {
          return string.replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+/g, " ");
        }
        // Opening parentheses increase the block indent level and start a new line
      }, {
        key: "formatOpeningParentheses",
        value: function formatOpeningParentheses(token, query) {
          var _preserveWhitespaceFo, _this$tokenLookBehind;
          var preserveWhitespaceFor = (_preserveWhitespaceFo = {}, _defineProperty(_preserveWhitespaceFo, _tokenTypes["default"].OPEN_PAREN, true), _defineProperty(_preserveWhitespaceFo, _tokenTypes["default"].LINE_COMMENT, true), _defineProperty(_preserveWhitespaceFo, _tokenTypes["default"].OPERATOR, true), _preserveWhitespaceFo);
          if (token.whitespaceBefore.length === 0 && !preserveWhitespaceFor[(_this$tokenLookBehind = this.tokenLookBehind()) === null || _this$tokenLookBehind === void 0 ? void 0 : _this$tokenLookBehind.type]) {
            query = (0, _utils.trimSpacesEnd)(query);
          }
          query += this.show(token);
          this.inlineBlock.beginIfPossible(this.tokens, this.index);
          if (!this.inlineBlock.isActive()) {
            this.indentation.increaseBlockLevel();
            query = this.addNewline(query);
          }
          return query;
        }
        // Closing parentheses decrease the block indent level
      }, {
        key: "formatClosingParentheses",
        value: function formatClosingParentheses(token, query) {
          if (this.inlineBlock.isActive()) {
            this.inlineBlock.end();
            return this.formatWithSpaceAfter(token, query);
          } else {
            this.indentation.decreaseBlockLevel();
            return this.formatWithSpaces(token, this.addNewline(query));
          }
        }
      }, {
        key: "formatPlaceholder",
        value: function formatPlaceholder(token, query) {
          return query + this.params.get(token) + " ";
        }
        // Commas start a new line (unless within inline parentheses or SQL "LIMIT" clause)
      }, {
        key: "formatComma",
        value: function formatComma(token, query) {
          query = (0, _utils.trimSpacesEnd)(query) + this.show(token) + " ";
          if (this.inlineBlock.isActive()) {
            return query;
          } else if ((0, _token.isLimit)(this.previousReservedToken)) {
            return query;
          } else {
            return this.addNewline(query);
          }
        }
      }, {
        key: "formatWithSpaceAfter",
        value: function formatWithSpaceAfter(token, query) {
          return (0, _utils.trimSpacesEnd)(query) + this.show(token) + " ";
        }
      }, {
        key: "formatWithoutSpaces",
        value: function formatWithoutSpaces(token, query) {
          return (0, _utils.trimSpacesEnd)(query) + this.show(token);
        }
      }, {
        key: "formatWithSpaces",
        value: function formatWithSpaces(token, query) {
          return query + this.show(token) + " ";
        }
      }, {
        key: "formatQuerySeparator",
        value: function formatQuerySeparator(token, query) {
          this.indentation.resetIndentation();
          return (0, _utils.trimSpacesEnd)(query) + this.show(token) + "\n".repeat(this.cfg.linesBetweenQueries || 1);
        }
        // Converts token to string (uppercasing it if needed)
      }, {
        key: "show",
        value: function show(_ref) {
          var type = _ref.type, value = _ref.value;
          if (this.cfg.uppercase && (type === _tokenTypes["default"].RESERVED || type === _tokenTypes["default"].RESERVED_TOP_LEVEL || type === _tokenTypes["default"].RESERVED_TOP_LEVEL_NO_INDENT || type === _tokenTypes["default"].RESERVED_NEWLINE || type === _tokenTypes["default"].OPEN_PAREN || type === _tokenTypes["default"].CLOSE_PAREN)) {
            return value.toUpperCase();
          } else {
            return value;
          }
        }
      }, {
        key: "addNewline",
        value: function addNewline(query) {
          query = (0, _utils.trimSpacesEnd)(query);
          if (!query.endsWith("\n")) {
            query += "\n";
          }
          return query + this.indentation.getIndent();
        }
      }, {
        key: "tokenLookBehind",
        value: function tokenLookBehind() {
          var n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
          return this.tokens[this.index - n];
        }
      }, {
        key: "tokenLookAhead",
        value: function tokenLookAhead() {
          var n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
          return this.tokens[this.index + n];
        }
      }]);
      return Formatter2;
    }();
    exports2["default"] = Formatter;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/core/regexFactory.js
var require_regexFactory = __commonJS({
  "node_modules/sql-formatter/lib/core/regexFactory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.createOperatorRegex = createOperatorRegex;
    exports2.createLineCommentRegex = createLineCommentRegex;
    exports2.createReservedWordRegex = createReservedWordRegex;
    exports2.createWordRegex = createWordRegex;
    exports2.createStringRegex = createStringRegex;
    exports2.createStringPattern = createStringPattern;
    exports2.createParenRegex = createParenRegex;
    exports2.createPlaceholderRegex = createPlaceholderRegex;
    var _utils = require_utils();
    function createOperatorRegex(multiLetterOperators) {
      return new RegExp("^(".concat((0, _utils.sortByLengthDesc)(multiLetterOperators).map(_utils.escapeRegExp).join("|"), "|.)"), "u");
    }
    function createLineCommentRegex(lineCommentTypes) {
      return new RegExp("^((?:".concat(lineCommentTypes.map(function(c) {
        return (0, _utils.escapeRegExp)(c);
      }).join("|"), ").*?)(?:\r\n|\r|\n|$)"), "u");
    }
    function createReservedWordRegex(reservedWords) {
      if (reservedWords.length === 0) {
        return new RegExp("^\b$", "u");
      }
      var reservedWordsPattern = (0, _utils.sortByLengthDesc)(reservedWords).join("|").replace(/ /g, "\\s+");
      return new RegExp("^(".concat(reservedWordsPattern, ")\\b"), "iu");
    }
    function createWordRegex() {
      var specialChars = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      return new RegExp("^([\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Connector_Punctuation}\\p{Join_Control}".concat(specialChars.join(""), "]+)"), "u");
    }
    function createStringRegex(stringTypes) {
      return new RegExp("^(" + createStringPattern(stringTypes) + ")", "u");
    }
    function createStringPattern(stringTypes) {
      var patterns = {
        "``": "((`[^`]*($|`))+)",
        "{}": "((\\{[^\\}]*($|\\}))+)",
        "[]": "((\\[[^\\]]*($|\\]))(\\][^\\]]*($|\\]))*)",
        '""': '(("[^"\\\\]*(?:\\\\.[^"\\\\]*)*("|$))+)',
        "''": "(('[^'\\\\]*(?:\\\\.[^'\\\\]*)*('|$))+)",
        "N''": "((N'[^'\\\\]*(?:\\\\.[^'\\\\]*)*('|$))+)",
        "U&''": "((U&'[^'\\\\]*(?:\\\\.[^'\\\\]*)*('|$))+)",
        'U&""': '((U&"[^"\\\\]*(?:\\\\.[^"\\\\]*)*("|$))+)',
        $$: "((?<tag>\\$\\w*\\$)[\\s\\S]*?(?:\\k<tag>|$))"
      };
      return stringTypes.map(function(t) {
        return patterns[t];
      }).join("|");
    }
    function createParenRegex(parens) {
      return new RegExp("^(" + parens.map(escapeParen).join("|") + ")", "iu");
    }
    function escapeParen(paren) {
      if (paren.length === 1) {
        return (0, _utils.escapeRegExp)(paren);
      } else {
        return "\\b" + paren + "\\b";
      }
    }
    function createPlaceholderRegex(types, pattern) {
      if ((0, _utils.isEmpty)(types)) {
        return false;
      }
      var typesRegex = types.map(_utils.escapeRegExp).join("|");
      return new RegExp("^((?:".concat(typesRegex, ")(?:").concat(pattern, "))"), "u");
    }
  }
});

// node_modules/sql-formatter/lib/core/Tokenizer.js
var require_Tokenizer = __commonJS({
  "node_modules/sql-formatter/lib/core/Tokenizer.js"(exports2, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _tokenTypes = _interopRequireDefault(require_tokenTypes());
    var regexFactory = _interopRequireWildcard(require_regexFactory());
    var _utils = require_utils();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Tokenizer = /* @__PURE__ */ function() {
      function Tokenizer2(cfg) {
        _classCallCheck(this, Tokenizer2);
        this.WHITESPACE_REGEX = /^([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+)/;
        this.NUMBER_REGEX = /^((\x2D[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*)?[0-9]+(\.[0-9]+)?([Ee]\x2D?[0-9]+(\.[0-9]+)?)?|0x[0-9A-Fa-f]+|0b[01]+)\b/;
        this.OPERATOR_REGEX = regexFactory.createOperatorRegex(["<>", "<=", ">="].concat(_toConsumableArray(cfg.operators || [])));
        this.BLOCK_COMMENT_REGEX = /^(\/\*(?:(?![])[\s\S])*?(?:\*\/|$))/;
        this.LINE_COMMENT_REGEX = regexFactory.createLineCommentRegex(cfg.lineCommentTypes);
        this.RESERVED_TOP_LEVEL_REGEX = regexFactory.createReservedWordRegex(cfg.reservedTopLevelWords);
        this.RESERVED_TOP_LEVEL_NO_INDENT_REGEX = regexFactory.createReservedWordRegex(cfg.reservedTopLevelWordsNoIndent);
        this.RESERVED_NEWLINE_REGEX = regexFactory.createReservedWordRegex(cfg.reservedNewlineWords);
        this.RESERVED_PLAIN_REGEX = regexFactory.createReservedWordRegex(cfg.reservedWords);
        this.WORD_REGEX = regexFactory.createWordRegex(cfg.specialWordChars);
        this.STRING_REGEX = regexFactory.createStringRegex(cfg.stringTypes);
        this.OPEN_PAREN_REGEX = regexFactory.createParenRegex(cfg.openParens);
        this.CLOSE_PAREN_REGEX = regexFactory.createParenRegex(cfg.closeParens);
        this.INDEXED_PLACEHOLDER_REGEX = regexFactory.createPlaceholderRegex(cfg.indexedPlaceholderTypes, "[0-9]*");
        this.IDENT_NAMED_PLACEHOLDER_REGEX = regexFactory.createPlaceholderRegex(cfg.namedPlaceholderTypes, "[a-zA-Z0-9._$]+");
        this.STRING_NAMED_PLACEHOLDER_REGEX = regexFactory.createPlaceholderRegex(cfg.namedPlaceholderTypes, regexFactory.createStringPattern(cfg.stringTypes));
      }
      _createClass(Tokenizer2, [{
        key: "tokenize",
        value: function tokenize(input) {
          var tokens = [];
          var token;
          while (input.length) {
            var whitespaceBefore = this.getWhitespace(input);
            input = input.substring(whitespaceBefore.length);
            if (input.length) {
              token = this.getNextToken(input, token);
              input = input.substring(token.value.length);
              tokens.push(_objectSpread(_objectSpread({}, token), {}, {
                whitespaceBefore
              }));
            }
          }
          return tokens;
        }
      }, {
        key: "getWhitespace",
        value: function getWhitespace(input) {
          var matches = input.match(this.WHITESPACE_REGEX);
          return matches ? matches[1] : "";
        }
      }, {
        key: "getNextToken",
        value: function getNextToken(input, previousToken) {
          return this.getCommentToken(input) || this.getStringToken(input) || this.getOpenParenToken(input) || this.getCloseParenToken(input) || this.getPlaceholderToken(input) || this.getNumberToken(input) || this.getReservedWordToken(input, previousToken) || this.getWordToken(input) || this.getOperatorToken(input);
        }
      }, {
        key: "getCommentToken",
        value: function getCommentToken(input) {
          return this.getLineCommentToken(input) || this.getBlockCommentToken(input);
        }
      }, {
        key: "getLineCommentToken",
        value: function getLineCommentToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].LINE_COMMENT,
            regex: this.LINE_COMMENT_REGEX
          });
        }
      }, {
        key: "getBlockCommentToken",
        value: function getBlockCommentToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].BLOCK_COMMENT,
            regex: this.BLOCK_COMMENT_REGEX
          });
        }
      }, {
        key: "getStringToken",
        value: function getStringToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].STRING,
            regex: this.STRING_REGEX
          });
        }
      }, {
        key: "getOpenParenToken",
        value: function getOpenParenToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].OPEN_PAREN,
            regex: this.OPEN_PAREN_REGEX
          });
        }
      }, {
        key: "getCloseParenToken",
        value: function getCloseParenToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].CLOSE_PAREN,
            regex: this.CLOSE_PAREN_REGEX
          });
        }
      }, {
        key: "getPlaceholderToken",
        value: function getPlaceholderToken(input) {
          return this.getIdentNamedPlaceholderToken(input) || this.getStringNamedPlaceholderToken(input) || this.getIndexedPlaceholderToken(input);
        }
      }, {
        key: "getIdentNamedPlaceholderToken",
        value: function getIdentNamedPlaceholderToken(input) {
          return this.getPlaceholderTokenWithKey({
            input,
            regex: this.IDENT_NAMED_PLACEHOLDER_REGEX,
            parseKey: function parseKey(v) {
              return v.slice(1);
            }
          });
        }
      }, {
        key: "getStringNamedPlaceholderToken",
        value: function getStringNamedPlaceholderToken(input) {
          var _this = this;
          return this.getPlaceholderTokenWithKey({
            input,
            regex: this.STRING_NAMED_PLACEHOLDER_REGEX,
            parseKey: function parseKey(v) {
              return _this.getEscapedPlaceholderKey({
                key: v.slice(2, -1),
                quoteChar: v.slice(-1)
              });
            }
          });
        }
      }, {
        key: "getIndexedPlaceholderToken",
        value: function getIndexedPlaceholderToken(input) {
          return this.getPlaceholderTokenWithKey({
            input,
            regex: this.INDEXED_PLACEHOLDER_REGEX,
            parseKey: function parseKey(v) {
              return v.slice(1);
            }
          });
        }
      }, {
        key: "getPlaceholderTokenWithKey",
        value: function getPlaceholderTokenWithKey(_ref) {
          var input = _ref.input, regex = _ref.regex, parseKey = _ref.parseKey;
          var token = this.getTokenOnFirstMatch({
            input,
            regex,
            type: _tokenTypes["default"].PLACEHOLDER
          });
          if (token) {
            token.key = parseKey(token.value);
          }
          return token;
        }
      }, {
        key: "getEscapedPlaceholderKey",
        value: function getEscapedPlaceholderKey(_ref2) {
          var key = _ref2.key, quoteChar = _ref2.quoteChar;
          return key.replace(new RegExp((0, _utils.escapeRegExp)("\\" + quoteChar), "gu"), quoteChar);
        }
        // Decimal, binary, or hex numbers
      }, {
        key: "getNumberToken",
        value: function getNumberToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].NUMBER,
            regex: this.NUMBER_REGEX
          });
        }
        // Punctuation and symbols
      }, {
        key: "getOperatorToken",
        value: function getOperatorToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].OPERATOR,
            regex: this.OPERATOR_REGEX
          });
        }
      }, {
        key: "getReservedWordToken",
        value: function getReservedWordToken(input, previousToken) {
          if (previousToken && previousToken.value && previousToken.value === ".") {
            return void 0;
          }
          return this.getTopLevelReservedToken(input) || this.getNewlineReservedToken(input) || this.getTopLevelReservedTokenNoIndent(input) || this.getPlainReservedToken(input);
        }
      }, {
        key: "getTopLevelReservedToken",
        value: function getTopLevelReservedToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].RESERVED_TOP_LEVEL,
            regex: this.RESERVED_TOP_LEVEL_REGEX
          });
        }
      }, {
        key: "getNewlineReservedToken",
        value: function getNewlineReservedToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].RESERVED_NEWLINE,
            regex: this.RESERVED_NEWLINE_REGEX
          });
        }
      }, {
        key: "getTopLevelReservedTokenNoIndent",
        value: function getTopLevelReservedTokenNoIndent(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].RESERVED_TOP_LEVEL_NO_INDENT,
            regex: this.RESERVED_TOP_LEVEL_NO_INDENT_REGEX
          });
        }
      }, {
        key: "getPlainReservedToken",
        value: function getPlainReservedToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].RESERVED,
            regex: this.RESERVED_PLAIN_REGEX
          });
        }
      }, {
        key: "getWordToken",
        value: function getWordToken(input) {
          return this.getTokenOnFirstMatch({
            input,
            type: _tokenTypes["default"].WORD,
            regex: this.WORD_REGEX
          });
        }
      }, {
        key: "getTokenOnFirstMatch",
        value: function getTokenOnFirstMatch(_ref3) {
          var input = _ref3.input, type = _ref3.type, regex = _ref3.regex;
          var matches = input.match(regex);
          return matches ? {
            type,
            value: matches[1]
          } : void 0;
        }
      }]);
      return Tokenizer2;
    }();
    exports2["default"] = Tokenizer;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/languages/Db2Formatter.js
var require_Db2Formatter = __commonJS({
  "node_modules/sql-formatter/lib/languages/Db2Formatter.js"(exports2, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ABS", "ACTIVATE", "ALIAS", "ALL", "ALLOCATE", "ALLOW", "ALTER", "ANY", "ARE", "ARRAY", "AS", "ASC", "ASENSITIVE", "ASSOCIATE", "ASUTIME", "ASYMMETRIC", "AT", "ATOMIC", "ATTRIBUTES", "AUDIT", "AUTHORIZATION", "AUX", "AUXILIARY", "AVG", "BEFORE", "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOOLEAN", "BOTH", "BUFFERPOOL", "BY", "CACHE", "CALL", "CALLED", "CAPTURE", "CARDINALITY", "CASCADED", "CASE", "CAST", "CCSID", "CEIL", "CEILING", "CHAR", "CHARACTER", "CHARACTER_LENGTH", "CHAR_LENGTH", "CHECK", "CLOB", "CLONE", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLECT", "COLLECTION", "COLLID", "COLUMN", "COMMENT", "COMMIT", "CONCAT", "CONDITION", "CONNECT", "CONNECTION", "CONSTRAINT", "CONTAINS", "CONTINUE", "CONVERT", "CORR", "CORRESPONDING", "COUNT", "COUNT_BIG", "COVAR_POP", "COVAR_SAMP", "CREATE", "CROSS", "CUBE", "CUME_DIST", "CURRENT", "CURRENT_DATE", "CURRENT_DEFAULT_TRANSFORM_GROUP", "CURRENT_LC_CTYPE", "CURRENT_PATH", "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_SERVER", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_TIMEZONE", "CURRENT_TRANSFORM_GROUP_FOR_TYPE", "CURRENT_USER", "CURSOR", "CYCLE", "DATA", "DATABASE", "DATAPARTITIONNAME", "DATAPARTITIONNUM", "DATE", "DAY", "DAYS", "DB2GENERAL", "DB2GENRL", "DB2SQL", "DBINFO", "DBPARTITIONNAME", "DBPARTITIONNUM", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFAULTS", "DEFINITION", "DELETE", "DENSERANK", "DENSE_RANK", "DEREF", "DESCRIBE", "DESCRIPTOR", "DETERMINISTIC", "DIAGNOSTICS", "DISABLE", "DISALLOW", "DISCONNECT", "DISTINCT", "DO", "DOCUMENT", "DOUBLE", "DROP", "DSSIZE", "DYNAMIC", "EACH", "EDITPROC", "ELEMENT", "ELSE", "ELSEIF", "ENABLE", "ENCODING", "ENCRYPTION", "END", "END-EXEC", "ENDING", "ERASE", "ESCAPE", "EVERY", "EXCEPTION", "EXCLUDING", "EXCLUSIVE", "EXEC", "EXECUTE", "EXISTS", "EXIT", "EXP", "EXPLAIN", "EXTENDED", "EXTERNAL", "EXTRACT", "FALSE", "FENCED", "FETCH", "FIELDPROC", "FILE", "FILTER", "FINAL", "FIRST", "FLOAT", "FLOOR", "FOR", "FOREIGN", "FREE", "FULL", "FUNCTION", "FUSION", "GENERAL", "GENERATED", "GET", "GLOBAL", "GOTO", "GRANT", "GRAPHIC", "GROUP", "GROUPING", "HANDLER", "HASH", "HASHED_VALUE", "HINT", "HOLD", "HOUR", "HOURS", "IDENTITY", "IF", "IMMEDIATE", "IN", "INCLUDING", "INCLUSIVE", "INCREMENT", "INDEX", "INDICATOR", "INDICATORS", "INF", "INFINITY", "INHERIT", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INT", "INTEGER", "INTEGRITY", "INTERSECTION", "INTERVAL", "INTO", "IS", "ISOBID", "ISOLATION", "ITERATE", "JAR", "JAVA", "KEEP", "KEY", "LABEL", "LANGUAGE", "LARGE", "LATERAL", "LC_CTYPE", "LEADING", "LEAVE", "LEFT", "LIKE", "LINKTYPE", "LN", "LOCAL", "LOCALDATE", "LOCALE", "LOCALTIME", "LOCALTIMESTAMP", "LOCATOR", "LOCATORS", "LOCK", "LOCKMAX", "LOCKSIZE", "LONG", "LOOP", "LOWER", "MAINTAINED", "MATCH", "MATERIALIZED", "MAX", "MAXVALUE", "MEMBER", "MERGE", "METHOD", "MICROSECOND", "MICROSECONDS", "MIN", "MINUTE", "MINUTES", "MINVALUE", "MOD", "MODE", "MODIFIES", "MODULE", "MONTH", "MONTHS", "MULTISET", "NAN", "NATIONAL", "NATURAL", "NCHAR", "NCLOB", "NEW", "NEW_TABLE", "NEXTVAL", "NO", "NOCACHE", "NOCYCLE", "NODENAME", "NODENUMBER", "NOMAXVALUE", "NOMINVALUE", "NONE", "NOORDER", "NORMALIZE", "NORMALIZED", "NOT", "NULL", "NULLIF", "NULLS", "NUMERIC", "NUMPARTS", "OBID", "OCTET_LENGTH", "OF", "OFFSET", "OLD", "OLD_TABLE", "ON", "ONLY", "OPEN", "OPTIMIZATION", "OPTIMIZE", "OPTION", "ORDER", "OUT", "OUTER", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "PACKAGE", "PADDED", "PAGESIZE", "PARAMETER", "PART", "PARTITION", "PARTITIONED", "PARTITIONING", "PARTITIONS", "PASSWORD", "PATH", "PERCENTILE_CONT", "PERCENTILE_DISC", "PERCENT_RANK", "PIECESIZE", "PLAN", "POSITION", "POWER", "PRECISION", "PREPARE", "PREVVAL", "PRIMARY", "PRIQTY", "PRIVILEGES", "PROCEDURE", "PROGRAM", "PSID", "PUBLIC", "QUERY", "QUERYNO", "RANGE", "RANK", "READ", "READS", "REAL", "RECOVERY", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", "REGR_SYY", "RELEASE", "RENAME", "REPEAT", "RESET", "RESIGNAL", "RESTART", "RESTRICT", "RESULT", "RESULT_SET_LOCATOR", "RETURN", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROUND_CEILING", "ROUND_DOWN", "ROUND_FLOOR", "ROUND_HALF_DOWN", "ROUND_HALF_EVEN", "ROUND_HALF_UP", "ROUND_UP", "ROUTINE", "ROW", "ROWNUMBER", "ROWS", "ROWSET", "ROW_NUMBER", "RRN", "RUN", "SAVEPOINT", "SCHEMA", "SCOPE", "SCRATCHPAD", "SCROLL", "SEARCH", "SECOND", "SECONDS", "SECQTY", "SECURITY", "SENSITIVE", "SEQUENCE", "SESSION", "SESSION_USER", "SIGNAL", "SIMILAR", "SIMPLE", "SMALLINT", "SNAN", "SOME", "SOURCE", "SPECIFIC", "SPECIFICTYPE", "SQL", "SQLEXCEPTION", "SQLID", "SQLSTATE", "SQLWARNING", "SQRT", "STACKED", "STANDARD", "START", "STARTING", "STATEMENT", "STATIC", "STATMENT", "STAY", "STDDEV_POP", "STDDEV_SAMP", "STOGROUP", "STORES", "STYLE", "SUBMULTISET", "SUBSTRING", "SUM", "SUMMARY", "SYMMETRIC", "SYNONYM", "SYSFUN", "SYSIBM", "SYSPROC", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLESAMPLE", "TABLESPACE", "THEN", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TO", "TRAILING", "TRANSACTION", "TRANSLATE", "TRANSLATION", "TREAT", "TRIGGER", "TRIM", "TRUE", "TRUNCATE", "TYPE", "UESCAPE", "UNDO", "UNIQUE", "UNKNOWN", "UNNEST", "UNTIL", "UPPER", "USAGE", "USER", "USING", "VALIDPROC", "VALUE", "VARCHAR", "VARIABLE", "VARIANT", "VARYING", "VAR_POP", "VAR_SAMP", "VCAT", "VERSION", "VIEW", "VOLATILE", "VOLUMES", "WHEN", "WHENEVER", "WHILE", "WIDTH_BUCKET", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WLM", "WRITE", "XMLELEMENT", "XMLEXISTS", "XMLNAMESPACES", "YEAR", "YEARS"];
    var reservedTopLevelWords = ["ADD", "AFTER", "ALTER COLUMN", "ALTER TABLE", "DELETE FROM", "EXCEPT", "FETCH FIRST", "FROM", "GROUP BY", "GO", "HAVING", "INSERT INTO", "INTERSECT", "LIMIT", "ORDER BY", "SELECT", "SET CURRENT SCHEMA", "SET SCHEMA", "SET", "UPDATE", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "MINUS", "UNION", "UNION ALL"];
    var reservedNewlineWords = [
      "AND",
      "OR",
      // joins
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "FULL JOIN",
      "FULL OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN"
    ];
    var Db2Formatter = /* @__PURE__ */ function(_Formatter) {
      _inherits(Db2Formatter2, _Formatter);
      var _super = _createSuper(Db2Formatter2);
      function Db2Formatter2() {
        _classCallCheck(this, Db2Formatter2);
        return _super.apply(this, arguments);
      }
      _createClass(Db2Formatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "''", "``", "[]"],
            openParens: ["("],
            closeParens: [")"],
            indexedPlaceholderTypes: ["?"],
            namedPlaceholderTypes: [":"],
            lineCommentTypes: ["--"],
            specialWordChars: ["#", "@"],
            operators: ["**", "!=", "!>", "!>", "||"]
          });
        }
      }]);
      return Db2Formatter2;
    }(_Formatter2["default"]);
    exports2["default"] = Db2Formatter;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/languages/MariaDbFormatter.js
var require_MariaDbFormatter = __commonJS({
  "node_modules/sql-formatter/lib/languages/MariaDbFormatter.js"(exports2, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ACCESSIBLE", "ADD", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "ASENSITIVE", "BEFORE", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOTH", "BY", "CALL", "CASCADE", "CASE", "CHANGE", "CHAR", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", "DISTINCT", "DISTINCTROW", "DIV", "DO_DOMAIN_IDS", "DOUBLE", "DROP", "DUAL", "EACH", "ELSE", "ELSEIF", "ENCLOSED", "ESCAPED", "EXCEPT", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FLOAT", "FLOAT4", "FLOAT8", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERAL", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "HOUR_MICROSECOND", "HOUR_MINUTE", "HOUR_SECOND", "IF", "IGNORE", "IGNORE_DOMAIN_IDS", "IGNORE_SERVER_IDS", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCALTIME", "LOCALTIMESTAMP", "LOCK", "LONG", "LONGBLOB", "LONGTEXT", "LOOP", "LOW_PRIORITY", "MASTER_HEARTBEAT_PERIOD", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MIDDLEINT", "MINUTE_MICROSECOND", "MINUTE_SECOND", "MOD", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL", "NUMERIC", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "OVER", "PAGE_CHECKSUM", "PARSE_VCOL_EXPR", "PARTITION", "POSITION", "PRECISION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", "READS", "READ_WRITE", "REAL", "RECURSIVE", "REF_SYSTEM_ID", "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETURN", "RETURNING", "REVOKE", "RIGHT", "RLIKE", "ROWS", "SCHEMA", "SCHEMAS", "SECOND_MICROSECOND", "SELECT", "SENSITIVE", "SEPARATOR", "SET", "SHOW", "SIGNAL", "SLOW", "SMALLINT", "SPATIAL", "SPECIFIC", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STARTING", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TINYBLOB", "TINYINT", "TINYTEXT", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "VALUES", "VARBINARY", "VARCHAR", "VARCHARACTER", "VARYING", "WHEN", "WHERE", "WHILE", "WINDOW", "WITH", "WRITE", "XOR", "YEAR_MONTH", "ZEROFILL"];
    var reservedTopLevelWords = ["ADD", "ALTER COLUMN", "ALTER TABLE", "DELETE FROM", "EXCEPT", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "INSERT", "LIMIT", "ORDER BY", "SELECT", "SET", "UPDATE", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "UNION", "UNION ALL"];
    var reservedNewlineWords = [
      "AND",
      "ELSE",
      "OR",
      "WHEN",
      // joins
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN",
      // non-standard joins
      "STRAIGHT_JOIN",
      "NATURAL LEFT JOIN",
      "NATURAL LEFT OUTER JOIN",
      "NATURAL RIGHT JOIN",
      "NATURAL RIGHT OUTER JOIN"
    ];
    var MariaDbFormatter = /* @__PURE__ */ function(_Formatter) {
      _inherits(MariaDbFormatter2, _Formatter);
      var _super = _createSuper(MariaDbFormatter2);
      function MariaDbFormatter2() {
        _classCallCheck(this, MariaDbFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(MariaDbFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ["``", "''", '""'],
            openParens: ["(", "CASE"],
            closeParens: [")", "END"],
            indexedPlaceholderTypes: ["?"],
            namedPlaceholderTypes: [],
            lineCommentTypes: ["--", "#"],
            specialWordChars: ["@"],
            operators: [":=", "<<", ">>", "!=", "<>", "<=>", "&&", "||"]
          });
        }
      }]);
      return MariaDbFormatter2;
    }(_Formatter2["default"]);
    exports2["default"] = MariaDbFormatter;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/languages/MySqlFormatter.js
var require_MySqlFormatter = __commonJS({
  "node_modules/sql-formatter/lib/languages/MySqlFormatter.js"(exports2, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ACCESSIBLE", "ADD", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "ASENSITIVE", "BEFORE", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOTH", "BY", "CALL", "CASCADE", "CASE", "CHANGE", "CHAR", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CUBE", "CUME_DIST", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DENSE_RANK", "DESC", "DESCRIBE", "DETERMINISTIC", "DISTINCT", "DISTINCTROW", "DIV", "DOUBLE", "DROP", "DUAL", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FIRST_VALUE", "FLOAT", "FLOAT4", "FLOAT8", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "FUNCTION", "GENERATED", "GET", "GRANT", "GROUP", "GROUPING", "GROUPS", "HAVING", "HIGH_PRIORITY", "HOUR_MICROSECOND", "HOUR_MINUTE", "HOUR_SECOND", "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "INTERVAL", "INTO", "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS", "IS", "ITERATE", "JOIN", "JSON_TABLE", "KEY", "KEYS", "KILL", "LAG", "LAST_VALUE", "LATERAL", "LEAD", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCALTIME", "LOCALTIMESTAMP", "LOCK", "LONG", "LONGBLOB", "LONGTEXT", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MIDDLEINT", "MINUTE_MICROSECOND", "MINUTE_SECOND", "MOD", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NTH_VALUE", "NTILE", "NULL", "NUMERIC", "OF", "ON", "OPTIMIZE", "OPTIMIZER_COSTS", "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "OVER", "PARTITION", "PERCENT_RANK", "PRECISION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "RANK", "READ", "READS", "READ_WRITE", "REAL", "RECURSIVE", "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETURN", "REVOKE", "RIGHT", "RLIKE", "ROW", "ROWS", "ROW_NUMBER", "SCHEMA", "SCHEMAS", "SECOND_MICROSECOND", "SELECT", "SENSITIVE", "SEPARATOR", "SET", "SHOW", "SIGNAL", "SMALLINT", "SPATIAL", "SPECIFIC", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STARTING", "STORED", "STRAIGHT_JOIN", "SYSTEM", "TABLE", "TERMINATED", "THEN", "TINYBLOB", "TINYINT", "TINYTEXT", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "VALUES", "VARBINARY", "VARCHAR", "VARCHARACTER", "VARYING", "VIRTUAL", "WHEN", "WHERE", "WHILE", "WINDOW", "WITH", "WRITE", "XOR", "YEAR_MONTH", "ZEROFILL"];
    var reservedTopLevelWords = ["ADD", "ALTER COLUMN", "ALTER TABLE", "DELETE FROM", "EXCEPT", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "INSERT", "LIMIT", "ORDER BY", "SELECT", "SET", "UPDATE", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "UNION", "UNION ALL"];
    var reservedNewlineWords = [
      "AND",
      "ELSE",
      "OR",
      "WHEN",
      // joins
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN",
      // non-standard joins
      "STRAIGHT_JOIN",
      "NATURAL LEFT JOIN",
      "NATURAL LEFT OUTER JOIN",
      "NATURAL RIGHT JOIN",
      "NATURAL RIGHT OUTER JOIN"
    ];
    var MySqlFormatter = /* @__PURE__ */ function(_Formatter) {
      _inherits(MySqlFormatter2, _Formatter);
      var _super = _createSuper(MySqlFormatter2);
      function MySqlFormatter2() {
        _classCallCheck(this, MySqlFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(MySqlFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ["``", "''", '""'],
            openParens: ["(", "CASE"],
            closeParens: [")", "END"],
            indexedPlaceholderTypes: ["?"],
            namedPlaceholderTypes: [],
            lineCommentTypes: ["--", "#"],
            specialWordChars: ["@"],
            operators: [":=", "<<", ">>", "!=", "<>", "<=>", "&&", "||", "->", "->>"]
          });
        }
      }]);
      return MySqlFormatter2;
    }(_Formatter2["default"]);
    exports2["default"] = MySqlFormatter;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/languages/N1qlFormatter.js
var require_N1qlFormatter = __commonJS({
  "node_modules/sql-formatter/lib/languages/N1qlFormatter.js"(exports2, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "BEGIN", "BETWEEN", "BINARY", "BOOLEAN", "BREAK", "BUCKET", "BUILD", "BY", "CALL", "CASE", "CAST", "CLUSTER", "COLLATE", "COLLECTION", "COMMIT", "CONNECT", "CONTINUE", "CORRELATE", "COVER", "CREATE", "DATABASE", "DATASET", "DATASTORE", "DECLARE", "DECREMENT", "DELETE", "DERIVED", "DESC", "DESCRIBE", "DISTINCT", "DO", "DROP", "EACH", "ELEMENT", "ELSE", "END", "EVERY", "EXCEPT", "EXCLUDE", "EXECUTE", "EXISTS", "EXPLAIN", "FALSE", "FETCH", "FIRST", "FLATTEN", "FOR", "FORCE", "FROM", "FUNCTION", "GRANT", "GROUP", "GSI", "HAVING", "IF", "IGNORE", "ILIKE", "IN", "INCLUDE", "INCREMENT", "INDEX", "INFER", "INLINE", "INNER", "INSERT", "INTERSECT", "INTO", "IS", "JOIN", "KEY", "KEYS", "KEYSPACE", "KNOWN", "LAST", "LEFT", "LET", "LETTING", "LIKE", "LIMIT", "LSM", "MAP", "MAPPING", "MATCHED", "MATERIALIZED", "MERGE", "MISSING", "NAMESPACE", "NEST", "NOT", "NULL", "NUMBER", "OBJECT", "OFFSET", "ON", "OPTION", "OR", "ORDER", "OUTER", "OVER", "PARSE", "PARTITION", "PASSWORD", "PATH", "POOL", "PREPARE", "PRIMARY", "PRIVATE", "PRIVILEGE", "PROCEDURE", "PUBLIC", "RAW", "REALM", "REDUCE", "RENAME", "RETURN", "RETURNING", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "SATISFIES", "SCHEMA", "SELECT", "SELF", "SEMI", "SET", "SHOW", "SOME", "START", "STATISTICS", "STRING", "SYSTEM", "THEN", "TO", "TRANSACTION", "TRIGGER", "TRUE", "TRUNCATE", "UNDER", "UNION", "UNIQUE", "UNKNOWN", "UNNEST", "UNSET", "UPDATE", "UPSERT", "USE", "USER", "USING", "VALIDATE", "VALUE", "VALUED", "VALUES", "VIA", "VIEW", "WHEN", "WHERE", "WHILE", "WITH", "WITHIN", "WORK", "XOR"];
    var reservedTopLevelWords = ["DELETE FROM", "EXCEPT ALL", "EXCEPT", "EXPLAIN DELETE FROM", "EXPLAIN UPDATE", "EXPLAIN UPSERT", "FROM", "GROUP BY", "HAVING", "INFER", "INSERT INTO", "LET", "LIMIT", "MERGE", "NEST", "ORDER BY", "PREPARE", "SELECT", "SET CURRENT SCHEMA", "SET SCHEMA", "SET", "UNNEST", "UPDATE", "UPSERT", "USE KEYS", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "MINUS", "UNION", "UNION ALL"];
    var reservedNewlineWords = [
      "AND",
      "OR",
      "XOR",
      // joins
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN"
    ];
    var N1qlFormatter = /* @__PURE__ */ function(_Formatter) {
      _inherits(N1qlFormatter2, _Formatter);
      var _super = _createSuper(N1qlFormatter2);
      function N1qlFormatter2() {
        _classCallCheck(this, N1qlFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(N1qlFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "''", "``"],
            openParens: ["(", "[", "{"],
            closeParens: [")", "]", "}"],
            namedPlaceholderTypes: ["$"],
            lineCommentTypes: ["#", "--"],
            operators: ["==", "!="]
          });
        }
      }]);
      return N1qlFormatter2;
    }(_Formatter2["default"]);
    exports2["default"] = N1qlFormatter;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/languages/PlSqlFormatter.js
var require_PlSqlFormatter = __commonJS({
  "node_modules/sql-formatter/lib/languages/PlSqlFormatter.js"(exports2, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _token = require_token();
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    var _tokenTypes = _interopRequireDefault(require_tokenTypes());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["A", "ACCESSIBLE", "AGENT", "AGGREGATE", "ALL", "ALTER", "ANY", "ARRAY", "AS", "ASC", "AT", "ATTRIBUTE", "AUTHID", "AVG", "BETWEEN", "BFILE_BASE", "BINARY_INTEGER", "BINARY", "BLOB_BASE", "BLOCK", "BODY", "BOOLEAN", "BOTH", "BOUND", "BREADTH", "BULK", "BY", "BYTE", "C", "CALL", "CALLING", "CASCADE", "CASE", "CHAR_BASE", "CHAR", "CHARACTER", "CHARSET", "CHARSETFORM", "CHARSETID", "CHECK", "CLOB_BASE", "CLONE", "CLOSE", "CLUSTER", "CLUSTERS", "COALESCE", "COLAUTH", "COLLECT", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPILED", "COMPRESS", "CONNECT", "CONSTANT", "CONSTRUCTOR", "CONTEXT", "CONTINUE", "CONVERT", "COUNT", "CRASH", "CREATE", "CREDENTIAL", "CURRENT", "CURRVAL", "CURSOR", "CUSTOMDATUM", "DANGLING", "DATA", "DATE_BASE", "DATE", "DAY", "DECIMAL", "DEFAULT", "DEFINE", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", "DIRECTORY", "DISTINCT", "DO", "DOUBLE", "DROP", "DURATION", "ELEMENT", "ELSIF", "EMPTY", "END", "ESCAPE", "EXCEPTIONS", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", "EXTENDS", "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FINAL", "FIRST", "FIXED", "FLOAT", "FOR", "FORALL", "FORCE", "FROM", "FUNCTION", "GENERAL", "GOTO", "GRANT", "GROUP", "HASH", "HEAP", "HIDDEN", "HOUR", "IDENTIFIED", "IF", "IMMEDIATE", "IN", "INCLUDING", "INDEX", "INDEXES", "INDICATOR", "INDICES", "INFINITE", "INSTANTIABLE", "INT", "INTEGER", "INTERFACE", "INTERVAL", "INTO", "INVALIDATE", "IS", "ISOLATION", "JAVA", "LANGUAGE", "LARGE", "LEADING", "LENGTH", "LEVEL", "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", "LIMITED", "LOCAL", "LOCK", "LONG", "MAP", "MAX", "MAXLEN", "MEMBER", "MERGE", "MIN", "MINUTE", "MLSLABEL", "MOD", "MODE", "MONTH", "MULTISET", "NAME", "NAN", "NATIONAL", "NATIVE", "NATURAL", "NATURALN", "NCHAR", "NEW", "NEXTVAL", "NOCOMPRESS", "NOCOPY", "NOT", "NOWAIT", "NULL", "NULLIF", "NUMBER_BASE", "NUMBER", "OBJECT", "OCICOLL", "OCIDATE", "OCIDATETIME", "OCIDURATION", "OCIINTERVAL", "OCILOBLOCATOR", "OCINUMBER", "OCIRAW", "OCIREF", "OCIREFCURSOR", "OCIROWID", "OCISTRING", "OCITYPE", "OF", "OLD", "ON", "ONLY", "OPAQUE", "OPEN", "OPERATOR", "OPTION", "ORACLE", "ORADATA", "ORDER", "ORGANIZATION", "ORLANY", "ORLVARY", "OTHERS", "OUT", "OVERLAPS", "OVERRIDING", "PACKAGE", "PARALLEL_ENABLE", "PARAMETER", "PARAMETERS", "PARENT", "PARTITION", "PASCAL", "PCTFREE", "PIPE", "PIPELINED", "PLS_INTEGER", "PLUGGABLE", "POSITIVE", "POSITIVEN", "PRAGMA", "PRECISION", "PRIOR", "PRIVATE", "PROCEDURE", "PUBLIC", "RAISE", "RANGE", "RAW", "READ", "REAL", "RECORD", "REF", "REFERENCE", "RELEASE", "RELIES_ON", "REM", "REMAINDER", "RENAME", "RESOURCE", "RESULT_CACHE", "RESULT", "RETURN", "RETURNING", "REVERSE", "REVOKE", "ROLLBACK", "ROW", "ROWID", "ROWNUM", "ROWTYPE", "SAMPLE", "SAVE", "SAVEPOINT", "SB1", "SB2", "SB4", "SEARCH", "SECOND", "SEGMENT", "SELF", "SEPARATE", "SEQUENCE", "SERIALIZABLE", "SHARE", "SHORT", "SIZE_T", "SIZE", "SMALLINT", "SOME", "SPACE", "SPARSE", "SQL", "SQLCODE", "SQLDATA", "SQLERRM", "SQLNAME", "SQLSTATE", "STANDARD", "START", "STATIC", "STDDEV", "STORED", "STRING", "STRUCT", "STYLE", "SUBMULTISET", "SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", "SUCCESSFUL", "SUM", "SYNONYM", "SYSDATE", "TABAUTH", "TABLE", "TDO", "THE", "THEN", "TIME", "TIMESTAMP", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", "TO", "TRAILING", "TRANSACTION", "TRANSACTIONAL", "TRIGGER", "TRUE", "TRUSTED", "TYPE", "UB1", "UB2", "UB4", "UID", "UNDER", "UNIQUE", "UNPLUG", "UNSIGNED", "UNTRUSTED", "USE", "USER", "USING", "VALIDATE", "VALIST", "VALUE", "VARCHAR", "VARCHAR2", "VARIABLE", "VARIANCE", "VARRAY", "VARYING", "VIEW", "VIEWS", "VOID", "WHENEVER", "WHILE", "WITH", "WORK", "WRAPPED", "WRITE", "YEAR", "ZONE"];
    var reservedTopLevelWords = ["ADD", "ALTER COLUMN", "ALTER TABLE", "BEGIN", "CONNECT BY", "DECLARE", "DELETE FROM", "DELETE", "END", "EXCEPT", "EXCEPTION", "FETCH FIRST", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "INSERT", "LIMIT", "LOOP", "MODIFY", "ORDER BY", "SELECT", "SET CURRENT SCHEMA", "SET SCHEMA", "SET", "START WITH", "UPDATE", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "MINUS", "UNION", "UNION ALL"];
    var reservedNewlineWords = [
      "AND",
      "CROSS APPLY",
      "ELSE",
      "END",
      "OR",
      "OUTER APPLY",
      "WHEN",
      "XOR",
      // joins
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "FULL JOIN",
      "FULL OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN"
    ];
    var PlSqlFormatter = /* @__PURE__ */ function(_Formatter) {
      _inherits(PlSqlFormatter2, _Formatter);
      var _super = _createSuper(PlSqlFormatter2);
      function PlSqlFormatter2() {
        _classCallCheck(this, PlSqlFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(PlSqlFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "N''", "''", "``"],
            openParens: ["(", "CASE"],
            closeParens: [")", "END"],
            indexedPlaceholderTypes: ["?"],
            namedPlaceholderTypes: [":"],
            lineCommentTypes: ["--"],
            specialWordChars: ["_", "$", "#", ".", "@"],
            operators: ["||", "**", "!=", ":="]
          });
        }
      }, {
        key: "tokenOverride",
        value: function tokenOverride(token) {
          if ((0, _token.isSet)(token) && (0, _token.isBy)(this.previousReservedToken)) {
            return {
              type: _tokenTypes["default"].RESERVED,
              value: token.value
            };
          }
          return token;
        }
      }]);
      return PlSqlFormatter2;
    }(_Formatter2["default"]);
    exports2["default"] = PlSqlFormatter;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/languages/PostgreSqlFormatter.js
var require_PostgreSqlFormatter = __commonJS({
  "node_modules/sql-formatter/lib/languages/PostgreSqlFormatter.js"(exports2, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ABORT", "ABSOLUTE", "ACCESS", "ACTION", "ADD", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN", "BOTH", "BY", "CACHE", "CALL", "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG", "CHAIN", "CHAR", "CHARACTER", "CHARACTERISTICS", "CHECK", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT", "CONTINUE", "CONVERSION", "COPY", "COST", "CREATE", "CROSS", "CSV", "CUBE", "CURRENT", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE", "DATA", "DATABASE", "DAY", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE", "DELIMITER", "DELIMITERS", "DEPENDS", "DESC", "DETACH", "DICTIONARY", "DISABLE", "DISCARD", "DISTINCT", "DO", "DOCUMENT", "DOMAIN", "DOUBLE", "DROP", "EACH", "ELSE", "ENABLE", "ENCODING", "ENCRYPTED", "END", "ENUM", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPRESSION", "EXTENSION", "EXTERNAL", "EXTRACT", "FALSE", "FAMILY", "FETCH", "FILTER", "FIRST", "FLOAT", "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOBAL", "GRANT", "GRANTED", "GREATEST", "GROUP", "GROUPING", "GROUPS", "HANDLER", "HAVING", "HEADER", "HOLD", "HOUR", "IDENTITY", "IF", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT", "IMPORT", "IN", "INCLUDE", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE", "INNER", "INOUT", "INPUT", "INSENSITIVE", "INSERT", "INSTEAD", "INT", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL", "LANGUAGE", "LARGE", "LAST", "LATERAL", "LEADING", "LEAKPROOF", "LEAST", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION", "LOCK", "LOCKED", "LOGGED", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MINUTE", "MINVALUE", "MODE", "MONTH", "MOVE", "NAME", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NFC", "NFD", "NFKC", "NFKD", "NO", "NONE", "NORMALIZE", "NORMALIZED", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL", "NULLIF", "NULLS", "NUMERIC", "OBJECT", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OTHERS", "OUT", "OUTER", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PLACING", "PLANS", "POLICY", "POSITION", "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROCEDURES", "PROGRAM", "PUBLICATION", "QUOTE", "RANGE", "READ", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE", "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROUTINE", "ROUTINES", "ROW", "ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND", "SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SQL", "STABLE", "STANDALONE", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STORED", "STRICT", "STRIP", "SUBSCRIPTION", "SUBSTRING", "SUPPORT", "SYMMETRIC", "SYSID", "SYSTEM", "TABLE", "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT", "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE", "TRUNCATE", "TRUSTED", "TYPE", "TYPES", "UESCAPE", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER", "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE", "VALUES", "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION", "VIEW", "VIEWS", "VOLATILE", "WHEN", "WHERE", "WHITESPACE", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE", "XML", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR", "YES", "ZONE"];
    var reservedTopLevelWords = ["ADD", "AFTER", "ALTER COLUMN", "ALTER TABLE", "CASE", "DELETE FROM", "END", "EXCEPT", "FETCH FIRST", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "INSERT", "LIMIT", "ORDER BY", "SELECT", "SET CURRENT SCHEMA", "SET SCHEMA", "SET", "UPDATE", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "UNION", "UNION ALL"];
    var reservedNewlineWords = [
      "AND",
      "ELSE",
      "OR",
      "WHEN",
      // joins
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "FULL JOIN",
      "FULL OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN"
    ];
    var PostgreSqlFormatter = /* @__PURE__ */ function(_Formatter) {
      _inherits(PostgreSqlFormatter2, _Formatter);
      var _super = _createSuper(PostgreSqlFormatter2);
      function PostgreSqlFormatter2() {
        _classCallCheck(this, PostgreSqlFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(PostgreSqlFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "''", "U&''", 'U&""', "$$"],
            openParens: ["(", "CASE"],
            closeParens: [")", "END"],
            indexedPlaceholderTypes: ["$"],
            namedPlaceholderTypes: [":"],
            lineCommentTypes: ["--"],
            operators: ["!=", "<<", ">>", "||/", "|/", "::", "->>", "->", "~~*", "~~", "!~~*", "!~~", "~*", "!~*", "!~", "!!"]
          });
        }
      }]);
      return PostgreSqlFormatter2;
    }(_Formatter2["default"]);
    exports2["default"] = PostgreSqlFormatter;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/languages/RedshiftFormatter.js
var require_RedshiftFormatter = __commonJS({
  "node_modules/sql-formatter/lib/languages/RedshiftFormatter.js"(exports2, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["AES128", "AES256", "ALLOWOVERWRITE", "ANALYSE", "ARRAY", "AS", "ASC", "AUTHORIZATION", "BACKUP", "BINARY", "BLANKSASNULL", "BOTH", "BYTEDICT", "BZIP2", "CAST", "CHECK", "COLLATE", "COLUMN", "CONSTRAINT", "CREATE", "CREDENTIALS", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURRENT_USER_ID", "DEFAULT", "DEFERRABLE", "DEFLATE", "DEFRAG", "DELTA", "DELTA32K", "DESC", "DISABLE", "DISTINCT", "DO", "ELSE", "EMPTYASNULL", "ENABLE", "ENCODE", "ENCRYPT", "ENCRYPTION", "END", "EXPLICIT", "FALSE", "FOR", "FOREIGN", "FREEZE", "FULL", "GLOBALDICT256", "GLOBALDICT64K", "GRANT", "GZIP", "IDENTITY", "IGNORE", "ILIKE", "INITIALLY", "INTO", "LEADING", "LOCALTIME", "LOCALTIMESTAMP", "LUN", "LUNS", "LZO", "LZOP", "MINUS", "MOSTLY13", "MOSTLY32", "MOSTLY8", "NATURAL", "NEW", "NULLS", "OFF", "OFFLINE", "OFFSET", "OLD", "ON", "ONLY", "OPEN", "ORDER", "OVERLAPS", "PARALLEL", "PARTITION", "PERCENT", "PERMISSIONS", "PLACING", "PRIMARY", "RAW", "READRATIO", "RECOVER", "REFERENCES", "REJECTLOG", "RESORT", "RESTORE", "SESSION_USER", "SIMILAR", "SYSDATE", "SYSTEM", "TABLE", "TAG", "TDES", "TEXT255", "TEXT32K", "THEN", "TIMESTAMP", "TO", "TOP", "TRAILING", "TRUE", "TRUNCATECOLUMNS", "UNIQUE", "USER", "USING", "VERBOSE", "WALLET", "WHEN", "WITH", "WITHOUT", "PREDICATE", "COLUMNS", "COMPROWS", "COMPRESSION", "COPY", "FORMAT", "DELIMITER", "FIXEDWIDTH", "AVRO", "JSON", "ENCRYPTED", "BZIP2", "GZIP", "LZOP", "PARQUET", "ORC", "ACCEPTANYDATE", "ACCEPTINVCHARS", "BLANKSASNULL", "DATEFORMAT", "EMPTYASNULL", "ENCODING", "ESCAPE", "EXPLICIT_IDS", "FILLRECORD", "IGNOREBLANKLINES", "IGNOREHEADER", "NULL AS", "REMOVEQUOTES", "ROUNDEC", "TIMEFORMAT", "TRIMBLANKS", "TRUNCATECOLUMNS", "COMPROWS", "COMPUPDATE", "MAXERROR", "NOLOAD", "STATUPDATE", "MANIFEST", "REGION", "IAM_ROLE", "MASTER_SYMMETRIC_KEY", "SSH", "ACCEPTANYDATE", "ACCEPTINVCHARS", "ACCESS_KEY_ID", "SECRET_ACCESS_KEY", "AVRO", "BLANKSASNULL", "BZIP2", "COMPROWS", "COMPUPDATE", "CREDENTIALS", "DATEFORMAT", "DELIMITER", "EMPTYASNULL", "ENCODING", "ENCRYPTED", "ESCAPE", "EXPLICIT_IDS", "FILLRECORD", "FIXEDWIDTH", "FORMAT", "IAM_ROLE", "GZIP", "IGNOREBLANKLINES", "IGNOREHEADER", "JSON", "LZOP", "MANIFEST", "MASTER_SYMMETRIC_KEY", "MAXERROR", "NOLOAD", "NULL AS", "READRATIO", "REGION", "REMOVEQUOTES", "ROUNDEC", "SSH", "STATUPDATE", "TIMEFORMAT", "SESSION_TOKEN", "TRIMBLANKS", "TRUNCATECOLUMNS", "EXTERNAL", "DATA CATALOG", "HIVE METASTORE", "CATALOG_ROLE", "VACUUM", "COPY", "UNLOAD", "EVEN", "ALL"];
    var reservedTopLevelWords = ["ADD", "AFTER", "ALTER COLUMN", "ALTER TABLE", "DELETE FROM", "EXCEPT", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "INSERT", "INTERSECT", "TOP", "LIMIT", "MODIFY", "ORDER BY", "SELECT", "SET CURRENT SCHEMA", "SET SCHEMA", "SET", "UNION ALL", "UNION", "UPDATE", "VALUES", "WHERE", "VACUUM", "COPY", "UNLOAD", "ANALYZE", "ANALYSE", "DISTKEY", "SORTKEY", "COMPOUND", "INTERLEAVED", "FORMAT", "DELIMITER", "FIXEDWIDTH", "AVRO", "JSON", "ENCRYPTED", "BZIP2", "GZIP", "LZOP", "PARQUET", "ORC", "ACCEPTANYDATE", "ACCEPTINVCHARS", "BLANKSASNULL", "DATEFORMAT", "EMPTYASNULL", "ENCODING", "ESCAPE", "EXPLICIT_IDS", "FILLRECORD", "IGNOREBLANKLINES", "IGNOREHEADER", "NULL AS", "REMOVEQUOTES", "ROUNDEC", "TIMEFORMAT", "TRIMBLANKS", "TRUNCATECOLUMNS", "COMPROWS", "COMPUPDATE", "MAXERROR", "NOLOAD", "STATUPDATE", "MANIFEST", "REGION", "IAM_ROLE", "MASTER_SYMMETRIC_KEY", "SSH", "ACCEPTANYDATE", "ACCEPTINVCHARS", "ACCESS_KEY_ID", "SECRET_ACCESS_KEY", "AVRO", "BLANKSASNULL", "BZIP2", "COMPROWS", "COMPUPDATE", "CREDENTIALS", "DATEFORMAT", "DELIMITER", "EMPTYASNULL", "ENCODING", "ENCRYPTED", "ESCAPE", "EXPLICIT_IDS", "FILLRECORD", "FIXEDWIDTH", "FORMAT", "IAM_ROLE", "GZIP", "IGNOREBLANKLINES", "IGNOREHEADER", "JSON", "LZOP", "MANIFEST", "MASTER_SYMMETRIC_KEY", "MAXERROR", "NOLOAD", "NULL AS", "READRATIO", "REGION", "REMOVEQUOTES", "ROUNDEC", "SSH", "STATUPDATE", "TIMEFORMAT", "SESSION_TOKEN", "TRIMBLANKS", "TRUNCATECOLUMNS", "EXTERNAL", "DATA CATALOG", "HIVE METASTORE", "CATALOG_ROLE"];
    var reservedTopLevelWordsNoIndent = [];
    var reservedNewlineWords = [
      "AND",
      "ELSE",
      "OR",
      "OUTER APPLY",
      "WHEN",
      "VACUUM",
      "COPY",
      "UNLOAD",
      "ANALYZE",
      "ANALYSE",
      "DISTKEY",
      "SORTKEY",
      "COMPOUND",
      "INTERLEAVED",
      // joins
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "FULL JOIN",
      "FULL OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN"
    ];
    var RedshiftFormatter = /* @__PURE__ */ function(_Formatter) {
      _inherits(RedshiftFormatter2, _Formatter);
      var _super = _createSuper(RedshiftFormatter2);
      function RedshiftFormatter2() {
        _classCallCheck(this, RedshiftFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(RedshiftFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "''", "``"],
            openParens: ["("],
            closeParens: [")"],
            indexedPlaceholderTypes: ["?"],
            namedPlaceholderTypes: ["@", "#", "$"],
            lineCommentTypes: ["--"],
            operators: ["|/", "||/", "<<", ">>", "!=", "||"]
          });
        }
      }]);
      return RedshiftFormatter2;
    }(_Formatter2["default"]);
    exports2["default"] = RedshiftFormatter;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/languages/SparkSqlFormatter.js
var require_SparkSqlFormatter = __commonJS({
  "node_modules/sql-formatter/lib/languages/SparkSqlFormatter.js"(exports2, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _token = require_token();
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    var _tokenTypes = _interopRequireDefault(require_tokenTypes());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ALL", "ALTER", "ANALYSE", "ANALYZE", "ARRAY_ZIP", "ARRAY", "AS", "ASC", "AVG", "BETWEEN", "CASCADE", "CASE", "CAST", "COALESCE", "COLLECT_LIST", "COLLECT_SET", "COLUMN", "COLUMNS", "COMMENT", "CONSTRAINT", "CONTAINS", "CONVERT", "COUNT", "CUME_DIST", "CURRENT ROW", "CURRENT_DATE", "CURRENT_TIMESTAMP", "DATABASE", "DATABASES", "DATE_ADD", "DATE_SUB", "DATE_TRUNC", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "DAY", "DAYS", "DECODE", "DEFAULT", "DELETE", "DENSE_RANK", "DESC", "DESCRIBE", "DISTINCT", "DISTINCTROW", "DIV", "DROP", "ELSE", "ENCODE", "END", "EXISTS", "EXPLAIN", "EXPLODE_OUTER", "EXPLODE", "FILTER", "FIRST_VALUE", "FIRST", "FIXED", "FLATTEN", "FOLLOWING", "FROM_UNIXTIME", "FULL", "GREATEST", "GROUP_CONCAT", "HOUR_MINUTE", "HOUR_SECOND", "HOUR", "HOURS", "IF", "IFNULL", "IN", "INSERT", "INTERVAL", "INTO", "IS", "LAG", "LAST_VALUE", "LAST", "LEAD", "LEADING", "LEAST", "LEVEL", "LIKE", "MAX", "MERGE", "MIN", "MINUTE_SECOND", "MINUTE", "MONTH", "NATURAL", "NOT", "NOW()", "NTILE", "NULL", "NULLIF", "OFFSET", "ON DELETE", "ON UPDATE", "ON", "ONLY", "OPTIMIZE", "OVER", "PERCENT_RANK", "PRECEDING", "RANGE", "RANK", "REGEXP", "RENAME", "RLIKE", "ROW", "ROWS", "SECOND", "SEPARATOR", "SEQUENCE", "SIZE", "STRING", "STRUCT", "SUM", "TABLE", "TABLES", "TEMPORARY", "THEN", "TO_DATE", "TO_JSON", "TO", "TRAILING", "TRANSFORM", "TRUE", "TRUNCATE", "TYPE", "TYPES", "UNBOUNDED", "UNIQUE", "UNIX_TIMESTAMP", "UNLOCK", "UNSIGNED", "USING", "VARIABLES", "VIEW", "WHEN", "WITH", "YEAR_MONTH"];
    var reservedTopLevelWords = ["ADD", "AFTER", "ALTER COLUMN", "ALTER DATABASE", "ALTER SCHEMA", "ALTER TABLE", "CLUSTER BY", "CLUSTERED BY", "DELETE FROM", "DISTRIBUTE BY", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "INSERT", "LIMIT", "OPTIONS", "ORDER BY", "PARTITION BY", "PARTITIONED BY", "RANGE", "ROWS", "SELECT", "SET CURRENT SCHEMA", "SET SCHEMA", "SET", "TBLPROPERTIES", "UPDATE", "USING", "VALUES", "WHERE", "WINDOW"];
    var reservedTopLevelWordsNoIndent = ["EXCEPT ALL", "EXCEPT", "INTERSECT ALL", "INTERSECT", "UNION ALL", "UNION"];
    var reservedNewlineWords = [
      "AND",
      "CREATE OR",
      "CREATE",
      "ELSE",
      "LATERAL VIEW",
      "OR",
      "OUTER APPLY",
      "WHEN",
      "XOR",
      // joins
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "FULL JOIN",
      "FULL OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN",
      // non-standard-joins
      "ANTI JOIN",
      "SEMI JOIN",
      "LEFT ANTI JOIN",
      "LEFT SEMI JOIN",
      "RIGHT OUTER JOIN",
      "RIGHT SEMI JOIN",
      "NATURAL ANTI JOIN",
      "NATURAL FULL OUTER JOIN",
      "NATURAL INNER JOIN",
      "NATURAL LEFT ANTI JOIN",
      "NATURAL LEFT OUTER JOIN",
      "NATURAL LEFT SEMI JOIN",
      "NATURAL OUTER JOIN",
      "NATURAL RIGHT OUTER JOIN",
      "NATURAL RIGHT SEMI JOIN",
      "NATURAL SEMI JOIN"
    ];
    var SparkSqlFormatter = /* @__PURE__ */ function(_Formatter) {
      _inherits(SparkSqlFormatter2, _Formatter);
      var _super = _createSuper(SparkSqlFormatter2);
      function SparkSqlFormatter2() {
        _classCallCheck(this, SparkSqlFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(SparkSqlFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "''", "``", "{}"],
            openParens: ["(", "CASE"],
            closeParens: [")", "END"],
            indexedPlaceholderTypes: ["?"],
            namedPlaceholderTypes: ["$"],
            lineCommentTypes: ["--"],
            operators: ["!=", "<=>", "&&", "||", "=="]
          });
        }
      }, {
        key: "tokenOverride",
        value: function tokenOverride(token) {
          if ((0, _token.isWindow)(token)) {
            var aheadToken = this.tokenLookAhead();
            if (aheadToken && aheadToken.type === _tokenTypes["default"].OPEN_PAREN) {
              return {
                type: _tokenTypes["default"].RESERVED,
                value: token.value
              };
            }
          }
          if ((0, _token.isEnd)(token)) {
            var backToken = this.tokenLookBehind();
            if (backToken && backToken.type === _tokenTypes["default"].OPERATOR && backToken.value === ".") {
              return {
                type: _tokenTypes["default"].WORD,
                value: token.value
              };
            }
          }
          return token;
        }
      }]);
      return SparkSqlFormatter2;
    }(_Formatter2["default"]);
    exports2["default"] = SparkSqlFormatter;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/languages/StandardSqlFormatter.js
var require_StandardSqlFormatter = __commonJS({
  "node_modules/sql-formatter/lib/languages/StandardSqlFormatter.js"(exports2, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ABS", "ALL", "ALLOCATE", "ALTER", "AND", "ANY", "ARE", "ARRAY", "AS", "ASENSITIVE", "ASYMMETRIC", "AT", "ATOMIC", "AUTHORIZATION", "AVG", "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOOLEAN", "BOTH", "BY", "CALL", "CALLED", "CARDINALITY", "CASCADED", "CASE", "CAST", "CEIL", "CEILING", "CHAR", "CHAR_LENGTH", "CHARACTER", "CHARACTER_LENGTH", "CHECK", "CLOB", "CLOSE", "COALESCE", "COLLATE", "COLLECT", "COLUMN", "COMMIT", "CONDITION", "CONNECT", "CONSTRAINT", "CONVERT", "CORR", "CORRESPONDING", "COUNT", "COVAR_POP", "COVAR_SAMP", "CREATE", "CROSS", "CUBE", "CUME_DIST", "CURRENT", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_DEFAULT_TRANSFORM_GROUP", "CURRENT_PATH", "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_TRANSFORM_GROUP_FOR_TYPE", "CURRENT_USER", "CURSOR", "CYCLE", "DATE", "DAY", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DELETE", "DENSE_RANK", "DEREF", "DESCRIBE", "DETERMINISTIC", "DISCONNECT", "DISTINCT", "DOUBLE", "DROP", "DYNAMIC", "EACH", "ELEMENT", "ELSE", "END", "END-EXEC", "ESCAPE", "EVERY", "EXCEPT", "EXEC", "EXECUTE", "EXISTS", "EXP", "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FILTER", "FLOAT", "FLOOR", "FOR", "FOREIGN", "FREE", "FROM", "FULL", "FUNCTION", "FUSION", "GET", "GLOBAL", "GRANT", "GROUP", "GROUPING", "HAVING", "HOLD", "HOUR", "IDENTITY", "IN", "INDICATOR", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INT", "INTEGER", "INTERSECT", "INTERSECTION", "INTERVAL", "INTO", "IS", "JOIN", "LANGUAGE", "LARGE", "LATERAL", "LEADING", "LEFT", "LIKE", "LIKE_REGEX", "LN", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOWER", "MATCH", "MAX", "MEMBER", "MERGE", "METHOD", "MIN", "MINUTE", "MOD", "MODIFIES", "MODULE", "MONTH", "MULTISET", "NATIONAL", "NATURAL", "NCHAR", "NCLOB", "NEW", "NO", "NONE", "NORMALIZE", "NOT", "NULL", "NULLIF", "NUMERIC", "OCTET_LENGTH", "OCCURRENCES_REGEX", "OF", "OLD", "ON", "ONLY", "OPEN", "OR", "ORDER", "OUT", "OUTER", "OVER", "OVERLAPS", "OVERLAY", "PARAMETER", "PARTITION", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "POSITION", "POSITION_REGEX", "POWER", "PRECISION", "PREPARE", "PRIMARY", "PROCEDURE", "RANGE", "RANK", "READS", "REAL", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", "REGR_SYY", "RELEASE", "RESULT", "RETURN", "RETURNS", "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP", "ROW", "ROW_NUMBER", "ROWS", "SAVEPOINT", "SCOPE", "SCROLL", "SEARCH", "SECOND", "SELECT", "SENSITIVE", "SESSION_USER", "SET", "SIMILAR", "SMALLINT", "SOME", "SPECIFIC", "SPECIFICTYPE", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQRT", "START", "STATIC", "STDDEV_POP", "STDDEV_SAMP", "SUBMULTISET", "SUBSTRING", "SUBSTRING_REGEX", "SUM", "SYMMETRIC", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLESAMPLE", "THEN", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TO", "TRAILING", "TRANSLATE", "TRANSLATE_REGEX", "TRANSLATION", "TREAT", "TRIGGER", "TRIM", "TRUE", "UESCAPE", "UNION", "UNIQUE", "UNKNOWN", "UNNEST", "UPDATE", "UPPER", "USER", "USING", "VALUE", "VALUES", "VAR_POP", "VAR_SAMP", "VARBINARY", "VARCHAR", "VARYING", "WHEN", "WHENEVER", "WHERE", "WIDTH_BUCKET", "WINDOW", "WITH", "WITHIN", "WITHOUT", "YEAR"];
    var reservedTopLevelWords = ["ADD", "ALTER COLUMN", "ALTER TABLE", "CASE", "DELETE FROM", "END", "FETCH FIRST", "FETCH NEXT", "FETCH PRIOR", "FETCH LAST", "FETCH ABSOLUTE", "FETCH RELATIVE", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "LIMIT", "ORDER BY", "SELECT", "SET SCHEMA", "SET", "UPDATE", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "INTERSECT DISTINCT", "UNION", "UNION ALL", "UNION DISTINCT", "EXCEPT", "EXCEPT ALL", "EXCEPT DISTINCT"];
    var reservedNewlineWords = [
      "AND",
      "ELSE",
      "OR",
      "WHEN",
      // joins
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "FULL JOIN",
      "FULL OUTER JOIN",
      "CROSS JOIN",
      "NATURAL JOIN"
    ];
    var StandardSqlFormatter = /* @__PURE__ */ function(_Formatter) {
      _inherits(StandardSqlFormatter2, _Formatter);
      var _super = _createSuper(StandardSqlFormatter2);
      function StandardSqlFormatter2() {
        _classCallCheck(this, StandardSqlFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(StandardSqlFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "''"],
            openParens: ["(", "CASE"],
            closeParens: [")", "END"],
            indexedPlaceholderTypes: ["?"],
            namedPlaceholderTypes: [],
            lineCommentTypes: ["--"]
          });
        }
      }]);
      return StandardSqlFormatter2;
    }(_Formatter2["default"]);
    exports2["default"] = StandardSqlFormatter;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/languages/TSqlFormatter.js
var require_TSqlFormatter = __commonJS({
  "node_modules/sql-formatter/lib/languages/TSqlFormatter.js"(exports2, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2["default"] = void 0;
    var _Formatter2 = _interopRequireDefault(require_Formatter());
    var _Tokenizer = _interopRequireDefault(require_Tokenizer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var reservedWords = ["ADD", "EXTERNAL", "PROCEDURE", "ALL", "FETCH", "PUBLIC", "ALTER", "FILE", "RAISERROR", "AND", "FILLFACTOR", "READ", "ANY", "FOR", "READTEXT", "AS", "FOREIGN", "RECONFIGURE", "ASC", "FREETEXT", "REFERENCES", "AUTHORIZATION", "FREETEXTTABLE", "REPLICATION", "BACKUP", "FROM", "RESTORE", "BEGIN", "FULL", "RESTRICT", "BETWEEN", "FUNCTION", "RETURN", "BREAK", "GOTO", "REVERT", "BROWSE", "GRANT", "REVOKE", "BULK", "GROUP", "RIGHT", "BY", "HAVING", "ROLLBACK", "CASCADE", "HOLDLOCK", "ROWCOUNT", "CASE", "IDENTITY", "ROWGUIDCOL", "CHECK", "IDENTITY_INSERT", "RULE", "CHECKPOINT", "IDENTITYCOL", "SAVE", "CLOSE", "IF", "SCHEMA", "CLUSTERED", "IN", "SECURITYAUDIT", "COALESCE", "INDEX", "SELECT", "COLLATE", "INNER", "SEMANTICKEYPHRASETABLE", "COLUMN", "INSERT", "SEMANTICSIMILARITYDETAILSTABLE", "COMMIT", "INTERSECT", "SEMANTICSIMILARITYTABLE", "COMPUTE", "INTO", "SESSION_USER", "CONSTRAINT", "IS", "SET", "CONTAINS", "JOIN", "SETUSER", "CONTAINSTABLE", "KEY", "SHUTDOWN", "CONTINUE", "KILL", "SOME", "CONVERT", "LEFT", "STATISTICS", "CREATE", "LIKE", "SYSTEM_USER", "CROSS", "LINENO", "TABLE", "CURRENT", "LOAD", "TABLESAMPLE", "CURRENT_DATE", "MERGE", "TEXTSIZE", "CURRENT_TIME", "NATIONAL", "THEN", "CURRENT_TIMESTAMP", "NOCHECK", "TO", "CURRENT_USER", "NONCLUSTERED", "TOP", "CURSOR", "NOT", "TRAN", "DATABASE", "NULL", "TRANSACTION", "DBCC", "NULLIF", "TRIGGER", "DEALLOCATE", "OF", "TRUNCATE", "DECLARE", "OFF", "TRY_CONVERT", "DEFAULT", "OFFSETS", "TSEQUAL", "DELETE", "ON", "UNION", "DENY", "OPEN", "UNIQUE", "DESC", "OPENDATASOURCE", "UNPIVOT", "DISK", "OPENQUERY", "UPDATE", "DISTINCT", "OPENROWSET", "UPDATETEXT", "DISTRIBUTED", "OPENXML", "USE", "DOUBLE", "OPTION", "USER", "DROP", "OR", "VALUES", "DUMP", "ORDER", "VARYING", "ELSE", "OUTER", "VIEW", "END", "OVER", "WAITFOR", "ERRLVL", "PERCENT", "WHEN", "ESCAPE", "PIVOT", "WHERE", "EXCEPT", "PLAN", "WHILE", "EXEC", "PRECISION", "WITH", "EXECUTE", "PRIMARY", "WITHIN GROUP", "EXISTS", "PRINT", "WRITETEXT", "EXIT", "PROC"];
    var reservedTopLevelWords = ["ADD", "ALTER COLUMN", "ALTER TABLE", "CASE", "DELETE FROM", "END", "EXCEPT", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "INSERT", "LIMIT", "ORDER BY", "SELECT", "SET CURRENT SCHEMA", "SET SCHEMA", "SET", "UPDATE", "VALUES", "WHERE"];
    var reservedTopLevelWordsNoIndent = ["INTERSECT", "INTERSECT ALL", "MINUS", "UNION", "UNION ALL"];
    var reservedNewlineWords = [
      "AND",
      "ELSE",
      "OR",
      "WHEN",
      // joins
      "JOIN",
      "INNER JOIN",
      "LEFT JOIN",
      "LEFT OUTER JOIN",
      "RIGHT JOIN",
      "RIGHT OUTER JOIN",
      "FULL JOIN",
      "FULL OUTER JOIN",
      "CROSS JOIN"
    ];
    var TSqlFormatter = /* @__PURE__ */ function(_Formatter) {
      _inherits(TSqlFormatter2, _Formatter);
      var _super = _createSuper(TSqlFormatter2);
      function TSqlFormatter2() {
        _classCallCheck(this, TSqlFormatter2);
        return _super.apply(this, arguments);
      }
      _createClass(TSqlFormatter2, [{
        key: "tokenizer",
        value: function tokenizer() {
          return new _Tokenizer["default"]({
            reservedWords,
            reservedTopLevelWords,
            reservedNewlineWords,
            reservedTopLevelWordsNoIndent,
            stringTypes: ['""', "N''", "''", "[]"],
            openParens: ["(", "CASE"],
            closeParens: [")", "END"],
            indexedPlaceholderTypes: [],
            namedPlaceholderTypes: ["@"],
            lineCommentTypes: ["--"],
            specialWordChars: ["#", "@"],
            operators: [">=", "<=", "<>", "!=", "!<", "!>", "+=", "-=", "*=", "/=", "%=", "|=", "&=", "^=", "::"]
            // TODO: Support for money constants
          });
        }
      }]);
      return TSqlFormatter2;
    }(_Formatter2["default"]);
    exports2["default"] = TSqlFormatter;
    module2.exports = exports2.default;
  }
});

// node_modules/sql-formatter/lib/sqlFormatter.js
var require_sqlFormatter = __commonJS({
  "node_modules/sql-formatter/lib/sqlFormatter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.supportedDialects = exports2.format = void 0;
    var _Db2Formatter = _interopRequireDefault(require_Db2Formatter());
    var _MariaDbFormatter = _interopRequireDefault(require_MariaDbFormatter());
    var _MySqlFormatter = _interopRequireDefault(require_MySqlFormatter());
    var _N1qlFormatter = _interopRequireDefault(require_N1qlFormatter());
    var _PlSqlFormatter = _interopRequireDefault(require_PlSqlFormatter());
    var _PostgreSqlFormatter = _interopRequireDefault(require_PostgreSqlFormatter());
    var _RedshiftFormatter = _interopRequireDefault(require_RedshiftFormatter());
    var _SparkSqlFormatter = _interopRequireDefault(require_SparkSqlFormatter());
    var _StandardSqlFormatter = _interopRequireDefault(require_StandardSqlFormatter());
    var _TSqlFormatter = _interopRequireDefault(require_TSqlFormatter());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var formatters = {
      db2: _Db2Formatter["default"],
      mariadb: _MariaDbFormatter["default"],
      mysql: _MySqlFormatter["default"],
      n1ql: _N1qlFormatter["default"],
      plsql: _PlSqlFormatter["default"],
      postgresql: _PostgreSqlFormatter["default"],
      redshift: _RedshiftFormatter["default"],
      spark: _SparkSqlFormatter["default"],
      sql: _StandardSqlFormatter["default"],
      tsql: _TSqlFormatter["default"]
    };
    var format3 = function format4(query) {
      var cfg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (typeof query !== "string") {
        throw new Error("Invalid query argument. Extected string, instead got " + _typeof(query));
      }
      var Formatter = _StandardSqlFormatter["default"];
      if (cfg.language !== void 0) {
        Formatter = formatters[cfg.language];
      }
      if (Formatter === void 0) {
        throw Error("Unsupported SQL dialect: ".concat(cfg.language));
      }
      return new Formatter(cfg).format(query);
    };
    exports2.format = format3;
    var supportedDialects = Object.keys(formatters);
    exports2.supportedDialects = supportedDialects;
  }
});

// node_modules/igniculus/index.js
var require_igniculus = __commonJS({
  "node_modules/igniculus/index.js"(exports2, module2) {
    "use strict";
    var sql92 = {
      defaultDataTypes: ["SMALLINT", "INTEGER", "INT", "NUMERIC", "DECIMAL", "DEC", "FLOAT", "REAL", "DOUBLE PRECISION", "CHARACTER", "CHAR", "NCHAR", "VARCHAR", "BIT", "DATE", "TIME", "TIMESTAMP", "INTERVAL", "NATIONAL", "VARYING", "TIME ZONE"]
    };
    var tsql = {
      defaultDataTypes: ["BIGINT", "NUMERIC", "BIT", "SMALLINT", "DECIMAL", "SMALLMONEY", "INT", "TINYINT", "MONEY", "FLOAT", "REAL", "DATE", "DATETIMEOFFSET", "DATETIME2", "SMALLDATETIME", "DATETIME", "TIME", "CHAR", "VARCHAR", "TEXT", "NCHAR", "NVARCHAR", "NTEXT", "BINARY", "VARBINARY", "IMAGE", "GEOMETRY", "GEOGRAPHY", "UNIQUEIDENTIFIER", "XML"]
    };
    function union() {
      let array = [];
      for (let arg of arguments)
        for (let item of arg)
          if (!~array.indexOf(item))
            array.push(item);
      return array;
    }
    function unshiftCompoundKeywords(array) {
      for (let i = array.length - 1; i >= 0; i--) {
        const word = array[i];
        if (/\w+\s\w+/.test(word))
          array.unshift(array.splice(i, 1)[0]);
      }
      return array;
    }
    var defaultDataTypes = unshiftCompoundKeywords(union(sql92.defaultDataTypes, tsql.defaultDataTypes));
    var defaultStandardKeywords = ["ACTION", "ADD", "AFTER", "ALTER", "AUTHORIZATION", "BEFORE", "BEGIN", "BREAK", "BY", "CASCADE", "CASE", "CHECK", "CHECKPOINT", "CLOSE", "COLUMN", "COMMIT", "CONSTRAINT", "CONTINUE", "CREATE", "CROSS", "CURSOR", "DATABASE", "DECLARE", "DEFAULT", "DELETE", "DISTINCT", "DROP", "EACH", "ELSE", "ELSEIF", "END", "EXCEPT", "EXEC", "EXECUTE", "EXIT", "FETCH", "FIRST", "FOR", "FOREIGN", "FROM", "FULL", "FUNCTION", "GO", "GRANT", "GROUP", "HAVING", "IDENTITY", "IF", "INDEX", "INNER", "INSERT", "INTERSECT", "INTO", "JOIN", "KEY", "LEFT", "LIMIT", "LAST", "LOOP", "MERGE", "MODIFY", "NEXT", "NO", "OFFSET", "ON", "OPEN", "ORDER", "OUTER", "PRIMARY", "PROC", "PROCEDURE", "REFERENCES", "RELATIVE", "REPLACE", "RETURN", "RETURNS", "REVOKE", "RIGHT", "ROLLBACK", "ROW", "ROWS", "SAVE", "SCHEMA", "SELECT", "SET", "TABLE", "THEN", "TOP", "TRAN", "TRANSACTION", "TRIGGER", "TRUNCATE", "UNION", "UNIQUE", "UPDATE", "USE", "USING", "VALUES", "VIEW", "WHEN", "WHERE", "WHILE", "WITH", "WITHOUT"];
    var defaultLesserKeywords = ["ALL", "AND", "ANY", "AS", "ASC", "AVG", "BETWEEN", "COLLATE", "COUNT", "DESC", "ESCAPE", "EXISTS", "IN", "IS", "LIKE", "MAX", "MIN", "NOT", "NULL", "OR", "SOME", "SUM", "TO"];
    var dataTypes = defaultDataTypes.slice();
    var standardKeywords = defaultStandardKeywords.slice();
    var lesserKeywords = defaultLesserKeywords.slice();
    var ANSIModes = {
      reset: "\x1B[0m",
      bold: "\x1B[1m",
      dim: "\x1B[2m",
      italic: "\x1B[3m",
      underline: "\x1B[4m",
      blink: "\x1B[5m",
      inverse: "\x1B[7m",
      hidden: "\x1B[8m",
      strikethrough: "\x1B[9m"
    };
    var ANSIColours = {
      fg: {
        black: "\x1B[30m",
        red: "\x1B[31m",
        green: "\x1B[32m",
        yellow: "\x1B[33m",
        blue: "\x1B[34m",
        magenta: "\x1B[35m",
        cyan: "\x1B[36m",
        white: "\x1B[37m"
      },
      bg: {
        black: "\x1B[40m",
        red: "\x1B[41m",
        green: "\x1B[42m",
        yellow: "\x1B[43m",
        blue: "\x1B[44m",
        magenta: "\x1B[45m",
        cyan: "\x1B[46m",
        white: "\x1B[47m"
      }
    };
    var defaults = {
      comments: { mode: "dim", fg: "white" },
      constants: { mode: "dim", fg: "red" },
      delimitedIdentifiers: { mode: "dim", fg: "yellow" },
      variables: { mode: "dim", fg: "magenta" },
      dataTypes: { mode: "dim", fg: "green", casing: "uppercase" },
      standardKeywords: { mode: "dim", fg: "cyan", casing: "uppercase" },
      lesserKeywords: { mode: "bold", fg: "black", casing: "uppercase" },
      prefix: { replace: /.*?: / }
    };
    var runestone;
    function forgeANSISequence(rule) {
      let mode, fg, bg;
      mode = rule.mode && ANSIModes[rule.mode] ? ANSIModes[rule.mode] : "";
      fg = rule.fg && ANSIColours.fg[rule.fg] ? ANSIColours.fg[rule.fg] : "";
      bg = rule.bg && ANSIColours.bg[rule.bg] ? ANSIColours.bg[rule.bg] : "";
      let ANSISequence = mode + bg + fg;
      return ANSISequence;
    }
    function voidFormatting(text) {
      return text.replace(/\x1b\[\d{1,2}m/g, "");
    }
    function illumine(text) {
      let output, type = typeof text;
      if (text && (type === "string" || type === "object"))
        output = type === "string" ? text : text.toString();
      else
        return;
      let __prefix;
      if (runestone.prefix && runestone.prefix.replace) {
        let match = runestone.prefix.replace.exec(output);
        if (match) {
          __prefix = match[0];
          output = output.substr(__prefix.length);
        }
      }
      let __archetypes = {};
      if (runestone.own) {
        for (const key of Object.keys(runestone.own)) {
          const rule = runestone.own[key];
          __archetypes[key] = output.match(rule.regexp);
          if (__archetypes[key] && __archetypes[key].length) {
            output = output.replace(rule.regexp, "\u2942_" + key + "\u2944");
          }
        }
      }
      let __identifiers = output.match(/(\[.*?\]|".*?")/g);
      if (__identifiers && __identifiers.length) {
        output = output.replace(/(\[.*?\]|".*?")/g, "\u21C1\u203B\u21BC");
      }
      let __constants = output.match(/('.*?')/g);
      if (__constants && __constants.length) {
        output = output.replace(/('.*?')/g, "\u21DD\u203B\u21DC");
      }
      let __variables = output.match(/(\B@[@#$_\w\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u00ff\u0100-\u017f\u0180-\u024f]*)/g);
      if (__variables && __variables.length) {
        output = output.replace(/(\B@[@#$_\w\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u00ff\u0100-\u017f\u0180-\u024f]*)/g, "\u21AA\u203B\u21A9");
      }
      let __comments = output.match(/(-{2}.*)|(\/\*(.|[\r\n])*?\*\/)/g);
      if (__comments && __comments.length) {
        output = output.replace(/(-{2}.*)|(\/\*(.|[\r\n])*?\*\/)/g, "\u2964\u203B\u2962");
      }
      if (runestone.dataTypes && runestone.dataTypes.sequence) {
        let regex = new RegExp("\\b(" + dataTypes.join("|") + `)\\b(?!['"\\]])`, "gi");
        output = output.replace(regex, (match, g1) => {
          let word = g1;
          const casing = runestone.dataTypes.casing;
          if (typeof casing === "string" && (casing === "lowercase" || casing === "uppercase"))
            word = casing === "lowercase" ? word.toLowerCase() : word.toUpperCase();
          return runestone.dataTypes.sequence + word + ANSIModes.reset;
        });
      }
      if (runestone.standardKeywords && runestone.standardKeywords.sequence) {
        let regex = new RegExp("\\b(" + standardKeywords.join("|") + `)\\b(?!['"\\]])`, "gi");
        output = output.replace(regex, (match, g1) => {
          let word = g1;
          const casing = runestone.standardKeywords.casing;
          if (typeof casing === "string" && (casing === "lowercase" || casing === "uppercase"))
            word = casing === "lowercase" ? word.toLowerCase() : word.toUpperCase();
          return runestone.standardKeywords.sequence + word + ANSIModes.reset;
        });
      }
      if (runestone.lesserKeywords && runestone.lesserKeywords.sequence) {
        let regex = new RegExp("\\b(" + lesserKeywords.join("|") + `)\\b(?!['"\\]])`, "gi");
        output = output.replace(regex, (match, g1) => {
          let word = g1;
          const casing = runestone.lesserKeywords.casing;
          if (typeof casing === "string" && (casing === "lowercase" || casing === "uppercase"))
            word = casing === "lowercase" ? word.toLowerCase() : word.toUpperCase();
          return runestone.lesserKeywords.sequence + word + ANSIModes.reset;
        });
      }
      if (runestone.numbers && runestone.numbers.sequence) {
        output = output.replace(/((\d+\.{1}){0,1}(\d+)(?![a-z\x1b]))(?!\d)/gi, runestone.numbers.sequence + "$1" + ANSIModes.reset);
      }
      if (runestone.operators && runestone.operators.sequence) {
        output = output.replace(/(\+|-|\*|\/|%|&|\||\^|=|>|<)+/g, runestone.operators.sequence + "$&" + ANSIModes.reset);
      }
      if (__comments && __comments.length) {
        for (let i of __comments) {
          if (runestone.comments && runestone.comments.sequence)
            output = output.replace("\u2964\u203B\u2962", runestone.comments.sequence + "c\u2020s" + i + "c\u2021e" + ANSIModes.reset);
          else
            output = output.replace("\u2964\u203B\u2962", "c\u2020s" + i + "c\u2021e");
        }
      }
      if (__variables && __variables.length) {
        for (let i of __variables) {
          if (runestone.variables && runestone.variables.sequence)
            output = output.replace("\u21AA\u203B\u21A9", runestone.variables.sequence + i + ANSIModes.reset);
          else
            output = output.replace("\u21AA\u203B\u21A9", i);
        }
      }
      if (__constants && __constants.length) {
        for (let i of __constants) {
          if (runestone.constants && runestone.constants.sequence)
            output = output.replace("\u21DD\u203B\u21DC", runestone.constants.sequence + i + ANSIModes.reset);
          else
            output = output.replace("\u21DD\u203B\u21DC", i);
        }
      }
      if (__identifiers && __identifiers.length) {
        for (let i of __identifiers) {
          if (runestone.delimitedIdentifiers && runestone.delimitedIdentifiers.sequence)
            output = output.replace("\u21C1\u203B\u21BC", runestone.delimitedIdentifiers.sequence + i + ANSIModes.reset);
          else
            output = output.replace("\u21C1\u203B\u21BC", i);
        }
      }
      if (runestone.own) {
        for (const key of Object.keys(runestone.own).reverse()) {
          const rule = runestone.own[key];
          if (__archetypes[key] && __archetypes[key].length) {
            for (let i of __archetypes[key]) {
              let re2 = i;
              if (typeof rule.transform === "string")
                re2 = rule.transform;
              else if (typeof rule.transform === "function")
                re2 = rule.transform(i);
              re2 = re2.replace(/\$/g, "$$$");
              if (rule && rule.sequence)
                output = output.replace("\u2942_" + key + "\u2944", rule.sequence + re2 + ANSIModes.reset);
              else
                output = output.replace("\u2942_" + key + "\u2944", re2);
            }
          }
        }
      }
      output = output.replace(/('.*?')/g, (match) => {
        return voidFormatting(match);
      });
      output = output.replace(/(c†s)((-{2}.*)|(\/\*(.|[\r\n])*?\*\/))(c‡e)/g, (match, p1, p2) => {
        return voidFormatting(p2);
      });
      if (__prefix && typeof runestone.prefix.text === "string") {
        output = __prefix + output;
        output = output.replace(__prefix, runestone.prefix.sequence + runestone.prefix.text + ANSIModes.reset);
      } else if (runestone.prefix && runestone.prefix.text && !runestone.prefix.replace) {
        output = runestone.prefix.sequence + runestone.prefix.text + ANSIModes.reset + output;
      }
      if (runestone.postfix && runestone.postfix.text) {
        output = output + runestone.postfix.sequence + runestone.postfix.text + ANSIModes.reset;
      }
      return runestone.output(output);
    }
    function igniculus(options) {
      runestone = options || defaults;
      if (runestone.comments) {
        runestone.comments.sequence = forgeANSISequence(runestone.comments);
      }
      if (runestone.constants) {
        runestone.constants.sequence = forgeANSISequence(runestone.constants);
      }
      if (runestone.delimitedIdentifiers) {
        runestone.delimitedIdentifiers.sequence = forgeANSISequence(runestone.delimitedIdentifiers);
      }
      if (runestone.numbers) {
        runestone.numbers.sequence = forgeANSISequence(runestone.numbers);
      }
      if (runestone.operators) {
        runestone.operators.sequence = forgeANSISequence(runestone.operators);
      }
      if (runestone.variables) {
        runestone.variables.sequence = forgeANSISequence(runestone.variables);
      }
      if (runestone.dataTypes) {
        if (Array.isArray(runestone.dataTypes.types))
          dataTypes = runestone.dataTypes.types;
        else
          dataTypes = defaultDataTypes.slice();
        runestone.dataTypes.sequence = forgeANSISequence(runestone.dataTypes);
      }
      if (runestone.standardKeywords) {
        if (Array.isArray(runestone.standardKeywords.keywords))
          standardKeywords = runestone.standardKeywords.keywords;
        else
          standardKeywords = defaultStandardKeywords.slice();
        runestone.standardKeywords.sequence = forgeANSISequence(runestone.standardKeywords);
      }
      if (runestone.lesserKeywords) {
        if (Array.isArray(runestone.lesserKeywords.keywords))
          lesserKeywords = runestone.lesserKeywords.keywords;
        else
          lesserKeywords = defaultLesserKeywords.slice();
        runestone.lesserKeywords.sequence = forgeANSISequence(runestone.lesserKeywords);
      }
      if (runestone.prefix) {
        runestone.prefix.sequence = forgeANSISequence(runestone.prefix);
        if (runestone.prefix.replace && typeof runestone.prefix.replace === "string") {
          runestone.prefix.replace = runestone.prefix.replace.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
          runestone.prefix.replace = new RegExp("^" + runestone.prefix.replace, "i");
        }
      }
      if (runestone.postfix) {
        runestone.postfix.sequence = forgeANSISequence(runestone.postfix);
      }
      if (runestone.own) {
        for (const key of Object.keys(runestone.own)) {
          const rule = runestone.own[key];
          rule.sequence = forgeANSISequence(rule);
        }
      }
      if (typeof runestone.output !== "function") {
        runestone.output = console.log;
      }
      return illumine;
    }
    module2.exports = igniculus;
    module2.exports.log = illumine;
  }
});

// node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports2, module2) {
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    module2.exports = _interopRequireDefault, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports2, module2) {
    function _typeof(o) {
      "@babel/helpers - typeof";
      return module2.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _typeof(o);
    }
    module2.exports = _typeof, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/date-fns/_lib/toInteger/index.js
var require_toInteger = __commonJS({
  "node_modules/date-fns/_lib/toInteger/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = toInteger;
    function toInteger(dirtyNumber) {
      if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
        return NaN;
      }
      var number = Number(dirtyNumber);
      if (isNaN(number)) {
        return number;
      }
      return number < 0 ? Math.ceil(number) : Math.floor(number);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/requiredArgs/index.js
var require_requiredArgs = __commonJS({
  "node_modules/date-fns/_lib/requiredArgs/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = requiredArgs;
    function requiredArgs(required2, args) {
      if (args.length < required2) {
        throw new TypeError(required2 + " argument" + (required2 > 1 ? "s" : "") + " required, but only " + args.length + " present");
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/toDate/index.js
var require_toDate = __commonJS({
  "node_modules/date-fns/toDate/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = toDate2;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _index = _interopRequireDefault(require_requiredArgs());
    function toDate2(argument) {
      (0, _index.default)(1, arguments);
      var argStr = Object.prototype.toString.call(argument);
      if (argument instanceof Date || (0, _typeof2.default)(argument) === "object" && argStr === "[object Date]") {
        return new Date(argument.getTime());
      } else if (typeof argument === "number" || argStr === "[object Number]") {
        return new Date(argument);
      } else {
        if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
          console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
          console.warn(new Error().stack);
        }
        return /* @__PURE__ */ new Date(NaN);
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addDays/index.js
var require_addDays = __commonJS({
  "node_modules/date-fns/addDays/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addDays4;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function addDays4(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var amount = (0, _index.default)(dirtyAmount);
      if (isNaN(amount)) {
        return /* @__PURE__ */ new Date(NaN);
      }
      if (!amount) {
        return date;
      }
      date.setDate(date.getDate() + amount);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addMonths/index.js
var require_addMonths = __commonJS({
  "node_modules/date-fns/addMonths/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addMonths3;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function addMonths3(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var amount = (0, _index.default)(dirtyAmount);
      if (isNaN(amount)) {
        return /* @__PURE__ */ new Date(NaN);
      }
      if (!amount) {
        return date;
      }
      var dayOfMonth = date.getDate();
      var endOfDesiredMonth = new Date(date.getTime());
      endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
      var daysInMonth = endOfDesiredMonth.getDate();
      if (dayOfMonth >= daysInMonth) {
        return endOfDesiredMonth;
      } else {
        date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
        return date;
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/add/index.js
var require_add = __commonJS({
  "node_modules/date-fns/add/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = add;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _index = _interopRequireDefault(require_addDays());
    var _index2 = _interopRequireDefault(require_addMonths());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    var _index5 = _interopRequireDefault(require_toInteger());
    function add(dirtyDate, duration) {
      (0, _index4.default)(2, arguments);
      if (!duration || (0, _typeof2.default)(duration) !== "object") return /* @__PURE__ */ new Date(NaN);
      var years = duration.years ? (0, _index5.default)(duration.years) : 0;
      var months = duration.months ? (0, _index5.default)(duration.months) : 0;
      var weeks = duration.weeks ? (0, _index5.default)(duration.weeks) : 0;
      var days = duration.days ? (0, _index5.default)(duration.days) : 0;
      var hours = duration.hours ? (0, _index5.default)(duration.hours) : 0;
      var minutes = duration.minutes ? (0, _index5.default)(duration.minutes) : 0;
      var seconds = duration.seconds ? (0, _index5.default)(duration.seconds) : 0;
      var date = (0, _index3.default)(dirtyDate);
      var dateWithMonths = months || years ? (0, _index2.default)(date, months + years * 12) : date;
      var dateWithDays = days || weeks ? (0, _index.default)(dateWithMonths, days + weeks * 7) : dateWithMonths;
      var minutesToAdd = minutes + hours * 60;
      var secondsToAdd = seconds + minutesToAdd * 60;
      var msToAdd = secondsToAdd * 1e3;
      var finalDate = new Date(dateWithDays.getTime() + msToAdd);
      return finalDate;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isWeekend/index.js
var require_isWeekend = __commonJS({
  "node_modules/date-fns/isWeekend/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isWeekend2;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isWeekend2(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var day = date.getDay();
      return day === 0 || day === 6;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSunday/index.js
var require_isSunday = __commonJS({
  "node_modules/date-fns/isSunday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSunday;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isSunday(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getDay() === 0;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSaturday/index.js
var require_isSaturday = __commonJS({
  "node_modules/date-fns/isSaturday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSaturday;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isSaturday(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getDay() === 6;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addBusinessDays/index.js
var require_addBusinessDays = __commonJS({
  "node_modules/date-fns/addBusinessDays/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addBusinessDays;
    var _index = _interopRequireDefault(require_isWeekend());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_toInteger());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    var _index5 = _interopRequireDefault(require_isSunday());
    var _index6 = _interopRequireDefault(require_isSaturday());
    function addBusinessDays(dirtyDate, dirtyAmount) {
      (0, _index4.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var startedOnWeekend = (0, _index.default)(date);
      var amount = (0, _index3.default)(dirtyAmount);
      if (isNaN(amount)) return /* @__PURE__ */ new Date(NaN);
      var hours = date.getHours();
      var sign = amount < 0 ? -1 : 1;
      var fullWeeks = (0, _index3.default)(amount / 5);
      date.setDate(date.getDate() + fullWeeks * 7);
      var restDays = Math.abs(amount % 5);
      while (restDays > 0) {
        date.setDate(date.getDate() + sign);
        if (!(0, _index.default)(date)) restDays -= 1;
      }
      if (startedOnWeekend && (0, _index.default)(date) && amount !== 0) {
        if ((0, _index6.default)(date)) date.setDate(date.getDate() + (sign < 0 ? 2 : -1));
        if ((0, _index5.default)(date)) date.setDate(date.getDate() + (sign < 0 ? 1 : -2));
      }
      date.setHours(hours);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addMilliseconds/index.js
var require_addMilliseconds = __commonJS({
  "node_modules/date-fns/addMilliseconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addMilliseconds2;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function addMilliseconds2(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var timestamp = (0, _index2.default)(dirtyDate).getTime();
      var amount = (0, _index.default)(dirtyAmount);
      return new Date(timestamp + amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addHours/index.js
var require_addHours = __commonJS({
  "node_modules/date-fns/addHours/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addHours2;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addMilliseconds());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    var MILLISECONDS_IN_HOUR = 36e5;
    function addHours2(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, amount * MILLISECONDS_IN_HOUR);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/defaultOptions/index.js
var require_defaultOptions = __commonJS({
  "node_modules/date-fns/_lib/defaultOptions/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getDefaultOptions = getDefaultOptions;
    exports2.setDefaultOptions = setDefaultOptions;
    var defaultOptions = {};
    function getDefaultOptions() {
      return defaultOptions;
    }
    function setDefaultOptions(newOptions) {
      defaultOptions = newOptions;
    }
  }
});

// node_modules/date-fns/startOfWeek/index.js
var require_startOfWeek = __commonJS({
  "node_modules/date-fns/startOfWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfWeek;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_toInteger());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    var _index4 = require_defaultOptions();
    function startOfWeek(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      (0, _index3.default)(1, arguments);
      var defaultOptions = (0, _index4.getDefaultOptions)();
      var weekStartsOn = (0, _index2.default)((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      var date = (0, _index.default)(dirtyDate);
      var day = date.getDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setDate(date.getDate() - diff);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfISOWeek/index.js
var require_startOfISOWeek = __commonJS({
  "node_modules/date-fns/startOfISOWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfISOWeek;
    var _index = _interopRequireDefault(require_startOfWeek());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function startOfISOWeek(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, {
        weekStartsOn: 1
      });
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getISOWeekYear/index.js
var require_getISOWeekYear = __commonJS({
  "node_modules/date-fns/getISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getISOWeekYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_startOfISOWeek());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function getISOWeekYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
      fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
      var startOfNextYear = (0, _index2.default)(fourthOfJanuaryOfNextYear);
      var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
      fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
      fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
      var startOfThisYear = (0, _index2.default)(fourthOfJanuaryOfThisYear);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfISOWeekYear/index.js
var require_startOfISOWeekYear = __commonJS({
  "node_modules/date-fns/startOfISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfISOWeekYear;
    var _index = _interopRequireDefault(require_getISOWeekYear());
    var _index2 = _interopRequireDefault(require_startOfISOWeek());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function startOfISOWeekYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var year = (0, _index.default)(dirtyDate);
      var fourthOfJanuary = /* @__PURE__ */ new Date(0);
      fourthOfJanuary.setFullYear(year, 0, 4);
      fourthOfJanuary.setHours(0, 0, 0, 0);
      var date = (0, _index2.default)(fourthOfJanuary);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js
var require_getTimezoneOffsetInMilliseconds = __commonJS({
  "node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getTimezoneOffsetInMilliseconds;
    function getTimezoneOffsetInMilliseconds(date) {
      var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
      utcDate.setUTCFullYear(date.getFullYear());
      return date.getTime() - utcDate.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfDay/index.js
var require_startOfDay = __commonJS({
  "node_modules/date-fns/startOfDay/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfDay2;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function startOfDay2(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInCalendarDays/index.js
var require_differenceInCalendarDays = __commonJS({
  "node_modules/date-fns/differenceInCalendarDays/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInCalendarDays2;
    var _index = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index2 = _interopRequireDefault(require_startOfDay());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    var MILLISECONDS_IN_DAY = 864e5;
    function differenceInCalendarDays2(dirtyDateLeft, dirtyDateRight) {
      (0, _index3.default)(2, arguments);
      var startOfDayLeft = (0, _index2.default)(dirtyDateLeft);
      var startOfDayRight = (0, _index2.default)(dirtyDateRight);
      var timestampLeft = startOfDayLeft.getTime() - (0, _index.default)(startOfDayLeft);
      var timestampRight = startOfDayRight.getTime() - (0, _index.default)(startOfDayRight);
      return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setISOWeekYear/index.js
var require_setISOWeekYear = __commonJS({
  "node_modules/date-fns/setISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setISOWeekYear;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_startOfISOWeekYear());
    var _index4 = _interopRequireDefault(require_differenceInCalendarDays());
    var _index5 = _interopRequireDefault(require_requiredArgs());
    function setISOWeekYear(dirtyDate, dirtyISOWeekYear) {
      (0, _index5.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var isoWeekYear = (0, _index.default)(dirtyISOWeekYear);
      var diff = (0, _index4.default)(date, (0, _index3.default)(date));
      var fourthOfJanuary = /* @__PURE__ */ new Date(0);
      fourthOfJanuary.setFullYear(isoWeekYear, 0, 4);
      fourthOfJanuary.setHours(0, 0, 0, 0);
      date = (0, _index3.default)(fourthOfJanuary);
      date.setDate(date.getDate() + diff);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addISOWeekYears/index.js
var require_addISOWeekYears = __commonJS({
  "node_modules/date-fns/addISOWeekYears/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addISOWeekYears;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_getISOWeekYear());
    var _index3 = _interopRequireDefault(require_setISOWeekYear());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function addISOWeekYears(dirtyDate, dirtyAmount) {
      (0, _index4.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index3.default)(dirtyDate, (0, _index2.default)(dirtyDate) + amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addMinutes/index.js
var require_addMinutes = __commonJS({
  "node_modules/date-fns/addMinutes/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addMinutes;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addMilliseconds());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    var MILLISECONDS_IN_MINUTE = 6e4;
    function addMinutes(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addQuarters/index.js
var require_addQuarters = __commonJS({
  "node_modules/date-fns/addQuarters/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addQuarters;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addMonths());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function addQuarters(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      var months = amount * 3;
      return (0, _index2.default)(dirtyDate, months);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addSeconds/index.js
var require_addSeconds = __commonJS({
  "node_modules/date-fns/addSeconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addSeconds;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addMilliseconds());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function addSeconds(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, amount * 1e3);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addWeeks/index.js
var require_addWeeks = __commonJS({
  "node_modules/date-fns/addWeeks/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addWeeks2;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addDays());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function addWeeks2(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      var days = amount * 7;
      return (0, _index2.default)(dirtyDate, days);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/addYears/index.js
var require_addYears = __commonJS({
  "node_modules/date-fns/addYears/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addYears3;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addMonths());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function addYears3(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, amount * 12);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/areIntervalsOverlapping/index.js
var require_areIntervalsOverlapping = __commonJS({
  "node_modules/date-fns/areIntervalsOverlapping/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = areIntervalsOverlapping;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function areIntervalsOverlapping(intervalLeft, intervalRight, options) {
      (0, _index2.default)(2, arguments);
      var leftStartTime = (0, _index.default)(intervalLeft === null || intervalLeft === void 0 ? void 0 : intervalLeft.start).getTime();
      var leftEndTime = (0, _index.default)(intervalLeft === null || intervalLeft === void 0 ? void 0 : intervalLeft.end).getTime();
      var rightStartTime = (0, _index.default)(intervalRight === null || intervalRight === void 0 ? void 0 : intervalRight.start).getTime();
      var rightEndTime = (0, _index.default)(intervalRight === null || intervalRight === void 0 ? void 0 : intervalRight.end).getTime();
      if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {
        throw new RangeError("Invalid interval");
      }
      if (options !== null && options !== void 0 && options.inclusive) {
        return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;
      }
      return leftStartTime < rightEndTime && rightStartTime < leftEndTime;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/max/index.js
var require_max = __commonJS({
  "node_modules/date-fns/max/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = max;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function max(dirtyDatesArray) {
      (0, _index2.default)(1, arguments);
      var datesArray;
      if (dirtyDatesArray && typeof dirtyDatesArray.forEach === "function") {
        datesArray = dirtyDatesArray;
      } else if ((0, _typeof2.default)(dirtyDatesArray) === "object" && dirtyDatesArray !== null) {
        datesArray = Array.prototype.slice.call(dirtyDatesArray);
      } else {
        return /* @__PURE__ */ new Date(NaN);
      }
      var result;
      datesArray.forEach(function(dirtyDate) {
        var currentDate = (0, _index.default)(dirtyDate);
        if (result === void 0 || result < currentDate || isNaN(Number(currentDate))) {
          result = currentDate;
        }
      });
      return result || /* @__PURE__ */ new Date(NaN);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/min/index.js
var require_min = __commonJS({
  "node_modules/date-fns/min/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = min;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function min(dirtyDatesArray) {
      (0, _index2.default)(1, arguments);
      var datesArray;
      if (dirtyDatesArray && typeof dirtyDatesArray.forEach === "function") {
        datesArray = dirtyDatesArray;
      } else if ((0, _typeof2.default)(dirtyDatesArray) === "object" && dirtyDatesArray !== null) {
        datesArray = Array.prototype.slice.call(dirtyDatesArray);
      } else {
        return /* @__PURE__ */ new Date(NaN);
      }
      var result;
      datesArray.forEach(function(dirtyDate) {
        var currentDate = (0, _index.default)(dirtyDate);
        if (result === void 0 || result > currentDate || isNaN(currentDate.getDate())) {
          result = currentDate;
        }
      });
      return result || /* @__PURE__ */ new Date(NaN);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/clamp/index.js
var require_clamp = __commonJS({
  "node_modules/date-fns/clamp/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = clamp;
    var _index = _interopRequireDefault(require_max());
    var _index2 = _interopRequireDefault(require_min());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function clamp(date, _ref) {
      var start = _ref.start, end = _ref.end;
      (0, _index3.default)(2, arguments);
      return (0, _index2.default)([(0, _index.default)([date, start]), end]);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/closestIndexTo/index.js
var require_closestIndexTo = __commonJS({
  "node_modules/date-fns/closestIndexTo/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = closestIndexTo;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {
      (0, _index2.default)(2, arguments);
      var dateToCompare = (0, _index.default)(dirtyDateToCompare);
      if (isNaN(Number(dateToCompare))) return NaN;
      var timeToCompare = dateToCompare.getTime();
      var datesArray;
      if (dirtyDatesArray == null) {
        datesArray = [];
      } else if (typeof dirtyDatesArray.forEach === "function") {
        datesArray = dirtyDatesArray;
      } else {
        datesArray = Array.prototype.slice.call(dirtyDatesArray);
      }
      var result;
      var minDistance;
      datesArray.forEach(function(dirtyDate, index) {
        var currentDate = (0, _index.default)(dirtyDate);
        if (isNaN(Number(currentDate))) {
          result = NaN;
          minDistance = NaN;
          return;
        }
        var distance = Math.abs(timeToCompare - currentDate.getTime());
        if (result == null || distance < Number(minDistance)) {
          result = index;
          minDistance = distance;
        }
      });
      return result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/closestTo/index.js
var require_closestTo = __commonJS({
  "node_modules/date-fns/closestTo/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = closestTo;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function closestTo(dirtyDateToCompare, dirtyDatesArray) {
      (0, _index2.default)(2, arguments);
      var dateToCompare = (0, _index.default)(dirtyDateToCompare);
      if (isNaN(Number(dateToCompare))) return /* @__PURE__ */ new Date(NaN);
      var timeToCompare = dateToCompare.getTime();
      var datesArray;
      if (dirtyDatesArray == null) {
        datesArray = [];
      } else if (typeof dirtyDatesArray.forEach === "function") {
        datesArray = dirtyDatesArray;
      } else {
        datesArray = Array.prototype.slice.call(dirtyDatesArray);
      }
      var result;
      var minDistance;
      datesArray.forEach(function(dirtyDate) {
        var currentDate = (0, _index.default)(dirtyDate);
        if (isNaN(Number(currentDate))) {
          result = /* @__PURE__ */ new Date(NaN);
          minDistance = NaN;
          return;
        }
        var distance = Math.abs(timeToCompare - currentDate.getTime());
        if (result == null || distance < Number(minDistance)) {
          result = currentDate;
          minDistance = distance;
        }
      });
      return result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/compareAsc/index.js
var require_compareAsc = __commonJS({
  "node_modules/date-fns/compareAsc/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = compareAsc;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function compareAsc(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      var diff = dateLeft.getTime() - dateRight.getTime();
      if (diff < 0) {
        return -1;
      } else if (diff > 0) {
        return 1;
      } else {
        return diff;
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/compareDesc/index.js
var require_compareDesc = __commonJS({
  "node_modules/date-fns/compareDesc/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = compareDesc2;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function compareDesc2(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      var diff = dateLeft.getTime() - dateRight.getTime();
      if (diff > 0) {
        return -1;
      } else if (diff < 0) {
        return 1;
      } else {
        return diff;
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/constants/index.js
var require_constants = __commonJS({
  "node_modules/date-fns/constants/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.secondsInYear = exports2.secondsInWeek = exports2.secondsInQuarter = exports2.secondsInMonth = exports2.secondsInMinute = exports2.secondsInHour = exports2.secondsInDay = exports2.quartersInYear = exports2.monthsInYear = exports2.monthsInQuarter = exports2.minutesInHour = exports2.minTime = exports2.millisecondsInSecond = exports2.millisecondsInMinute = exports2.millisecondsInHour = exports2.maxTime = exports2.daysInYear = exports2.daysInWeek = void 0;
    var daysInWeek = 7;
    exports2.daysInWeek = daysInWeek;
    var daysInYear = 365.2425;
    exports2.daysInYear = daysInYear;
    var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
    exports2.maxTime = maxTime;
    var millisecondsInMinute = 6e4;
    exports2.millisecondsInMinute = millisecondsInMinute;
    var millisecondsInHour = 36e5;
    exports2.millisecondsInHour = millisecondsInHour;
    var millisecondsInSecond = 1e3;
    exports2.millisecondsInSecond = millisecondsInSecond;
    var minTime = -maxTime;
    exports2.minTime = minTime;
    var minutesInHour = 60;
    exports2.minutesInHour = minutesInHour;
    var monthsInQuarter = 3;
    exports2.monthsInQuarter = monthsInQuarter;
    var monthsInYear = 12;
    exports2.monthsInYear = monthsInYear;
    var quartersInYear = 4;
    exports2.quartersInYear = quartersInYear;
    var secondsInHour = 3600;
    exports2.secondsInHour = secondsInHour;
    var secondsInMinute = 60;
    exports2.secondsInMinute = secondsInMinute;
    var secondsInDay = secondsInHour * 24;
    exports2.secondsInDay = secondsInDay;
    var secondsInWeek = secondsInDay * 7;
    exports2.secondsInWeek = secondsInWeek;
    var secondsInYear = secondsInDay * daysInYear;
    exports2.secondsInYear = secondsInYear;
    var secondsInMonth = secondsInYear / 12;
    exports2.secondsInMonth = secondsInMonth;
    var secondsInQuarter = secondsInMonth * 3;
    exports2.secondsInQuarter = secondsInQuarter;
  }
});

// node_modules/date-fns/daysToWeeks/index.js
var require_daysToWeeks = __commonJS({
  "node_modules/date-fns/daysToWeeks/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = daysToWeeks;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function daysToWeeks(days) {
      (0, _index.default)(1, arguments);
      var weeks = days / _index2.daysInWeek;
      return Math.floor(weeks);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameDay/index.js
var require_isSameDay = __commonJS({
  "node_modules/date-fns/isSameDay/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameDay2;
    var _index = _interopRequireDefault(require_startOfDay());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isSameDay2(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfDay = (0, _index.default)(dirtyDateLeft);
      var dateRightStartOfDay = (0, _index.default)(dirtyDateRight);
      return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isDate/index.js
var require_isDate = __commonJS({
  "node_modules/date-fns/isDate/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isDate;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _index = _interopRequireDefault(require_requiredArgs());
    function isDate(value) {
      (0, _index.default)(1, arguments);
      return value instanceof Date || (0, _typeof2.default)(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isValid/index.js
var require_isValid = __commonJS({
  "node_modules/date-fns/isValid/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isValid3;
    var _index = _interopRequireDefault(require_isDate());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function isValid3(dirtyDate) {
      (0, _index3.default)(1, arguments);
      if (!(0, _index.default)(dirtyDate) && typeof dirtyDate !== "number") {
        return false;
      }
      var date = (0, _index2.default)(dirtyDate);
      return !isNaN(Number(date));
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInBusinessDays/index.js
var require_differenceInBusinessDays = __commonJS({
  "node_modules/date-fns/differenceInBusinessDays/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInBusinessDays;
    var _index = _interopRequireDefault(require_addDays());
    var _index2 = _interopRequireDefault(require_differenceInCalendarDays());
    var _index3 = _interopRequireDefault(require_isSameDay());
    var _index4 = _interopRequireDefault(require_isValid());
    var _index5 = _interopRequireDefault(require_isWeekend());
    var _index6 = _interopRequireDefault(require_toDate());
    var _index7 = _interopRequireDefault(require_requiredArgs());
    var _index8 = _interopRequireDefault(require_toInteger());
    function differenceInBusinessDays(dirtyDateLeft, dirtyDateRight) {
      (0, _index7.default)(2, arguments);
      var dateLeft = (0, _index6.default)(dirtyDateLeft);
      var dateRight = (0, _index6.default)(dirtyDateRight);
      if (!(0, _index4.default)(dateLeft) || !(0, _index4.default)(dateRight)) return NaN;
      var calendarDifference = (0, _index2.default)(dateLeft, dateRight);
      var sign = calendarDifference < 0 ? -1 : 1;
      var weeks = (0, _index8.default)(calendarDifference / 7);
      var result = weeks * 5;
      dateRight = (0, _index.default)(dateRight, weeks * 7);
      while (!(0, _index3.default)(dateLeft, dateRight)) {
        result += (0, _index5.default)(dateRight) ? 0 : sign;
        dateRight = (0, _index.default)(dateRight, sign);
      }
      return result === 0 ? 0 : result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInCalendarISOWeekYears/index.js
var require_differenceInCalendarISOWeekYears = __commonJS({
  "node_modules/date-fns/differenceInCalendarISOWeekYears/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInCalendarISOWeekYears;
    var _index = _interopRequireDefault(require_getISOWeekYear());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function differenceInCalendarISOWeekYears(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      return (0, _index.default)(dirtyDateLeft) - (0, _index.default)(dirtyDateRight);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInCalendarISOWeeks/index.js
var require_differenceInCalendarISOWeeks = __commonJS({
  "node_modules/date-fns/differenceInCalendarISOWeeks/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInCalendarISOWeeks;
    var _index = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index2 = _interopRequireDefault(require_startOfISOWeek());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    var MILLISECONDS_IN_WEEK = 6048e5;
    function differenceInCalendarISOWeeks(dirtyDateLeft, dirtyDateRight) {
      (0, _index3.default)(2, arguments);
      var startOfISOWeekLeft = (0, _index2.default)(dirtyDateLeft);
      var startOfISOWeekRight = (0, _index2.default)(dirtyDateRight);
      var timestampLeft = startOfISOWeekLeft.getTime() - (0, _index.default)(startOfISOWeekLeft);
      var timestampRight = startOfISOWeekRight.getTime() - (0, _index.default)(startOfISOWeekRight);
      return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInCalendarMonths/index.js
var require_differenceInCalendarMonths = __commonJS({
  "node_modules/date-fns/differenceInCalendarMonths/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInCalendarMonths;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
      var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
      return yearDiff * 12 + monthDiff;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getQuarter/index.js
var require_getQuarter = __commonJS({
  "node_modules/date-fns/getQuarter/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getQuarter;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function getQuarter(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var quarter = Math.floor(date.getMonth() / 3) + 1;
      return quarter;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInCalendarQuarters/index.js
var require_differenceInCalendarQuarters = __commonJS({
  "node_modules/date-fns/differenceInCalendarQuarters/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInCalendarQuarters;
    var _index = _interopRequireDefault(require_getQuarter());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function differenceInCalendarQuarters(dirtyDateLeft, dirtyDateRight) {
      (0, _index3.default)(2, arguments);
      var dateLeft = (0, _index2.default)(dirtyDateLeft);
      var dateRight = (0, _index2.default)(dirtyDateRight);
      var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
      var quarterDiff = (0, _index.default)(dateLeft) - (0, _index.default)(dateRight);
      return yearDiff * 4 + quarterDiff;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInCalendarWeeks/index.js
var require_differenceInCalendarWeeks = __commonJS({
  "node_modules/date-fns/differenceInCalendarWeeks/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInCalendarWeeks;
    var _index = _interopRequireDefault(require_startOfWeek());
    var _index2 = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    var MILLISECONDS_IN_WEEK = 6048e5;
    function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, options) {
      (0, _index3.default)(2, arguments);
      var startOfWeekLeft = (0, _index.default)(dirtyDateLeft, options);
      var startOfWeekRight = (0, _index.default)(dirtyDateRight, options);
      var timestampLeft = startOfWeekLeft.getTime() - (0, _index2.default)(startOfWeekLeft);
      var timestampRight = startOfWeekRight.getTime() - (0, _index2.default)(startOfWeekRight);
      return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInCalendarYears/index.js
var require_differenceInCalendarYears = __commonJS({
  "node_modules/date-fns/differenceInCalendarYears/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInCalendarYears;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      return dateLeft.getFullYear() - dateRight.getFullYear();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInDays/index.js
var require_differenceInDays = __commonJS({
  "node_modules/date-fns/differenceInDays/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInDays2;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_differenceInCalendarDays());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function compareLocalAsc(dateLeft, dateRight) {
      var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();
      if (diff < 0) {
        return -1;
      } else if (diff > 0) {
        return 1;
      } else {
        return diff;
      }
    }
    function differenceInDays2(dirtyDateLeft, dirtyDateRight) {
      (0, _index3.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      var sign = compareLocalAsc(dateLeft, dateRight);
      var difference = Math.abs((0, _index2.default)(dateLeft, dateRight));
      dateLeft.setDate(dateLeft.getDate() - sign * difference);
      var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);
      var result = sign * (difference - isLastDayNotFull);
      return result === 0 ? 0 : result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInMilliseconds/index.js
var require_differenceInMilliseconds = __commonJS({
  "node_modules/date-fns/differenceInMilliseconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInMilliseconds;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function differenceInMilliseconds(dateLeft, dateRight) {
      (0, _index2.default)(2, arguments);
      return (0, _index.default)(dateLeft).getTime() - (0, _index.default)(dateRight).getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/roundingMethods/index.js
var require_roundingMethods = __commonJS({
  "node_modules/date-fns/_lib/roundingMethods/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getRoundingMethod = getRoundingMethod;
    var roundingMap = {
      ceil: Math.ceil,
      round: Math.round,
      floor: Math.floor,
      trunc: function trunc(value) {
        return value < 0 ? Math.ceil(value) : Math.floor(value);
      }
      // Math.trunc is not supported by IE
    };
    var defaultRoundingMethod = "trunc";
    function getRoundingMethod(method) {
      return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
    }
  }
});

// node_modules/date-fns/differenceInHours/index.js
var require_differenceInHours = __commonJS({
  "node_modules/date-fns/differenceInHours/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInHours;
    var _index = require_constants();
    var _index2 = _interopRequireDefault(require_differenceInMilliseconds());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    var _index4 = require_roundingMethods();
    function differenceInHours(dateLeft, dateRight, options) {
      (0, _index3.default)(2, arguments);
      var diff = (0, _index2.default)(dateLeft, dateRight) / _index.millisecondsInHour;
      return (0, _index4.getRoundingMethod)(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subISOWeekYears/index.js
var require_subISOWeekYears = __commonJS({
  "node_modules/date-fns/subISOWeekYears/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subISOWeekYears;
    var _index = _interopRequireDefault(require_addISOWeekYears());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = _interopRequireDefault(require_toInteger());
    function subISOWeekYears(dirtyDate, dirtyAmount) {
      (0, _index2.default)(2, arguments);
      var amount = (0, _index3.default)(dirtyAmount);
      return (0, _index.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInISOWeekYears/index.js
var require_differenceInISOWeekYears = __commonJS({
  "node_modules/date-fns/differenceInISOWeekYears/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInISOWeekYears;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_differenceInCalendarISOWeekYears());
    var _index3 = _interopRequireDefault(require_compareAsc());
    var _index4 = _interopRequireDefault(require_subISOWeekYears());
    var _index5 = _interopRequireDefault(require_requiredArgs());
    function differenceInISOWeekYears(dirtyDateLeft, dirtyDateRight) {
      (0, _index5.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      var sign = (0, _index3.default)(dateLeft, dateRight);
      var difference = Math.abs((0, _index2.default)(dateLeft, dateRight));
      dateLeft = (0, _index4.default)(dateLeft, sign * difference);
      var isLastISOWeekYearNotFull = Number((0, _index3.default)(dateLeft, dateRight) === -sign);
      var result = sign * (difference - isLastISOWeekYearNotFull);
      return result === 0 ? 0 : result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInMinutes/index.js
var require_differenceInMinutes = __commonJS({
  "node_modules/date-fns/differenceInMinutes/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInMinutes;
    var _index = require_constants();
    var _index2 = _interopRequireDefault(require_differenceInMilliseconds());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    var _index4 = require_roundingMethods();
    function differenceInMinutes(dateLeft, dateRight, options) {
      (0, _index3.default)(2, arguments);
      var diff = (0, _index2.default)(dateLeft, dateRight) / _index.millisecondsInMinute;
      return (0, _index4.getRoundingMethod)(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfDay/index.js
var require_endOfDay = __commonJS({
  "node_modules/date-fns/endOfDay/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfDay;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function endOfDay(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfMonth/index.js
var require_endOfMonth = __commonJS({
  "node_modules/date-fns/endOfMonth/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfMonth;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function endOfMonth(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var month = date.getMonth();
      date.setFullYear(date.getFullYear(), month + 1, 0);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isLastDayOfMonth/index.js
var require_isLastDayOfMonth = __commonJS({
  "node_modules/date-fns/isLastDayOfMonth/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isLastDayOfMonth;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_endOfDay());
    var _index3 = _interopRequireDefault(require_endOfMonth());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function isLastDayOfMonth(dirtyDate) {
      (0, _index4.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      return (0, _index2.default)(date).getTime() === (0, _index3.default)(date).getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInMonths/index.js
var require_differenceInMonths = __commonJS({
  "node_modules/date-fns/differenceInMonths/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInMonths3;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_differenceInCalendarMonths());
    var _index3 = _interopRequireDefault(require_compareAsc());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    var _index5 = _interopRequireDefault(require_isLastDayOfMonth());
    function differenceInMonths3(dirtyDateLeft, dirtyDateRight) {
      (0, _index4.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      var sign = (0, _index3.default)(dateLeft, dateRight);
      var difference = Math.abs((0, _index2.default)(dateLeft, dateRight));
      var result;
      if (difference < 1) {
        result = 0;
      } else {
        if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
          dateLeft.setDate(30);
        }
        dateLeft.setMonth(dateLeft.getMonth() - sign * difference);
        var isLastMonthNotFull = (0, _index3.default)(dateLeft, dateRight) === -sign;
        if ((0, _index5.default)((0, _index.default)(dirtyDateLeft)) && difference === 1 && (0, _index3.default)(dirtyDateLeft, dateRight) === 1) {
          isLastMonthNotFull = false;
        }
        result = sign * (difference - Number(isLastMonthNotFull));
      }
      return result === 0 ? 0 : result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInQuarters/index.js
var require_differenceInQuarters = __commonJS({
  "node_modules/date-fns/differenceInQuarters/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInQuarters;
    var _index = _interopRequireDefault(require_differenceInMonths());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = require_roundingMethods();
    function differenceInQuarters(dateLeft, dateRight, options) {
      (0, _index2.default)(2, arguments);
      var diff = (0, _index.default)(dateLeft, dateRight) / 3;
      return (0, _index3.getRoundingMethod)(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInSeconds/index.js
var require_differenceInSeconds = __commonJS({
  "node_modules/date-fns/differenceInSeconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInSeconds;
    var _index = _interopRequireDefault(require_differenceInMilliseconds());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = require_roundingMethods();
    function differenceInSeconds(dateLeft, dateRight, options) {
      (0, _index2.default)(2, arguments);
      var diff = (0, _index.default)(dateLeft, dateRight) / 1e3;
      return (0, _index3.getRoundingMethod)(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInWeeks/index.js
var require_differenceInWeeks = __commonJS({
  "node_modules/date-fns/differenceInWeeks/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInWeeks;
    var _index = _interopRequireDefault(require_differenceInDays());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = require_roundingMethods();
    function differenceInWeeks(dateLeft, dateRight, options) {
      (0, _index2.default)(2, arguments);
      var diff = (0, _index.default)(dateLeft, dateRight) / 7;
      return (0, _index3.getRoundingMethod)(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/differenceInYears/index.js
var require_differenceInYears = __commonJS({
  "node_modules/date-fns/differenceInYears/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = differenceInYears;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_differenceInCalendarYears());
    var _index3 = _interopRequireDefault(require_compareAsc());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function differenceInYears(dirtyDateLeft, dirtyDateRight) {
      (0, _index4.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      var sign = (0, _index3.default)(dateLeft, dateRight);
      var difference = Math.abs((0, _index2.default)(dateLeft, dateRight));
      dateLeft.setFullYear(1584);
      dateRight.setFullYear(1584);
      var isLastYearNotFull = (0, _index3.default)(dateLeft, dateRight) === -sign;
      var result = sign * (difference - Number(isLastYearNotFull));
      return result === 0 ? 0 : result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachDayOfInterval/index.js
var require_eachDayOfInterval = __commonJS({
  "node_modules/date-fns/eachDayOfInterval/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachDayOfInterval2;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function eachDayOfInterval2(dirtyInterval, options) {
      var _options$step;
      (0, _index2.default)(1, arguments);
      var interval = dirtyInterval || {};
      var startDate = (0, _index.default)(interval.start);
      var endDate = (0, _index.default)(interval.end);
      var endTime = endDate.getTime();
      if (!(startDate.getTime() <= endTime)) {
        throw new RangeError("Invalid interval");
      }
      var dates = [];
      var currentDate = startDate;
      currentDate.setHours(0, 0, 0, 0);
      var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);
      if (step < 1 || isNaN(step)) throw new RangeError("`options.step` must be a number greater than 1");
      while (currentDate.getTime() <= endTime) {
        dates.push((0, _index.default)(currentDate));
        currentDate.setDate(currentDate.getDate() + step);
        currentDate.setHours(0, 0, 0, 0);
      }
      return dates;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachHourOfInterval/index.js
var require_eachHourOfInterval = __commonJS({
  "node_modules/date-fns/eachHourOfInterval/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachHourOfInterval;
    var _index = _interopRequireDefault(require_addHours());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function eachHourOfInterval(dirtyInterval, options) {
      var _options$step;
      (0, _index3.default)(1, arguments);
      var interval = dirtyInterval || {};
      var startDate = (0, _index2.default)(interval.start);
      var endDate = (0, _index2.default)(interval.end);
      var startTime = startDate.getTime();
      var endTime = endDate.getTime();
      if (!(startTime <= endTime)) {
        throw new RangeError("Invalid interval");
      }
      var dates = [];
      var currentDate = startDate;
      currentDate.setMinutes(0, 0, 0);
      var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);
      if (step < 1 || isNaN(step)) throw new RangeError("`options.step` must be a number greater than 1");
      while (currentDate.getTime() <= endTime) {
        dates.push((0, _index2.default)(currentDate));
        currentDate = (0, _index.default)(currentDate, step);
      }
      return dates;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfMinute/index.js
var require_startOfMinute = __commonJS({
  "node_modules/date-fns/startOfMinute/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfMinute;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function startOfMinute(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setSeconds(0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachMinuteOfInterval/index.js
var require_eachMinuteOfInterval = __commonJS({
  "node_modules/date-fns/eachMinuteOfInterval/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachMinuteOfInterval;
    var _index = _interopRequireDefault(require_addMinutes());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_startOfMinute());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function eachMinuteOfInterval(interval, options) {
      var _options$step;
      (0, _index4.default)(1, arguments);
      var startDate = (0, _index3.default)((0, _index2.default)(interval.start));
      var endDate = (0, _index2.default)(interval.end);
      var startTime = startDate.getTime();
      var endTime = endDate.getTime();
      if (startTime >= endTime) {
        throw new RangeError("Invalid interval");
      }
      var dates = [];
      var currentDate = startDate;
      var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);
      if (step < 1 || isNaN(step)) throw new RangeError("`options.step` must be a number equal to or greater than 1");
      while (currentDate.getTime() <= endTime) {
        dates.push((0, _index2.default)(currentDate));
        currentDate = (0, _index.default)(currentDate, step);
      }
      return dates;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachMonthOfInterval/index.js
var require_eachMonthOfInterval = __commonJS({
  "node_modules/date-fns/eachMonthOfInterval/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachMonthOfInterval;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function eachMonthOfInterval(dirtyInterval) {
      (0, _index2.default)(1, arguments);
      var interval = dirtyInterval || {};
      var startDate = (0, _index.default)(interval.start);
      var endDate = (0, _index.default)(interval.end);
      var endTime = endDate.getTime();
      var dates = [];
      if (!(startDate.getTime() <= endTime)) {
        throw new RangeError("Invalid interval");
      }
      var currentDate = startDate;
      currentDate.setHours(0, 0, 0, 0);
      currentDate.setDate(1);
      while (currentDate.getTime() <= endTime) {
        dates.push((0, _index.default)(currentDate));
        currentDate.setMonth(currentDate.getMonth() + 1);
      }
      return dates;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfQuarter/index.js
var require_startOfQuarter = __commonJS({
  "node_modules/date-fns/startOfQuarter/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfQuarter;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function startOfQuarter(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var currentMonth = date.getMonth();
      var month = currentMonth - currentMonth % 3;
      date.setMonth(month, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachQuarterOfInterval/index.js
var require_eachQuarterOfInterval = __commonJS({
  "node_modules/date-fns/eachQuarterOfInterval/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachQuarterOfInterval;
    var _index = _interopRequireDefault(require_addQuarters());
    var _index2 = _interopRequireDefault(require_startOfQuarter());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function eachQuarterOfInterval(dirtyInterval) {
      (0, _index4.default)(1, arguments);
      var interval = dirtyInterval || {};
      var startDate = (0, _index3.default)(interval.start);
      var endDate = (0, _index3.default)(interval.end);
      var endTime = endDate.getTime();
      if (!(startDate.getTime() <= endTime)) {
        throw new RangeError("Invalid interval");
      }
      var startDateQuarter = (0, _index2.default)(startDate);
      var endDateQuarter = (0, _index2.default)(endDate);
      endTime = endDateQuarter.getTime();
      var quarters = [];
      var currentQuarter = startDateQuarter;
      while (currentQuarter.getTime() <= endTime) {
        quarters.push((0, _index3.default)(currentQuarter));
        currentQuarter = (0, _index.default)(currentQuarter, 1);
      }
      return quarters;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachWeekOfInterval/index.js
var require_eachWeekOfInterval = __commonJS({
  "node_modules/date-fns/eachWeekOfInterval/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachWeekOfInterval;
    var _index = _interopRequireDefault(require_addWeeks());
    var _index2 = _interopRequireDefault(require_startOfWeek());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function eachWeekOfInterval(dirtyInterval, options) {
      (0, _index4.default)(1, arguments);
      var interval = dirtyInterval || {};
      var startDate = (0, _index3.default)(interval.start);
      var endDate = (0, _index3.default)(interval.end);
      var endTime = endDate.getTime();
      if (!(startDate.getTime() <= endTime)) {
        throw new RangeError("Invalid interval");
      }
      var startDateWeek = (0, _index2.default)(startDate, options);
      var endDateWeek = (0, _index2.default)(endDate, options);
      startDateWeek.setHours(15);
      endDateWeek.setHours(15);
      endTime = endDateWeek.getTime();
      var weeks = [];
      var currentWeek = startDateWeek;
      while (currentWeek.getTime() <= endTime) {
        currentWeek.setHours(0);
        weeks.push((0, _index3.default)(currentWeek));
        currentWeek = (0, _index.default)(currentWeek, 1);
        currentWeek.setHours(15);
      }
      return weeks;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachWeekendOfInterval/index.js
var require_eachWeekendOfInterval = __commonJS({
  "node_modules/date-fns/eachWeekendOfInterval/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachWeekendOfInterval;
    var _index = _interopRequireDefault(require_eachDayOfInterval());
    var _index2 = _interopRequireDefault(require_isSunday());
    var _index3 = _interopRequireDefault(require_isWeekend());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function eachWeekendOfInterval(interval) {
      (0, _index4.default)(1, arguments);
      var dateInterval = (0, _index.default)(interval);
      var weekends = [];
      var index = 0;
      while (index < dateInterval.length) {
        var date = dateInterval[index++];
        if ((0, _index3.default)(date)) {
          weekends.push(date);
          if ((0, _index2.default)(date)) index = index + 5;
        }
      }
      return weekends;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfMonth/index.js
var require_startOfMonth = __commonJS({
  "node_modules/date-fns/startOfMonth/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfMonth;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function startOfMonth(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setDate(1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachWeekendOfMonth/index.js
var require_eachWeekendOfMonth = __commonJS({
  "node_modules/date-fns/eachWeekendOfMonth/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachWeekendOfMonth;
    var _index = _interopRequireDefault(require_eachWeekendOfInterval());
    var _index2 = _interopRequireDefault(require_startOfMonth());
    var _index3 = _interopRequireDefault(require_endOfMonth());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function eachWeekendOfMonth(dirtyDate) {
      (0, _index4.default)(1, arguments);
      var startDate = (0, _index2.default)(dirtyDate);
      if (isNaN(startDate.getTime())) throw new RangeError("The passed date is invalid");
      var endDate = (0, _index3.default)(dirtyDate);
      return (0, _index.default)({
        start: startDate,
        end: endDate
      });
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfYear/index.js
var require_endOfYear = __commonJS({
  "node_modules/date-fns/endOfYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function endOfYear(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      date.setFullYear(year + 1, 0, 0);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfYear/index.js
var require_startOfYear = __commonJS({
  "node_modules/date-fns/startOfYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function startOfYear(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var cleanDate = (0, _index.default)(dirtyDate);
      var date = /* @__PURE__ */ new Date(0);
      date.setFullYear(cleanDate.getFullYear(), 0, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachWeekendOfYear/index.js
var require_eachWeekendOfYear = __commonJS({
  "node_modules/date-fns/eachWeekendOfYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachWeekendOfYear;
    var _index = _interopRequireDefault(require_eachWeekendOfInterval());
    var _index2 = _interopRequireDefault(require_endOfYear());
    var _index3 = _interopRequireDefault(require_startOfYear());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function eachWeekendOfYear(dirtyDate) {
      (0, _index4.default)(1, arguments);
      var startDate = (0, _index3.default)(dirtyDate);
      var endDate = (0, _index2.default)(dirtyDate);
      return (0, _index.default)({
        start: startDate,
        end: endDate
      });
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/eachYearOfInterval/index.js
var require_eachYearOfInterval = __commonJS({
  "node_modules/date-fns/eachYearOfInterval/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = eachYearOfInterval;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function eachYearOfInterval(dirtyInterval) {
      (0, _index2.default)(1, arguments);
      var interval = dirtyInterval || {};
      var startDate = (0, _index.default)(interval.start);
      var endDate = (0, _index.default)(interval.end);
      var endTime = endDate.getTime();
      if (!(startDate.getTime() <= endTime)) {
        throw new RangeError("Invalid interval");
      }
      var dates = [];
      var currentDate = startDate;
      currentDate.setHours(0, 0, 0, 0);
      currentDate.setMonth(0, 1);
      while (currentDate.getTime() <= endTime) {
        dates.push((0, _index.default)(currentDate));
        currentDate.setFullYear(currentDate.getFullYear() + 1);
      }
      return dates;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfDecade/index.js
var require_endOfDecade = __commonJS({
  "node_modules/date-fns/endOfDecade/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfDecade;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function endOfDecade(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      var decade = 9 + Math.floor(year / 10) * 10;
      date.setFullYear(decade, 11, 31);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfHour/index.js
var require_endOfHour = __commonJS({
  "node_modules/date-fns/endOfHour/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfHour;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function endOfHour(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setMinutes(59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfWeek/index.js
var require_endOfWeek = __commonJS({
  "node_modules/date-fns/endOfWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfWeek;
    var _index = require_defaultOptions();
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_toInteger());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function endOfWeek(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      (0, _index4.default)(1, arguments);
      var defaultOptions = (0, _index.getDefaultOptions)();
      var weekStartsOn = (0, _index3.default)((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      var date = (0, _index2.default)(dirtyDate);
      var day = date.getDay();
      var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
      date.setDate(date.getDate() + diff);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfISOWeek/index.js
var require_endOfISOWeek = __commonJS({
  "node_modules/date-fns/endOfISOWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfISOWeek;
    var _index = _interopRequireDefault(require_endOfWeek());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function endOfISOWeek(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, {
        weekStartsOn: 1
      });
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfISOWeekYear/index.js
var require_endOfISOWeekYear = __commonJS({
  "node_modules/date-fns/endOfISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfISOWeekYear;
    var _index = _interopRequireDefault(require_getISOWeekYear());
    var _index2 = _interopRequireDefault(require_startOfISOWeek());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function endOfISOWeekYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var year = (0, _index.default)(dirtyDate);
      var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
      fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
      var date = (0, _index2.default)(fourthOfJanuaryOfNextYear);
      date.setMilliseconds(date.getMilliseconds() - 1);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfMinute/index.js
var require_endOfMinute = __commonJS({
  "node_modules/date-fns/endOfMinute/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfMinute;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function endOfMinute(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setSeconds(59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfQuarter/index.js
var require_endOfQuarter = __commonJS({
  "node_modules/date-fns/endOfQuarter/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfQuarter;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function endOfQuarter(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var currentMonth = date.getMonth();
      var month = currentMonth - currentMonth % 3 + 3;
      date.setMonth(month, 0);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfSecond/index.js
var require_endOfSecond = __commonJS({
  "node_modules/date-fns/endOfSecond/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfSecond;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function endOfSecond(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setMilliseconds(999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfToday/index.js
var require_endOfToday = __commonJS({
  "node_modules/date-fns/endOfToday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfToday;
    var _index = _interopRequireDefault(require_endOfDay());
    function endOfToday() {
      return (0, _index.default)(Date.now());
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfTomorrow/index.js
var require_endOfTomorrow = __commonJS({
  "node_modules/date-fns/endOfTomorrow/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfTomorrow;
    function endOfTomorrow() {
      var now = /* @__PURE__ */ new Date();
      var year = now.getFullYear();
      var month = now.getMonth();
      var day = now.getDate();
      var date = /* @__PURE__ */ new Date(0);
      date.setFullYear(year, month, day + 1);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/endOfYesterday/index.js
var require_endOfYesterday = __commonJS({
  "node_modules/date-fns/endOfYesterday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = endOfYesterday;
    function endOfYesterday() {
      var now = /* @__PURE__ */ new Date();
      var year = now.getFullYear();
      var month = now.getMonth();
      var day = now.getDate();
      var date = /* @__PURE__ */ new Date(0);
      date.setFullYear(year, month, day - 1);
      date.setHours(23, 59, 59, 999);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subMilliseconds/index.js
var require_subMilliseconds = __commonJS({
  "node_modules/date-fns/subMilliseconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subMilliseconds;
    var _index = _interopRequireDefault(require_addMilliseconds());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = _interopRequireDefault(require_toInteger());
    function subMilliseconds(dirtyDate, dirtyAmount) {
      (0, _index2.default)(2, arguments);
      var amount = (0, _index3.default)(dirtyAmount);
      return (0, _index.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/getUTCDayOfYear/index.js
var require_getUTCDayOfYear = __commonJS({
  "node_modules/date-fns/_lib/getUTCDayOfYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getUTCDayOfYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var MILLISECONDS_IN_DAY = 864e5;
    function getUTCDayOfYear(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var timestamp = date.getTime();
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
      var startOfYearTimestamp = date.getTime();
      var difference = timestamp - startOfYearTimestamp;
      return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/startOfUTCISOWeek/index.js
var require_startOfUTCISOWeek = __commonJS({
  "node_modules/date-fns/_lib/startOfUTCISOWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfUTCISOWeek;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function startOfUTCISOWeek(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var weekStartsOn = 1;
      var date = (0, _index.default)(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/getUTCISOWeekYear/index.js
var require_getUTCISOWeekYear = __commonJS({
  "node_modules/date-fns/_lib/getUTCISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getUTCISOWeekYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = _interopRequireDefault(require_startOfUTCISOWeek());
    function getUTCISOWeekYear(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getUTCFullYear();
      var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
      fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = (0, _index3.default)(fourthOfJanuaryOfNextYear);
      var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
      fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
      fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = (0, _index3.default)(fourthOfJanuaryOfThisYear);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/startOfUTCISOWeekYear/index.js
var require_startOfUTCISOWeekYear = __commonJS({
  "node_modules/date-fns/_lib/startOfUTCISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfUTCISOWeekYear;
    var _index = _interopRequireDefault(require_getUTCISOWeekYear());
    var _index2 = _interopRequireDefault(require_startOfUTCISOWeek());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function startOfUTCISOWeekYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var year = (0, _index.default)(dirtyDate);
      var fourthOfJanuary = /* @__PURE__ */ new Date(0);
      fourthOfJanuary.setUTCFullYear(year, 0, 4);
      fourthOfJanuary.setUTCHours(0, 0, 0, 0);
      var date = (0, _index2.default)(fourthOfJanuary);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/getUTCISOWeek/index.js
var require_getUTCISOWeek = __commonJS({
  "node_modules/date-fns/_lib/getUTCISOWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getUTCISOWeek;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_startOfUTCISOWeek());
    var _index3 = _interopRequireDefault(require_startOfUTCISOWeekYear());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    var MILLISECONDS_IN_WEEK = 6048e5;
    function getUTCISOWeek(dirtyDate) {
      (0, _index4.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var diff = (0, _index2.default)(date).getTime() - (0, _index3.default)(date).getTime();
      return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/startOfUTCWeek/index.js
var require_startOfUTCWeek = __commonJS({
  "node_modules/date-fns/_lib/startOfUTCWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfUTCWeek;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = _interopRequireDefault(require_toInteger());
    var _index4 = require_defaultOptions();
    function startOfUTCWeek(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      (0, _index2.default)(1, arguments);
      var defaultOptions = (0, _index4.getDefaultOptions)();
      var weekStartsOn = (0, _index3.default)((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      var date = (0, _index.default)(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/getUTCWeekYear/index.js
var require_getUTCWeekYear = __commonJS({
  "node_modules/date-fns/_lib/getUTCWeekYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getUTCWeekYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = _interopRequireDefault(require_startOfUTCWeek());
    var _index4 = _interopRequireDefault(require_toInteger());
    var _index5 = require_defaultOptions();
    function getUTCWeekYear(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getUTCFullYear();
      var defaultOptions = (0, _index5.getDefaultOptions)();
      var firstWeekContainsDate = (0, _index4.default)((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
      }
      var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
      firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
      firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = (0, _index3.default)(firstWeekOfNextYear, options);
      var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
      firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = (0, _index3.default)(firstWeekOfThisYear, options);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/startOfUTCWeekYear/index.js
var require_startOfUTCWeekYear = __commonJS({
  "node_modules/date-fns/_lib/startOfUTCWeekYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfUTCWeekYear;
    var _index = _interopRequireDefault(require_getUTCWeekYear());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = _interopRequireDefault(require_startOfUTCWeek());
    var _index4 = _interopRequireDefault(require_toInteger());
    var _index5 = require_defaultOptions();
    function startOfUTCWeekYear(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      (0, _index2.default)(1, arguments);
      var defaultOptions = (0, _index5.getDefaultOptions)();
      var firstWeekContainsDate = (0, _index4.default)((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
      var year = (0, _index.default)(dirtyDate, options);
      var firstWeek = /* @__PURE__ */ new Date(0);
      firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeek.setUTCHours(0, 0, 0, 0);
      var date = (0, _index3.default)(firstWeek, options);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/getUTCWeek/index.js
var require_getUTCWeek = __commonJS({
  "node_modules/date-fns/_lib/getUTCWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getUTCWeek;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_startOfUTCWeek());
    var _index3 = _interopRequireDefault(require_startOfUTCWeekYear());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    var MILLISECONDS_IN_WEEK = 6048e5;
    function getUTCWeek(dirtyDate, options) {
      (0, _index4.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var diff = (0, _index2.default)(date, options).getTime() - (0, _index3.default)(date, options).getTime();
      return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/addLeadingZeros/index.js
var require_addLeadingZeros = __commonJS({
  "node_modules/date-fns/_lib/addLeadingZeros/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = addLeadingZeros;
    function addLeadingZeros(number, targetLength) {
      var sign = number < 0 ? "-" : "";
      var output = Math.abs(number).toString();
      while (output.length < targetLength) {
        output = "0" + output;
      }
      return sign + output;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/format/lightFormatters/index.js
var require_lightFormatters = __commonJS({
  "node_modules/date-fns/_lib/format/lightFormatters/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _index = _interopRequireDefault(require_addLeadingZeros());
    var formatters = {
      // Year
      y: function y2(date, token) {
        var signedYear = date.getUTCFullYear();
        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return (0, _index.default)(token === "yy" ? year % 100 : year, token.length);
      },
      // Month
      M: function M2(date, token) {
        var month = date.getUTCMonth();
        return token === "M" ? String(month + 1) : (0, _index.default)(month + 1, 2);
      },
      // Day of the month
      d: function d(date, token) {
        return (0, _index.default)(date.getUTCDate(), token.length);
      },
      // AM or PM
      a: function a(date, token) {
        var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
        switch (token) {
          case "a":
          case "aa":
            return dayPeriodEnumValue.toUpperCase();
          case "aaa":
            return dayPeriodEnumValue;
          case "aaaaa":
            return dayPeriodEnumValue[0];
          case "aaaa":
          default:
            return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
        }
      },
      // Hour [1-12]
      h: function h(date, token) {
        return (0, _index.default)(date.getUTCHours() % 12 || 12, token.length);
      },
      // Hour [0-23]
      H: function H(date, token) {
        return (0, _index.default)(date.getUTCHours(), token.length);
      },
      // Minute
      m: function m2(date, token) {
        return (0, _index.default)(date.getUTCMinutes(), token.length);
      },
      // Second
      s: function s(date, token) {
        return (0, _index.default)(date.getUTCSeconds(), token.length);
      },
      // Fraction of second
      S: function S(date, token) {
        var numberOfDigits = token.length;
        var milliseconds = date.getUTCMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
        return (0, _index.default)(fractionalSeconds, token.length);
      }
    };
    var _default = formatters;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/format/formatters/index.js
var require_formatters = __commonJS({
  "node_modules/date-fns/_lib/format/formatters/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _index = _interopRequireDefault(require_getUTCDayOfYear());
    var _index2 = _interopRequireDefault(require_getUTCISOWeek());
    var _index3 = _interopRequireDefault(require_getUTCISOWeekYear());
    var _index4 = _interopRequireDefault(require_getUTCWeek());
    var _index5 = _interopRequireDefault(require_getUTCWeekYear());
    var _index6 = _interopRequireDefault(require_addLeadingZeros());
    var _index7 = _interopRequireDefault(require_lightFormatters());
    var dayPeriodEnum = {
      am: "am",
      pm: "pm",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    };
    var formatters = {
      // Era
      G: function G2(date, token, localize) {
        var era = date.getUTCFullYear() > 0 ? 1 : 0;
        switch (token) {
          // AD, BC
          case "G":
          case "GG":
          case "GGG":
            return localize.era(era, {
              width: "abbreviated"
            });
          // A, B
          case "GGGGG":
            return localize.era(era, {
              width: "narrow"
            });
          // Anno Domini, Before Christ
          case "GGGG":
          default:
            return localize.era(era, {
              width: "wide"
            });
        }
      },
      // Year
      y: function y2(date, token, localize) {
        if (token === "yo") {
          var signedYear = date.getUTCFullYear();
          var year = signedYear > 0 ? signedYear : 1 - signedYear;
          return localize.ordinalNumber(year, {
            unit: "year"
          });
        }
        return _index7.default.y(date, token);
      },
      // Local week-numbering year
      Y: function Y2(date, token, localize, options) {
        var signedWeekYear = (0, _index5.default)(date, options);
        var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
        if (token === "YY") {
          var twoDigitYear = weekYear % 100;
          return (0, _index6.default)(twoDigitYear, 2);
        }
        if (token === "Yo") {
          return localize.ordinalNumber(weekYear, {
            unit: "year"
          });
        }
        return (0, _index6.default)(weekYear, token.length);
      },
      // ISO week-numbering year
      R: function R2(date, token) {
        var isoWeekYear = (0, _index3.default)(date);
        return (0, _index6.default)(isoWeekYear, token.length);
      },
      // Extended year. This is a single number designating the year of this calendar system.
      // The main difference between `y` and `u` localizers are B.C. years:
      // | Year | `y` | `u` |
      // |------|-----|-----|
      // | AC 1 |   1 |   1 |
      // | BC 1 |   1 |   0 |
      // | BC 2 |   2 |  -1 |
      // Also `yy` always returns the last two digits of a year,
      // while `uu` pads single digit years to 2 characters and returns other years unchanged.
      u: function u(date, token) {
        var year = date.getUTCFullYear();
        return (0, _index6.default)(year, token.length);
      },
      // Quarter
      Q: function Q(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch (token) {
          // 1, 2, 3, 4
          case "Q":
            return String(quarter);
          // 01, 02, 03, 04
          case "QQ":
            return (0, _index6.default)(quarter, 2);
          // 1st, 2nd, 3rd, 4th
          case "Qo":
            return localize.ordinalNumber(quarter, {
              unit: "quarter"
            });
          // Q1, Q2, Q3, Q4
          case "QQQ":
            return localize.quarter(quarter, {
              width: "abbreviated",
              context: "formatting"
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)
          case "QQQQQ":
            return localize.quarter(quarter, {
              width: "narrow",
              context: "formatting"
            });
          // 1st quarter, 2nd quarter, ...
          case "QQQQ":
          default:
            return localize.quarter(quarter, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // Stand-alone quarter
      q: function q2(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch (token) {
          // 1, 2, 3, 4
          case "q":
            return String(quarter);
          // 01, 02, 03, 04
          case "qq":
            return (0, _index6.default)(quarter, 2);
          // 1st, 2nd, 3rd, 4th
          case "qo":
            return localize.ordinalNumber(quarter, {
              unit: "quarter"
            });
          // Q1, Q2, Q3, Q4
          case "qqq":
            return localize.quarter(quarter, {
              width: "abbreviated",
              context: "standalone"
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)
          case "qqqqq":
            return localize.quarter(quarter, {
              width: "narrow",
              context: "standalone"
            });
          // 1st quarter, 2nd quarter, ...
          case "qqqq":
          default:
            return localize.quarter(quarter, {
              width: "wide",
              context: "standalone"
            });
        }
      },
      // Month
      M: function M2(date, token, localize) {
        var month = date.getUTCMonth();
        switch (token) {
          case "M":
          case "MM":
            return _index7.default.M(date, token);
          // 1st, 2nd, ..., 12th
          case "Mo":
            return localize.ordinalNumber(month + 1, {
              unit: "month"
            });
          // Jan, Feb, ..., Dec
          case "MMM":
            return localize.month(month, {
              width: "abbreviated",
              context: "formatting"
            });
          // J, F, ..., D
          case "MMMMM":
            return localize.month(month, {
              width: "narrow",
              context: "formatting"
            });
          // January, February, ..., December
          case "MMMM":
          default:
            return localize.month(month, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // Stand-alone month
      L: function L2(date, token, localize) {
        var month = date.getUTCMonth();
        switch (token) {
          // 1, 2, ..., 12
          case "L":
            return String(month + 1);
          // 01, 02, ..., 12
          case "LL":
            return (0, _index6.default)(month + 1, 2);
          // 1st, 2nd, ..., 12th
          case "Lo":
            return localize.ordinalNumber(month + 1, {
              unit: "month"
            });
          // Jan, Feb, ..., Dec
          case "LLL":
            return localize.month(month, {
              width: "abbreviated",
              context: "standalone"
            });
          // J, F, ..., D
          case "LLLLL":
            return localize.month(month, {
              width: "narrow",
              context: "standalone"
            });
          // January, February, ..., December
          case "LLLL":
          default:
            return localize.month(month, {
              width: "wide",
              context: "standalone"
            });
        }
      },
      // Local week of year
      w: function w2(date, token, localize, options) {
        var week = (0, _index4.default)(date, options);
        if (token === "wo") {
          return localize.ordinalNumber(week, {
            unit: "week"
          });
        }
        return (0, _index6.default)(week, token.length);
      },
      // ISO week of year
      I: function I2(date, token, localize) {
        var isoWeek = (0, _index2.default)(date);
        if (token === "Io") {
          return localize.ordinalNumber(isoWeek, {
            unit: "week"
          });
        }
        return (0, _index6.default)(isoWeek, token.length);
      },
      // Day of the month
      d: function d(date, token, localize) {
        if (token === "do") {
          return localize.ordinalNumber(date.getUTCDate(), {
            unit: "date"
          });
        }
        return _index7.default.d(date, token);
      },
      // Day of year
      D: function D(date, token, localize) {
        var dayOfYear = (0, _index.default)(date);
        if (token === "Do") {
          return localize.ordinalNumber(dayOfYear, {
            unit: "dayOfYear"
          });
        }
        return (0, _index6.default)(dayOfYear, token.length);
      },
      // Day of week
      E: function E(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        switch (token) {
          // Tue
          case "E":
          case "EE":
          case "EEE":
            return localize.day(dayOfWeek, {
              width: "abbreviated",
              context: "formatting"
            });
          // T
          case "EEEEE":
            return localize.day(dayOfWeek, {
              width: "narrow",
              context: "formatting"
            });
          // Tu
          case "EEEEEE":
            return localize.day(dayOfWeek, {
              width: "short",
              context: "formatting"
            });
          // Tuesday
          case "EEEE":
          default:
            return localize.day(dayOfWeek, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // Local day of week
      e: function e(date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch (token) {
          // Numerical value (Nth day of week with current locale or weekStartsOn)
          case "e":
            return String(localDayOfWeek);
          // Padded numerical value
          case "ee":
            return (0, _index6.default)(localDayOfWeek, 2);
          // 1st, 2nd, ..., 7th
          case "eo":
            return localize.ordinalNumber(localDayOfWeek, {
              unit: "day"
            });
          case "eee":
            return localize.day(dayOfWeek, {
              width: "abbreviated",
              context: "formatting"
            });
          // T
          case "eeeee":
            return localize.day(dayOfWeek, {
              width: "narrow",
              context: "formatting"
            });
          // Tu
          case "eeeeee":
            return localize.day(dayOfWeek, {
              width: "short",
              context: "formatting"
            });
          // Tuesday
          case "eeee":
          default:
            return localize.day(dayOfWeek, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // Stand-alone local day of week
      c: function c(date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch (token) {
          // Numerical value (same as in `e`)
          case "c":
            return String(localDayOfWeek);
          // Padded numerical value
          case "cc":
            return (0, _index6.default)(localDayOfWeek, token.length);
          // 1st, 2nd, ..., 7th
          case "co":
            return localize.ordinalNumber(localDayOfWeek, {
              unit: "day"
            });
          case "ccc":
            return localize.day(dayOfWeek, {
              width: "abbreviated",
              context: "standalone"
            });
          // T
          case "ccccc":
            return localize.day(dayOfWeek, {
              width: "narrow",
              context: "standalone"
            });
          // Tu
          case "cccccc":
            return localize.day(dayOfWeek, {
              width: "short",
              context: "standalone"
            });
          // Tuesday
          case "cccc":
          default:
            return localize.day(dayOfWeek, {
              width: "wide",
              context: "standalone"
            });
        }
      },
      // ISO day of week
      i: function i(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
        switch (token) {
          // 2
          case "i":
            return String(isoDayOfWeek);
          // 02
          case "ii":
            return (0, _index6.default)(isoDayOfWeek, token.length);
          // 2nd
          case "io":
            return localize.ordinalNumber(isoDayOfWeek, {
              unit: "day"
            });
          // Tue
          case "iii":
            return localize.day(dayOfWeek, {
              width: "abbreviated",
              context: "formatting"
            });
          // T
          case "iiiii":
            return localize.day(dayOfWeek, {
              width: "narrow",
              context: "formatting"
            });
          // Tu
          case "iiiiii":
            return localize.day(dayOfWeek, {
              width: "short",
              context: "formatting"
            });
          // Tuesday
          case "iiii":
          default:
            return localize.day(dayOfWeek, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // AM or PM
      a: function a(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
        switch (token) {
          case "a":
          case "aa":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            });
          case "aaa":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            }).toLowerCase();
          case "aaaaa":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "narrow",
              context: "formatting"
            });
          case "aaaa":
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // AM, PM, midnight, noon
      b: function b2(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours === 12) {
          dayPeriodEnumValue = dayPeriodEnum.noon;
        } else if (hours === 0) {
          dayPeriodEnumValue = dayPeriodEnum.midnight;
        } else {
          dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
        }
        switch (token) {
          case "b":
          case "bb":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            });
          case "bbb":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            }).toLowerCase();
          case "bbbbb":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "narrow",
              context: "formatting"
            });
          case "bbbb":
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // in the morning, in the afternoon, in the evening, at night
      B: function B(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours >= 17) {
          dayPeriodEnumValue = dayPeriodEnum.evening;
        } else if (hours >= 12) {
          dayPeriodEnumValue = dayPeriodEnum.afternoon;
        } else if (hours >= 4) {
          dayPeriodEnumValue = dayPeriodEnum.morning;
        } else {
          dayPeriodEnumValue = dayPeriodEnum.night;
        }
        switch (token) {
          case "B":
          case "BB":
          case "BBB":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            });
          case "BBBBB":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "narrow",
              context: "formatting"
            });
          case "BBBB":
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // Hour [1-12]
      h: function h(date, token, localize) {
        if (token === "ho") {
          var hours = date.getUTCHours() % 12;
          if (hours === 0) hours = 12;
          return localize.ordinalNumber(hours, {
            unit: "hour"
          });
        }
        return _index7.default.h(date, token);
      },
      // Hour [0-23]
      H: function H(date, token, localize) {
        if (token === "Ho") {
          return localize.ordinalNumber(date.getUTCHours(), {
            unit: "hour"
          });
        }
        return _index7.default.H(date, token);
      },
      // Hour [0-11]
      K: function K(date, token, localize) {
        var hours = date.getUTCHours() % 12;
        if (token === "Ko") {
          return localize.ordinalNumber(hours, {
            unit: "hour"
          });
        }
        return (0, _index6.default)(hours, token.length);
      },
      // Hour [1-24]
      k: function k2(date, token, localize) {
        var hours = date.getUTCHours();
        if (hours === 0) hours = 24;
        if (token === "ko") {
          return localize.ordinalNumber(hours, {
            unit: "hour"
          });
        }
        return (0, _index6.default)(hours, token.length);
      },
      // Minute
      m: function m2(date, token, localize) {
        if (token === "mo") {
          return localize.ordinalNumber(date.getUTCMinutes(), {
            unit: "minute"
          });
        }
        return _index7.default.m(date, token);
      },
      // Second
      s: function s(date, token, localize) {
        if (token === "so") {
          return localize.ordinalNumber(date.getUTCSeconds(), {
            unit: "second"
          });
        }
        return _index7.default.s(date, token);
      },
      // Fraction of second
      S: function S(date, token) {
        return _index7.default.S(date, token);
      },
      // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
      X: function X2(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        if (timezoneOffset === 0) {
          return "Z";
        }
        switch (token) {
          // Hours and optional minutes
          case "X":
            return formatTimezoneWithOptionalMinutes(timezoneOffset);
          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XX`
          case "XXXX":
          case "XX":
            return formatTimezone(timezoneOffset);
          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XXX`
          case "XXXXX":
          case "XXX":
          // Hours and minutes with `:` delimiter
          default:
            return formatTimezone(timezoneOffset, ":");
        }
      },
      // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
      x: function x2(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          // Hours and optional minutes
          case "x":
            return formatTimezoneWithOptionalMinutes(timezoneOffset);
          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xx`
          case "xxxx":
          case "xx":
            return formatTimezone(timezoneOffset);
          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xxx`
          case "xxxxx":
          case "xxx":
          // Hours and minutes with `:` delimiter
          default:
            return formatTimezone(timezoneOffset, ":");
        }
      },
      // Timezone (GMT)
      O: function O(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          // Short
          case "O":
          case "OO":
          case "OOO":
            return "GMT" + formatTimezoneShort(timezoneOffset, ":");
          // Long
          case "OOOO":
          default:
            return "GMT" + formatTimezone(timezoneOffset, ":");
        }
      },
      // Timezone (specific non-location)
      z: function z2(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          // Short
          case "z":
          case "zz":
          case "zzz":
            return "GMT" + formatTimezoneShort(timezoneOffset, ":");
          // Long
          case "zzzz":
          default:
            return "GMT" + formatTimezone(timezoneOffset, ":");
        }
      },
      // Seconds timestamp
      t: function t(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = Math.floor(originalDate.getTime() / 1e3);
        return (0, _index6.default)(timestamp, token.length);
      },
      // Milliseconds timestamp
      T: function T(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = originalDate.getTime();
        return (0, _index6.default)(timestamp, token.length);
      }
    };
    function formatTimezoneShort(offset, dirtyDelimiter) {
      var sign = offset > 0 ? "-" : "+";
      var absOffset = Math.abs(offset);
      var hours = Math.floor(absOffset / 60);
      var minutes = absOffset % 60;
      if (minutes === 0) {
        return sign + String(hours);
      }
      var delimiter = dirtyDelimiter || "";
      return sign + String(hours) + delimiter + (0, _index6.default)(minutes, 2);
    }
    function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
      if (offset % 60 === 0) {
        var sign = offset > 0 ? "-" : "+";
        return sign + (0, _index6.default)(Math.abs(offset) / 60, 2);
      }
      return formatTimezone(offset, dirtyDelimiter);
    }
    function formatTimezone(offset, dirtyDelimiter) {
      var delimiter = dirtyDelimiter || "";
      var sign = offset > 0 ? "-" : "+";
      var absOffset = Math.abs(offset);
      var hours = (0, _index6.default)(Math.floor(absOffset / 60), 2);
      var minutes = (0, _index6.default)(absOffset % 60, 2);
      return sign + hours + delimiter + minutes;
    }
    var _default = formatters;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/format/longFormatters/index.js
var require_longFormatters = __commonJS({
  "node_modules/date-fns/_lib/format/longFormatters/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var dateLongFormatter = function dateLongFormatter2(pattern, formatLong) {
      switch (pattern) {
        case "P":
          return formatLong.date({
            width: "short"
          });
        case "PP":
          return formatLong.date({
            width: "medium"
          });
        case "PPP":
          return formatLong.date({
            width: "long"
          });
        case "PPPP":
        default:
          return formatLong.date({
            width: "full"
          });
      }
    };
    var timeLongFormatter = function timeLongFormatter2(pattern, formatLong) {
      switch (pattern) {
        case "p":
          return formatLong.time({
            width: "short"
          });
        case "pp":
          return formatLong.time({
            width: "medium"
          });
        case "ppp":
          return formatLong.time({
            width: "long"
          });
        case "pppp":
        default:
          return formatLong.time({
            width: "full"
          });
      }
    };
    var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong) {
      var matchResult = pattern.match(/(P+)(p+)?/) || [];
      var datePattern = matchResult[1];
      var timePattern = matchResult[2];
      if (!timePattern) {
        return dateLongFormatter(pattern, formatLong);
      }
      var dateTimeFormat;
      switch (datePattern) {
        case "P":
          dateTimeFormat = formatLong.dateTime({
            width: "short"
          });
          break;
        case "PP":
          dateTimeFormat = formatLong.dateTime({
            width: "medium"
          });
          break;
        case "PPP":
          dateTimeFormat = formatLong.dateTime({
            width: "long"
          });
          break;
        case "PPPP":
        default:
          dateTimeFormat = formatLong.dateTime({
            width: "full"
          });
          break;
      }
      return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong)).replace("{{time}}", timeLongFormatter(timePattern, formatLong));
    };
    var longFormatters = {
      p: timeLongFormatter,
      P: dateTimeLongFormatter
    };
    var _default = longFormatters;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/protectedTokens/index.js
var require_protectedTokens = __commonJS({
  "node_modules/date-fns/_lib/protectedTokens/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.isProtectedDayOfYearToken = isProtectedDayOfYearToken;
    exports2.isProtectedWeekYearToken = isProtectedWeekYearToken;
    exports2.throwProtectedError = throwProtectedError;
    var protectedDayOfYearTokens = ["D", "DD"];
    var protectedWeekYearTokens = ["YY", "YYYY"];
    function isProtectedDayOfYearToken(token) {
      return protectedDayOfYearTokens.indexOf(token) !== -1;
    }
    function isProtectedWeekYearToken(token) {
      return protectedWeekYearTokens.indexOf(token) !== -1;
    }
    function throwProtectedError(token, format3, input) {
      if (token === "YYYY") {
        throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format3, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      } else if (token === "YY") {
        throw new RangeError("Use `yy` instead of `YY` (in `".concat(format3, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      } else if (token === "D") {
        throw new RangeError("Use `d` instead of `D` (in `".concat(format3, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      } else if (token === "DD") {
        throw new RangeError("Use `dd` instead of `DD` (in `".concat(format3, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      }
    }
  }
});

// node_modules/date-fns/locale/en-US/_lib/formatDistance/index.js
var require_formatDistance = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/formatDistance/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "less than a second",
        other: "less than {{count}} seconds"
      },
      xSeconds: {
        one: "1 second",
        other: "{{count}} seconds"
      },
      halfAMinute: "half a minute",
      lessThanXMinutes: {
        one: "less than a minute",
        other: "less than {{count}} minutes"
      },
      xMinutes: {
        one: "1 minute",
        other: "{{count}} minutes"
      },
      aboutXHours: {
        one: "about 1 hour",
        other: "about {{count}} hours"
      },
      xHours: {
        one: "1 hour",
        other: "{{count}} hours"
      },
      xDays: {
        one: "1 day",
        other: "{{count}} days"
      },
      aboutXWeeks: {
        one: "about 1 week",
        other: "about {{count}} weeks"
      },
      xWeeks: {
        one: "1 week",
        other: "{{count}} weeks"
      },
      aboutXMonths: {
        one: "about 1 month",
        other: "about {{count}} months"
      },
      xMonths: {
        one: "1 month",
        other: "{{count}} months"
      },
      aboutXYears: {
        one: "about 1 year",
        other: "about {{count}} years"
      },
      xYears: {
        one: "1 year",
        other: "{{count}} years"
      },
      overXYears: {
        one: "over 1 year",
        other: "over {{count}} years"
      },
      almostXYears: {
        one: "almost 1 year",
        other: "almost {{count}} years"
      }
    };
    var formatDistance2 = function formatDistance3(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "in " + result;
        } else {
          return result + " ago";
        }
      }
      return result;
    };
    var _default = formatDistance2;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/_lib/buildFormatLongFn/index.js
var require_buildFormatLongFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildFormatLongFn/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = buildFormatLongFn;
    function buildFormatLongFn(args) {
      return function() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var width = options.width ? String(options.width) : args.defaultWidth;
        var format3 = args.formats[width] || args.formats[args.defaultWidth];
        return format3;
      };
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/en-US/_lib/formatLong/index.js
var require_formatLong = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/formatLong/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _index = _interopRequireDefault(require_buildFormatLongFn());
    var dateFormats = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = {
      date: (0, _index.default)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.default)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.default)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
    var _default = formatLong;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/en-US/_lib/formatRelative/index.js
var require_formatRelative = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/formatRelative/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var formatRelativeLocale = {
      lastWeek: "'last' eeee 'at' p",
      yesterday: "'yesterday at' p",
      today: "'today at' p",
      tomorrow: "'tomorrow at' p",
      nextWeek: "eeee 'at' p",
      other: "P"
    };
    var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    };
    var _default = formatRelative;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/_lib/buildLocalizeFn/index.js
var require_buildLocalizeFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildLocalizeFn/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = buildLocalizeFn;
    function buildLocalizeFn(args) {
      return function(dirtyIndex, options) {
        var context2 = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
        var valuesArray;
        if (context2 === "formatting" && args.formattingValues) {
          var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
          var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
          valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        } else {
          var _defaultWidth = args.defaultWidth;
          var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
          valuesArray = args.values[_width] || args.values[_defaultWidth];
        }
        var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
        return valuesArray[index];
      };
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/en-US/_lib/localize/index.js
var require_localize = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/localize/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _index = _interopRequireDefault(require_buildLocalizeFn());
    var eraValues = {
      narrow: ["B", "A"],
      abbreviated: ["BC", "AD"],
      wide: ["Before Christ", "Anno Domini"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    };
    var dayValues = {
      narrow: ["S", "M", "T", "W", "T", "F", "S"],
      short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
      abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mi",
        noon: "n",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnight",
        noon: "noon",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnight",
        noon: "noon",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mi",
        noon: "n",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnight",
        noon: "noon",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnight",
        noon: "noon",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      }
    };
    var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
      var number = Number(dirtyNumber);
      var rem100 = number % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + "st";
          case 2:
            return number + "nd";
          case 3:
            return number + "rd";
        }
      }
      return number + "th";
    };
    var localize = {
      ordinalNumber,
      era: (0, _index.default)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.default)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: function argumentCallback(quarter) {
          return quarter - 1;
        }
      }),
      month: (0, _index.default)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.default)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.default)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
    var _default = localize;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/_lib/buildMatchFn/index.js
var require_buildMatchFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildMatchFn/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = buildMatchFn;
    function buildMatchFn(args) {
      return function(string) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var width = options.width;
        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        var matchResult = string.match(matchPattern);
        if (!matchResult) {
          return null;
        }
        var matchedString = matchResult[0];
        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
          return pattern.test(matchedString);
        }) : findKey(parsePatterns, function(pattern) {
          return pattern.test(matchedString);
        });
        var value;
        value = args.valueCallback ? args.valueCallback(key) : key;
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
          value,
          rest
        };
      };
    }
    function findKey(object, predicate) {
      for (var key in object) {
        if (object.hasOwnProperty(key) && predicate(object[key])) {
          return key;
        }
      }
      return void 0;
    }
    function findIndex(array, predicate) {
      for (var key = 0; key < array.length; key++) {
        if (predicate(array[key])) {
          return key;
        }
      }
      return void 0;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/_lib/buildMatchPatternFn/index.js
var require_buildMatchPatternFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildMatchPatternFn/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = buildMatchPatternFn;
    function buildMatchPatternFn(args) {
      return function(string) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var matchResult = string.match(args.matchPattern);
        if (!matchResult) return null;
        var matchedString = matchResult[0];
        var parseResult = string.match(args.parsePattern);
        if (!parseResult) return null;
        var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
          value,
          rest
        };
      };
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/en-US/_lib/match/index.js
var require_match = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/match/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _index = _interopRequireDefault(require_buildMatchFn());
    var _index2 = _interopRequireDefault(require_buildMatchPatternFn());
    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(b|a)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
      wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtwf]/i,
      short: /^(su|mo|tu|we|th|fr|sa)/i,
      abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
      wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = {
      ordinalNumber: (0, _index2.default)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function valueCallback(value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.default)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.default)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: function valueCallback(index) {
          return index + 1;
        }
      }),
      month: (0, _index.default)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.default)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.default)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
    var _default = match;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/locale/en-US/index.js
var require_en_US = __commonJS({
  "node_modules/date-fns/locale/en-US/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _index = _interopRequireDefault(require_formatDistance());
    var _index2 = _interopRequireDefault(require_formatLong());
    var _index3 = _interopRequireDefault(require_formatRelative());
    var _index4 = _interopRequireDefault(require_localize());
    var _index5 = _interopRequireDefault(require_match());
    var locale = {
      code: "en-US",
      formatDistance: _index.default,
      formatLong: _index2.default,
      formatRelative: _index3.default,
      localize: _index4.default,
      match: _index5.default,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
    var _default = locale;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/defaultLocale/index.js
var require_defaultLocale = __commonJS({
  "node_modules/date-fns/_lib/defaultLocale/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _index = _interopRequireDefault(require_en_US());
    var _default = _index.default;
    exports2.default = _default;
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/format/index.js
var require_format = __commonJS({
  "node_modules/date-fns/format/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = format3;
    var _index = _interopRequireDefault(require_isValid());
    var _index2 = _interopRequireDefault(require_subMilliseconds());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_formatters());
    var _index5 = _interopRequireDefault(require_longFormatters());
    var _index6 = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index7 = require_protectedTokens();
    var _index8 = _interopRequireDefault(require_toInteger());
    var _index9 = _interopRequireDefault(require_requiredArgs());
    var _index10 = require_defaultOptions();
    var _index11 = _interopRequireDefault(require_defaultLocale());
    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    function format3(dirtyDate, dirtyFormatStr, options) {
      var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
      (0, _index9.default)(2, arguments);
      var formatStr = String(dirtyFormatStr);
      var defaultOptions = (0, _index10.getDefaultOptions)();
      var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : _index11.default;
      var firstWeekContainsDate = (0, _index8.default)((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
      }
      var weekStartsOn = (0, _index8.default)((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      if (!locale.localize) {
        throw new RangeError("locale must contain localize property");
      }
      if (!locale.formatLong) {
        throw new RangeError("locale must contain formatLong property");
      }
      var originalDate = (0, _index3.default)(dirtyDate);
      if (!(0, _index.default)(originalDate)) {
        throw new RangeError("Invalid time value");
      }
      var timezoneOffset = (0, _index6.default)(originalDate);
      var utcDate = (0, _index2.default)(originalDate, timezoneOffset);
      var formatterOptions = {
        firstWeekContainsDate,
        weekStartsOn,
        locale,
        _originalDate: originalDate
      };
      var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
        var firstCharacter = substring[0];
        if (firstCharacter === "p" || firstCharacter === "P") {
          var longFormatter = _index5.default[firstCharacter];
          return longFormatter(substring, locale.formatLong);
        }
        return substring;
      }).join("").match(formattingTokensRegExp).map(function(substring) {
        if (substring === "''") {
          return "'";
        }
        var firstCharacter = substring[0];
        if (firstCharacter === "'") {
          return cleanEscapedString(substring);
        }
        var formatter = _index4.default[firstCharacter];
        if (formatter) {
          if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && (0, _index7.isProtectedWeekYearToken)(substring)) {
            (0, _index7.throwProtectedError)(substring, dirtyFormatStr, String(dirtyDate));
          }
          if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && (0, _index7.isProtectedDayOfYearToken)(substring)) {
            (0, _index7.throwProtectedError)(substring, dirtyFormatStr, String(dirtyDate));
          }
          return formatter(utcDate, substring, locale.localize, formatterOptions);
        }
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        return substring;
      }).join("");
      return result;
    }
    function cleanEscapedString(input) {
      var matched = input.match(escapedStringRegExp);
      if (!matched) {
        return input;
      }
      return matched[1].replace(doubleQuoteRegExp, "'");
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/assign/index.js
var require_assign = __commonJS({
  "node_modules/date-fns/_lib/assign/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = assign;
    function assign(target, object) {
      if (target == null) {
        throw new TypeError("assign requires that input parameter not be null or undefined");
      }
      for (var property in object) {
        if (Object.prototype.hasOwnProperty.call(object, property)) {
          ;
          target[property] = object[property];
        }
      }
      return target;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/_lib/cloneObject/index.js
var require_cloneObject = __commonJS({
  "node_modules/date-fns/_lib/cloneObject/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = cloneObject2;
    var _index = _interopRequireDefault(require_assign());
    function cloneObject2(object) {
      return (0, _index.default)({}, object);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatDistance/index.js
var require_formatDistance2 = __commonJS({
  "node_modules/date-fns/formatDistance/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatDistance2;
    var _index = require_defaultOptions();
    var _index2 = _interopRequireDefault(require_compareAsc());
    var _index3 = _interopRequireDefault(require_differenceInMonths());
    var _index4 = _interopRequireDefault(require_differenceInSeconds());
    var _index5 = _interopRequireDefault(require_defaultLocale());
    var _index6 = _interopRequireDefault(require_toDate());
    var _index7 = _interopRequireDefault(require_cloneObject());
    var _index8 = _interopRequireDefault(require_assign());
    var _index9 = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index10 = _interopRequireDefault(require_requiredArgs());
    var MINUTES_IN_DAY = 1440;
    var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
    var MINUTES_IN_MONTH = 43200;
    var MINUTES_IN_TWO_MONTHS = 86400;
    function formatDistance2(dirtyDate, dirtyBaseDate, options) {
      var _ref, _options$locale;
      (0, _index10.default)(2, arguments);
      var defaultOptions = (0, _index.getDefaultOptions)();
      var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : _index5.default;
      if (!locale.formatDistance) {
        throw new RangeError("locale must contain formatDistance property");
      }
      var comparison = (0, _index2.default)(dirtyDate, dirtyBaseDate);
      if (isNaN(comparison)) {
        throw new RangeError("Invalid time value");
      }
      var localizeOptions = (0, _index8.default)((0, _index7.default)(options), {
        addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),
        comparison
      });
      var dateLeft;
      var dateRight;
      if (comparison > 0) {
        dateLeft = (0, _index6.default)(dirtyBaseDate);
        dateRight = (0, _index6.default)(dirtyDate);
      } else {
        dateLeft = (0, _index6.default)(dirtyDate);
        dateRight = (0, _index6.default)(dirtyBaseDate);
      }
      var seconds = (0, _index4.default)(dateRight, dateLeft);
      var offsetInSeconds = ((0, _index9.default)(dateRight) - (0, _index9.default)(dateLeft)) / 1e3;
      var minutes = Math.round((seconds - offsetInSeconds) / 60);
      var months;
      if (minutes < 2) {
        if (options !== null && options !== void 0 && options.includeSeconds) {
          if (seconds < 5) {
            return locale.formatDistance("lessThanXSeconds", 5, localizeOptions);
          } else if (seconds < 10) {
            return locale.formatDistance("lessThanXSeconds", 10, localizeOptions);
          } else if (seconds < 20) {
            return locale.formatDistance("lessThanXSeconds", 20, localizeOptions);
          } else if (seconds < 40) {
            return locale.formatDistance("halfAMinute", 0, localizeOptions);
          } else if (seconds < 60) {
            return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
          } else {
            return locale.formatDistance("xMinutes", 1, localizeOptions);
          }
        } else {
          if (minutes === 0) {
            return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
          } else {
            return locale.formatDistance("xMinutes", minutes, localizeOptions);
          }
        }
      } else if (minutes < 45) {
        return locale.formatDistance("xMinutes", minutes, localizeOptions);
      } else if (minutes < 90) {
        return locale.formatDistance("aboutXHours", 1, localizeOptions);
      } else if (minutes < MINUTES_IN_DAY) {
        var hours = Math.round(minutes / 60);
        return locale.formatDistance("aboutXHours", hours, localizeOptions);
      } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
        return locale.formatDistance("xDays", 1, localizeOptions);
      } else if (minutes < MINUTES_IN_MONTH) {
        var days = Math.round(minutes / MINUTES_IN_DAY);
        return locale.formatDistance("xDays", days, localizeOptions);
      } else if (minutes < MINUTES_IN_TWO_MONTHS) {
        months = Math.round(minutes / MINUTES_IN_MONTH);
        return locale.formatDistance("aboutXMonths", months, localizeOptions);
      }
      months = (0, _index3.default)(dateRight, dateLeft);
      if (months < 12) {
        var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
        return locale.formatDistance("xMonths", nearestMonth, localizeOptions);
      } else {
        var monthsSinceStartOfYear = months % 12;
        var years = Math.floor(months / 12);
        if (monthsSinceStartOfYear < 3) {
          return locale.formatDistance("aboutXYears", years, localizeOptions);
        } else if (monthsSinceStartOfYear < 9) {
          return locale.formatDistance("overXYears", years, localizeOptions);
        } else {
          return locale.formatDistance("almostXYears", years + 1, localizeOptions);
        }
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatDistanceStrict/index.js
var require_formatDistanceStrict = __commonJS({
  "node_modules/date-fns/formatDistanceStrict/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatDistanceStrict;
    var _index = require_defaultOptions();
    var _index2 = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index3 = _interopRequireDefault(require_compareAsc());
    var _index4 = _interopRequireDefault(require_toDate());
    var _index5 = _interopRequireDefault(require_cloneObject());
    var _index6 = _interopRequireDefault(require_assign());
    var _index7 = _interopRequireDefault(require_defaultLocale());
    var _index8 = _interopRequireDefault(require_requiredArgs());
    var MILLISECONDS_IN_MINUTE = 1e3 * 60;
    var MINUTES_IN_DAY = 60 * 24;
    var MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;
    var MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;
    function formatDistanceStrict(dirtyDate, dirtyBaseDate, options) {
      var _ref, _options$locale, _options$roundingMeth;
      (0, _index8.default)(2, arguments);
      var defaultOptions = (0, _index.getDefaultOptions)();
      var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : _index7.default;
      if (!locale.formatDistance) {
        throw new RangeError("locale must contain localize.formatDistance property");
      }
      var comparison = (0, _index3.default)(dirtyDate, dirtyBaseDate);
      if (isNaN(comparison)) {
        throw new RangeError("Invalid time value");
      }
      var localizeOptions = (0, _index6.default)((0, _index5.default)(options), {
        addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),
        comparison
      });
      var dateLeft;
      var dateRight;
      if (comparison > 0) {
        dateLeft = (0, _index4.default)(dirtyBaseDate);
        dateRight = (0, _index4.default)(dirtyDate);
      } else {
        dateLeft = (0, _index4.default)(dirtyDate);
        dateRight = (0, _index4.default)(dirtyBaseDate);
      }
      var roundingMethod = String((_options$roundingMeth = options === null || options === void 0 ? void 0 : options.roundingMethod) !== null && _options$roundingMeth !== void 0 ? _options$roundingMeth : "round");
      var roundingMethodFn;
      if (roundingMethod === "floor") {
        roundingMethodFn = Math.floor;
      } else if (roundingMethod === "ceil") {
        roundingMethodFn = Math.ceil;
      } else if (roundingMethod === "round") {
        roundingMethodFn = Math.round;
      } else {
        throw new RangeError("roundingMethod must be 'floor', 'ceil' or 'round'");
      }
      var milliseconds = dateRight.getTime() - dateLeft.getTime();
      var minutes = milliseconds / MILLISECONDS_IN_MINUTE;
      var timezoneOffset = (0, _index2.default)(dateRight) - (0, _index2.default)(dateLeft);
      var dstNormalizedMinutes = (milliseconds - timezoneOffset) / MILLISECONDS_IN_MINUTE;
      var defaultUnit = options === null || options === void 0 ? void 0 : options.unit;
      var unit;
      if (!defaultUnit) {
        if (minutes < 1) {
          unit = "second";
        } else if (minutes < 60) {
          unit = "minute";
        } else if (minutes < MINUTES_IN_DAY) {
          unit = "hour";
        } else if (dstNormalizedMinutes < MINUTES_IN_MONTH) {
          unit = "day";
        } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {
          unit = "month";
        } else {
          unit = "year";
        }
      } else {
        unit = String(defaultUnit);
      }
      if (unit === "second") {
        var seconds = roundingMethodFn(milliseconds / 1e3);
        return locale.formatDistance("xSeconds", seconds, localizeOptions);
      } else if (unit === "minute") {
        var roundedMinutes = roundingMethodFn(minutes);
        return locale.formatDistance("xMinutes", roundedMinutes, localizeOptions);
      } else if (unit === "hour") {
        var hours = roundingMethodFn(minutes / 60);
        return locale.formatDistance("xHours", hours, localizeOptions);
      } else if (unit === "day") {
        var days = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY);
        return locale.formatDistance("xDays", days, localizeOptions);
      } else if (unit === "month") {
        var months = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH);
        return months === 12 && defaultUnit !== "month" ? locale.formatDistance("xYears", 1, localizeOptions) : locale.formatDistance("xMonths", months, localizeOptions);
      } else if (unit === "year") {
        var years = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);
        return locale.formatDistance("xYears", years, localizeOptions);
      }
      throw new RangeError("unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'");
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatDistanceToNow/index.js
var require_formatDistanceToNow = __commonJS({
  "node_modules/date-fns/formatDistanceToNow/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatDistanceToNow;
    var _index = _interopRequireDefault(require_formatDistance2());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function formatDistanceToNow(dirtyDate, options) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, Date.now(), options);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatDistanceToNowStrict/index.js
var require_formatDistanceToNowStrict = __commonJS({
  "node_modules/date-fns/formatDistanceToNowStrict/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatDistanceToNowStrict;
    var _index = _interopRequireDefault(require_formatDistanceStrict());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function formatDistanceToNowStrict(dirtyDate, options) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, Date.now(), options);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatDuration/index.js
var require_formatDuration = __commonJS({
  "node_modules/date-fns/formatDuration/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatDuration;
    var _index = require_defaultOptions();
    var _index2 = _interopRequireDefault(require_defaultLocale());
    var defaultFormat = ["years", "months", "weeks", "days", "hours", "minutes", "seconds"];
    function formatDuration(duration, options) {
      var _ref, _options$locale, _options$format, _options$zero, _options$delimiter;
      if (arguments.length < 1) {
        throw new TypeError("1 argument required, but only ".concat(arguments.length, " present"));
      }
      var defaultOptions = (0, _index.getDefaultOptions)();
      var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : _index2.default;
      var format3 = (_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : defaultFormat;
      var zero = (_options$zero = options === null || options === void 0 ? void 0 : options.zero) !== null && _options$zero !== void 0 ? _options$zero : false;
      var delimiter = (_options$delimiter = options === null || options === void 0 ? void 0 : options.delimiter) !== null && _options$delimiter !== void 0 ? _options$delimiter : " ";
      if (!locale.formatDistance) {
        return "";
      }
      var result = format3.reduce(function(acc, unit) {
        var token = "x".concat(unit.replace(/(^.)/, function(m2) {
          return m2.toUpperCase();
        }));
        var value = duration[unit];
        if (typeof value === "number" && (zero || duration[unit])) {
          return acc.concat(locale.formatDistance(token, value));
        }
        return acc;
      }, []).join(delimiter);
      return result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatISO/index.js
var require_formatISO = __commonJS({
  "node_modules/date-fns/formatISO/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatISO;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_addLeadingZeros());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function formatISO(date, options) {
      var _options$format, _options$representati;
      (0, _index3.default)(1, arguments);
      var originalDate = (0, _index.default)(date);
      if (isNaN(originalDate.getTime())) {
        throw new RangeError("Invalid time value");
      }
      var format3 = String((_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : "extended");
      var representation = String((_options$representati = options === null || options === void 0 ? void 0 : options.representation) !== null && _options$representati !== void 0 ? _options$representati : "complete");
      if (format3 !== "extended" && format3 !== "basic") {
        throw new RangeError("format must be 'extended' or 'basic'");
      }
      if (representation !== "date" && representation !== "time" && representation !== "complete") {
        throw new RangeError("representation must be 'date', 'time', or 'complete'");
      }
      var result = "";
      var tzOffset = "";
      var dateDelimiter = format3 === "extended" ? "-" : "";
      var timeDelimiter = format3 === "extended" ? ":" : "";
      if (representation !== "time") {
        var day = (0, _index2.default)(originalDate.getDate(), 2);
        var month = (0, _index2.default)(originalDate.getMonth() + 1, 2);
        var year = (0, _index2.default)(originalDate.getFullYear(), 4);
        result = "".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);
      }
      if (representation !== "date") {
        var offset = originalDate.getTimezoneOffset();
        if (offset !== 0) {
          var absoluteOffset = Math.abs(offset);
          var hourOffset = (0, _index2.default)(Math.floor(absoluteOffset / 60), 2);
          var minuteOffset = (0, _index2.default)(absoluteOffset % 60, 2);
          var sign = offset < 0 ? "+" : "-";
          tzOffset = "".concat(sign).concat(hourOffset, ":").concat(minuteOffset);
        } else {
          tzOffset = "Z";
        }
        var hour = (0, _index2.default)(originalDate.getHours(), 2);
        var minute = (0, _index2.default)(originalDate.getMinutes(), 2);
        var second = (0, _index2.default)(originalDate.getSeconds(), 2);
        var separator = result === "" ? "" : "T";
        var time = [hour, minute, second].join(timeDelimiter);
        result = "".concat(result).concat(separator).concat(time).concat(tzOffset);
      }
      return result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatISO9075/index.js
var require_formatISO9075 = __commonJS({
  "node_modules/date-fns/formatISO9075/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatISO9075;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_isValid());
    var _index3 = _interopRequireDefault(require_addLeadingZeros());
    function formatISO9075(dirtyDate, options) {
      var _options$format, _options$representati;
      if (arguments.length < 1) {
        throw new TypeError("1 argument required, but only ".concat(arguments.length, " present"));
      }
      var originalDate = (0, _index.default)(dirtyDate);
      if (!(0, _index2.default)(originalDate)) {
        throw new RangeError("Invalid time value");
      }
      var format3 = String((_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : "extended");
      var representation = String((_options$representati = options === null || options === void 0 ? void 0 : options.representation) !== null && _options$representati !== void 0 ? _options$representati : "complete");
      if (format3 !== "extended" && format3 !== "basic") {
        throw new RangeError("format must be 'extended' or 'basic'");
      }
      if (representation !== "date" && representation !== "time" && representation !== "complete") {
        throw new RangeError("representation must be 'date', 'time', or 'complete'");
      }
      var result = "";
      var dateDelimiter = format3 === "extended" ? "-" : "";
      var timeDelimiter = format3 === "extended" ? ":" : "";
      if (representation !== "time") {
        var day = (0, _index3.default)(originalDate.getDate(), 2);
        var month = (0, _index3.default)(originalDate.getMonth() + 1, 2);
        var year = (0, _index3.default)(originalDate.getFullYear(), 4);
        result = "".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);
      }
      if (representation !== "date") {
        var hour = (0, _index3.default)(originalDate.getHours(), 2);
        var minute = (0, _index3.default)(originalDate.getMinutes(), 2);
        var second = (0, _index3.default)(originalDate.getSeconds(), 2);
        var separator = result === "" ? "" : " ";
        result = "".concat(result).concat(separator).concat(hour).concat(timeDelimiter).concat(minute).concat(timeDelimiter).concat(second);
      }
      return result;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatISODuration/index.js
var require_formatISODuration = __commonJS({
  "node_modules/date-fns/formatISODuration/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatISODuration;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _index = _interopRequireDefault(require_requiredArgs());
    function formatISODuration(duration) {
      (0, _index.default)(1, arguments);
      if ((0, _typeof2.default)(duration) !== "object") throw new Error("Duration must be an object");
      var _duration$years = duration.years, years = _duration$years === void 0 ? 0 : _duration$years, _duration$months = duration.months, months = _duration$months === void 0 ? 0 : _duration$months, _duration$days = duration.days, days = _duration$days === void 0 ? 0 : _duration$days, _duration$hours = duration.hours, hours = _duration$hours === void 0 ? 0 : _duration$hours, _duration$minutes = duration.minutes, minutes = _duration$minutes === void 0 ? 0 : _duration$minutes, _duration$seconds = duration.seconds, seconds = _duration$seconds === void 0 ? 0 : _duration$seconds;
      return "P".concat(years, "Y").concat(months, "M").concat(days, "DT").concat(hours, "H").concat(minutes, "M").concat(seconds, "S");
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatRFC3339/index.js
var require_formatRFC3339 = __commonJS({
  "node_modules/date-fns/formatRFC3339/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatRFC3339;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_isValid());
    var _index3 = _interopRequireDefault(require_addLeadingZeros());
    var _index4 = _interopRequireDefault(require_toInteger());
    function formatRFC3339(dirtyDate, options) {
      var _options$fractionDigi;
      if (arguments.length < 1) {
        throw new TypeError("1 arguments required, but only ".concat(arguments.length, " present"));
      }
      var originalDate = (0, _index.default)(dirtyDate);
      if (!(0, _index2.default)(originalDate)) {
        throw new RangeError("Invalid time value");
      }
      var fractionDigits = Number((_options$fractionDigi = options === null || options === void 0 ? void 0 : options.fractionDigits) !== null && _options$fractionDigi !== void 0 ? _options$fractionDigi : 0);
      if (!(fractionDigits >= 0 && fractionDigits <= 3)) {
        throw new RangeError("fractionDigits must be between 0 and 3 inclusively");
      }
      var day = (0, _index3.default)(originalDate.getDate(), 2);
      var month = (0, _index3.default)(originalDate.getMonth() + 1, 2);
      var year = originalDate.getFullYear();
      var hour = (0, _index3.default)(originalDate.getHours(), 2);
      var minute = (0, _index3.default)(originalDate.getMinutes(), 2);
      var second = (0, _index3.default)(originalDate.getSeconds(), 2);
      var fractionalSecond = "";
      if (fractionDigits > 0) {
        var milliseconds = originalDate.getMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, fractionDigits - 3));
        fractionalSecond = "." + (0, _index3.default)(fractionalSeconds, fractionDigits);
      }
      var offset = "";
      var tzOffset = originalDate.getTimezoneOffset();
      if (tzOffset !== 0) {
        var absoluteOffset = Math.abs(tzOffset);
        var hourOffset = (0, _index3.default)((0, _index4.default)(absoluteOffset / 60), 2);
        var minuteOffset = (0, _index3.default)(absoluteOffset % 60, 2);
        var sign = tzOffset < 0 ? "+" : "-";
        offset = "".concat(sign).concat(hourOffset, ":").concat(minuteOffset);
      } else {
        offset = "Z";
      }
      return "".concat(year, "-").concat(month, "-").concat(day, "T").concat(hour, ":").concat(minute, ":").concat(second).concat(fractionalSecond).concat(offset);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatRFC7231/index.js
var require_formatRFC7231 = __commonJS({
  "node_modules/date-fns/formatRFC7231/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatRFC7231;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_isValid());
    var _index3 = _interopRequireDefault(require_addLeadingZeros());
    var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function formatRFC7231(dirtyDate) {
      if (arguments.length < 1) {
        throw new TypeError("1 arguments required, but only ".concat(arguments.length, " present"));
      }
      var originalDate = (0, _index.default)(dirtyDate);
      if (!(0, _index2.default)(originalDate)) {
        throw new RangeError("Invalid time value");
      }
      var dayName = days[originalDate.getUTCDay()];
      var dayOfMonth = (0, _index3.default)(originalDate.getUTCDate(), 2);
      var monthName = months[originalDate.getUTCMonth()];
      var year = originalDate.getUTCFullYear();
      var hour = (0, _index3.default)(originalDate.getUTCHours(), 2);
      var minute = (0, _index3.default)(originalDate.getUTCMinutes(), 2);
      var second = (0, _index3.default)(originalDate.getUTCSeconds(), 2);
      return "".concat(dayName, ", ").concat(dayOfMonth, " ").concat(monthName, " ").concat(year, " ").concat(hour, ":").concat(minute, ":").concat(second, " GMT");
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/formatRelative/index.js
var require_formatRelative2 = __commonJS({
  "node_modules/date-fns/formatRelative/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = formatRelative;
    var _index = require_defaultOptions();
    var _index2 = _interopRequireDefault(require_differenceInCalendarDays());
    var _index3 = _interopRequireDefault(require_format());
    var _index4 = _interopRequireDefault(require_defaultLocale());
    var _index5 = _interopRequireDefault(require_subMilliseconds());
    var _index6 = _interopRequireDefault(require_toDate());
    var _index7 = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index8 = _interopRequireDefault(require_requiredArgs());
    var _index9 = _interopRequireDefault(require_toInteger());
    function formatRelative(dirtyDate, dirtyBaseDate, options) {
      var _ref, _options$locale, _ref2, _ref3, _ref4, _options$weekStartsOn, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2;
      (0, _index8.default)(2, arguments);
      var date = (0, _index6.default)(dirtyDate);
      var baseDate = (0, _index6.default)(dirtyBaseDate);
      var defaultOptions = (0, _index.getDefaultOptions)();
      var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : _index4.default;
      var weekStartsOn = (0, _index9.default)((_ref2 = (_ref3 = (_ref4 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.weekStartsOn) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : 0);
      if (!locale.localize) {
        throw new RangeError("locale must contain localize property");
      }
      if (!locale.formatLong) {
        throw new RangeError("locale must contain formatLong property");
      }
      if (!locale.formatRelative) {
        throw new RangeError("locale must contain formatRelative property");
      }
      var diff = (0, _index2.default)(date, baseDate);
      if (isNaN(diff)) {
        throw new RangeError("Invalid time value");
      }
      var token;
      if (diff < -6) {
        token = "other";
      } else if (diff < -1) {
        token = "lastWeek";
      } else if (diff < 0) {
        token = "yesterday";
      } else if (diff < 1) {
        token = "today";
      } else if (diff < 2) {
        token = "tomorrow";
      } else if (diff < 7) {
        token = "nextWeek";
      } else {
        token = "other";
      }
      var utcDate = (0, _index5.default)(date, (0, _index7.default)(date));
      var utcBaseDate = (0, _index5.default)(baseDate, (0, _index7.default)(baseDate));
      var formatStr = locale.formatRelative(token, utcDate, utcBaseDate, {
        locale,
        weekStartsOn
      });
      return (0, _index3.default)(date, formatStr, {
        locale,
        weekStartsOn
      });
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/fromUnixTime/index.js
var require_fromUnixTime = __commonJS({
  "node_modules/date-fns/fromUnixTime/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = fromUnixTime;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_toInteger());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function fromUnixTime(dirtyUnixTime) {
      (0, _index3.default)(1, arguments);
      var unixTime = (0, _index2.default)(dirtyUnixTime);
      return (0, _index.default)(unixTime * 1e3);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getDate/index.js
var require_getDate = __commonJS({
  "node_modules/date-fns/getDate/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDate2;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function getDate2(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var dayOfMonth = date.getDate();
      return dayOfMonth;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getDay/index.js
var require_getDay = __commonJS({
  "node_modules/date-fns/getDay/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDay2;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function getDay2(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var day = date.getDay();
      return day;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getDayOfYear/index.js
var require_getDayOfYear = __commonJS({
  "node_modules/date-fns/getDayOfYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDayOfYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_startOfYear());
    var _index3 = _interopRequireDefault(require_differenceInCalendarDays());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function getDayOfYear(dirtyDate) {
      (0, _index4.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var diff = (0, _index3.default)(date, (0, _index2.default)(date));
      var dayOfYear = diff + 1;
      return dayOfYear;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getDaysInMonth/index.js
var require_getDaysInMonth = __commonJS({
  "node_modules/date-fns/getDaysInMonth/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDaysInMonth;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function getDaysInMonth(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      var monthIndex = date.getMonth();
      var lastDayOfMonth3 = /* @__PURE__ */ new Date(0);
      lastDayOfMonth3.setFullYear(year, monthIndex + 1, 0);
      lastDayOfMonth3.setHours(0, 0, 0, 0);
      return lastDayOfMonth3.getDate();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isLeapYear/index.js
var require_isLeapYear = __commonJS({
  "node_modules/date-fns/isLeapYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isLeapYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isLeapYear(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getDaysInYear/index.js
var require_getDaysInYear = __commonJS({
  "node_modules/date-fns/getDaysInYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDaysInYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_isLeapYear());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function getDaysInYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      if (String(new Date(date)) === "Invalid Date") {
        return NaN;
      }
      return (0, _index2.default)(date) ? 366 : 365;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getDecade/index.js
var require_getDecade = __commonJS({
  "node_modules/date-fns/getDecade/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDecade;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function getDecade(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      var decade = Math.floor(year / 10) * 10;
      return decade;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getDefaultOptions/index.js
var require_getDefaultOptions = __commonJS({
  "node_modules/date-fns/getDefaultOptions/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getDefaultOptions;
    var _index = require_defaultOptions();
    var _index2 = _interopRequireDefault(require_assign());
    function getDefaultOptions() {
      return (0, _index2.default)({}, (0, _index.getDefaultOptions)());
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getHours/index.js
var require_getHours = __commonJS({
  "node_modules/date-fns/getHours/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getHours;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function getHours(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var hours = date.getHours();
      return hours;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getISODay/index.js
var require_getISODay = __commonJS({
  "node_modules/date-fns/getISODay/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getISODay;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function getISODay(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var day = date.getDay();
      if (day === 0) {
        day = 7;
      }
      return day;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getISOWeek/index.js
var require_getISOWeek = __commonJS({
  "node_modules/date-fns/getISOWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getISOWeek;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_startOfISOWeek());
    var _index3 = _interopRequireDefault(require_startOfISOWeekYear());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    var MILLISECONDS_IN_WEEK = 6048e5;
    function getISOWeek(dirtyDate) {
      (0, _index4.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var diff = (0, _index2.default)(date).getTime() - (0, _index3.default)(date).getTime();
      return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getISOWeeksInYear/index.js
var require_getISOWeeksInYear = __commonJS({
  "node_modules/date-fns/getISOWeeksInYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getISOWeeksInYear;
    var _index = _interopRequireDefault(require_startOfISOWeekYear());
    var _index2 = _interopRequireDefault(require_addWeeks());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    var MILLISECONDS_IN_WEEK = 6048e5;
    function getISOWeeksInYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var thisYear = (0, _index.default)(dirtyDate);
      var nextYear = (0, _index.default)((0, _index2.default)(thisYear, 60));
      var diff = nextYear.valueOf() - thisYear.valueOf();
      return Math.round(diff / MILLISECONDS_IN_WEEK);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getMilliseconds/index.js
var require_getMilliseconds = __commonJS({
  "node_modules/date-fns/getMilliseconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getMilliseconds;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function getMilliseconds(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var milliseconds = date.getMilliseconds();
      return milliseconds;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getMinutes/index.js
var require_getMinutes = __commonJS({
  "node_modules/date-fns/getMinutes/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getMinutes;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function getMinutes(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var minutes = date.getMinutes();
      return minutes;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getMonth/index.js
var require_getMonth = __commonJS({
  "node_modules/date-fns/getMonth/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getMonth2;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function getMonth2(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var month = date.getMonth();
      return month;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getOverlappingDaysInIntervals/index.js
var require_getOverlappingDaysInIntervals = __commonJS({
  "node_modules/date-fns/getOverlappingDaysInIntervals/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getOverlappingDaysInIntervals;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1e3;
    function getOverlappingDaysInIntervals(dirtyIntervalLeft, dirtyIntervalRight) {
      (0, _index2.default)(2, arguments);
      var intervalLeft = dirtyIntervalLeft || {};
      var intervalRight = dirtyIntervalRight || {};
      var leftStartTime = (0, _index.default)(intervalLeft.start).getTime();
      var leftEndTime = (0, _index.default)(intervalLeft.end).getTime();
      var rightStartTime = (0, _index.default)(intervalRight.start).getTime();
      var rightEndTime = (0, _index.default)(intervalRight.end).getTime();
      if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {
        throw new RangeError("Invalid interval");
      }
      var isOverlapping = leftStartTime < rightEndTime && rightStartTime < leftEndTime;
      if (!isOverlapping) {
        return 0;
      }
      var overlapStartDate = rightStartTime < leftStartTime ? leftStartTime : rightStartTime;
      var overlapEndDate = rightEndTime > leftEndTime ? leftEndTime : rightEndTime;
      var differenceInMs = overlapEndDate - overlapStartDate;
      return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getSeconds/index.js
var require_getSeconds = __commonJS({
  "node_modules/date-fns/getSeconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getSeconds;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function getSeconds(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var seconds = date.getSeconds();
      return seconds;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getTime/index.js
var require_getTime = __commonJS({
  "node_modules/date-fns/getTime/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getTime;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function getTime(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var timestamp = date.getTime();
      return timestamp;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getUnixTime/index.js
var require_getUnixTime = __commonJS({
  "node_modules/date-fns/getUnixTime/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getUnixTime;
    var _index = _interopRequireDefault(require_getTime());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function getUnixTime(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return Math.floor((0, _index.default)(dirtyDate) / 1e3);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getWeekYear/index.js
var require_getWeekYear = __commonJS({
  "node_modules/date-fns/getWeekYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getWeekYear;
    var _index = _interopRequireDefault(require_startOfWeek());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_toInteger());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    var _index5 = require_defaultOptions();
    function getWeekYear(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      (0, _index4.default)(1, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var year = date.getFullYear();
      var defaultOptions = (0, _index5.getDefaultOptions)();
      var firstWeekContainsDate = (0, _index3.default)((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
      }
      var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
      firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
      firstWeekOfNextYear.setHours(0, 0, 0, 0);
      var startOfNextYear = (0, _index.default)(firstWeekOfNextYear, options);
      var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
      firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
      firstWeekOfThisYear.setHours(0, 0, 0, 0);
      var startOfThisYear = (0, _index.default)(firstWeekOfThisYear, options);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfWeekYear/index.js
var require_startOfWeekYear = __commonJS({
  "node_modules/date-fns/startOfWeekYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfWeekYear;
    var _index = _interopRequireDefault(require_getWeekYear());
    var _index2 = _interopRequireDefault(require_startOfWeek());
    var _index3 = _interopRequireDefault(require_toInteger());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    var _index5 = require_defaultOptions();
    function startOfWeekYear(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      (0, _index4.default)(1, arguments);
      var defaultOptions = (0, _index5.getDefaultOptions)();
      var firstWeekContainsDate = (0, _index3.default)((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
      var year = (0, _index.default)(dirtyDate, options);
      var firstWeek = /* @__PURE__ */ new Date(0);
      firstWeek.setFullYear(year, 0, firstWeekContainsDate);
      firstWeek.setHours(0, 0, 0, 0);
      var date = (0, _index2.default)(firstWeek, options);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getWeek/index.js
var require_getWeek = __commonJS({
  "node_modules/date-fns/getWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getWeek;
    var _index = _interopRequireDefault(require_startOfWeek());
    var _index2 = _interopRequireDefault(require_startOfWeekYear());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    var MILLISECONDS_IN_WEEK = 6048e5;
    function getWeek(dirtyDate, options) {
      (0, _index4.default)(1, arguments);
      var date = (0, _index3.default)(dirtyDate);
      var diff = (0, _index.default)(date, options).getTime() - (0, _index2.default)(date, options).getTime();
      return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getWeekOfMonth/index.js
var require_getWeekOfMonth = __commonJS({
  "node_modules/date-fns/getWeekOfMonth/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getWeekOfMonth;
    var _index = require_defaultOptions();
    var _index2 = _interopRequireDefault(require_getDate());
    var _index3 = _interopRequireDefault(require_getDay());
    var _index4 = _interopRequireDefault(require_startOfMonth());
    var _index5 = _interopRequireDefault(require_requiredArgs());
    var _index6 = _interopRequireDefault(require_toInteger());
    function getWeekOfMonth(date, options) {
      var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      (0, _index5.default)(1, arguments);
      var defaultOptions = (0, _index.getDefaultOptions)();
      var weekStartsOn = (0, _index6.default)((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      var currentDayOfMonth = (0, _index2.default)(date);
      if (isNaN(currentDayOfMonth)) return NaN;
      var startWeekDay = (0, _index3.default)((0, _index4.default)(date));
      var lastDayOfFirstWeek = weekStartsOn - startWeekDay;
      if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;
      var remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;
      return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lastDayOfMonth/index.js
var require_lastDayOfMonth = __commonJS({
  "node_modules/date-fns/lastDayOfMonth/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lastDayOfMonth3;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function lastDayOfMonth3(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var month = date.getMonth();
      date.setFullYear(date.getFullYear(), month + 1, 0);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getWeeksInMonth/index.js
var require_getWeeksInMonth = __commonJS({
  "node_modules/date-fns/getWeeksInMonth/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getWeeksInMonth2;
    var _index = _interopRequireDefault(require_differenceInCalendarWeeks());
    var _index2 = _interopRequireDefault(require_lastDayOfMonth());
    var _index3 = _interopRequireDefault(require_startOfMonth());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function getWeeksInMonth2(date, options) {
      (0, _index4.default)(1, arguments);
      return (0, _index.default)((0, _index2.default)(date), (0, _index3.default)(date), options) + 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/getYear/index.js
var require_getYear = __commonJS({
  "node_modules/date-fns/getYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = getYear2;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function getYear2(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getFullYear();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/hoursToMilliseconds/index.js
var require_hoursToMilliseconds = __commonJS({
  "node_modules/date-fns/hoursToMilliseconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = hoursToMilliseconds;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function hoursToMilliseconds(hours) {
      (0, _index.default)(1, arguments);
      return Math.floor(hours * _index2.millisecondsInHour);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/hoursToMinutes/index.js
var require_hoursToMinutes = __commonJS({
  "node_modules/date-fns/hoursToMinutes/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = hoursToMinutes;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function hoursToMinutes(hours) {
      (0, _index.default)(1, arguments);
      return Math.floor(hours * _index2.minutesInHour);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/hoursToSeconds/index.js
var require_hoursToSeconds = __commonJS({
  "node_modules/date-fns/hoursToSeconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = hoursToSeconds;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function hoursToSeconds(hours) {
      (0, _index.default)(1, arguments);
      return Math.floor(hours * _index2.secondsInHour);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/intervalToDuration/index.js
var require_intervalToDuration = __commonJS({
  "node_modules/date-fns/intervalToDuration/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = intervalToDuration;
    var _index = _interopRequireDefault(require_compareAsc());
    var _index2 = _interopRequireDefault(require_add());
    var _index3 = _interopRequireDefault(require_differenceInDays());
    var _index4 = _interopRequireDefault(require_differenceInHours());
    var _index5 = _interopRequireDefault(require_differenceInMinutes());
    var _index6 = _interopRequireDefault(require_differenceInMonths());
    var _index7 = _interopRequireDefault(require_differenceInSeconds());
    var _index8 = _interopRequireDefault(require_differenceInYears());
    var _index9 = _interopRequireDefault(require_toDate());
    var _index10 = _interopRequireDefault(require_requiredArgs());
    function intervalToDuration(interval) {
      (0, _index10.default)(1, arguments);
      var start = (0, _index9.default)(interval.start);
      var end = (0, _index9.default)(interval.end);
      if (isNaN(start.getTime())) throw new RangeError("Start Date is invalid");
      if (isNaN(end.getTime())) throw new RangeError("End Date is invalid");
      var duration = {};
      duration.years = Math.abs((0, _index8.default)(end, start));
      var sign = (0, _index.default)(end, start);
      var remainingMonths = (0, _index2.default)(start, {
        years: sign * duration.years
      });
      duration.months = Math.abs((0, _index6.default)(end, remainingMonths));
      var remainingDays = (0, _index2.default)(remainingMonths, {
        months: sign * duration.months
      });
      duration.days = Math.abs((0, _index3.default)(end, remainingDays));
      var remainingHours = (0, _index2.default)(remainingDays, {
        days: sign * duration.days
      });
      duration.hours = Math.abs((0, _index4.default)(end, remainingHours));
      var remainingMinutes = (0, _index2.default)(remainingHours, {
        hours: sign * duration.hours
      });
      duration.minutes = Math.abs((0, _index5.default)(end, remainingMinutes));
      var remainingSeconds = (0, _index2.default)(remainingMinutes, {
        minutes: sign * duration.minutes
      });
      duration.seconds = Math.abs((0, _index7.default)(end, remainingSeconds));
      return duration;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/intlFormat/index.js
var require_intlFormat = __commonJS({
  "node_modules/date-fns/intlFormat/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = intlFormat;
    var _index = _interopRequireDefault(require_requiredArgs());
    function intlFormat(date, formatOrLocale, localeOptions) {
      var _localeOptions;
      (0, _index.default)(1, arguments);
      var formatOptions;
      if (isFormatOptions(formatOrLocale)) {
        formatOptions = formatOrLocale;
      } else {
        localeOptions = formatOrLocale;
      }
      return new Intl.DateTimeFormat((_localeOptions = localeOptions) === null || _localeOptions === void 0 ? void 0 : _localeOptions.locale, formatOptions).format(date);
    }
    function isFormatOptions(opts) {
      return opts !== void 0 && !("locale" in opts);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/intlFormatDistance/index.js
var require_intlFormatDistance = __commonJS({
  "node_modules/date-fns/intlFormatDistance/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = intlFormatDistance;
    var _index = require_constants();
    var _index2 = _interopRequireDefault(require_differenceInCalendarDays());
    var _index3 = _interopRequireDefault(require_differenceInCalendarMonths());
    var _index4 = _interopRequireDefault(require_differenceInCalendarQuarters());
    var _index5 = _interopRequireDefault(require_differenceInCalendarWeeks());
    var _index6 = _interopRequireDefault(require_differenceInCalendarYears());
    var _index7 = _interopRequireDefault(require_differenceInHours());
    var _index8 = _interopRequireDefault(require_differenceInMinutes());
    var _index9 = _interopRequireDefault(require_differenceInSeconds());
    var _index10 = _interopRequireDefault(require_toDate());
    var _index11 = _interopRequireDefault(require_requiredArgs());
    function intlFormatDistance(date, baseDate, options) {
      (0, _index11.default)(2, arguments);
      var value = 0;
      var unit;
      var dateLeft = (0, _index10.default)(date);
      var dateRight = (0, _index10.default)(baseDate);
      if (!(options !== null && options !== void 0 && options.unit)) {
        var diffInSeconds = (0, _index9.default)(dateLeft, dateRight);
        if (Math.abs(diffInSeconds) < _index.secondsInMinute) {
          value = (0, _index9.default)(dateLeft, dateRight);
          unit = "second";
        } else if (Math.abs(diffInSeconds) < _index.secondsInHour) {
          value = (0, _index8.default)(dateLeft, dateRight);
          unit = "minute";
        } else if (Math.abs(diffInSeconds) < _index.secondsInDay && Math.abs((0, _index2.default)(dateLeft, dateRight)) < 1) {
          value = (0, _index7.default)(dateLeft, dateRight);
          unit = "hour";
        } else if (Math.abs(diffInSeconds) < _index.secondsInWeek && (value = (0, _index2.default)(dateLeft, dateRight)) && Math.abs(value) < 7) {
          unit = "day";
        } else if (Math.abs(diffInSeconds) < _index.secondsInMonth) {
          value = (0, _index5.default)(dateLeft, dateRight);
          unit = "week";
        } else if (Math.abs(diffInSeconds) < _index.secondsInQuarter) {
          value = (0, _index3.default)(dateLeft, dateRight);
          unit = "month";
        } else if (Math.abs(diffInSeconds) < _index.secondsInYear) {
          if ((0, _index4.default)(dateLeft, dateRight) < 4) {
            value = (0, _index4.default)(dateLeft, dateRight);
            unit = "quarter";
          } else {
            value = (0, _index6.default)(dateLeft, dateRight);
            unit = "year";
          }
        } else {
          value = (0, _index6.default)(dateLeft, dateRight);
          unit = "year";
        }
      } else {
        unit = options === null || options === void 0 ? void 0 : options.unit;
        if (unit === "second") {
          value = (0, _index9.default)(dateLeft, dateRight);
        } else if (unit === "minute") {
          value = (0, _index8.default)(dateLeft, dateRight);
        } else if (unit === "hour") {
          value = (0, _index7.default)(dateLeft, dateRight);
        } else if (unit === "day") {
          value = (0, _index2.default)(dateLeft, dateRight);
        } else if (unit === "week") {
          value = (0, _index5.default)(dateLeft, dateRight);
        } else if (unit === "month") {
          value = (0, _index3.default)(dateLeft, dateRight);
        } else if (unit === "quarter") {
          value = (0, _index4.default)(dateLeft, dateRight);
        } else if (unit === "year") {
          value = (0, _index6.default)(dateLeft, dateRight);
        }
      }
      var rtf = new Intl.RelativeTimeFormat(options === null || options === void 0 ? void 0 : options.locale, {
        localeMatcher: options === null || options === void 0 ? void 0 : options.localeMatcher,
        numeric: (options === null || options === void 0 ? void 0 : options.numeric) || "auto",
        style: options === null || options === void 0 ? void 0 : options.style
      });
      return rtf.format(value, unit);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isAfter/index.js
var require_isAfter = __commonJS({
  "node_modules/date-fns/isAfter/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isAfter2;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isAfter2(dirtyDate, dirtyDateToCompare) {
      (0, _index2.default)(2, arguments);
      var date = (0, _index.default)(dirtyDate);
      var dateToCompare = (0, _index.default)(dirtyDateToCompare);
      return date.getTime() > dateToCompare.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isBefore/index.js
var require_isBefore = __commonJS({
  "node_modules/date-fns/isBefore/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isBefore;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isBefore(dirtyDate, dirtyDateToCompare) {
      (0, _index2.default)(2, arguments);
      var date = (0, _index.default)(dirtyDate);
      var dateToCompare = (0, _index.default)(dirtyDateToCompare);
      return date.getTime() < dateToCompare.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isEqual/index.js
var require_isEqual = __commonJS({
  "node_modules/date-fns/isEqual/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isEqual2;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isEqual2(dirtyLeftDate, dirtyRightDate) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyLeftDate);
      var dateRight = (0, _index.default)(dirtyRightDate);
      return dateLeft.getTime() === dateRight.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isExists/index.js
var require_isExists = __commonJS({
  "node_modules/date-fns/isExists/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isExists;
    function isExists(year, month, day) {
      if (arguments.length < 3) {
        throw new TypeError("3 argument required, but only " + arguments.length + " present");
      }
      var date = new Date(year, month, day);
      return date.getFullYear() === year && date.getMonth() === month && date.getDate() === day;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isFirstDayOfMonth/index.js
var require_isFirstDayOfMonth = __commonJS({
  "node_modules/date-fns/isFirstDayOfMonth/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isFirstDayOfMonth;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isFirstDayOfMonth(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getDate() === 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isFriday/index.js
var require_isFriday = __commonJS({
  "node_modules/date-fns/isFriday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isFriday;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isFriday(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getDay() === 5;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isFuture/index.js
var require_isFuture = __commonJS({
  "node_modules/date-fns/isFuture/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isFuture;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isFuture(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getTime() > Date.now();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/@babel/runtime/helpers/arrayLikeToArray.js
var require_arrayLikeToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/arrayLikeToArray.js"(exports2, module2) {
    function _arrayLikeToArray(r, a) {
      (null == a || a > r.length) && (a = r.length);
      for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
      return n;
    }
    module2.exports = _arrayLikeToArray, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js
var require_unsupportedIterableToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"(exports2, module2) {
    var arrayLikeToArray = require_arrayLikeToArray();
    function _unsupportedIterableToArray(r, a) {
      if (r) {
        if ("string" == typeof r) return arrayLikeToArray(r, a);
        var t = {}.toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;
      }
    }
    module2.exports = _unsupportedIterableToArray, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js
var require_createForOfIteratorHelper = __commonJS({
  "node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"(exports2, module2) {
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    function _createForOfIteratorHelper(r, e) {
      var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
      if (!t) {
        if (Array.isArray(r) || (t = unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
          t && (r = t);
          var _n2 = 0, F2 = function F3() {
          };
          return {
            s: F2,
            n: function n() {
              return _n2 >= r.length ? {
                done: true
              } : {
                done: false,
                value: r[_n2++]
              };
            },
            e: function e2(r2) {
              throw r2;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var o, a = true, u = false;
      return {
        s: function s() {
          t = t.call(r);
        },
        n: function n() {
          var r2 = t.next();
          return a = r2.done, r2;
        },
        e: function e2(r2) {
          u = true, o = r2;
        },
        f: function f() {
          try {
            a || null == t["return"] || t["return"]();
          } finally {
            if (u) throw o;
          }
        }
      };
    }
    module2.exports = _createForOfIteratorHelper, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/assertThisInitialized.js
var require_assertThisInitialized = __commonJS({
  "node_modules/@babel/runtime/helpers/assertThisInitialized.js"(exports2, module2) {
    function _assertThisInitialized(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e;
    }
    module2.exports = _assertThisInitialized, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/setPrototypeOf.js
var require_setPrototypeOf = __commonJS({
  "node_modules/@babel/runtime/helpers/setPrototypeOf.js"(exports2, module2) {
    function _setPrototypeOf(t, e) {
      return module2.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
        return t2.__proto__ = e2, t2;
      }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _setPrototypeOf(t, e);
    }
    module2.exports = _setPrototypeOf, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/inherits.js
var require_inherits = __commonJS({
  "node_modules/@babel/runtime/helpers/inherits.js"(exports2, module2) {
    var setPrototypeOf = require_setPrototypeOf();
    function _inherits(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
      t.prototype = Object.create(e && e.prototype, {
        constructor: {
          value: t,
          writable: true,
          configurable: true
        }
      }), Object.defineProperty(t, "prototype", {
        writable: false
      }), e && setPrototypeOf(t, e);
    }
    module2.exports = _inherits, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/getPrototypeOf.js
var require_getPrototypeOf = __commonJS({
  "node_modules/@babel/runtime/helpers/getPrototypeOf.js"(exports2, module2) {
    function _getPrototypeOf(t) {
      return module2.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
        return t2.__proto__ || Object.getPrototypeOf(t2);
      }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _getPrototypeOf(t);
    }
    module2.exports = _getPrototypeOf, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js
var require_isNativeReflectConstruct = __commonJS({
  "node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js"(exports2, module2) {
    function _isNativeReflectConstruct() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (module2.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t;
      }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports)();
    }
    module2.exports = _isNativeReflectConstruct, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var require_possibleConstructorReturn = __commonJS({
  "node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"(exports2, module2) {
    var _typeof = require_typeof()["default"];
    var assertThisInitialized = require_assertThisInitialized();
    function _possibleConstructorReturn(t, e) {
      if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
      return assertThisInitialized(t);
    }
    module2.exports = _possibleConstructorReturn, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/createSuper.js
var require_createSuper = __commonJS({
  "node_modules/@babel/runtime/helpers/createSuper.js"(exports2, module2) {
    var getPrototypeOf = require_getPrototypeOf();
    var isNativeReflectConstruct = require_isNativeReflectConstruct();
    var possibleConstructorReturn = require_possibleConstructorReturn();
    function _createSuper(t) {
      var r = isNativeReflectConstruct();
      return function() {
        var e, o = getPrototypeOf(t);
        if (r) {
          var s = getPrototypeOf(this).constructor;
          e = Reflect.construct(o, arguments, s);
        } else e = o.apply(this, arguments);
        return possibleConstructorReturn(this, e);
      };
    }
    module2.exports = _createSuper, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/classCallCheck.js
var require_classCallCheck = __commonJS({
  "node_modules/@babel/runtime/helpers/classCallCheck.js"(exports2, module2) {
    function _classCallCheck(a, n) {
      if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
    }
    module2.exports = _classCallCheck, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPrimitive.js
var require_toPrimitive = __commonJS({
  "node_modules/@babel/runtime/helpers/toPrimitive.js"(exports2, module2) {
    var _typeof = require_typeof()["default"];
    function toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    module2.exports = toPrimitive, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPropertyKey.js
var require_toPropertyKey = __commonJS({
  "node_modules/@babel/runtime/helpers/toPropertyKey.js"(exports2, module2) {
    var _typeof = require_typeof()["default"];
    var toPrimitive = require_toPrimitive();
    function toPropertyKey(t) {
      var i = toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    module2.exports = toPropertyKey, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/createClass.js
var require_createClass = __commonJS({
  "node_modules/@babel/runtime/helpers/createClass.js"(exports2, module2) {
    var toPropertyKey = require_toPropertyKey();
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
        writable: false
      }), e;
    }
    module2.exports = _createClass, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/@babel/runtime/helpers/defineProperty.js"(exports2, module2) {
    var toPropertyKey = require_toPropertyKey();
    function _defineProperty(e, r, t) {
      return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
        value: t,
        enumerable: true,
        configurable: true,
        writable: true
      }) : e[r] = t, e;
    }
    module2.exports = _defineProperty, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/date-fns/parse/_lib/Setter.js
var require_Setter = __commonJS({
  "node_modules/date-fns/parse/_lib/Setter.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ValueSetter = exports2.Setter = exports2.DateToSystemTimezoneSetter = void 0;
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var TIMEZONE_UNIT_PRIORITY = 10;
    var Setter = /* @__PURE__ */ function() {
      function Setter2() {
        (0, _classCallCheck2.default)(this, Setter2);
        (0, _defineProperty2.default)(this, "priority", void 0);
        (0, _defineProperty2.default)(this, "subPriority", 0);
      }
      (0, _createClass2.default)(Setter2, [{
        key: "validate",
        value: function validate4(_utcDate, _options) {
          return true;
        }
      }]);
      return Setter2;
    }();
    exports2.Setter = Setter;
    var ValueSetter = /* @__PURE__ */ function(_Setter) {
      (0, _inherits2.default)(ValueSetter2, _Setter);
      var _super = (0, _createSuper2.default)(ValueSetter2);
      function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
        var _this;
        (0, _classCallCheck2.default)(this, ValueSetter2);
        _this = _super.call(this);
        _this.value = value;
        _this.validateValue = validateValue;
        _this.setValue = setValue;
        _this.priority = priority;
        if (subPriority) {
          _this.subPriority = subPriority;
        }
        return _this;
      }
      (0, _createClass2.default)(ValueSetter2, [{
        key: "validate",
        value: function validate4(utcDate, options) {
          return this.validateValue(utcDate, this.value, options);
        }
      }, {
        key: "set",
        value: function set(utcDate, flags, options) {
          return this.setValue(utcDate, flags, this.value, options);
        }
      }]);
      return ValueSetter2;
    }(Setter);
    exports2.ValueSetter = ValueSetter;
    var DateToSystemTimezoneSetter = /* @__PURE__ */ function(_Setter2) {
      (0, _inherits2.default)(DateToSystemTimezoneSetter2, _Setter2);
      var _super2 = (0, _createSuper2.default)(DateToSystemTimezoneSetter2);
      function DateToSystemTimezoneSetter2() {
        var _this2;
        (0, _classCallCheck2.default)(this, DateToSystemTimezoneSetter2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this2 = _super2.call.apply(_super2, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "subPriority", -1);
        return _this2;
      }
      (0, _createClass2.default)(DateToSystemTimezoneSetter2, [{
        key: "set",
        value: function set(date, flags) {
          if (flags.timestampIsSet) {
            return date;
          }
          var convertedDate = /* @__PURE__ */ new Date(0);
          convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
          convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
          return convertedDate;
        }
      }]);
      return DateToSystemTimezoneSetter2;
    }(Setter);
    exports2.DateToSystemTimezoneSetter = DateToSystemTimezoneSetter;
  }
});

// node_modules/date-fns/parse/_lib/Parser.js
var require_Parser = __commonJS({
  "node_modules/date-fns/parse/_lib/Parser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Parser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Setter = require_Setter();
    var Parser = /* @__PURE__ */ function() {
      function Parser2() {
        (0, _classCallCheck2.default)(this, Parser2);
        (0, _defineProperty2.default)(this, "incompatibleTokens", void 0);
        (0, _defineProperty2.default)(this, "priority", void 0);
        (0, _defineProperty2.default)(this, "subPriority", void 0);
      }
      (0, _createClass2.default)(Parser2, [{
        key: "run",
        value: function run(dateString, token, match, options) {
          var result = this.parse(dateString, token, match, options);
          if (!result) {
            return null;
          }
          return {
            setter: new _Setter.ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
            rest: result.rest
          };
        }
      }, {
        key: "validate",
        value: function validate4(_utcDate, _value, _options) {
          return true;
        }
      }]);
      return Parser2;
    }();
    exports2.Parser = Parser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/EraParser.js
var require_EraParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/EraParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.EraParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var EraParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(EraParser2, _Parser);
      var _super = (0, _createSuper2.default)(EraParser2);
      function EraParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, EraParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 140);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(EraParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            // AD, BC
            case "G":
            case "GG":
            case "GGG":
              return match.era(dateString, {
                width: "abbreviated"
              }) || match.era(dateString, {
                width: "narrow"
              });
            // A, B
            case "GGGGG":
              return match.era(dateString, {
                width: "narrow"
              });
            // Anno Domini, Before Christ
            case "GGGG":
            default:
              return match.era(dateString, {
                width: "wide"
              }) || match.era(dateString, {
                width: "abbreviated"
              }) || match.era(dateString, {
                width: "narrow"
              });
          }
        }
      }, {
        key: "set",
        value: function set(date, flags, value) {
          flags.era = value;
          date.setUTCFullYear(value, 0, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return EraParser2;
    }(_Parser2.Parser);
    exports2.EraParser = EraParser;
  }
});

// node_modules/date-fns/parse/_lib/constants.js
var require_constants2 = __commonJS({
  "node_modules/date-fns/parse/_lib/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.timezonePatterns = exports2.numericPatterns = void 0;
    var numericPatterns = {
      month: /^(1[0-2]|0?\d)/,
      // 0 to 12
      date: /^(3[0-1]|[0-2]?\d)/,
      // 0 to 31
      dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
      // 0 to 366
      week: /^(5[0-3]|[0-4]?\d)/,
      // 0 to 53
      hour23h: /^(2[0-3]|[0-1]?\d)/,
      // 0 to 23
      hour24h: /^(2[0-4]|[0-1]?\d)/,
      // 0 to 24
      hour11h: /^(1[0-1]|0?\d)/,
      // 0 to 11
      hour12h: /^(1[0-2]|0?\d)/,
      // 0 to 12
      minute: /^[0-5]?\d/,
      // 0 to 59
      second: /^[0-5]?\d/,
      // 0 to 59
      singleDigit: /^\d/,
      // 0 to 9
      twoDigits: /^\d{1,2}/,
      // 0 to 99
      threeDigits: /^\d{1,3}/,
      // 0 to 999
      fourDigits: /^\d{1,4}/,
      // 0 to 9999
      anyDigitsSigned: /^-?\d+/,
      singleDigitSigned: /^-?\d/,
      // 0 to 9, -0 to -9
      twoDigitsSigned: /^-?\d{1,2}/,
      // 0 to 99, -0 to -99
      threeDigitsSigned: /^-?\d{1,3}/,
      // 0 to 999, -0 to -999
      fourDigitsSigned: /^-?\d{1,4}/
      // 0 to 9999, -0 to -9999
    };
    exports2.numericPatterns = numericPatterns;
    var timezonePatterns = {
      basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
      basic: /^([+-])(\d{2})(\d{2})|Z/,
      basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
      extended: /^([+-])(\d{2}):(\d{2})|Z/,
      extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
    };
    exports2.timezonePatterns = timezonePatterns;
  }
});

// node_modules/date-fns/parse/_lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/date-fns/parse/_lib/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.dayPeriodEnumToHours = dayPeriodEnumToHours;
    exports2.isLeapYearIndex = isLeapYearIndex;
    exports2.mapValue = mapValue;
    exports2.normalizeTwoDigitYear = normalizeTwoDigitYear;
    exports2.parseAnyDigitsSigned = parseAnyDigitsSigned;
    exports2.parseNDigits = parseNDigits;
    exports2.parseNDigitsSigned = parseNDigitsSigned;
    exports2.parseNumericPattern = parseNumericPattern;
    exports2.parseTimezonePattern = parseTimezonePattern;
    var _index = require_constants();
    var _constants = require_constants2();
    function mapValue(parseFnResult, mapFn) {
      if (!parseFnResult) {
        return parseFnResult;
      }
      return {
        value: mapFn(parseFnResult.value),
        rest: parseFnResult.rest
      };
    }
    function parseNumericPattern(pattern, dateString) {
      var matchResult = dateString.match(pattern);
      if (!matchResult) {
        return null;
      }
      return {
        value: parseInt(matchResult[0], 10),
        rest: dateString.slice(matchResult[0].length)
      };
    }
    function parseTimezonePattern(pattern, dateString) {
      var matchResult = dateString.match(pattern);
      if (!matchResult) {
        return null;
      }
      if (matchResult[0] === "Z") {
        return {
          value: 0,
          rest: dateString.slice(1)
        };
      }
      var sign = matchResult[1] === "+" ? 1 : -1;
      var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
      var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
      var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
      return {
        value: sign * (hours * _index.millisecondsInHour + minutes * _index.millisecondsInMinute + seconds * _index.millisecondsInSecond),
        rest: dateString.slice(matchResult[0].length)
      };
    }
    function parseAnyDigitsSigned(dateString) {
      return parseNumericPattern(_constants.numericPatterns.anyDigitsSigned, dateString);
    }
    function parseNDigits(n, dateString) {
      switch (n) {
        case 1:
          return parseNumericPattern(_constants.numericPatterns.singleDigit, dateString);
        case 2:
          return parseNumericPattern(_constants.numericPatterns.twoDigits, dateString);
        case 3:
          return parseNumericPattern(_constants.numericPatterns.threeDigits, dateString);
        case 4:
          return parseNumericPattern(_constants.numericPatterns.fourDigits, dateString);
        default:
          return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
      }
    }
    function parseNDigitsSigned(n, dateString) {
      switch (n) {
        case 1:
          return parseNumericPattern(_constants.numericPatterns.singleDigitSigned, dateString);
        case 2:
          return parseNumericPattern(_constants.numericPatterns.twoDigitsSigned, dateString);
        case 3:
          return parseNumericPattern(_constants.numericPatterns.threeDigitsSigned, dateString);
        case 4:
          return parseNumericPattern(_constants.numericPatterns.fourDigitsSigned, dateString);
        default:
          return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
      }
    }
    function dayPeriodEnumToHours(dayPeriod) {
      switch (dayPeriod) {
        case "morning":
          return 4;
        case "evening":
          return 17;
        case "pm":
        case "noon":
        case "afternoon":
          return 12;
        case "am":
        case "midnight":
        case "night":
        default:
          return 0;
      }
    }
    function normalizeTwoDigitYear(twoDigitYear, currentYear) {
      var isCommonEra = currentYear > 0;
      var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
      var result;
      if (absCurrentYear <= 50) {
        result = twoDigitYear || 100;
      } else {
        var rangeEnd = absCurrentYear + 50;
        var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
        var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
        result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
      }
      return isCommonEra ? result : 1 - result;
    }
    function isLeapYearIndex(year) {
      return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    }
  }
});

// node_modules/date-fns/parse/_lib/parsers/YearParser.js
var require_YearParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/YearParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.YearParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var YearParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(YearParser2, _Parser);
      var _super = (0, _createSuper2.default)(YearParser2);
      function YearParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, YearParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 130);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(YearParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          var valueCallback = function valueCallback2(year) {
            return {
              year,
              isTwoDigitYear: token === "yy"
            };
          };
          switch (token) {
            case "y":
              return (0, _utils.mapValue)((0, _utils.parseNDigits)(4, dateString), valueCallback);
            case "yo":
              return (0, _utils.mapValue)(match.ordinalNumber(dateString, {
                unit: "year"
              }), valueCallback);
            default:
              return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value.isTwoDigitYear || value.year > 0;
        }
      }, {
        key: "set",
        value: function set(date, flags, value) {
          var currentYear = date.getUTCFullYear();
          if (value.isTwoDigitYear) {
            var normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(value.year, currentYear);
            date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
            date.setUTCHours(0, 0, 0, 0);
            return date;
          }
          var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
          date.setUTCFullYear(year, 0, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return YearParser2;
    }(_Parser2.Parser);
    exports2.YearParser = YearParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js
var require_LocalWeekYearParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.LocalWeekYearParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var _index = _interopRequireDefault(require_getUTCWeekYear());
    var _index2 = _interopRequireDefault(require_startOfUTCWeek());
    var LocalWeekYearParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(LocalWeekYearParser2, _Parser);
      var _super = (0, _createSuper2.default)(LocalWeekYearParser2);
      function LocalWeekYearParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, LocalWeekYearParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 130);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(LocalWeekYearParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          var valueCallback = function valueCallback2(year) {
            return {
              year,
              isTwoDigitYear: token === "YY"
            };
          };
          switch (token) {
            case "Y":
              return (0, _utils.mapValue)((0, _utils.parseNDigits)(4, dateString), valueCallback);
            case "Yo":
              return (0, _utils.mapValue)(match.ordinalNumber(dateString, {
                unit: "year"
              }), valueCallback);
            default:
              return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value.isTwoDigitYear || value.year > 0;
        }
      }, {
        key: "set",
        value: function set(date, flags, value, options) {
          var currentYear = (0, _index.default)(date, options);
          if (value.isTwoDigitYear) {
            var normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(value.year, currentYear);
            date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
            date.setUTCHours(0, 0, 0, 0);
            return (0, _index2.default)(date, options);
          }
          var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
          date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
          date.setUTCHours(0, 0, 0, 0);
          return (0, _index2.default)(date, options);
        }
      }]);
      return LocalWeekYearParser2;
    }(_Parser2.Parser);
    exports2.LocalWeekYearParser = LocalWeekYearParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.js
var require_ISOWeekYearParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ISOWeekYearParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var _index = _interopRequireDefault(require_startOfUTCISOWeek());
    var ISOWeekYearParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(ISOWeekYearParser2, _Parser);
      var _super = (0, _createSuper2.default)(ISOWeekYearParser2);
      function ISOWeekYearParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, ISOWeekYearParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 130);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(ISOWeekYearParser2, [{
        key: "parse",
        value: function parse4(dateString, token) {
          if (token === "R") {
            return (0, _utils.parseNDigitsSigned)(4, dateString);
          }
          return (0, _utils.parseNDigitsSigned)(token.length, dateString);
        }
      }, {
        key: "set",
        value: function set(_date, _flags, value) {
          var firstWeekOfYear = /* @__PURE__ */ new Date(0);
          firstWeekOfYear.setUTCFullYear(value, 0, 4);
          firstWeekOfYear.setUTCHours(0, 0, 0, 0);
          return (0, _index.default)(firstWeekOfYear);
        }
      }]);
      return ISOWeekYearParser2;
    }(_Parser2.Parser);
    exports2.ISOWeekYearParser = ISOWeekYearParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.js
var require_ExtendedYearParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ExtendedYearParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var ExtendedYearParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(ExtendedYearParser2, _Parser);
      var _super = (0, _createSuper2.default)(ExtendedYearParser2);
      function ExtendedYearParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, ExtendedYearParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 130);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(ExtendedYearParser2, [{
        key: "parse",
        value: function parse4(dateString, token) {
          if (token === "u") {
            return (0, _utils.parseNDigitsSigned)(4, dateString);
          }
          return (0, _utils.parseNDigitsSigned)(token.length, dateString);
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCFullYear(value, 0, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return ExtendedYearParser2;
    }(_Parser2.Parser);
    exports2.ExtendedYearParser = ExtendedYearParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/QuarterParser.js
var require_QuarterParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/QuarterParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.QuarterParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var QuarterParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(QuarterParser2, _Parser);
      var _super = (0, _createSuper2.default)(QuarterParser2);
      function QuarterParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, QuarterParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 120);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(QuarterParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            // 1, 2, 3, 4
            case "Q":
            case "QQ":
              return (0, _utils.parseNDigits)(token.length, dateString);
            // 1st, 2nd, 3rd, 4th
            case "Qo":
              return match.ordinalNumber(dateString, {
                unit: "quarter"
              });
            // Q1, Q2, Q3, Q4
            case "QQQ":
              return match.quarter(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.quarter(dateString, {
                width: "narrow",
                context: "formatting"
              });
            // 1, 2, 3, 4 (narrow quarter; could be not numerical)
            case "QQQQQ":
              return match.quarter(dateString, {
                width: "narrow",
                context: "formatting"
              });
            // 1st quarter, 2nd quarter, ...
            case "QQQQ":
            default:
              return match.quarter(dateString, {
                width: "wide",
                context: "formatting"
              }) || match.quarter(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.quarter(dateString, {
                width: "narrow",
                context: "formatting"
              });
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 1 && value <= 4;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCMonth((value - 1) * 3, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return QuarterParser2;
    }(_Parser2.Parser);
    exports2.QuarterParser = QuarterParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js
var require_StandAloneQuarterParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.StandAloneQuarterParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var StandAloneQuarterParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(StandAloneQuarterParser2, _Parser);
      var _super = (0, _createSuper2.default)(StandAloneQuarterParser2);
      function StandAloneQuarterParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, StandAloneQuarterParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 120);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(StandAloneQuarterParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            // 1, 2, 3, 4
            case "q":
            case "qq":
              return (0, _utils.parseNDigits)(token.length, dateString);
            // 1st, 2nd, 3rd, 4th
            case "qo":
              return match.ordinalNumber(dateString, {
                unit: "quarter"
              });
            // Q1, Q2, Q3, Q4
            case "qqq":
              return match.quarter(dateString, {
                width: "abbreviated",
                context: "standalone"
              }) || match.quarter(dateString, {
                width: "narrow",
                context: "standalone"
              });
            // 1, 2, 3, 4 (narrow quarter; could be not numerical)
            case "qqqqq":
              return match.quarter(dateString, {
                width: "narrow",
                context: "standalone"
              });
            // 1st quarter, 2nd quarter, ...
            case "qqqq":
            default:
              return match.quarter(dateString, {
                width: "wide",
                context: "standalone"
              }) || match.quarter(dateString, {
                width: "abbreviated",
                context: "standalone"
              }) || match.quarter(dateString, {
                width: "narrow",
                context: "standalone"
              });
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 1 && value <= 4;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCMonth((value - 1) * 3, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return StandAloneQuarterParser2;
    }(_Parser2.Parser);
    exports2.StandAloneQuarterParser = StandAloneQuarterParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/MonthParser.js
var require_MonthParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/MonthParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.MonthParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _utils = require_utils2();
    var _Parser2 = require_Parser();
    var _constants = require_constants2();
    var MonthParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(MonthParser2, _Parser);
      var _super = (0, _createSuper2.default)(MonthParser2);
      function MonthParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, MonthParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 110);
        return _this;
      }
      (0, _createClass2.default)(MonthParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          var valueCallback = function valueCallback2(value) {
            return value - 1;
          };
          switch (token) {
            // 1, 2, ..., 12
            case "M":
              return (0, _utils.mapValue)((0, _utils.parseNumericPattern)(_constants.numericPatterns.month, dateString), valueCallback);
            // 01, 02, ..., 12
            case "MM":
              return (0, _utils.mapValue)((0, _utils.parseNDigits)(2, dateString), valueCallback);
            // 1st, 2nd, ..., 12th
            case "Mo":
              return (0, _utils.mapValue)(match.ordinalNumber(dateString, {
                unit: "month"
              }), valueCallback);
            // Jan, Feb, ..., Dec
            case "MMM":
              return match.month(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.month(dateString, {
                width: "narrow",
                context: "formatting"
              });
            // J, F, ..., D
            case "MMMMM":
              return match.month(dateString, {
                width: "narrow",
                context: "formatting"
              });
            // January, February, ..., December
            case "MMMM":
            default:
              return match.month(dateString, {
                width: "wide",
                context: "formatting"
              }) || match.month(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.month(dateString, {
                width: "narrow",
                context: "formatting"
              });
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 0 && value <= 11;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCMonth(value, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return MonthParser2;
    }(_Parser2.Parser);
    exports2.MonthParser = MonthParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js
var require_StandAloneMonthParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.StandAloneMonthParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _constants = require_constants2();
    var _utils = require_utils2();
    var StandAloneMonthParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(StandAloneMonthParser2, _Parser);
      var _super = (0, _createSuper2.default)(StandAloneMonthParser2);
      function StandAloneMonthParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, StandAloneMonthParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 110);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(StandAloneMonthParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          var valueCallback = function valueCallback2(value) {
            return value - 1;
          };
          switch (token) {
            // 1, 2, ..., 12
            case "L":
              return (0, _utils.mapValue)((0, _utils.parseNumericPattern)(_constants.numericPatterns.month, dateString), valueCallback);
            // 01, 02, ..., 12
            case "LL":
              return (0, _utils.mapValue)((0, _utils.parseNDigits)(2, dateString), valueCallback);
            // 1st, 2nd, ..., 12th
            case "Lo":
              return (0, _utils.mapValue)(match.ordinalNumber(dateString, {
                unit: "month"
              }), valueCallback);
            // Jan, Feb, ..., Dec
            case "LLL":
              return match.month(dateString, {
                width: "abbreviated",
                context: "standalone"
              }) || match.month(dateString, {
                width: "narrow",
                context: "standalone"
              });
            // J, F, ..., D
            case "LLLLL":
              return match.month(dateString, {
                width: "narrow",
                context: "standalone"
              });
            // January, February, ..., December
            case "LLLL":
            default:
              return match.month(dateString, {
                width: "wide",
                context: "standalone"
              }) || match.month(dateString, {
                width: "abbreviated",
                context: "standalone"
              }) || match.month(dateString, {
                width: "narrow",
                context: "standalone"
              });
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 0 && value <= 11;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCMonth(value, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return StandAloneMonthParser2;
    }(_Parser2.Parser);
    exports2.StandAloneMonthParser = StandAloneMonthParser;
  }
});

// node_modules/date-fns/_lib/setUTCWeek/index.js
var require_setUTCWeek = __commonJS({
  "node_modules/date-fns/_lib/setUTCWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setUTCWeek;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_getUTCWeek());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function setUTCWeek(dirtyDate, dirtyWeek, options) {
      (0, _index4.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var week = (0, _index.default)(dirtyWeek);
      var diff = (0, _index3.default)(date, options) - week;
      date.setUTCDate(date.getUTCDate() - diff * 7);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.js
var require_LocalWeekParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.LocalWeekParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _constants = require_constants2();
    var _utils = require_utils2();
    var _index = _interopRequireDefault(require_setUTCWeek());
    var _index2 = _interopRequireDefault(require_startOfUTCWeek());
    var LocalWeekParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(LocalWeekParser2, _Parser);
      var _super = (0, _createSuper2.default)(LocalWeekParser2);
      function LocalWeekParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, LocalWeekParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 100);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(LocalWeekParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            case "w":
              return (0, _utils.parseNumericPattern)(_constants.numericPatterns.week, dateString);
            case "wo":
              return match.ordinalNumber(dateString, {
                unit: "week"
              });
            default:
              return (0, _utils.parseNDigits)(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 1 && value <= 53;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value, options) {
          return (0, _index2.default)((0, _index.default)(date, value, options), options);
        }
      }]);
      return LocalWeekParser2;
    }(_Parser2.Parser);
    exports2.LocalWeekParser = LocalWeekParser;
  }
});

// node_modules/date-fns/_lib/setUTCISOWeek/index.js
var require_setUTCISOWeek = __commonJS({
  "node_modules/date-fns/_lib/setUTCISOWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setUTCISOWeek;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_getUTCISOWeek());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
      (0, _index4.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var isoWeek = (0, _index.default)(dirtyISOWeek);
      var diff = (0, _index3.default)(date) - isoWeek;
      date.setUTCDate(date.getUTCDate() - diff * 7);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.js
var require_ISOWeekParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ISOWeekParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _constants = require_constants2();
    var _utils = require_utils2();
    var _index = _interopRequireDefault(require_setUTCISOWeek());
    var _index2 = _interopRequireDefault(require_startOfUTCISOWeek());
    var ISOWeekParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(ISOWeekParser2, _Parser);
      var _super = (0, _createSuper2.default)(ISOWeekParser2);
      function ISOWeekParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, ISOWeekParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 100);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(ISOWeekParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            case "I":
              return (0, _utils.parseNumericPattern)(_constants.numericPatterns.week, dateString);
            case "Io":
              return match.ordinalNumber(dateString, {
                unit: "week"
              });
            default:
              return (0, _utils.parseNDigits)(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 1 && value <= 53;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          return (0, _index2.default)((0, _index.default)(date, value));
        }
      }]);
      return ISOWeekParser2;
    }(_Parser2.Parser);
    exports2.ISOWeekParser = ISOWeekParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/DateParser.js
var require_DateParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/DateParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.DateParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _utils = require_utils2();
    var _Parser2 = require_Parser();
    var _constants = require_constants2();
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var DateParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(DateParser2, _Parser);
      var _super = (0, _createSuper2.default)(DateParser2);
      function DateParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, DateParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 90);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "subPriority", 1);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(DateParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            case "d":
              return (0, _utils.parseNumericPattern)(_constants.numericPatterns.date, dateString);
            case "do":
              return match.ordinalNumber(dateString, {
                unit: "date"
              });
            default:
              return (0, _utils.parseNDigits)(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate4(date, value) {
          var year = date.getUTCFullYear();
          var isLeapYear = (0, _utils.isLeapYearIndex)(year);
          var month = date.getUTCMonth();
          if (isLeapYear) {
            return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
          } else {
            return value >= 1 && value <= DAYS_IN_MONTH[month];
          }
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCDate(value);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return DateParser2;
    }(_Parser2.Parser);
    exports2.DateParser = DateParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.js
var require_DayOfYearParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.DayOfYearParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _constants = require_constants2();
    var _utils = require_utils2();
    var DayOfYearParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(DayOfYearParser2, _Parser);
      var _super = (0, _createSuper2.default)(DayOfYearParser2);
      function DayOfYearParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, DayOfYearParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 90);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "subpriority", 1);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(DayOfYearParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            case "D":
            case "DD":
              return (0, _utils.parseNumericPattern)(_constants.numericPatterns.dayOfYear, dateString);
            case "Do":
              return match.ordinalNumber(dateString, {
                unit: "date"
              });
            default:
              return (0, _utils.parseNDigits)(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate4(date, value) {
          var year = date.getUTCFullYear();
          var isLeapYear = (0, _utils.isLeapYearIndex)(year);
          if (isLeapYear) {
            return value >= 1 && value <= 366;
          } else {
            return value >= 1 && value <= 365;
          }
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCMonth(0, value);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return DayOfYearParser2;
    }(_Parser2.Parser);
    exports2.DayOfYearParser = DayOfYearParser;
  }
});

// node_modules/date-fns/_lib/setUTCDay/index.js
var require_setUTCDay = __commonJS({
  "node_modules/date-fns/_lib/setUTCDay/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setUTCDay;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = _interopRequireDefault(require_toInteger());
    var _index4 = require_defaultOptions();
    function setUTCDay(dirtyDate, dirtyDay, options) {
      var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      (0, _index2.default)(2, arguments);
      var defaultOptions = (0, _index4.getDefaultOptions)();
      var weekStartsOn = (0, _index3.default)((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      var date = (0, _index.default)(dirtyDate);
      var day = (0, _index3.default)(dirtyDay);
      var currentDay = date.getUTCDay();
      var remainder = day % 7;
      var dayIndex = (remainder + 7) % 7;
      var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
      date.setUTCDate(date.getUTCDate() + diff);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/parse/_lib/parsers/DayParser.js
var require_DayParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/DayParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.DayParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _index = _interopRequireDefault(require_setUTCDay());
    var DayParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(DayParser2, _Parser);
      var _super = (0, _createSuper2.default)(DayParser2);
      function DayParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, DayParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 90);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(DayParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            // Tue
            case "E":
            case "EE":
            case "EEE":
              return match.day(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
            // T
            case "EEEEE":
              return match.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
            // Tu
            case "EEEEEE":
              return match.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
            // Tuesday
            case "EEEE":
            default:
              return match.day(dateString, {
                width: "wide",
                context: "formatting"
              }) || match.day(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 0 && value <= 6;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value, options) {
          date = (0, _index.default)(date, value, options);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return DayParser2;
    }(_Parser2.Parser);
    exports2.DayParser = DayParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/LocalDayParser.js
var require_LocalDayParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/LocalDayParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.LocalDayParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var _index = _interopRequireDefault(require_setUTCDay());
    var LocalDayParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(LocalDayParser2, _Parser);
      var _super = (0, _createSuper2.default)(LocalDayParser2);
      function LocalDayParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, LocalDayParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 90);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(LocalDayParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match, options) {
          var valueCallback = function valueCallback2(value) {
            var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
            return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
          };
          switch (token) {
            // 3
            case "e":
            case "ee":
              return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);
            // 3rd
            case "eo":
              return (0, _utils.mapValue)(match.ordinalNumber(dateString, {
                unit: "day"
              }), valueCallback);
            // Tue
            case "eee":
              return match.day(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
            // T
            case "eeeee":
              return match.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
            // Tu
            case "eeeeee":
              return match.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
            // Tuesday
            case "eeee":
            default:
              return match.day(dateString, {
                width: "wide",
                context: "formatting"
              }) || match.day(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 0 && value <= 6;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value, options) {
          date = (0, _index.default)(date, value, options);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return LocalDayParser2;
    }(_Parser2.Parser);
    exports2.LocalDayParser = LocalDayParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.js
var require_StandAloneLocalDayParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.StandAloneLocalDayParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var _index = _interopRequireDefault(require_setUTCDay());
    var StandAloneLocalDayParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(StandAloneLocalDayParser2, _Parser);
      var _super = (0, _createSuper2.default)(StandAloneLocalDayParser2);
      function StandAloneLocalDayParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, StandAloneLocalDayParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 90);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(StandAloneLocalDayParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match, options) {
          var valueCallback = function valueCallback2(value) {
            var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
            return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
          };
          switch (token) {
            // 3
            case "c":
            case "cc":
              return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);
            // 3rd
            case "co":
              return (0, _utils.mapValue)(match.ordinalNumber(dateString, {
                unit: "day"
              }), valueCallback);
            // Tue
            case "ccc":
              return match.day(dateString, {
                width: "abbreviated",
                context: "standalone"
              }) || match.day(dateString, {
                width: "short",
                context: "standalone"
              }) || match.day(dateString, {
                width: "narrow",
                context: "standalone"
              });
            // T
            case "ccccc":
              return match.day(dateString, {
                width: "narrow",
                context: "standalone"
              });
            // Tu
            case "cccccc":
              return match.day(dateString, {
                width: "short",
                context: "standalone"
              }) || match.day(dateString, {
                width: "narrow",
                context: "standalone"
              });
            // Tuesday
            case "cccc":
            default:
              return match.day(dateString, {
                width: "wide",
                context: "standalone"
              }) || match.day(dateString, {
                width: "abbreviated",
                context: "standalone"
              }) || match.day(dateString, {
                width: "short",
                context: "standalone"
              }) || match.day(dateString, {
                width: "narrow",
                context: "standalone"
              });
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 0 && value <= 6;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value, options) {
          date = (0, _index.default)(date, value, options);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return StandAloneLocalDayParser2;
    }(_Parser2.Parser);
    exports2.StandAloneLocalDayParser = StandAloneLocalDayParser;
  }
});

// node_modules/date-fns/_lib/setUTCISODay/index.js
var require_setUTCISODay = __commonJS({
  "node_modules/date-fns/_lib/setUTCISODay/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setUTCISODay;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = _interopRequireDefault(require_toInteger());
    function setUTCISODay(dirtyDate, dirtyDay) {
      (0, _index2.default)(2, arguments);
      var day = (0, _index3.default)(dirtyDay);
      if (day % 7 === 0) {
        day = day - 7;
      }
      var weekStartsOn = 1;
      var date = (0, _index.default)(dirtyDate);
      var currentDay = date.getUTCDay();
      var remainder = day % 7;
      var dayIndex = (remainder + 7) % 7;
      var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
      date.setUTCDate(date.getUTCDate() + diff);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/parse/_lib/parsers/ISODayParser.js
var require_ISODayParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/ISODayParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ISODayParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var _index = _interopRequireDefault(require_setUTCISODay());
    var ISODayParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(ISODayParser2, _Parser);
      var _super = (0, _createSuper2.default)(ISODayParser2);
      function ISODayParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, ISODayParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 90);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(ISODayParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          var valueCallback = function valueCallback2(value) {
            if (value === 0) {
              return 7;
            }
            return value;
          };
          switch (token) {
            // 2
            case "i":
            case "ii":
              return (0, _utils.parseNDigits)(token.length, dateString);
            // 2nd
            case "io":
              return match.ordinalNumber(dateString, {
                unit: "day"
              });
            // Tue
            case "iii":
              return (0, _utils.mapValue)(match.day(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match.day(dateString, {
                width: "narrow",
                context: "formatting"
              }), valueCallback);
            // T
            case "iiiii":
              return (0, _utils.mapValue)(match.day(dateString, {
                width: "narrow",
                context: "formatting"
              }), valueCallback);
            // Tu
            case "iiiiii":
              return (0, _utils.mapValue)(match.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match.day(dateString, {
                width: "narrow",
                context: "formatting"
              }), valueCallback);
            // Tuesday
            case "iiii":
            default:
              return (0, _utils.mapValue)(match.day(dateString, {
                width: "wide",
                context: "formatting"
              }) || match.day(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match.day(dateString, {
                width: "narrow",
                context: "formatting"
              }), valueCallback);
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 1 && value <= 7;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date = (0, _index.default)(date, value);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }]);
      return ISODayParser2;
    }(_Parser2.Parser);
    exports2.ISODayParser = ISODayParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/AMPMParser.js
var require_AMPMParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/AMPMParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.AMPMParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var AMPMParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(AMPMParser2, _Parser);
      var _super = (0, _createSuper2.default)(AMPMParser2);
      function AMPMParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, AMPMParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 80);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(AMPMParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            case "a":
            case "aa":
            case "aaa":
              return match.dayPeriod(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "aaaaa":
              return match.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "aaaa":
            default:
              return match.dayPeriod(dateString, {
                width: "wide",
                context: "formatting"
              }) || match.dayPeriod(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
          }
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCHours((0, _utils.dayPeriodEnumToHours)(value), 0, 0, 0);
          return date;
        }
      }]);
      return AMPMParser2;
    }(_Parser2.Parser);
    exports2.AMPMParser = AMPMParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.js
var require_AMPMMidnightParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.AMPMMidnightParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var AMPMMidnightParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(AMPMMidnightParser2, _Parser);
      var _super = (0, _createSuper2.default)(AMPMMidnightParser2);
      function AMPMMidnightParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, AMPMMidnightParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 80);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(AMPMMidnightParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            case "b":
            case "bb":
            case "bbb":
              return match.dayPeriod(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "bbbbb":
              return match.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "bbbb":
            default:
              return match.dayPeriod(dateString, {
                width: "wide",
                context: "formatting"
              }) || match.dayPeriod(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
          }
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCHours((0, _utils.dayPeriodEnumToHours)(value), 0, 0, 0);
          return date;
        }
      }]);
      return AMPMMidnightParser2;
    }(_Parser2.Parser);
    exports2.AMPMMidnightParser = AMPMMidnightParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js
var require_DayPeriodParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.DayPeriodParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var DayPeriodParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(DayPeriodParser2, _Parser);
      var _super = (0, _createSuper2.default)(DayPeriodParser2);
      function DayPeriodParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, DayPeriodParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 80);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(DayPeriodParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            case "B":
            case "BB":
            case "BBB":
              return match.dayPeriod(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "BBBBB":
              return match.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "BBBB":
            default:
              return match.dayPeriod(dateString, {
                width: "wide",
                context: "formatting"
              }) || match.dayPeriod(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
          }
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCHours((0, _utils.dayPeriodEnumToHours)(value), 0, 0, 0);
          return date;
        }
      }]);
      return DayPeriodParser2;
    }(_Parser2.Parser);
    exports2.DayPeriodParser = DayPeriodParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js
var require_Hour1to12Parser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Hour1to12Parser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _constants = require_constants2();
    var _utils = require_utils2();
    var Hour1to12Parser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(Hour1to12Parser2, _Parser);
      var _super = (0, _createSuper2.default)(Hour1to12Parser2);
      function Hour1to12Parser2() {
        var _this;
        (0, _classCallCheck2.default)(this, Hour1to12Parser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 70);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(Hour1to12Parser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            case "h":
              return (0, _utils.parseNumericPattern)(_constants.numericPatterns.hour12h, dateString);
            case "ho":
              return match.ordinalNumber(dateString, {
                unit: "hour"
              });
            default:
              return (0, _utils.parseNDigits)(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 1 && value <= 12;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          var isPM = date.getUTCHours() >= 12;
          if (isPM && value < 12) {
            date.setUTCHours(value + 12, 0, 0, 0);
          } else if (!isPM && value === 12) {
            date.setUTCHours(0, 0, 0, 0);
          } else {
            date.setUTCHours(value, 0, 0, 0);
          }
          return date;
        }
      }]);
      return Hour1to12Parser2;
    }(_Parser2.Parser);
    exports2.Hour1to12Parser = Hour1to12Parser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.js
var require_Hour0to23Parser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Hour0to23Parser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _constants = require_constants2();
    var _utils = require_utils2();
    var Hour0to23Parser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(Hour0to23Parser2, _Parser);
      var _super = (0, _createSuper2.default)(Hour0to23Parser2);
      function Hour0to23Parser2() {
        var _this;
        (0, _classCallCheck2.default)(this, Hour0to23Parser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 70);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(Hour0to23Parser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            case "H":
              return (0, _utils.parseNumericPattern)(_constants.numericPatterns.hour23h, dateString);
            case "Ho":
              return match.ordinalNumber(dateString, {
                unit: "hour"
              });
            default:
              return (0, _utils.parseNDigits)(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 0 && value <= 23;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCHours(value, 0, 0, 0);
          return date;
        }
      }]);
      return Hour0to23Parser2;
    }(_Parser2.Parser);
    exports2.Hour0to23Parser = Hour0to23Parser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.js
var require_Hour0To11Parser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Hour0To11Parser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _constants = require_constants2();
    var _utils = require_utils2();
    var Hour0To11Parser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(Hour0To11Parser2, _Parser);
      var _super = (0, _createSuper2.default)(Hour0To11Parser2);
      function Hour0To11Parser2() {
        var _this;
        (0, _classCallCheck2.default)(this, Hour0To11Parser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 70);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(Hour0To11Parser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            case "K":
              return (0, _utils.parseNumericPattern)(_constants.numericPatterns.hour11h, dateString);
            case "Ko":
              return match.ordinalNumber(dateString, {
                unit: "hour"
              });
            default:
              return (0, _utils.parseNDigits)(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 0 && value <= 11;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          var isPM = date.getUTCHours() >= 12;
          if (isPM && value < 12) {
            date.setUTCHours(value + 12, 0, 0, 0);
          } else {
            date.setUTCHours(value, 0, 0, 0);
          }
          return date;
        }
      }]);
      return Hour0To11Parser2;
    }(_Parser2.Parser);
    exports2.Hour0To11Parser = Hour0To11Parser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.js
var require_Hour1To24Parser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Hour1To24Parser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _constants = require_constants2();
    var _utils = require_utils2();
    var Hour1To24Parser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(Hour1To24Parser2, _Parser);
      var _super = (0, _createSuper2.default)(Hour1To24Parser2);
      function Hour1To24Parser2() {
        var _this;
        (0, _classCallCheck2.default)(this, Hour1To24Parser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 70);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(Hour1To24Parser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            case "k":
              return (0, _utils.parseNumericPattern)(_constants.numericPatterns.hour24h, dateString);
            case "ko":
              return match.ordinalNumber(dateString, {
                unit: "hour"
              });
            default:
              return (0, _utils.parseNDigits)(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 1 && value <= 24;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          var hours = value <= 24 ? value % 24 : value;
          date.setUTCHours(hours, 0, 0, 0);
          return date;
        }
      }]);
      return Hour1To24Parser2;
    }(_Parser2.Parser);
    exports2.Hour1To24Parser = Hour1To24Parser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/MinuteParser.js
var require_MinuteParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/MinuteParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.MinuteParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _constants = require_constants2();
    var _utils = require_utils2();
    var MinuteParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(MinuteParser2, _Parser);
      var _super = (0, _createSuper2.default)(MinuteParser2);
      function MinuteParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, MinuteParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 60);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(MinuteParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            case "m":
              return (0, _utils.parseNumericPattern)(_constants.numericPatterns.minute, dateString);
            case "mo":
              return match.ordinalNumber(dateString, {
                unit: "minute"
              });
            default:
              return (0, _utils.parseNDigits)(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 0 && value <= 59;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCMinutes(value, 0, 0);
          return date;
        }
      }]);
      return MinuteParser2;
    }(_Parser2.Parser);
    exports2.MinuteParser = MinuteParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/SecondParser.js
var require_SecondParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/SecondParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.SecondParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _constants = require_constants2();
    var _utils = require_utils2();
    var SecondParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(SecondParser2, _Parser);
      var _super = (0, _createSuper2.default)(SecondParser2);
      function SecondParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, SecondParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 50);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(SecondParser2, [{
        key: "parse",
        value: function parse4(dateString, token, match) {
          switch (token) {
            case "s":
              return (0, _utils.parseNumericPattern)(_constants.numericPatterns.second, dateString);
            case "so":
              return match.ordinalNumber(dateString, {
                unit: "second"
              });
            default:
              return (0, _utils.parseNDigits)(token.length, dateString);
          }
        }
      }, {
        key: "validate",
        value: function validate4(_date, value) {
          return value >= 0 && value <= 59;
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCSeconds(value, 0);
          return date;
        }
      }]);
      return SecondParser2;
    }(_Parser2.Parser);
    exports2.SecondParser = SecondParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.js
var require_FractionOfSecondParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.FractionOfSecondParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var FractionOfSecondParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(FractionOfSecondParser2, _Parser);
      var _super = (0, _createSuper2.default)(FractionOfSecondParser2);
      function FractionOfSecondParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, FractionOfSecondParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 30);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["t", "T"]);
        return _this;
      }
      (0, _createClass2.default)(FractionOfSecondParser2, [{
        key: "parse",
        value: function parse4(dateString, token) {
          var valueCallback = function valueCallback2(value) {
            return Math.floor(value * Math.pow(10, -token.length + 3));
          };
          return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);
        }
      }, {
        key: "set",
        value: function set(date, _flags, value) {
          date.setUTCMilliseconds(value);
          return date;
        }
      }]);
      return FractionOfSecondParser2;
    }(_Parser2.Parser);
    exports2.FractionOfSecondParser = FractionOfSecondParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js
var require_ISOTimezoneWithZParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ISOTimezoneWithZParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _constants = require_constants2();
    var _utils = require_utils2();
    var ISOTimezoneWithZParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(ISOTimezoneWithZParser2, _Parser);
      var _super = (0, _createSuper2.default)(ISOTimezoneWithZParser2);
      function ISOTimezoneWithZParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, ISOTimezoneWithZParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 10);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["t", "T", "x"]);
        return _this;
      }
      (0, _createClass2.default)(ISOTimezoneWithZParser2, [{
        key: "parse",
        value: function parse4(dateString, token) {
          switch (token) {
            case "X":
              return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basicOptionalMinutes, dateString);
            case "XX":
              return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basic, dateString);
            case "XXXX":
              return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basicOptionalSeconds, dateString);
            case "XXXXX":
              return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.extendedOptionalSeconds, dateString);
            case "XXX":
            default:
              return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.extended, dateString);
          }
        }
      }, {
        key: "set",
        value: function set(date, flags, value) {
          if (flags.timestampIsSet) {
            return date;
          }
          return new Date(date.getTime() - value);
        }
      }]);
      return ISOTimezoneWithZParser2;
    }(_Parser2.Parser);
    exports2.ISOTimezoneWithZParser = ISOTimezoneWithZParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js
var require_ISOTimezoneParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ISOTimezoneParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _constants = require_constants2();
    var _utils = require_utils2();
    var ISOTimezoneParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(ISOTimezoneParser2, _Parser);
      var _super = (0, _createSuper2.default)(ISOTimezoneParser2);
      function ISOTimezoneParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, ISOTimezoneParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 10);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", ["t", "T", "X"]);
        return _this;
      }
      (0, _createClass2.default)(ISOTimezoneParser2, [{
        key: "parse",
        value: function parse4(dateString, token) {
          switch (token) {
            case "x":
              return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basicOptionalMinutes, dateString);
            case "xx":
              return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basic, dateString);
            case "xxxx":
              return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basicOptionalSeconds, dateString);
            case "xxxxx":
              return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.extendedOptionalSeconds, dateString);
            case "xxx":
            default:
              return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.extended, dateString);
          }
        }
      }, {
        key: "set",
        value: function set(date, flags, value) {
          if (flags.timestampIsSet) {
            return date;
          }
          return new Date(date.getTime() - value);
        }
      }]);
      return ISOTimezoneParser2;
    }(_Parser2.Parser);
    exports2.ISOTimezoneParser = ISOTimezoneParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js
var require_TimestampSecondsParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TimestampSecondsParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var TimestampSecondsParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(TimestampSecondsParser2, _Parser);
      var _super = (0, _createSuper2.default)(TimestampSecondsParser2);
      function TimestampSecondsParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, TimestampSecondsParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 40);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", "*");
        return _this;
      }
      (0, _createClass2.default)(TimestampSecondsParser2, [{
        key: "parse",
        value: function parse4(dateString) {
          return (0, _utils.parseAnyDigitsSigned)(dateString);
        }
      }, {
        key: "set",
        value: function set(_date, _flags, value) {
          return [new Date(value * 1e3), {
            timestampIsSet: true
          }];
        }
      }]);
      return TimestampSecondsParser2;
    }(_Parser2.Parser);
    exports2.TimestampSecondsParser = TimestampSecondsParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.js
var require_TimestampMillisecondsParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TimestampMillisecondsParser = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _createSuper2 = _interopRequireDefault(require_createSuper());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _Parser2 = require_Parser();
    var _utils = require_utils2();
    var TimestampMillisecondsParser = /* @__PURE__ */ function(_Parser) {
      (0, _inherits2.default)(TimestampMillisecondsParser2, _Parser);
      var _super = (0, _createSuper2.default)(TimestampMillisecondsParser2);
      function TimestampMillisecondsParser2() {
        var _this;
        (0, _classCallCheck2.default)(this, TimestampMillisecondsParser2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "priority", 20);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "incompatibleTokens", "*");
        return _this;
      }
      (0, _createClass2.default)(TimestampMillisecondsParser2, [{
        key: "parse",
        value: function parse4(dateString) {
          return (0, _utils.parseAnyDigitsSigned)(dateString);
        }
      }, {
        key: "set",
        value: function set(_date, _flags, value) {
          return [new Date(value), {
            timestampIsSet: true
          }];
        }
      }]);
      return TimestampMillisecondsParser2;
    }(_Parser2.Parser);
    exports2.TimestampMillisecondsParser = TimestampMillisecondsParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/index.js
var require_parsers = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.parsers = void 0;
    var _EraParser = require_EraParser();
    var _YearParser = require_YearParser();
    var _LocalWeekYearParser = require_LocalWeekYearParser();
    var _ISOWeekYearParser = require_ISOWeekYearParser();
    var _ExtendedYearParser = require_ExtendedYearParser();
    var _QuarterParser = require_QuarterParser();
    var _StandAloneQuarterParser = require_StandAloneQuarterParser();
    var _MonthParser = require_MonthParser();
    var _StandAloneMonthParser = require_StandAloneMonthParser();
    var _LocalWeekParser = require_LocalWeekParser();
    var _ISOWeekParser = require_ISOWeekParser();
    var _DateParser = require_DateParser();
    var _DayOfYearParser = require_DayOfYearParser();
    var _DayParser = require_DayParser();
    var _LocalDayParser = require_LocalDayParser();
    var _StandAloneLocalDayParser = require_StandAloneLocalDayParser();
    var _ISODayParser = require_ISODayParser();
    var _AMPMParser = require_AMPMParser();
    var _AMPMMidnightParser = require_AMPMMidnightParser();
    var _DayPeriodParser = require_DayPeriodParser();
    var _Hour1to12Parser = require_Hour1to12Parser();
    var _Hour0to23Parser = require_Hour0to23Parser();
    var _Hour0To11Parser = require_Hour0To11Parser();
    var _Hour1To24Parser = require_Hour1To24Parser();
    var _MinuteParser = require_MinuteParser();
    var _SecondParser = require_SecondParser();
    var _FractionOfSecondParser = require_FractionOfSecondParser();
    var _ISOTimezoneWithZParser = require_ISOTimezoneWithZParser();
    var _ISOTimezoneParser = require_ISOTimezoneParser();
    var _TimestampSecondsParser = require_TimestampSecondsParser();
    var _TimestampMillisecondsParser = require_TimestampMillisecondsParser();
    var parsers = {
      G: new _EraParser.EraParser(),
      y: new _YearParser.YearParser(),
      Y: new _LocalWeekYearParser.LocalWeekYearParser(),
      R: new _ISOWeekYearParser.ISOWeekYearParser(),
      u: new _ExtendedYearParser.ExtendedYearParser(),
      Q: new _QuarterParser.QuarterParser(),
      q: new _StandAloneQuarterParser.StandAloneQuarterParser(),
      M: new _MonthParser.MonthParser(),
      L: new _StandAloneMonthParser.StandAloneMonthParser(),
      w: new _LocalWeekParser.LocalWeekParser(),
      I: new _ISOWeekParser.ISOWeekParser(),
      d: new _DateParser.DateParser(),
      D: new _DayOfYearParser.DayOfYearParser(),
      E: new _DayParser.DayParser(),
      e: new _LocalDayParser.LocalDayParser(),
      c: new _StandAloneLocalDayParser.StandAloneLocalDayParser(),
      i: new _ISODayParser.ISODayParser(),
      a: new _AMPMParser.AMPMParser(),
      b: new _AMPMMidnightParser.AMPMMidnightParser(),
      B: new _DayPeriodParser.DayPeriodParser(),
      h: new _Hour1to12Parser.Hour1to12Parser(),
      H: new _Hour0to23Parser.Hour0to23Parser(),
      K: new _Hour0To11Parser.Hour0To11Parser(),
      k: new _Hour1To24Parser.Hour1To24Parser(),
      m: new _MinuteParser.MinuteParser(),
      s: new _SecondParser.SecondParser(),
      S: new _FractionOfSecondParser.FractionOfSecondParser(),
      X: new _ISOTimezoneWithZParser.ISOTimezoneWithZParser(),
      x: new _ISOTimezoneParser.ISOTimezoneParser(),
      t: new _TimestampSecondsParser.TimestampSecondsParser(),
      T: new _TimestampMillisecondsParser.TimestampMillisecondsParser()
    };
    exports2.parsers = parsers;
  }
});

// node_modules/date-fns/parse/index.js
var require_parse = __commonJS({
  "node_modules/date-fns/parse/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = parse4;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
    var _index = _interopRequireDefault(require_defaultLocale());
    var _index2 = _interopRequireDefault(require_subMilliseconds());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_assign());
    var _index5 = _interopRequireDefault(require_longFormatters());
    var _index6 = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index7 = require_protectedTokens();
    var _index8 = _interopRequireDefault(require_toInteger());
    var _index9 = _interopRequireDefault(require_requiredArgs());
    var _Setter = require_Setter();
    var _index10 = require_parsers();
    var _index11 = require_defaultOptions();
    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var notWhitespaceRegExp = /\S/;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    function parse4(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
      var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
      (0, _index9.default)(3, arguments);
      var dateString = String(dirtyDateString);
      var formatString = String(dirtyFormatString);
      var defaultOptions = (0, _index11.getDefaultOptions)();
      var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : _index.default;
      if (!locale.match) {
        throw new RangeError("locale must contain match property");
      }
      var firstWeekContainsDate = (0, _index8.default)((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
      }
      var weekStartsOn = (0, _index8.default)((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      if (formatString === "") {
        if (dateString === "") {
          return (0, _index3.default)(dirtyReferenceDate);
        } else {
          return /* @__PURE__ */ new Date(NaN);
        }
      }
      var subFnOptions = {
        firstWeekContainsDate,
        weekStartsOn,
        locale
      };
      var setters = [new _Setter.DateToSystemTimezoneSetter()];
      var tokens = formatString.match(longFormattingTokensRegExp).map(function(substring) {
        var firstCharacter = substring[0];
        if (firstCharacter in _index5.default) {
          var longFormatter = _index5.default[firstCharacter];
          return longFormatter(substring, locale.formatLong);
        }
        return substring;
      }).join("").match(formattingTokensRegExp);
      var usedTokens = [];
      var _iterator = (0, _createForOfIteratorHelper2.default)(tokens), _step;
      try {
        var _loop = function _loop2() {
          var token = _step.value;
          if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && (0, _index7.isProtectedWeekYearToken)(token)) {
            (0, _index7.throwProtectedError)(token, formatString, dirtyDateString);
          }
          if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && (0, _index7.isProtectedDayOfYearToken)(token)) {
            (0, _index7.throwProtectedError)(token, formatString, dirtyDateString);
          }
          var firstCharacter = token[0];
          var parser = _index10.parsers[firstCharacter];
          if (parser) {
            var incompatibleTokens = parser.incompatibleTokens;
            if (Array.isArray(incompatibleTokens)) {
              var incompatibleToken = usedTokens.find(function(usedToken) {
                return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
              });
              if (incompatibleToken) {
                throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
              }
            } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {
              throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
            }
            usedTokens.push({
              token: firstCharacter,
              fullToken: token
            });
            var parseResult = parser.run(dateString, token, locale.match, subFnOptions);
            if (!parseResult) {
              return {
                v: /* @__PURE__ */ new Date(NaN)
              };
            }
            setters.push(parseResult.setter);
            dateString = parseResult.rest;
          } else {
            if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
              throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
            }
            if (token === "''") {
              token = "'";
            } else if (firstCharacter === "'") {
              token = cleanEscapedString(token);
            }
            if (dateString.indexOf(token) === 0) {
              dateString = dateString.slice(token.length);
            } else {
              return {
                v: /* @__PURE__ */ new Date(NaN)
              };
            }
          }
        };
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var _ret = _loop();
          if ((0, _typeof2.default)(_ret) === "object") return _ret.v;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
        return /* @__PURE__ */ new Date(NaN);
      }
      var uniquePrioritySetters = setters.map(function(setter2) {
        return setter2.priority;
      }).sort(function(a, b2) {
        return b2 - a;
      }).filter(function(priority, index, array) {
        return array.indexOf(priority) === index;
      }).map(function(priority) {
        return setters.filter(function(setter2) {
          return setter2.priority === priority;
        }).sort(function(a, b2) {
          return b2.subPriority - a.subPriority;
        });
      }).map(function(setterArray) {
        return setterArray[0];
      });
      var date = (0, _index3.default)(dirtyReferenceDate);
      if (isNaN(date.getTime())) {
        return /* @__PURE__ */ new Date(NaN);
      }
      var utcDate = (0, _index2.default)(date, (0, _index6.default)(date));
      var flags = {};
      var _iterator2 = (0, _createForOfIteratorHelper2.default)(uniquePrioritySetters), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var setter = _step2.value;
          if (!setter.validate(utcDate, subFnOptions)) {
            return /* @__PURE__ */ new Date(NaN);
          }
          var result = setter.set(utcDate, flags, subFnOptions);
          if (Array.isArray(result)) {
            utcDate = result[0];
            (0, _index4.default)(flags, result[1]);
          } else {
            utcDate = result;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return utcDate;
    }
    function cleanEscapedString(input) {
      return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isMatch/index.js
var require_isMatch = __commonJS({
  "node_modules/date-fns/isMatch/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isMatch;
    var _index = _interopRequireDefault(require_parse());
    var _index2 = _interopRequireDefault(require_isValid());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function isMatch(dateString, formatString, options) {
      (0, _index3.default)(2, arguments);
      return (0, _index2.default)((0, _index.default)(dateString, formatString, /* @__PURE__ */ new Date(), options));
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isMonday/index.js
var require_isMonday = __commonJS({
  "node_modules/date-fns/isMonday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isMonday;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isMonday(date) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(date).getDay() === 1;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isPast/index.js
var require_isPast = __commonJS({
  "node_modules/date-fns/isPast/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isPast;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isPast(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getTime() < Date.now();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfHour/index.js
var require_startOfHour = __commonJS({
  "node_modules/date-fns/startOfHour/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfHour;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function startOfHour(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setMinutes(0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameHour/index.js
var require_isSameHour = __commonJS({
  "node_modules/date-fns/isSameHour/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameHour;
    var _index = _interopRequireDefault(require_startOfHour());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isSameHour(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfHour = (0, _index.default)(dirtyDateLeft);
      var dateRightStartOfHour = (0, _index.default)(dirtyDateRight);
      return dateLeftStartOfHour.getTime() === dateRightStartOfHour.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameWeek/index.js
var require_isSameWeek = __commonJS({
  "node_modules/date-fns/isSameWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameWeek;
    var _index = _interopRequireDefault(require_startOfWeek());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isSameWeek(dirtyDateLeft, dirtyDateRight, options) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfWeek = (0, _index.default)(dirtyDateLeft, options);
      var dateRightStartOfWeek = (0, _index.default)(dirtyDateRight, options);
      return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameISOWeek/index.js
var require_isSameISOWeek = __commonJS({
  "node_modules/date-fns/isSameISOWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameISOWeek;
    var _index = _interopRequireDefault(require_isSameWeek());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isSameISOWeek(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      return (0, _index.default)(dirtyDateLeft, dirtyDateRight, {
        weekStartsOn: 1
      });
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameISOWeekYear/index.js
var require_isSameISOWeekYear = __commonJS({
  "node_modules/date-fns/isSameISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameISOWeekYear;
    var _index = _interopRequireDefault(require_startOfISOWeekYear());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isSameISOWeekYear(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfYear = (0, _index.default)(dirtyDateLeft);
      var dateRightStartOfYear = (0, _index.default)(dirtyDateRight);
      return dateLeftStartOfYear.getTime() === dateRightStartOfYear.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameMinute/index.js
var require_isSameMinute = __commonJS({
  "node_modules/date-fns/isSameMinute/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameMinute;
    var _index = _interopRequireDefault(require_startOfMinute());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isSameMinute(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfMinute = (0, _index.default)(dirtyDateLeft);
      var dateRightStartOfMinute = (0, _index.default)(dirtyDateRight);
      return dateLeftStartOfMinute.getTime() === dateRightStartOfMinute.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameMonth/index.js
var require_isSameMonth = __commonJS({
  "node_modules/date-fns/isSameMonth/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameMonth;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isSameMonth(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameQuarter/index.js
var require_isSameQuarter = __commonJS({
  "node_modules/date-fns/isSameQuarter/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameQuarter;
    var _index = _interopRequireDefault(require_startOfQuarter());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isSameQuarter(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfQuarter = (0, _index.default)(dirtyDateLeft);
      var dateRightStartOfQuarter = (0, _index.default)(dirtyDateRight);
      return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfSecond/index.js
var require_startOfSecond = __commonJS({
  "node_modules/date-fns/startOfSecond/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfSecond;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function startOfSecond(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      date.setMilliseconds(0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameSecond/index.js
var require_isSameSecond = __commonJS({
  "node_modules/date-fns/isSameSecond/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameSecond;
    var _index = _interopRequireDefault(require_startOfSecond());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isSameSecond(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeftStartOfSecond = (0, _index.default)(dirtyDateLeft);
      var dateRightStartOfSecond = (0, _index.default)(dirtyDateRight);
      return dateLeftStartOfSecond.getTime() === dateRightStartOfSecond.getTime();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isSameYear/index.js
var require_isSameYear = __commonJS({
  "node_modules/date-fns/isSameYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isSameYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isSameYear(dirtyDateLeft, dirtyDateRight) {
      (0, _index2.default)(2, arguments);
      var dateLeft = (0, _index.default)(dirtyDateLeft);
      var dateRight = (0, _index.default)(dirtyDateRight);
      return dateLeft.getFullYear() === dateRight.getFullYear();
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisHour/index.js
var require_isThisHour = __commonJS({
  "node_modules/date-fns/isThisHour/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisHour;
    var _index = _interopRequireDefault(require_isSameHour());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isThisHour(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(Date.now(), dirtyDate);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisISOWeek/index.js
var require_isThisISOWeek = __commonJS({
  "node_modules/date-fns/isThisISOWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisISOWeek;
    var _index = _interopRequireDefault(require_isSameISOWeek());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isThisISOWeek(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, Date.now());
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisMinute/index.js
var require_isThisMinute = __commonJS({
  "node_modules/date-fns/isThisMinute/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisMinute;
    var _index = _interopRequireDefault(require_isSameMinute());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isThisMinute(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(Date.now(), dirtyDate);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisMonth/index.js
var require_isThisMonth = __commonJS({
  "node_modules/date-fns/isThisMonth/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisMonth;
    var _index = _interopRequireDefault(require_isSameMonth());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isThisMonth(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(Date.now(), dirtyDate);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisQuarter/index.js
var require_isThisQuarter = __commonJS({
  "node_modules/date-fns/isThisQuarter/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisQuarter;
    var _index = _interopRequireDefault(require_isSameQuarter());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isThisQuarter(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(Date.now(), dirtyDate);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisSecond/index.js
var require_isThisSecond = __commonJS({
  "node_modules/date-fns/isThisSecond/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisSecond;
    var _index = _interopRequireDefault(require_isSameSecond());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isThisSecond(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(Date.now(), dirtyDate);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisWeek/index.js
var require_isThisWeek = __commonJS({
  "node_modules/date-fns/isThisWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisWeek;
    var _index = _interopRequireDefault(require_isSameWeek());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isThisWeek(dirtyDate, options) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, Date.now(), options);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThisYear/index.js
var require_isThisYear = __commonJS({
  "node_modules/date-fns/isThisYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThisYear;
    var _index = _interopRequireDefault(require_isSameYear());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isThisYear(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, Date.now());
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isThursday/index.js
var require_isThursday = __commonJS({
  "node_modules/date-fns/isThursday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isThursday;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isThursday(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getDay() === 4;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isToday/index.js
var require_isToday = __commonJS({
  "node_modules/date-fns/isToday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isToday;
    var _index = _interopRequireDefault(require_isSameDay());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isToday(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, Date.now());
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isTomorrow/index.js
var require_isTomorrow = __commonJS({
  "node_modules/date-fns/isTomorrow/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isTomorrow;
    var _index = _interopRequireDefault(require_addDays());
    var _index2 = _interopRequireDefault(require_isSameDay());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function isTomorrow(dirtyDate) {
      (0, _index3.default)(1, arguments);
      return (0, _index2.default)(dirtyDate, (0, _index.default)(Date.now(), 1));
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isTuesday/index.js
var require_isTuesday = __commonJS({
  "node_modules/date-fns/isTuesday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isTuesday;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isTuesday(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getDay() === 2;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isWednesday/index.js
var require_isWednesday = __commonJS({
  "node_modules/date-fns/isWednesday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isWednesday;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isWednesday(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate).getDay() === 3;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isWithinInterval/index.js
var require_isWithinInterval = __commonJS({
  "node_modules/date-fns/isWithinInterval/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isWithinInterval;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function isWithinInterval(dirtyDate, interval) {
      (0, _index2.default)(2, arguments);
      var time = (0, _index.default)(dirtyDate).getTime();
      var startTime = (0, _index.default)(interval.start).getTime();
      var endTime = (0, _index.default)(interval.end).getTime();
      if (!(startTime <= endTime)) {
        throw new RangeError("Invalid interval");
      }
      return time >= startTime && time <= endTime;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subDays/index.js
var require_subDays = __commonJS({
  "node_modules/date-fns/subDays/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subDays;
    var _index = _interopRequireDefault(require_addDays());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = _interopRequireDefault(require_toInteger());
    function subDays(dirtyDate, dirtyAmount) {
      (0, _index2.default)(2, arguments);
      var amount = (0, _index3.default)(dirtyAmount);
      return (0, _index.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/isYesterday/index.js
var require_isYesterday = __commonJS({
  "node_modules/date-fns/isYesterday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isYesterday;
    var _index = _interopRequireDefault(require_isSameDay());
    var _index2 = _interopRequireDefault(require_subDays());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function isYesterday(dirtyDate) {
      (0, _index3.default)(1, arguments);
      return (0, _index.default)(dirtyDate, (0, _index2.default)(Date.now(), 1));
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lastDayOfDecade/index.js
var require_lastDayOfDecade = __commonJS({
  "node_modules/date-fns/lastDayOfDecade/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lastDayOfDecade;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function lastDayOfDecade(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      var decade = 9 + Math.floor(year / 10) * 10;
      date.setFullYear(decade + 1, 0, 0);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lastDayOfWeek/index.js
var require_lastDayOfWeek = __commonJS({
  "node_modules/date-fns/lastDayOfWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lastDayOfWeek;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_toInteger());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    var _index4 = require_defaultOptions();
    function lastDayOfWeek(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      (0, _index3.default)(1, arguments);
      var defaultOptions = (0, _index4.getDefaultOptions)();
      var weekStartsOn = (0, _index2.default)((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6");
      }
      var date = (0, _index.default)(dirtyDate);
      var day = date.getDay();
      var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
      date.setHours(0, 0, 0, 0);
      date.setDate(date.getDate() + diff);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lastDayOfISOWeek/index.js
var require_lastDayOfISOWeek = __commonJS({
  "node_modules/date-fns/lastDayOfISOWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lastDayOfISOWeek;
    var _index = _interopRequireDefault(require_lastDayOfWeek());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function lastDayOfISOWeek(dirtyDate) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(dirtyDate, {
        weekStartsOn: 1
      });
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lastDayOfISOWeekYear/index.js
var require_lastDayOfISOWeekYear = __commonJS({
  "node_modules/date-fns/lastDayOfISOWeekYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lastDayOfISOWeekYear;
    var _index = _interopRequireDefault(require_getISOWeekYear());
    var _index2 = _interopRequireDefault(require_startOfISOWeek());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function lastDayOfISOWeekYear(dirtyDate) {
      (0, _index3.default)(1, arguments);
      var year = (0, _index.default)(dirtyDate);
      var fourthOfJanuary = /* @__PURE__ */ new Date(0);
      fourthOfJanuary.setFullYear(year + 1, 0, 4);
      fourthOfJanuary.setHours(0, 0, 0, 0);
      var date = (0, _index2.default)(fourthOfJanuary);
      date.setDate(date.getDate() - 1);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lastDayOfQuarter/index.js
var require_lastDayOfQuarter = __commonJS({
  "node_modules/date-fns/lastDayOfQuarter/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lastDayOfQuarter;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function lastDayOfQuarter(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var currentMonth = date.getMonth();
      var month = currentMonth - currentMonth % 3 + 3;
      date.setMonth(month, 0);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lastDayOfYear/index.js
var require_lastDayOfYear = __commonJS({
  "node_modules/date-fns/lastDayOfYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lastDayOfYear;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function lastDayOfYear(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      date.setFullYear(year + 1, 0, 0);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/lightFormat/index.js
var require_lightFormat = __commonJS({
  "node_modules/date-fns/lightFormat/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = lightFormat;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_lightFormatters());
    var _index3 = _interopRequireDefault(require_getTimezoneOffsetInMilliseconds());
    var _index4 = _interopRequireDefault(require_isValid());
    var _index5 = _interopRequireDefault(require_subMilliseconds());
    var _index6 = _interopRequireDefault(require_requiredArgs());
    var formattingTokensRegExp = /(\w)\1*|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    function lightFormat(dirtyDate, formatStr) {
      (0, _index6.default)(2, arguments);
      var originalDate = (0, _index.default)(dirtyDate);
      if (!(0, _index4.default)(originalDate)) {
        throw new RangeError("Invalid time value");
      }
      var timezoneOffset = (0, _index3.default)(originalDate);
      var utcDate = (0, _index5.default)(originalDate, timezoneOffset);
      var tokens = formatStr.match(formattingTokensRegExp);
      if (!tokens) return "";
      var result = tokens.map(function(substring) {
        if (substring === "''") {
          return "'";
        }
        var firstCharacter = substring[0];
        if (firstCharacter === "'") {
          return cleanEscapedString(substring);
        }
        var formatter = _index2.default[firstCharacter];
        if (formatter) {
          return formatter(utcDate, substring);
        }
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        return substring;
      }).join("");
      return result;
    }
    function cleanEscapedString(input) {
      var matches = input.match(escapedStringRegExp);
      if (!matches) {
        return input;
      }
      return matches[1].replace(doubleQuoteRegExp, "'");
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/milliseconds/index.js
var require_milliseconds = __commonJS({
  "node_modules/date-fns/milliseconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = milliseconds;
    var _index = _interopRequireDefault(require_requiredArgs());
    var daysInYear = 365.2425;
    function milliseconds(_ref) {
      var years = _ref.years, months = _ref.months, weeks = _ref.weeks, days = _ref.days, hours = _ref.hours, minutes = _ref.minutes, seconds = _ref.seconds;
      (0, _index.default)(1, arguments);
      var totalDays = 0;
      if (years) totalDays += years * daysInYear;
      if (months) totalDays += months * (daysInYear / 12);
      if (weeks) totalDays += weeks * 7;
      if (days) totalDays += days;
      var totalSeconds = totalDays * 24 * 60 * 60;
      if (hours) totalSeconds += hours * 60 * 60;
      if (minutes) totalSeconds += minutes * 60;
      if (seconds) totalSeconds += seconds;
      return Math.round(totalSeconds * 1e3);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/millisecondsToHours/index.js
var require_millisecondsToHours = __commonJS({
  "node_modules/date-fns/millisecondsToHours/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = millisecondsToHours;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function millisecondsToHours(milliseconds) {
      (0, _index.default)(1, arguments);
      var hours = milliseconds / _index2.millisecondsInHour;
      return Math.floor(hours);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/millisecondsToMinutes/index.js
var require_millisecondsToMinutes = __commonJS({
  "node_modules/date-fns/millisecondsToMinutes/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = millisecondsToMinutes;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function millisecondsToMinutes(milliseconds) {
      (0, _index.default)(1, arguments);
      var minutes = milliseconds / _index2.millisecondsInMinute;
      return Math.floor(minutes);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/millisecondsToSeconds/index.js
var require_millisecondsToSeconds = __commonJS({
  "node_modules/date-fns/millisecondsToSeconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = millisecondsToSeconds;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function millisecondsToSeconds(milliseconds) {
      (0, _index.default)(1, arguments);
      var seconds = milliseconds / _index2.millisecondsInSecond;
      return Math.floor(seconds);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/minutesToHours/index.js
var require_minutesToHours = __commonJS({
  "node_modules/date-fns/minutesToHours/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = minutesToHours;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function minutesToHours(minutes) {
      (0, _index.default)(1, arguments);
      var hours = minutes / _index2.minutesInHour;
      return Math.floor(hours);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/minutesToMilliseconds/index.js
var require_minutesToMilliseconds = __commonJS({
  "node_modules/date-fns/minutesToMilliseconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = minutesToMilliseconds;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function minutesToMilliseconds(minutes) {
      (0, _index.default)(1, arguments);
      return Math.floor(minutes * _index2.millisecondsInMinute);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/minutesToSeconds/index.js
var require_minutesToSeconds = __commonJS({
  "node_modules/date-fns/minutesToSeconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = minutesToSeconds;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function minutesToSeconds(minutes) {
      (0, _index.default)(1, arguments);
      return Math.floor(minutes * _index2.secondsInMinute);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/monthsToQuarters/index.js
var require_monthsToQuarters = __commonJS({
  "node_modules/date-fns/monthsToQuarters/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = monthsToQuarters;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function monthsToQuarters(months) {
      (0, _index.default)(1, arguments);
      var quarters = months / _index2.monthsInQuarter;
      return Math.floor(quarters);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/monthsToYears/index.js
var require_monthsToYears = __commonJS({
  "node_modules/date-fns/monthsToYears/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = monthsToYears;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function monthsToYears(months) {
      (0, _index.default)(1, arguments);
      var years = months / _index2.monthsInYear;
      return Math.floor(years);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextDay/index.js
var require_nextDay = __commonJS({
  "node_modules/date-fns/nextDay/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextDay;
    var _index = _interopRequireDefault(require_addDays());
    var _index2 = _interopRequireDefault(require_getDay());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function nextDay(date, day) {
      (0, _index3.default)(2, arguments);
      var delta = day - (0, _index2.default)(date);
      if (delta <= 0) delta += 7;
      return (0, _index.default)(date, delta);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextFriday/index.js
var require_nextFriday = __commonJS({
  "node_modules/date-fns/nextFriday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextFriday;
    var _index = _interopRequireDefault(require_nextDay());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function nextFriday(date) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(date, 5);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextMonday/index.js
var require_nextMonday = __commonJS({
  "node_modules/date-fns/nextMonday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextMonday;
    var _index = _interopRequireDefault(require_nextDay());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function nextMonday(date) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(date, 1);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextSaturday/index.js
var require_nextSaturday = __commonJS({
  "node_modules/date-fns/nextSaturday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextSaturday;
    var _index = _interopRequireDefault(require_nextDay());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function nextSaturday(date) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(date, 6);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextSunday/index.js
var require_nextSunday = __commonJS({
  "node_modules/date-fns/nextSunday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextSunday;
    var _index = _interopRequireDefault(require_nextDay());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function nextSunday(date) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(date, 0);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextThursday/index.js
var require_nextThursday = __commonJS({
  "node_modules/date-fns/nextThursday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextThursday;
    var _index = _interopRequireDefault(require_nextDay());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function nextThursday(date) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(date, 4);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextTuesday/index.js
var require_nextTuesday = __commonJS({
  "node_modules/date-fns/nextTuesday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextTuesday;
    var _index = _interopRequireDefault(require_nextDay());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function nextTuesday(date) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(date, 2);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/nextWednesday/index.js
var require_nextWednesday = __commonJS({
  "node_modules/date-fns/nextWednesday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = nextWednesday;
    var _index = _interopRequireDefault(require_nextDay());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function nextWednesday(date) {
      (0, _index2.default)(1, arguments);
      return (0, _index.default)(date, 3);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/parseISO/index.js
var require_parseISO = __commonJS({
  "node_modules/date-fns/parseISO/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = parseISO3;
    var _index = require_constants();
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = _interopRequireDefault(require_toInteger());
    function parseISO3(argument, options) {
      var _options$additionalDi;
      (0, _index2.default)(1, arguments);
      var additionalDigits = (0, _index3.default)((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
      if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
        throw new RangeError("additionalDigits must be 0, 1 or 2");
      }
      if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
        return /* @__PURE__ */ new Date(NaN);
      }
      var dateStrings = splitDateString(argument);
      var date;
      if (dateStrings.date) {
        var parseYearResult = parseYear(dateStrings.date, additionalDigits);
        date = parseDate(parseYearResult.restDateString, parseYearResult.year);
      }
      if (!date || isNaN(date.getTime())) {
        return /* @__PURE__ */ new Date(NaN);
      }
      var timestamp = date.getTime();
      var time = 0;
      var offset;
      if (dateStrings.time) {
        time = parseTime(dateStrings.time);
        if (isNaN(time)) {
          return /* @__PURE__ */ new Date(NaN);
        }
      }
      if (dateStrings.timezone) {
        offset = parseTimezone(dateStrings.timezone);
        if (isNaN(offset)) {
          return /* @__PURE__ */ new Date(NaN);
        }
      } else {
        var dirtyDate = new Date(timestamp + time);
        var result = /* @__PURE__ */ new Date(0);
        result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
        result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
        return result;
      }
      return new Date(timestamp + time + offset);
    }
    var patterns = {
      dateTimeDelimiter: /[T ]/,
      timeZoneDelimiter: /[Z ]/i,
      timezone: /([Z+-].*)$/
    };
    var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
    var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
    var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
    function splitDateString(dateString) {
      var dateStrings = {};
      var array = dateString.split(patterns.dateTimeDelimiter);
      var timeString;
      if (array.length > 2) {
        return dateStrings;
      }
      if (/:/.test(array[0])) {
        timeString = array[0];
      } else {
        dateStrings.date = array[0];
        timeString = array[1];
        if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
          dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
          timeString = dateString.substr(dateStrings.date.length, dateString.length);
        }
      }
      if (timeString) {
        var token = patterns.timezone.exec(timeString);
        if (token) {
          dateStrings.time = timeString.replace(token[1], "");
          dateStrings.timezone = token[1];
        } else {
          dateStrings.time = timeString;
        }
      }
      return dateStrings;
    }
    function parseYear(dateString, additionalDigits) {
      var regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
      var captures = dateString.match(regex);
      if (!captures) return {
        year: NaN,
        restDateString: ""
      };
      var year = captures[1] ? parseInt(captures[1]) : null;
      var century = captures[2] ? parseInt(captures[2]) : null;
      return {
        year: century === null ? year : century * 100,
        restDateString: dateString.slice((captures[1] || captures[2]).length)
      };
    }
    function parseDate(dateString, year) {
      if (year === null) return /* @__PURE__ */ new Date(NaN);
      var captures = dateString.match(dateRegex);
      if (!captures) return /* @__PURE__ */ new Date(NaN);
      var isWeekDate = !!captures[4];
      var dayOfYear = parseDateUnit(captures[1]);
      var month = parseDateUnit(captures[2]) - 1;
      var day = parseDateUnit(captures[3]);
      var week = parseDateUnit(captures[4]);
      var dayOfWeek = parseDateUnit(captures[5]) - 1;
      if (isWeekDate) {
        if (!validateWeekDate(year, week, dayOfWeek)) {
          return /* @__PURE__ */ new Date(NaN);
        }
        return dayOfISOWeekYear(year, week, dayOfWeek);
      } else {
        var date = /* @__PURE__ */ new Date(0);
        if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
          return /* @__PURE__ */ new Date(NaN);
        }
        date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
        return date;
      }
    }
    function parseDateUnit(value) {
      return value ? parseInt(value) : 1;
    }
    function parseTime(timeString) {
      var captures = timeString.match(timeRegex);
      if (!captures) return NaN;
      var hours = parseTimeUnit(captures[1]);
      var minutes = parseTimeUnit(captures[2]);
      var seconds = parseTimeUnit(captures[3]);
      if (!validateTime(hours, minutes, seconds)) {
        return NaN;
      }
      return hours * _index.millisecondsInHour + minutes * _index.millisecondsInMinute + seconds * 1e3;
    }
    function parseTimeUnit(value) {
      return value && parseFloat(value.replace(",", ".")) || 0;
    }
    function parseTimezone(timezoneString) {
      if (timezoneString === "Z") return 0;
      var captures = timezoneString.match(timezoneRegex);
      if (!captures) return 0;
      var sign = captures[1] === "+" ? -1 : 1;
      var hours = parseInt(captures[2]);
      var minutes = captures[3] && parseInt(captures[3]) || 0;
      if (!validateTimezone(hours, minutes)) {
        return NaN;
      }
      return sign * (hours * _index.millisecondsInHour + minutes * _index.millisecondsInMinute);
    }
    function dayOfISOWeekYear(isoWeekYear, week, day) {
      var date = /* @__PURE__ */ new Date(0);
      date.setUTCFullYear(isoWeekYear, 0, 4);
      var fourthOfJanuaryDay = date.getUTCDay() || 7;
      var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
      date.setUTCDate(date.getUTCDate() + diff);
      return date;
    }
    var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    function isLeapYearIndex(year) {
      return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    }
    function validateDate(year, month, date) {
      return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
    }
    function validateDayOfYearDate(year, dayOfYear) {
      return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
    }
    function validateWeekDate(_year, week, day) {
      return week >= 1 && week <= 53 && day >= 0 && day <= 6;
    }
    function validateTime(hours, minutes, seconds) {
      if (hours === 24) {
        return minutes === 0 && seconds === 0;
      }
      return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
    }
    function validateTimezone(_hours, minutes) {
      return minutes >= 0 && minutes <= 59;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/parseJSON/index.js
var require_parseJSON = __commonJS({
  "node_modules/date-fns/parseJSON/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = parseJSON;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function parseJSON(argument) {
      (0, _index2.default)(1, arguments);
      if (typeof argument === "string") {
        var parts = argument.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);
        if (parts) {
          return new Date(Date.UTC(+parts[1], +parts[2] - 1, +parts[3], +parts[4] - (+parts[9] || 0) * (parts[8] == "-" ? -1 : 1), +parts[5] - (+parts[10] || 0) * (parts[8] == "-" ? -1 : 1), +parts[6], +((parts[7] || "0") + "00").substring(0, 3)));
        }
        return /* @__PURE__ */ new Date(NaN);
      }
      return (0, _index.default)(argument);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/previousDay/index.js
var require_previousDay = __commonJS({
  "node_modules/date-fns/previousDay/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = previousDay;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_getDay());
    var _index3 = _interopRequireDefault(require_subDays());
    function previousDay(date, day) {
      (0, _index.default)(2, arguments);
      var delta = (0, _index2.default)(date) - day;
      if (delta <= 0) delta += 7;
      return (0, _index3.default)(date, delta);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/previousFriday/index.js
var require_previousFriday = __commonJS({
  "node_modules/date-fns/previousFriday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = previousFriday;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_previousDay());
    function previousFriday(date) {
      (0, _index.default)(1, arguments);
      return (0, _index2.default)(date, 5);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/previousMonday/index.js
var require_previousMonday = __commonJS({
  "node_modules/date-fns/previousMonday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = previousMonday;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_previousDay());
    function previousMonday(date) {
      (0, _index.default)(1, arguments);
      return (0, _index2.default)(date, 1);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/previousSaturday/index.js
var require_previousSaturday = __commonJS({
  "node_modules/date-fns/previousSaturday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = previousSaturday;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_previousDay());
    function previousSaturday(date) {
      (0, _index.default)(1, arguments);
      return (0, _index2.default)(date, 6);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/previousSunday/index.js
var require_previousSunday = __commonJS({
  "node_modules/date-fns/previousSunday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = previousSunday;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_previousDay());
    function previousSunday(date) {
      (0, _index.default)(1, arguments);
      return (0, _index2.default)(date, 0);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/previousThursday/index.js
var require_previousThursday = __commonJS({
  "node_modules/date-fns/previousThursday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = previousThursday;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_previousDay());
    function previousThursday(date) {
      (0, _index.default)(1, arguments);
      return (0, _index2.default)(date, 4);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/previousTuesday/index.js
var require_previousTuesday = __commonJS({
  "node_modules/date-fns/previousTuesday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = previousTuesday;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_previousDay());
    function previousTuesday(date) {
      (0, _index.default)(1, arguments);
      return (0, _index2.default)(date, 2);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/previousWednesday/index.js
var require_previousWednesday = __commonJS({
  "node_modules/date-fns/previousWednesday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = previousWednesday;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = _interopRequireDefault(require_previousDay());
    function previousWednesday(date) {
      (0, _index.default)(1, arguments);
      return (0, _index2.default)(date, 3);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/quartersToMonths/index.js
var require_quartersToMonths = __commonJS({
  "node_modules/date-fns/quartersToMonths/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = quartersToMonths;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function quartersToMonths(quarters) {
      (0, _index.default)(1, arguments);
      return Math.floor(quarters * _index2.monthsInQuarter);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/quartersToYears/index.js
var require_quartersToYears = __commonJS({
  "node_modules/date-fns/quartersToYears/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = quartersToYears;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function quartersToYears(quarters) {
      (0, _index.default)(1, arguments);
      var years = quarters / _index2.quartersInYear;
      return Math.floor(years);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/roundToNearestMinutes/index.js
var require_roundToNearestMinutes = __commonJS({
  "node_modules/date-fns/roundToNearestMinutes/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = roundToNearestMinutes;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = require_roundingMethods();
    var _index3 = _interopRequireDefault(require_toInteger());
    function roundToNearestMinutes(dirtyDate, options) {
      var _options$nearestTo;
      if (arguments.length < 1) {
        throw new TypeError("1 argument required, but only none provided present");
      }
      var nearestTo = (0, _index3.default)((_options$nearestTo = options === null || options === void 0 ? void 0 : options.nearestTo) !== null && _options$nearestTo !== void 0 ? _options$nearestTo : 1);
      if (nearestTo < 1 || nearestTo > 30) {
        throw new RangeError("`options.nearestTo` must be between 1 and 30");
      }
      var date = (0, _index.default)(dirtyDate);
      var seconds = date.getSeconds();
      var minutes = date.getMinutes() + seconds / 60;
      var roundingMethod = (0, _index2.getRoundingMethod)(options === null || options === void 0 ? void 0 : options.roundingMethod);
      var roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;
      var remainderMinutes = minutes % nearestTo;
      var addedMinutes = Math.round(remainderMinutes / nearestTo) * nearestTo;
      return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), roundedMinutes + addedMinutes);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/secondsToHours/index.js
var require_secondsToHours = __commonJS({
  "node_modules/date-fns/secondsToHours/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = secondsToHours;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function secondsToHours(seconds) {
      (0, _index.default)(1, arguments);
      var hours = seconds / _index2.secondsInHour;
      return Math.floor(hours);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/secondsToMilliseconds/index.js
var require_secondsToMilliseconds = __commonJS({
  "node_modules/date-fns/secondsToMilliseconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = secondsToMilliseconds;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function secondsToMilliseconds(seconds) {
      (0, _index.default)(1, arguments);
      return seconds * _index2.millisecondsInSecond;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/secondsToMinutes/index.js
var require_secondsToMinutes = __commonJS({
  "node_modules/date-fns/secondsToMinutes/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = secondsToMinutes;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function secondsToMinutes(seconds) {
      (0, _index.default)(1, arguments);
      var minutes = seconds / _index2.secondsInMinute;
      return Math.floor(minutes);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setMonth/index.js
var require_setMonth = __commonJS({
  "node_modules/date-fns/setMonth/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setMonth;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_getDaysInMonth());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function setMonth(dirtyDate, dirtyMonth) {
      (0, _index4.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var month = (0, _index.default)(dirtyMonth);
      var year = date.getFullYear();
      var day = date.getDate();
      var dateWithDesiredMonth = /* @__PURE__ */ new Date(0);
      dateWithDesiredMonth.setFullYear(year, month, 15);
      dateWithDesiredMonth.setHours(0, 0, 0, 0);
      var daysInMonth = (0, _index3.default)(dateWithDesiredMonth);
      date.setMonth(month, Math.min(day, daysInMonth));
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/set/index.js
var require_set = __commonJS({
  "node_modules/date-fns/set/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = set;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_setMonth());
    var _index3 = _interopRequireDefault(require_toInteger());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function set(dirtyDate, values) {
      (0, _index4.default)(2, arguments);
      if ((0, _typeof2.default)(values) !== "object" || values === null) {
        throw new RangeError("values parameter must be an object");
      }
      var date = (0, _index.default)(dirtyDate);
      if (isNaN(date.getTime())) {
        return /* @__PURE__ */ new Date(NaN);
      }
      if (values.year != null) {
        date.setFullYear(values.year);
      }
      if (values.month != null) {
        date = (0, _index2.default)(date, values.month);
      }
      if (values.date != null) {
        date.setDate((0, _index3.default)(values.date));
      }
      if (values.hours != null) {
        date.setHours((0, _index3.default)(values.hours));
      }
      if (values.minutes != null) {
        date.setMinutes((0, _index3.default)(values.minutes));
      }
      if (values.seconds != null) {
        date.setSeconds((0, _index3.default)(values.seconds));
      }
      if (values.milliseconds != null) {
        date.setMilliseconds((0, _index3.default)(values.milliseconds));
      }
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setDate/index.js
var require_setDate = __commonJS({
  "node_modules/date-fns/setDate/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setDate;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function setDate(dirtyDate, dirtyDayOfMonth) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var dayOfMonth = (0, _index.default)(dirtyDayOfMonth);
      date.setDate(dayOfMonth);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setDay/index.js
var require_setDay = __commonJS({
  "node_modules/date-fns/setDay/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setDay;
    var _index = _interopRequireDefault(require_addDays());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_toInteger());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    var _index5 = require_defaultOptions();
    function setDay(dirtyDate, dirtyDay, options) {
      var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      (0, _index4.default)(2, arguments);
      var defaultOptions = (0, _index5.getDefaultOptions)();
      var weekStartsOn = (0, _index3.default)((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
      }
      var date = (0, _index2.default)(dirtyDate);
      var day = (0, _index3.default)(dirtyDay);
      var currentDay = date.getDay();
      var remainder = day % 7;
      var dayIndex = (remainder + 7) % 7;
      var delta = 7 - weekStartsOn;
      var diff = day < 0 || day > 6 ? day - (currentDay + delta) % 7 : (dayIndex + delta) % 7 - (currentDay + delta) % 7;
      return (0, _index.default)(date, diff);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setDayOfYear/index.js
var require_setDayOfYear = __commonJS({
  "node_modules/date-fns/setDayOfYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setDayOfYear;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function setDayOfYear(dirtyDate, dirtyDayOfYear) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var dayOfYear = (0, _index.default)(dirtyDayOfYear);
      date.setMonth(0);
      date.setDate(dayOfYear);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setDefaultOptions/index.js
var require_setDefaultOptions = __commonJS({
  "node_modules/date-fns/setDefaultOptions/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setDefaultOptions;
    var _index = require_defaultOptions();
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function setDefaultOptions(newOptions) {
      (0, _index2.default)(1, arguments);
      var result = {};
      var defaultOptions = (0, _index.getDefaultOptions)();
      for (var property in defaultOptions) {
        if (Object.prototype.hasOwnProperty.call(defaultOptions, property)) {
          ;
          result[property] = defaultOptions[property];
        }
      }
      for (var _property in newOptions) {
        if (Object.prototype.hasOwnProperty.call(newOptions, _property)) {
          if (newOptions[_property] === void 0) {
            delete result[_property];
          } else {
            ;
            result[_property] = newOptions[_property];
          }
        }
      }
      (0, _index.setDefaultOptions)(result);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setHours/index.js
var require_setHours = __commonJS({
  "node_modules/date-fns/setHours/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setHours;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function setHours(dirtyDate, dirtyHours) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var hours = (0, _index.default)(dirtyHours);
      date.setHours(hours);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setISODay/index.js
var require_setISODay = __commonJS({
  "node_modules/date-fns/setISODay/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setISODay;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_addDays());
    var _index4 = _interopRequireDefault(require_getISODay());
    var _index5 = _interopRequireDefault(require_requiredArgs());
    function setISODay(dirtyDate, dirtyDay) {
      (0, _index5.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var day = (0, _index.default)(dirtyDay);
      var currentDay = (0, _index4.default)(date);
      var diff = day - currentDay;
      return (0, _index3.default)(date, diff);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setISOWeek/index.js
var require_setISOWeek = __commonJS({
  "node_modules/date-fns/setISOWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setISOWeek;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_getISOWeek());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function setISOWeek(dirtyDate, dirtyISOWeek) {
      (0, _index4.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var isoWeek = (0, _index.default)(dirtyISOWeek);
      var diff = (0, _index3.default)(date) - isoWeek;
      date.setDate(date.getDate() - diff * 7);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setMilliseconds/index.js
var require_setMilliseconds = __commonJS({
  "node_modules/date-fns/setMilliseconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setMilliseconds;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function setMilliseconds(dirtyDate, dirtyMilliseconds) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var milliseconds = (0, _index.default)(dirtyMilliseconds);
      date.setMilliseconds(milliseconds);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setMinutes/index.js
var require_setMinutes = __commonJS({
  "node_modules/date-fns/setMinutes/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setMinutes;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function setMinutes(dirtyDate, dirtyMinutes) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var minutes = (0, _index.default)(dirtyMinutes);
      date.setMinutes(minutes);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setQuarter/index.js
var require_setQuarter = __commonJS({
  "node_modules/date-fns/setQuarter/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setQuarter;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_setMonth());
    var _index4 = _interopRequireDefault(require_requiredArgs());
    function setQuarter(dirtyDate, dirtyQuarter) {
      (0, _index4.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var quarter = (0, _index.default)(dirtyQuarter);
      var oldQuarter = Math.floor(date.getMonth() / 3) + 1;
      var diff = quarter - oldQuarter;
      return (0, _index3.default)(date, date.getMonth() + diff * 3);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setSeconds/index.js
var require_setSeconds = __commonJS({
  "node_modules/date-fns/setSeconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setSeconds;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function setSeconds(dirtyDate, dirtySeconds) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var seconds = (0, _index.default)(dirtySeconds);
      date.setSeconds(seconds);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setWeek/index.js
var require_setWeek = __commonJS({
  "node_modules/date-fns/setWeek/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setWeek;
    var _index = _interopRequireDefault(require_getWeek());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    var _index4 = _interopRequireDefault(require_toInteger());
    function setWeek(dirtyDate, dirtyWeek, options) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var week = (0, _index4.default)(dirtyWeek);
      var diff = (0, _index.default)(date, options) - week;
      date.setDate(date.getDate() - diff * 7);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setWeekYear/index.js
var require_setWeekYear = __commonJS({
  "node_modules/date-fns/setWeekYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setWeekYear;
    var _index = _interopRequireDefault(require_differenceInCalendarDays());
    var _index2 = _interopRequireDefault(require_startOfWeekYear());
    var _index3 = _interopRequireDefault(require_toDate());
    var _index4 = _interopRequireDefault(require_toInteger());
    var _index5 = _interopRequireDefault(require_requiredArgs());
    var _index6 = require_defaultOptions();
    function setWeekYear(dirtyDate, dirtyWeekYear, options) {
      var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      (0, _index5.default)(2, arguments);
      var defaultOptions = (0, _index6.getDefaultOptions)();
      var firstWeekContainsDate = (0, _index4.default)((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
      var date = (0, _index3.default)(dirtyDate);
      var weekYear = (0, _index4.default)(dirtyWeekYear);
      var diff = (0, _index.default)(date, (0, _index2.default)(date, options));
      var firstWeek = /* @__PURE__ */ new Date(0);
      firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);
      firstWeek.setHours(0, 0, 0, 0);
      date = (0, _index2.default)(firstWeek, options);
      date.setDate(date.getDate() + diff);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/setYear/index.js
var require_setYear = __commonJS({
  "node_modules/date-fns/setYear/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = setYear;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_toDate());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function setYear(dirtyDate, dirtyYear) {
      (0, _index3.default)(2, arguments);
      var date = (0, _index2.default)(dirtyDate);
      var year = (0, _index.default)(dirtyYear);
      if (isNaN(date.getTime())) {
        return /* @__PURE__ */ new Date(NaN);
      }
      date.setFullYear(year);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfDecade/index.js
var require_startOfDecade = __commonJS({
  "node_modules/date-fns/startOfDecade/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfDecade;
    var _index = _interopRequireDefault(require_toDate());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    function startOfDecade(dirtyDate) {
      (0, _index2.default)(1, arguments);
      var date = (0, _index.default)(dirtyDate);
      var year = date.getFullYear();
      var decade = Math.floor(year / 10) * 10;
      date.setFullYear(decade, 0, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfToday/index.js
var require_startOfToday = __commonJS({
  "node_modules/date-fns/startOfToday/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfToday;
    var _index = _interopRequireDefault(require_startOfDay());
    function startOfToday() {
      return (0, _index.default)(Date.now());
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfTomorrow/index.js
var require_startOfTomorrow = __commonJS({
  "node_modules/date-fns/startOfTomorrow/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfTomorrow2;
    function startOfTomorrow2() {
      var now = /* @__PURE__ */ new Date();
      var year = now.getFullYear();
      var month = now.getMonth();
      var day = now.getDate();
      var date = /* @__PURE__ */ new Date(0);
      date.setFullYear(year, month, day + 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/startOfYesterday/index.js
var require_startOfYesterday = __commonJS({
  "node_modules/date-fns/startOfYesterday/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = startOfYesterday;
    function startOfYesterday() {
      var now = /* @__PURE__ */ new Date();
      var year = now.getFullYear();
      var month = now.getMonth();
      var day = now.getDate();
      var date = /* @__PURE__ */ new Date(0);
      date.setFullYear(year, month, day - 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subMonths/index.js
var require_subMonths = __commonJS({
  "node_modules/date-fns/subMonths/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subMonths;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addMonths());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function subMonths(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/sub/index.js
var require_sub = __commonJS({
  "node_modules/date-fns/sub/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = sub;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _index = _interopRequireDefault(require_subDays());
    var _index2 = _interopRequireDefault(require_subMonths());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    var _index4 = _interopRequireDefault(require_toInteger());
    function sub(date, duration) {
      (0, _index3.default)(2, arguments);
      if (!duration || (0, _typeof2.default)(duration) !== "object") return /* @__PURE__ */ new Date(NaN);
      var years = duration.years ? (0, _index4.default)(duration.years) : 0;
      var months = duration.months ? (0, _index4.default)(duration.months) : 0;
      var weeks = duration.weeks ? (0, _index4.default)(duration.weeks) : 0;
      var days = duration.days ? (0, _index4.default)(duration.days) : 0;
      var hours = duration.hours ? (0, _index4.default)(duration.hours) : 0;
      var minutes = duration.minutes ? (0, _index4.default)(duration.minutes) : 0;
      var seconds = duration.seconds ? (0, _index4.default)(duration.seconds) : 0;
      var dateWithoutMonths = (0, _index2.default)(date, months + years * 12);
      var dateWithoutDays = (0, _index.default)(dateWithoutMonths, days + weeks * 7);
      var minutestoSub = minutes + hours * 60;
      var secondstoSub = seconds + minutestoSub * 60;
      var mstoSub = secondstoSub * 1e3;
      var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);
      return finalDate;
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subBusinessDays/index.js
var require_subBusinessDays = __commonJS({
  "node_modules/date-fns/subBusinessDays/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subBusinessDays;
    var _index = _interopRequireDefault(require_addBusinessDays());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = _interopRequireDefault(require_toInteger());
    function subBusinessDays(dirtyDate, dirtyAmount) {
      (0, _index2.default)(2, arguments);
      var amount = (0, _index3.default)(dirtyAmount);
      return (0, _index.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subHours/index.js
var require_subHours = __commonJS({
  "node_modules/date-fns/subHours/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subHours;
    var _index = _interopRequireDefault(require_addHours());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = _interopRequireDefault(require_toInteger());
    function subHours(dirtyDate, dirtyAmount) {
      (0, _index2.default)(2, arguments);
      var amount = (0, _index3.default)(dirtyAmount);
      return (0, _index.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subMinutes/index.js
var require_subMinutes = __commonJS({
  "node_modules/date-fns/subMinutes/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subMinutes;
    var _index = _interopRequireDefault(require_addMinutes());
    var _index2 = _interopRequireDefault(require_requiredArgs());
    var _index3 = _interopRequireDefault(require_toInteger());
    function subMinutes(dirtyDate, dirtyAmount) {
      (0, _index2.default)(2, arguments);
      var amount = (0, _index3.default)(dirtyAmount);
      return (0, _index.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subQuarters/index.js
var require_subQuarters = __commonJS({
  "node_modules/date-fns/subQuarters/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subQuarters;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addQuarters());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function subQuarters(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subSeconds/index.js
var require_subSeconds = __commonJS({
  "node_modules/date-fns/subSeconds/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subSeconds;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addSeconds());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function subSeconds(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subWeeks/index.js
var require_subWeeks = __commonJS({
  "node_modules/date-fns/subWeeks/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subWeeks;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addWeeks());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function subWeeks(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/subYears/index.js
var require_subYears = __commonJS({
  "node_modules/date-fns/subYears/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = subYears;
    var _index = _interopRequireDefault(require_toInteger());
    var _index2 = _interopRequireDefault(require_addYears());
    var _index3 = _interopRequireDefault(require_requiredArgs());
    function subYears(dirtyDate, dirtyAmount) {
      (0, _index3.default)(2, arguments);
      var amount = (0, _index.default)(dirtyAmount);
      return (0, _index2.default)(dirtyDate, -amount);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/weeksToDays/index.js
var require_weeksToDays = __commonJS({
  "node_modules/date-fns/weeksToDays/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = weeksToDays;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function weeksToDays(weeks) {
      (0, _index.default)(1, arguments);
      return Math.floor(weeks * _index2.daysInWeek);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/yearsToMonths/index.js
var require_yearsToMonths = __commonJS({
  "node_modules/date-fns/yearsToMonths/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = yearsToMonths;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function yearsToMonths(years) {
      (0, _index.default)(1, arguments);
      return Math.floor(years * _index2.monthsInYear);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/yearsToQuarters/index.js
var require_yearsToQuarters = __commonJS({
  "node_modules/date-fns/yearsToQuarters/index.js"(exports2, module2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = yearsToQuarters;
    var _index = _interopRequireDefault(require_requiredArgs());
    var _index2 = require_constants();
    function yearsToQuarters(years) {
      (0, _index.default)(1, arguments);
      return Math.floor(years * _index2.quartersInYear);
    }
    module2.exports = exports2.default;
  }
});

// node_modules/date-fns/index.js
var require_date_fns = __commonJS({
  "node_modules/date-fns/index.js"(exports2) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _exportNames = {
      add: true,
      addBusinessDays: true,
      addDays: true,
      addHours: true,
      addISOWeekYears: true,
      addMilliseconds: true,
      addMinutes: true,
      addMonths: true,
      addQuarters: true,
      addSeconds: true,
      addWeeks: true,
      addYears: true,
      areIntervalsOverlapping: true,
      clamp: true,
      closestIndexTo: true,
      closestTo: true,
      compareAsc: true,
      compareDesc: true,
      daysToWeeks: true,
      differenceInBusinessDays: true,
      differenceInCalendarDays: true,
      differenceInCalendarISOWeekYears: true,
      differenceInCalendarISOWeeks: true,
      differenceInCalendarMonths: true,
      differenceInCalendarQuarters: true,
      differenceInCalendarWeeks: true,
      differenceInCalendarYears: true,
      differenceInDays: true,
      differenceInHours: true,
      differenceInISOWeekYears: true,
      differenceInMilliseconds: true,
      differenceInMinutes: true,
      differenceInMonths: true,
      differenceInQuarters: true,
      differenceInSeconds: true,
      differenceInWeeks: true,
      differenceInYears: true,
      eachDayOfInterval: true,
      eachHourOfInterval: true,
      eachMinuteOfInterval: true,
      eachMonthOfInterval: true,
      eachQuarterOfInterval: true,
      eachWeekOfInterval: true,
      eachWeekendOfInterval: true,
      eachWeekendOfMonth: true,
      eachWeekendOfYear: true,
      eachYearOfInterval: true,
      endOfDay: true,
      endOfDecade: true,
      endOfHour: true,
      endOfISOWeek: true,
      endOfISOWeekYear: true,
      endOfMinute: true,
      endOfMonth: true,
      endOfQuarter: true,
      endOfSecond: true,
      endOfToday: true,
      endOfTomorrow: true,
      endOfWeek: true,
      endOfYear: true,
      endOfYesterday: true,
      format: true,
      formatDistance: true,
      formatDistanceStrict: true,
      formatDistanceToNow: true,
      formatDistanceToNowStrict: true,
      formatDuration: true,
      formatISO: true,
      formatISO9075: true,
      formatISODuration: true,
      formatRFC3339: true,
      formatRFC7231: true,
      formatRelative: true,
      fromUnixTime: true,
      getDate: true,
      getDay: true,
      getDayOfYear: true,
      getDaysInMonth: true,
      getDaysInYear: true,
      getDecade: true,
      getDefaultOptions: true,
      getHours: true,
      getISODay: true,
      getISOWeek: true,
      getISOWeekYear: true,
      getISOWeeksInYear: true,
      getMilliseconds: true,
      getMinutes: true,
      getMonth: true,
      getOverlappingDaysInIntervals: true,
      getQuarter: true,
      getSeconds: true,
      getTime: true,
      getUnixTime: true,
      getWeek: true,
      getWeekOfMonth: true,
      getWeekYear: true,
      getWeeksInMonth: true,
      getYear: true,
      hoursToMilliseconds: true,
      hoursToMinutes: true,
      hoursToSeconds: true,
      intervalToDuration: true,
      intlFormat: true,
      intlFormatDistance: true,
      isAfter: true,
      isBefore: true,
      isDate: true,
      isEqual: true,
      isExists: true,
      isFirstDayOfMonth: true,
      isFriday: true,
      isFuture: true,
      isLastDayOfMonth: true,
      isLeapYear: true,
      isMatch: true,
      isMonday: true,
      isPast: true,
      isSameDay: true,
      isSameHour: true,
      isSameISOWeek: true,
      isSameISOWeekYear: true,
      isSameMinute: true,
      isSameMonth: true,
      isSameQuarter: true,
      isSameSecond: true,
      isSameWeek: true,
      isSameYear: true,
      isSaturday: true,
      isSunday: true,
      isThisHour: true,
      isThisISOWeek: true,
      isThisMinute: true,
      isThisMonth: true,
      isThisQuarter: true,
      isThisSecond: true,
      isThisWeek: true,
      isThisYear: true,
      isThursday: true,
      isToday: true,
      isTomorrow: true,
      isTuesday: true,
      isValid: true,
      isWednesday: true,
      isWeekend: true,
      isWithinInterval: true,
      isYesterday: true,
      lastDayOfDecade: true,
      lastDayOfISOWeek: true,
      lastDayOfISOWeekYear: true,
      lastDayOfMonth: true,
      lastDayOfQuarter: true,
      lastDayOfWeek: true,
      lastDayOfYear: true,
      lightFormat: true,
      max: true,
      milliseconds: true,
      millisecondsToHours: true,
      millisecondsToMinutes: true,
      millisecondsToSeconds: true,
      min: true,
      minutesToHours: true,
      minutesToMilliseconds: true,
      minutesToSeconds: true,
      monthsToQuarters: true,
      monthsToYears: true,
      nextDay: true,
      nextFriday: true,
      nextMonday: true,
      nextSaturday: true,
      nextSunday: true,
      nextThursday: true,
      nextTuesday: true,
      nextWednesday: true,
      parse: true,
      parseISO: true,
      parseJSON: true,
      previousDay: true,
      previousFriday: true,
      previousMonday: true,
      previousSaturday: true,
      previousSunday: true,
      previousThursday: true,
      previousTuesday: true,
      previousWednesday: true,
      quartersToMonths: true,
      quartersToYears: true,
      roundToNearestMinutes: true,
      secondsToHours: true,
      secondsToMilliseconds: true,
      secondsToMinutes: true,
      set: true,
      setDate: true,
      setDay: true,
      setDayOfYear: true,
      setDefaultOptions: true,
      setHours: true,
      setISODay: true,
      setISOWeek: true,
      setISOWeekYear: true,
      setMilliseconds: true,
      setMinutes: true,
      setMonth: true,
      setQuarter: true,
      setSeconds: true,
      setWeek: true,
      setWeekYear: true,
      setYear: true,
      startOfDay: true,
      startOfDecade: true,
      startOfHour: true,
      startOfISOWeek: true,
      startOfISOWeekYear: true,
      startOfMinute: true,
      startOfMonth: true,
      startOfQuarter: true,
      startOfSecond: true,
      startOfToday: true,
      startOfTomorrow: true,
      startOfWeek: true,
      startOfWeekYear: true,
      startOfYear: true,
      startOfYesterday: true,
      sub: true,
      subBusinessDays: true,
      subDays: true,
      subHours: true,
      subISOWeekYears: true,
      subMilliseconds: true,
      subMinutes: true,
      subMonths: true,
      subQuarters: true,
      subSeconds: true,
      subWeeks: true,
      subYears: true,
      toDate: true,
      weeksToDays: true,
      yearsToMonths: true,
      yearsToQuarters: true
    };
    Object.defineProperty(exports2, "add", {
      enumerable: true,
      get: function get() {
        return _index.default;
      }
    });
    Object.defineProperty(exports2, "addBusinessDays", {
      enumerable: true,
      get: function get() {
        return _index2.default;
      }
    });
    Object.defineProperty(exports2, "addDays", {
      enumerable: true,
      get: function get() {
        return _index3.default;
      }
    });
    Object.defineProperty(exports2, "addHours", {
      enumerable: true,
      get: function get() {
        return _index4.default;
      }
    });
    Object.defineProperty(exports2, "addISOWeekYears", {
      enumerable: true,
      get: function get() {
        return _index5.default;
      }
    });
    Object.defineProperty(exports2, "addMilliseconds", {
      enumerable: true,
      get: function get() {
        return _index6.default;
      }
    });
    Object.defineProperty(exports2, "addMinutes", {
      enumerable: true,
      get: function get() {
        return _index7.default;
      }
    });
    Object.defineProperty(exports2, "addMonths", {
      enumerable: true,
      get: function get() {
        return _index8.default;
      }
    });
    Object.defineProperty(exports2, "addQuarters", {
      enumerable: true,
      get: function get() {
        return _index9.default;
      }
    });
    Object.defineProperty(exports2, "addSeconds", {
      enumerable: true,
      get: function get() {
        return _index10.default;
      }
    });
    Object.defineProperty(exports2, "addWeeks", {
      enumerable: true,
      get: function get() {
        return _index11.default;
      }
    });
    Object.defineProperty(exports2, "addYears", {
      enumerable: true,
      get: function get() {
        return _index12.default;
      }
    });
    Object.defineProperty(exports2, "areIntervalsOverlapping", {
      enumerable: true,
      get: function get() {
        return _index13.default;
      }
    });
    Object.defineProperty(exports2, "clamp", {
      enumerable: true,
      get: function get() {
        return _index14.default;
      }
    });
    Object.defineProperty(exports2, "closestIndexTo", {
      enumerable: true,
      get: function get() {
        return _index15.default;
      }
    });
    Object.defineProperty(exports2, "closestTo", {
      enumerable: true,
      get: function get() {
        return _index16.default;
      }
    });
    Object.defineProperty(exports2, "compareAsc", {
      enumerable: true,
      get: function get() {
        return _index17.default;
      }
    });
    Object.defineProperty(exports2, "compareDesc", {
      enumerable: true,
      get: function get() {
        return _index18.default;
      }
    });
    Object.defineProperty(exports2, "daysToWeeks", {
      enumerable: true,
      get: function get() {
        return _index19.default;
      }
    });
    Object.defineProperty(exports2, "differenceInBusinessDays", {
      enumerable: true,
      get: function get() {
        return _index20.default;
      }
    });
    Object.defineProperty(exports2, "differenceInCalendarDays", {
      enumerable: true,
      get: function get() {
        return _index21.default;
      }
    });
    Object.defineProperty(exports2, "differenceInCalendarISOWeekYears", {
      enumerable: true,
      get: function get() {
        return _index22.default;
      }
    });
    Object.defineProperty(exports2, "differenceInCalendarISOWeeks", {
      enumerable: true,
      get: function get() {
        return _index23.default;
      }
    });
    Object.defineProperty(exports2, "differenceInCalendarMonths", {
      enumerable: true,
      get: function get() {
        return _index24.default;
      }
    });
    Object.defineProperty(exports2, "differenceInCalendarQuarters", {
      enumerable: true,
      get: function get() {
        return _index25.default;
      }
    });
    Object.defineProperty(exports2, "differenceInCalendarWeeks", {
      enumerable: true,
      get: function get() {
        return _index26.default;
      }
    });
    Object.defineProperty(exports2, "differenceInCalendarYears", {
      enumerable: true,
      get: function get() {
        return _index27.default;
      }
    });
    Object.defineProperty(exports2, "differenceInDays", {
      enumerable: true,
      get: function get() {
        return _index28.default;
      }
    });
    Object.defineProperty(exports2, "differenceInHours", {
      enumerable: true,
      get: function get() {
        return _index29.default;
      }
    });
    Object.defineProperty(exports2, "differenceInISOWeekYears", {
      enumerable: true,
      get: function get() {
        return _index30.default;
      }
    });
    Object.defineProperty(exports2, "differenceInMilliseconds", {
      enumerable: true,
      get: function get() {
        return _index31.default;
      }
    });
    Object.defineProperty(exports2, "differenceInMinutes", {
      enumerable: true,
      get: function get() {
        return _index32.default;
      }
    });
    Object.defineProperty(exports2, "differenceInMonths", {
      enumerable: true,
      get: function get() {
        return _index33.default;
      }
    });
    Object.defineProperty(exports2, "differenceInQuarters", {
      enumerable: true,
      get: function get() {
        return _index34.default;
      }
    });
    Object.defineProperty(exports2, "differenceInSeconds", {
      enumerable: true,
      get: function get() {
        return _index35.default;
      }
    });
    Object.defineProperty(exports2, "differenceInWeeks", {
      enumerable: true,
      get: function get() {
        return _index36.default;
      }
    });
    Object.defineProperty(exports2, "differenceInYears", {
      enumerable: true,
      get: function get() {
        return _index37.default;
      }
    });
    Object.defineProperty(exports2, "eachDayOfInterval", {
      enumerable: true,
      get: function get() {
        return _index38.default;
      }
    });
    Object.defineProperty(exports2, "eachHourOfInterval", {
      enumerable: true,
      get: function get() {
        return _index39.default;
      }
    });
    Object.defineProperty(exports2, "eachMinuteOfInterval", {
      enumerable: true,
      get: function get() {
        return _index40.default;
      }
    });
    Object.defineProperty(exports2, "eachMonthOfInterval", {
      enumerable: true,
      get: function get() {
        return _index41.default;
      }
    });
    Object.defineProperty(exports2, "eachQuarterOfInterval", {
      enumerable: true,
      get: function get() {
        return _index42.default;
      }
    });
    Object.defineProperty(exports2, "eachWeekOfInterval", {
      enumerable: true,
      get: function get() {
        return _index43.default;
      }
    });
    Object.defineProperty(exports2, "eachWeekendOfInterval", {
      enumerable: true,
      get: function get() {
        return _index44.default;
      }
    });
    Object.defineProperty(exports2, "eachWeekendOfMonth", {
      enumerable: true,
      get: function get() {
        return _index45.default;
      }
    });
    Object.defineProperty(exports2, "eachWeekendOfYear", {
      enumerable: true,
      get: function get() {
        return _index46.default;
      }
    });
    Object.defineProperty(exports2, "eachYearOfInterval", {
      enumerable: true,
      get: function get() {
        return _index47.default;
      }
    });
    Object.defineProperty(exports2, "endOfDay", {
      enumerable: true,
      get: function get() {
        return _index48.default;
      }
    });
    Object.defineProperty(exports2, "endOfDecade", {
      enumerable: true,
      get: function get() {
        return _index49.default;
      }
    });
    Object.defineProperty(exports2, "endOfHour", {
      enumerable: true,
      get: function get() {
        return _index50.default;
      }
    });
    Object.defineProperty(exports2, "endOfISOWeek", {
      enumerable: true,
      get: function get() {
        return _index51.default;
      }
    });
    Object.defineProperty(exports2, "endOfISOWeekYear", {
      enumerable: true,
      get: function get() {
        return _index52.default;
      }
    });
    Object.defineProperty(exports2, "endOfMinute", {
      enumerable: true,
      get: function get() {
        return _index53.default;
      }
    });
    Object.defineProperty(exports2, "endOfMonth", {
      enumerable: true,
      get: function get() {
        return _index54.default;
      }
    });
    Object.defineProperty(exports2, "endOfQuarter", {
      enumerable: true,
      get: function get() {
        return _index55.default;
      }
    });
    Object.defineProperty(exports2, "endOfSecond", {
      enumerable: true,
      get: function get() {
        return _index56.default;
      }
    });
    Object.defineProperty(exports2, "endOfToday", {
      enumerable: true,
      get: function get() {
        return _index57.default;
      }
    });
    Object.defineProperty(exports2, "endOfTomorrow", {
      enumerable: true,
      get: function get() {
        return _index58.default;
      }
    });
    Object.defineProperty(exports2, "endOfWeek", {
      enumerable: true,
      get: function get() {
        return _index59.default;
      }
    });
    Object.defineProperty(exports2, "endOfYear", {
      enumerable: true,
      get: function get() {
        return _index60.default;
      }
    });
    Object.defineProperty(exports2, "endOfYesterday", {
      enumerable: true,
      get: function get() {
        return _index61.default;
      }
    });
    Object.defineProperty(exports2, "format", {
      enumerable: true,
      get: function get() {
        return _index62.default;
      }
    });
    Object.defineProperty(exports2, "formatDistance", {
      enumerable: true,
      get: function get() {
        return _index63.default;
      }
    });
    Object.defineProperty(exports2, "formatDistanceStrict", {
      enumerable: true,
      get: function get() {
        return _index64.default;
      }
    });
    Object.defineProperty(exports2, "formatDistanceToNow", {
      enumerable: true,
      get: function get() {
        return _index65.default;
      }
    });
    Object.defineProperty(exports2, "formatDistanceToNowStrict", {
      enumerable: true,
      get: function get() {
        return _index66.default;
      }
    });
    Object.defineProperty(exports2, "formatDuration", {
      enumerable: true,
      get: function get() {
        return _index67.default;
      }
    });
    Object.defineProperty(exports2, "formatISO", {
      enumerable: true,
      get: function get() {
        return _index68.default;
      }
    });
    Object.defineProperty(exports2, "formatISO9075", {
      enumerable: true,
      get: function get() {
        return _index69.default;
      }
    });
    Object.defineProperty(exports2, "formatISODuration", {
      enumerable: true,
      get: function get() {
        return _index70.default;
      }
    });
    Object.defineProperty(exports2, "formatRFC3339", {
      enumerable: true,
      get: function get() {
        return _index71.default;
      }
    });
    Object.defineProperty(exports2, "formatRFC7231", {
      enumerable: true,
      get: function get() {
        return _index72.default;
      }
    });
    Object.defineProperty(exports2, "formatRelative", {
      enumerable: true,
      get: function get() {
        return _index73.default;
      }
    });
    Object.defineProperty(exports2, "fromUnixTime", {
      enumerable: true,
      get: function get() {
        return _index74.default;
      }
    });
    Object.defineProperty(exports2, "getDate", {
      enumerable: true,
      get: function get() {
        return _index75.default;
      }
    });
    Object.defineProperty(exports2, "getDay", {
      enumerable: true,
      get: function get() {
        return _index76.default;
      }
    });
    Object.defineProperty(exports2, "getDayOfYear", {
      enumerable: true,
      get: function get() {
        return _index77.default;
      }
    });
    Object.defineProperty(exports2, "getDaysInMonth", {
      enumerable: true,
      get: function get() {
        return _index78.default;
      }
    });
    Object.defineProperty(exports2, "getDaysInYear", {
      enumerable: true,
      get: function get() {
        return _index79.default;
      }
    });
    Object.defineProperty(exports2, "getDecade", {
      enumerable: true,
      get: function get() {
        return _index80.default;
      }
    });
    Object.defineProperty(exports2, "getDefaultOptions", {
      enumerable: true,
      get: function get() {
        return _index81.default;
      }
    });
    Object.defineProperty(exports2, "getHours", {
      enumerable: true,
      get: function get() {
        return _index82.default;
      }
    });
    Object.defineProperty(exports2, "getISODay", {
      enumerable: true,
      get: function get() {
        return _index83.default;
      }
    });
    Object.defineProperty(exports2, "getISOWeek", {
      enumerable: true,
      get: function get() {
        return _index84.default;
      }
    });
    Object.defineProperty(exports2, "getISOWeekYear", {
      enumerable: true,
      get: function get() {
        return _index85.default;
      }
    });
    Object.defineProperty(exports2, "getISOWeeksInYear", {
      enumerable: true,
      get: function get() {
        return _index86.default;
      }
    });
    Object.defineProperty(exports2, "getMilliseconds", {
      enumerable: true,
      get: function get() {
        return _index87.default;
      }
    });
    Object.defineProperty(exports2, "getMinutes", {
      enumerable: true,
      get: function get() {
        return _index88.default;
      }
    });
    Object.defineProperty(exports2, "getMonth", {
      enumerable: true,
      get: function get() {
        return _index89.default;
      }
    });
    Object.defineProperty(exports2, "getOverlappingDaysInIntervals", {
      enumerable: true,
      get: function get() {
        return _index90.default;
      }
    });
    Object.defineProperty(exports2, "getQuarter", {
      enumerable: true,
      get: function get() {
        return _index91.default;
      }
    });
    Object.defineProperty(exports2, "getSeconds", {
      enumerable: true,
      get: function get() {
        return _index92.default;
      }
    });
    Object.defineProperty(exports2, "getTime", {
      enumerable: true,
      get: function get() {
        return _index93.default;
      }
    });
    Object.defineProperty(exports2, "getUnixTime", {
      enumerable: true,
      get: function get() {
        return _index94.default;
      }
    });
    Object.defineProperty(exports2, "getWeek", {
      enumerable: true,
      get: function get() {
        return _index95.default;
      }
    });
    Object.defineProperty(exports2, "getWeekOfMonth", {
      enumerable: true,
      get: function get() {
        return _index96.default;
      }
    });
    Object.defineProperty(exports2, "getWeekYear", {
      enumerable: true,
      get: function get() {
        return _index97.default;
      }
    });
    Object.defineProperty(exports2, "getWeeksInMonth", {
      enumerable: true,
      get: function get() {
        return _index98.default;
      }
    });
    Object.defineProperty(exports2, "getYear", {
      enumerable: true,
      get: function get() {
        return _index99.default;
      }
    });
    Object.defineProperty(exports2, "hoursToMilliseconds", {
      enumerable: true,
      get: function get() {
        return _index100.default;
      }
    });
    Object.defineProperty(exports2, "hoursToMinutes", {
      enumerable: true,
      get: function get() {
        return _index101.default;
      }
    });
    Object.defineProperty(exports2, "hoursToSeconds", {
      enumerable: true,
      get: function get() {
        return _index102.default;
      }
    });
    Object.defineProperty(exports2, "intervalToDuration", {
      enumerable: true,
      get: function get() {
        return _index103.default;
      }
    });
    Object.defineProperty(exports2, "intlFormat", {
      enumerable: true,
      get: function get() {
        return _index104.default;
      }
    });
    Object.defineProperty(exports2, "intlFormatDistance", {
      enumerable: true,
      get: function get() {
        return _index105.default;
      }
    });
    Object.defineProperty(exports2, "isAfter", {
      enumerable: true,
      get: function get() {
        return _index106.default;
      }
    });
    Object.defineProperty(exports2, "isBefore", {
      enumerable: true,
      get: function get() {
        return _index107.default;
      }
    });
    Object.defineProperty(exports2, "isDate", {
      enumerable: true,
      get: function get() {
        return _index108.default;
      }
    });
    Object.defineProperty(exports2, "isEqual", {
      enumerable: true,
      get: function get() {
        return _index109.default;
      }
    });
    Object.defineProperty(exports2, "isExists", {
      enumerable: true,
      get: function get() {
        return _index110.default;
      }
    });
    Object.defineProperty(exports2, "isFirstDayOfMonth", {
      enumerable: true,
      get: function get() {
        return _index111.default;
      }
    });
    Object.defineProperty(exports2, "isFriday", {
      enumerable: true,
      get: function get() {
        return _index112.default;
      }
    });
    Object.defineProperty(exports2, "isFuture", {
      enumerable: true,
      get: function get() {
        return _index113.default;
      }
    });
    Object.defineProperty(exports2, "isLastDayOfMonth", {
      enumerable: true,
      get: function get() {
        return _index114.default;
      }
    });
    Object.defineProperty(exports2, "isLeapYear", {
      enumerable: true,
      get: function get() {
        return _index115.default;
      }
    });
    Object.defineProperty(exports2, "isMatch", {
      enumerable: true,
      get: function get() {
        return _index116.default;
      }
    });
    Object.defineProperty(exports2, "isMonday", {
      enumerable: true,
      get: function get() {
        return _index117.default;
      }
    });
    Object.defineProperty(exports2, "isPast", {
      enumerable: true,
      get: function get() {
        return _index118.default;
      }
    });
    Object.defineProperty(exports2, "isSameDay", {
      enumerable: true,
      get: function get() {
        return _index119.default;
      }
    });
    Object.defineProperty(exports2, "isSameHour", {
      enumerable: true,
      get: function get() {
        return _index120.default;
      }
    });
    Object.defineProperty(exports2, "isSameISOWeek", {
      enumerable: true,
      get: function get() {
        return _index121.default;
      }
    });
    Object.defineProperty(exports2, "isSameISOWeekYear", {
      enumerable: true,
      get: function get() {
        return _index122.default;
      }
    });
    Object.defineProperty(exports2, "isSameMinute", {
      enumerable: true,
      get: function get() {
        return _index123.default;
      }
    });
    Object.defineProperty(exports2, "isSameMonth", {
      enumerable: true,
      get: function get() {
        return _index124.default;
      }
    });
    Object.defineProperty(exports2, "isSameQuarter", {
      enumerable: true,
      get: function get() {
        return _index125.default;
      }
    });
    Object.defineProperty(exports2, "isSameSecond", {
      enumerable: true,
      get: function get() {
        return _index126.default;
      }
    });
    Object.defineProperty(exports2, "isSameWeek", {
      enumerable: true,
      get: function get() {
        return _index127.default;
      }
    });
    Object.defineProperty(exports2, "isSameYear", {
      enumerable: true,
      get: function get() {
        return _index128.default;
      }
    });
    Object.defineProperty(exports2, "isSaturday", {
      enumerable: true,
      get: function get() {
        return _index129.default;
      }
    });
    Object.defineProperty(exports2, "isSunday", {
      enumerable: true,
      get: function get() {
        return _index130.default;
      }
    });
    Object.defineProperty(exports2, "isThisHour", {
      enumerable: true,
      get: function get() {
        return _index131.default;
      }
    });
    Object.defineProperty(exports2, "isThisISOWeek", {
      enumerable: true,
      get: function get() {
        return _index132.default;
      }
    });
    Object.defineProperty(exports2, "isThisMinute", {
      enumerable: true,
      get: function get() {
        return _index133.default;
      }
    });
    Object.defineProperty(exports2, "isThisMonth", {
      enumerable: true,
      get: function get() {
        return _index134.default;
      }
    });
    Object.defineProperty(exports2, "isThisQuarter", {
      enumerable: true,
      get: function get() {
        return _index135.default;
      }
    });
    Object.defineProperty(exports2, "isThisSecond", {
      enumerable: true,
      get: function get() {
        return _index136.default;
      }
    });
    Object.defineProperty(exports2, "isThisWeek", {
      enumerable: true,
      get: function get() {
        return _index137.default;
      }
    });
    Object.defineProperty(exports2, "isThisYear", {
      enumerable: true,
      get: function get() {
        return _index138.default;
      }
    });
    Object.defineProperty(exports2, "isThursday", {
      enumerable: true,
      get: function get() {
        return _index139.default;
      }
    });
    Object.defineProperty(exports2, "isToday", {
      enumerable: true,
      get: function get() {
        return _index140.default;
      }
    });
    Object.defineProperty(exports2, "isTomorrow", {
      enumerable: true,
      get: function get() {
        return _index141.default;
      }
    });
    Object.defineProperty(exports2, "isTuesday", {
      enumerable: true,
      get: function get() {
        return _index142.default;
      }
    });
    Object.defineProperty(exports2, "isValid", {
      enumerable: true,
      get: function get() {
        return _index143.default;
      }
    });
    Object.defineProperty(exports2, "isWednesday", {
      enumerable: true,
      get: function get() {
        return _index144.default;
      }
    });
    Object.defineProperty(exports2, "isWeekend", {
      enumerable: true,
      get: function get() {
        return _index145.default;
      }
    });
    Object.defineProperty(exports2, "isWithinInterval", {
      enumerable: true,
      get: function get() {
        return _index146.default;
      }
    });
    Object.defineProperty(exports2, "isYesterday", {
      enumerable: true,
      get: function get() {
        return _index147.default;
      }
    });
    Object.defineProperty(exports2, "lastDayOfDecade", {
      enumerable: true,
      get: function get() {
        return _index148.default;
      }
    });
    Object.defineProperty(exports2, "lastDayOfISOWeek", {
      enumerable: true,
      get: function get() {
        return _index149.default;
      }
    });
    Object.defineProperty(exports2, "lastDayOfISOWeekYear", {
      enumerable: true,
      get: function get() {
        return _index150.default;
      }
    });
    Object.defineProperty(exports2, "lastDayOfMonth", {
      enumerable: true,
      get: function get() {
        return _index151.default;
      }
    });
    Object.defineProperty(exports2, "lastDayOfQuarter", {
      enumerable: true,
      get: function get() {
        return _index152.default;
      }
    });
    Object.defineProperty(exports2, "lastDayOfWeek", {
      enumerable: true,
      get: function get() {
        return _index153.default;
      }
    });
    Object.defineProperty(exports2, "lastDayOfYear", {
      enumerable: true,
      get: function get() {
        return _index154.default;
      }
    });
    Object.defineProperty(exports2, "lightFormat", {
      enumerable: true,
      get: function get() {
        return _index155.default;
      }
    });
    Object.defineProperty(exports2, "max", {
      enumerable: true,
      get: function get() {
        return _index156.default;
      }
    });
    Object.defineProperty(exports2, "milliseconds", {
      enumerable: true,
      get: function get() {
        return _index157.default;
      }
    });
    Object.defineProperty(exports2, "millisecondsToHours", {
      enumerable: true,
      get: function get() {
        return _index158.default;
      }
    });
    Object.defineProperty(exports2, "millisecondsToMinutes", {
      enumerable: true,
      get: function get() {
        return _index159.default;
      }
    });
    Object.defineProperty(exports2, "millisecondsToSeconds", {
      enumerable: true,
      get: function get() {
        return _index160.default;
      }
    });
    Object.defineProperty(exports2, "min", {
      enumerable: true,
      get: function get() {
        return _index161.default;
      }
    });
    Object.defineProperty(exports2, "minutesToHours", {
      enumerable: true,
      get: function get() {
        return _index162.default;
      }
    });
    Object.defineProperty(exports2, "minutesToMilliseconds", {
      enumerable: true,
      get: function get() {
        return _index163.default;
      }
    });
    Object.defineProperty(exports2, "minutesToSeconds", {
      enumerable: true,
      get: function get() {
        return _index164.default;
      }
    });
    Object.defineProperty(exports2, "monthsToQuarters", {
      enumerable: true,
      get: function get() {
        return _index165.default;
      }
    });
    Object.defineProperty(exports2, "monthsToYears", {
      enumerable: true,
      get: function get() {
        return _index166.default;
      }
    });
    Object.defineProperty(exports2, "nextDay", {
      enumerable: true,
      get: function get() {
        return _index167.default;
      }
    });
    Object.defineProperty(exports2, "nextFriday", {
      enumerable: true,
      get: function get() {
        return _index168.default;
      }
    });
    Object.defineProperty(exports2, "nextMonday", {
      enumerable: true,
      get: function get() {
        return _index169.default;
      }
    });
    Object.defineProperty(exports2, "nextSaturday", {
      enumerable: true,
      get: function get() {
        return _index170.default;
      }
    });
    Object.defineProperty(exports2, "nextSunday", {
      enumerable: true,
      get: function get() {
        return _index171.default;
      }
    });
    Object.defineProperty(exports2, "nextThursday", {
      enumerable: true,
      get: function get() {
        return _index172.default;
      }
    });
    Object.defineProperty(exports2, "nextTuesday", {
      enumerable: true,
      get: function get() {
        return _index173.default;
      }
    });
    Object.defineProperty(exports2, "nextWednesday", {
      enumerable: true,
      get: function get() {
        return _index174.default;
      }
    });
    Object.defineProperty(exports2, "parse", {
      enumerable: true,
      get: function get() {
        return _index175.default;
      }
    });
    Object.defineProperty(exports2, "parseISO", {
      enumerable: true,
      get: function get() {
        return _index176.default;
      }
    });
    Object.defineProperty(exports2, "parseJSON", {
      enumerable: true,
      get: function get() {
        return _index177.default;
      }
    });
    Object.defineProperty(exports2, "previousDay", {
      enumerable: true,
      get: function get() {
        return _index178.default;
      }
    });
    Object.defineProperty(exports2, "previousFriday", {
      enumerable: true,
      get: function get() {
        return _index179.default;
      }
    });
    Object.defineProperty(exports2, "previousMonday", {
      enumerable: true,
      get: function get() {
        return _index180.default;
      }
    });
    Object.defineProperty(exports2, "previousSaturday", {
      enumerable: true,
      get: function get() {
        return _index181.default;
      }
    });
    Object.defineProperty(exports2, "previousSunday", {
      enumerable: true,
      get: function get() {
        return _index182.default;
      }
    });
    Object.defineProperty(exports2, "previousThursday", {
      enumerable: true,
      get: function get() {
        return _index183.default;
      }
    });
    Object.defineProperty(exports2, "previousTuesday", {
      enumerable: true,
      get: function get() {
        return _index184.default;
      }
    });
    Object.defineProperty(exports2, "previousWednesday", {
      enumerable: true,
      get: function get() {
        return _index185.default;
      }
    });
    Object.defineProperty(exports2, "quartersToMonths", {
      enumerable: true,
      get: function get() {
        return _index186.default;
      }
    });
    Object.defineProperty(exports2, "quartersToYears", {
      enumerable: true,
      get: function get() {
        return _index187.default;
      }
    });
    Object.defineProperty(exports2, "roundToNearestMinutes", {
      enumerable: true,
      get: function get() {
        return _index188.default;
      }
    });
    Object.defineProperty(exports2, "secondsToHours", {
      enumerable: true,
      get: function get() {
        return _index189.default;
      }
    });
    Object.defineProperty(exports2, "secondsToMilliseconds", {
      enumerable: true,
      get: function get() {
        return _index190.default;
      }
    });
    Object.defineProperty(exports2, "secondsToMinutes", {
      enumerable: true,
      get: function get() {
        return _index191.default;
      }
    });
    Object.defineProperty(exports2, "set", {
      enumerable: true,
      get: function get() {
        return _index192.default;
      }
    });
    Object.defineProperty(exports2, "setDate", {
      enumerable: true,
      get: function get() {
        return _index193.default;
      }
    });
    Object.defineProperty(exports2, "setDay", {
      enumerable: true,
      get: function get() {
        return _index194.default;
      }
    });
    Object.defineProperty(exports2, "setDayOfYear", {
      enumerable: true,
      get: function get() {
        return _index195.default;
      }
    });
    Object.defineProperty(exports2, "setDefaultOptions", {
      enumerable: true,
      get: function get() {
        return _index196.default;
      }
    });
    Object.defineProperty(exports2, "setHours", {
      enumerable: true,
      get: function get() {
        return _index197.default;
      }
    });
    Object.defineProperty(exports2, "setISODay", {
      enumerable: true,
      get: function get() {
        return _index198.default;
      }
    });
    Object.defineProperty(exports2, "setISOWeek", {
      enumerable: true,
      get: function get() {
        return _index199.default;
      }
    });
    Object.defineProperty(exports2, "setISOWeekYear", {
      enumerable: true,
      get: function get() {
        return _index200.default;
      }
    });
    Object.defineProperty(exports2, "setMilliseconds", {
      enumerable: true,
      get: function get() {
        return _index201.default;
      }
    });
    Object.defineProperty(exports2, "setMinutes", {
      enumerable: true,
      get: function get() {
        return _index202.default;
      }
    });
    Object.defineProperty(exports2, "setMonth", {
      enumerable: true,
      get: function get() {
        return _index203.default;
      }
    });
    Object.defineProperty(exports2, "setQuarter", {
      enumerable: true,
      get: function get() {
        return _index204.default;
      }
    });
    Object.defineProperty(exports2, "setSeconds", {
      enumerable: true,
      get: function get() {
        return _index205.default;
      }
    });
    Object.defineProperty(exports2, "setWeek", {
      enumerable: true,
      get: function get() {
        return _index206.default;
      }
    });
    Object.defineProperty(exports2, "setWeekYear", {
      enumerable: true,
      get: function get() {
        return _index207.default;
      }
    });
    Object.defineProperty(exports2, "setYear", {
      enumerable: true,
      get: function get() {
        return _index208.default;
      }
    });
    Object.defineProperty(exports2, "startOfDay", {
      enumerable: true,
      get: function get() {
        return _index209.default;
      }
    });
    Object.defineProperty(exports2, "startOfDecade", {
      enumerable: true,
      get: function get() {
        return _index210.default;
      }
    });
    Object.defineProperty(exports2, "startOfHour", {
      enumerable: true,
      get: function get() {
        return _index211.default;
      }
    });
    Object.defineProperty(exports2, "startOfISOWeek", {
      enumerable: true,
      get: function get() {
        return _index212.default;
      }
    });
    Object.defineProperty(exports2, "startOfISOWeekYear", {
      enumerable: true,
      get: function get() {
        return _index213.default;
      }
    });
    Object.defineProperty(exports2, "startOfMinute", {
      enumerable: true,
      get: function get() {
        return _index214.default;
      }
    });
    Object.defineProperty(exports2, "startOfMonth", {
      enumerable: true,
      get: function get() {
        return _index215.default;
      }
    });
    Object.defineProperty(exports2, "startOfQuarter", {
      enumerable: true,
      get: function get() {
        return _index216.default;
      }
    });
    Object.defineProperty(exports2, "startOfSecond", {
      enumerable: true,
      get: function get() {
        return _index217.default;
      }
    });
    Object.defineProperty(exports2, "startOfToday", {
      enumerable: true,
      get: function get() {
        return _index218.default;
      }
    });
    Object.defineProperty(exports2, "startOfTomorrow", {
      enumerable: true,
      get: function get() {
        return _index219.default;
      }
    });
    Object.defineProperty(exports2, "startOfWeek", {
      enumerable: true,
      get: function get() {
        return _index220.default;
      }
    });
    Object.defineProperty(exports2, "startOfWeekYear", {
      enumerable: true,
      get: function get() {
        return _index221.default;
      }
    });
    Object.defineProperty(exports2, "startOfYear", {
      enumerable: true,
      get: function get() {
        return _index222.default;
      }
    });
    Object.defineProperty(exports2, "startOfYesterday", {
      enumerable: true,
      get: function get() {
        return _index223.default;
      }
    });
    Object.defineProperty(exports2, "sub", {
      enumerable: true,
      get: function get() {
        return _index224.default;
      }
    });
    Object.defineProperty(exports2, "subBusinessDays", {
      enumerable: true,
      get: function get() {
        return _index225.default;
      }
    });
    Object.defineProperty(exports2, "subDays", {
      enumerable: true,
      get: function get() {
        return _index226.default;
      }
    });
    Object.defineProperty(exports2, "subHours", {
      enumerable: true,
      get: function get() {
        return _index227.default;
      }
    });
    Object.defineProperty(exports2, "subISOWeekYears", {
      enumerable: true,
      get: function get() {
        return _index228.default;
      }
    });
    Object.defineProperty(exports2, "subMilliseconds", {
      enumerable: true,
      get: function get() {
        return _index229.default;
      }
    });
    Object.defineProperty(exports2, "subMinutes", {
      enumerable: true,
      get: function get() {
        return _index230.default;
      }
    });
    Object.defineProperty(exports2, "subMonths", {
      enumerable: true,
      get: function get() {
        return _index231.default;
      }
    });
    Object.defineProperty(exports2, "subQuarters", {
      enumerable: true,
      get: function get() {
        return _index232.default;
      }
    });
    Object.defineProperty(exports2, "subSeconds", {
      enumerable: true,
      get: function get() {
        return _index233.default;
      }
    });
    Object.defineProperty(exports2, "subWeeks", {
      enumerable: true,
      get: function get() {
        return _index234.default;
      }
    });
    Object.defineProperty(exports2, "subYears", {
      enumerable: true,
      get: function get() {
        return _index235.default;
      }
    });
    Object.defineProperty(exports2, "toDate", {
      enumerable: true,
      get: function get() {
        return _index236.default;
      }
    });
    Object.defineProperty(exports2, "weeksToDays", {
      enumerable: true,
      get: function get() {
        return _index237.default;
      }
    });
    Object.defineProperty(exports2, "yearsToMonths", {
      enumerable: true,
      get: function get() {
        return _index238.default;
      }
    });
    Object.defineProperty(exports2, "yearsToQuarters", {
      enumerable: true,
      get: function get() {
        return _index239.default;
      }
    });
    var _index = _interopRequireDefault(require_add());
    var _index2 = _interopRequireDefault(require_addBusinessDays());
    var _index3 = _interopRequireDefault(require_addDays());
    var _index4 = _interopRequireDefault(require_addHours());
    var _index5 = _interopRequireDefault(require_addISOWeekYears());
    var _index6 = _interopRequireDefault(require_addMilliseconds());
    var _index7 = _interopRequireDefault(require_addMinutes());
    var _index8 = _interopRequireDefault(require_addMonths());
    var _index9 = _interopRequireDefault(require_addQuarters());
    var _index10 = _interopRequireDefault(require_addSeconds());
    var _index11 = _interopRequireDefault(require_addWeeks());
    var _index12 = _interopRequireDefault(require_addYears());
    var _index13 = _interopRequireDefault(require_areIntervalsOverlapping());
    var _index14 = _interopRequireDefault(require_clamp());
    var _index15 = _interopRequireDefault(require_closestIndexTo());
    var _index16 = _interopRequireDefault(require_closestTo());
    var _index17 = _interopRequireDefault(require_compareAsc());
    var _index18 = _interopRequireDefault(require_compareDesc());
    var _index19 = _interopRequireDefault(require_daysToWeeks());
    var _index20 = _interopRequireDefault(require_differenceInBusinessDays());
    var _index21 = _interopRequireDefault(require_differenceInCalendarDays());
    var _index22 = _interopRequireDefault(require_differenceInCalendarISOWeekYears());
    var _index23 = _interopRequireDefault(require_differenceInCalendarISOWeeks());
    var _index24 = _interopRequireDefault(require_differenceInCalendarMonths());
    var _index25 = _interopRequireDefault(require_differenceInCalendarQuarters());
    var _index26 = _interopRequireDefault(require_differenceInCalendarWeeks());
    var _index27 = _interopRequireDefault(require_differenceInCalendarYears());
    var _index28 = _interopRequireDefault(require_differenceInDays());
    var _index29 = _interopRequireDefault(require_differenceInHours());
    var _index30 = _interopRequireDefault(require_differenceInISOWeekYears());
    var _index31 = _interopRequireDefault(require_differenceInMilliseconds());
    var _index32 = _interopRequireDefault(require_differenceInMinutes());
    var _index33 = _interopRequireDefault(require_differenceInMonths());
    var _index34 = _interopRequireDefault(require_differenceInQuarters());
    var _index35 = _interopRequireDefault(require_differenceInSeconds());
    var _index36 = _interopRequireDefault(require_differenceInWeeks());
    var _index37 = _interopRequireDefault(require_differenceInYears());
    var _index38 = _interopRequireDefault(require_eachDayOfInterval());
    var _index39 = _interopRequireDefault(require_eachHourOfInterval());
    var _index40 = _interopRequireDefault(require_eachMinuteOfInterval());
    var _index41 = _interopRequireDefault(require_eachMonthOfInterval());
    var _index42 = _interopRequireDefault(require_eachQuarterOfInterval());
    var _index43 = _interopRequireDefault(require_eachWeekOfInterval());
    var _index44 = _interopRequireDefault(require_eachWeekendOfInterval());
    var _index45 = _interopRequireDefault(require_eachWeekendOfMonth());
    var _index46 = _interopRequireDefault(require_eachWeekendOfYear());
    var _index47 = _interopRequireDefault(require_eachYearOfInterval());
    var _index48 = _interopRequireDefault(require_endOfDay());
    var _index49 = _interopRequireDefault(require_endOfDecade());
    var _index50 = _interopRequireDefault(require_endOfHour());
    var _index51 = _interopRequireDefault(require_endOfISOWeek());
    var _index52 = _interopRequireDefault(require_endOfISOWeekYear());
    var _index53 = _interopRequireDefault(require_endOfMinute());
    var _index54 = _interopRequireDefault(require_endOfMonth());
    var _index55 = _interopRequireDefault(require_endOfQuarter());
    var _index56 = _interopRequireDefault(require_endOfSecond());
    var _index57 = _interopRequireDefault(require_endOfToday());
    var _index58 = _interopRequireDefault(require_endOfTomorrow());
    var _index59 = _interopRequireDefault(require_endOfWeek());
    var _index60 = _interopRequireDefault(require_endOfYear());
    var _index61 = _interopRequireDefault(require_endOfYesterday());
    var _index62 = _interopRequireDefault(require_format());
    var _index63 = _interopRequireDefault(require_formatDistance2());
    var _index64 = _interopRequireDefault(require_formatDistanceStrict());
    var _index65 = _interopRequireDefault(require_formatDistanceToNow());
    var _index66 = _interopRequireDefault(require_formatDistanceToNowStrict());
    var _index67 = _interopRequireDefault(require_formatDuration());
    var _index68 = _interopRequireDefault(require_formatISO());
    var _index69 = _interopRequireDefault(require_formatISO9075());
    var _index70 = _interopRequireDefault(require_formatISODuration());
    var _index71 = _interopRequireDefault(require_formatRFC3339());
    var _index72 = _interopRequireDefault(require_formatRFC7231());
    var _index73 = _interopRequireDefault(require_formatRelative2());
    var _index74 = _interopRequireDefault(require_fromUnixTime());
    var _index75 = _interopRequireDefault(require_getDate());
    var _index76 = _interopRequireDefault(require_getDay());
    var _index77 = _interopRequireDefault(require_getDayOfYear());
    var _index78 = _interopRequireDefault(require_getDaysInMonth());
    var _index79 = _interopRequireDefault(require_getDaysInYear());
    var _index80 = _interopRequireDefault(require_getDecade());
    var _index81 = _interopRequireDefault(require_getDefaultOptions());
    var _index82 = _interopRequireDefault(require_getHours());
    var _index83 = _interopRequireDefault(require_getISODay());
    var _index84 = _interopRequireDefault(require_getISOWeek());
    var _index85 = _interopRequireDefault(require_getISOWeekYear());
    var _index86 = _interopRequireDefault(require_getISOWeeksInYear());
    var _index87 = _interopRequireDefault(require_getMilliseconds());
    var _index88 = _interopRequireDefault(require_getMinutes());
    var _index89 = _interopRequireDefault(require_getMonth());
    var _index90 = _interopRequireDefault(require_getOverlappingDaysInIntervals());
    var _index91 = _interopRequireDefault(require_getQuarter());
    var _index92 = _interopRequireDefault(require_getSeconds());
    var _index93 = _interopRequireDefault(require_getTime());
    var _index94 = _interopRequireDefault(require_getUnixTime());
    var _index95 = _interopRequireDefault(require_getWeek());
    var _index96 = _interopRequireDefault(require_getWeekOfMonth());
    var _index97 = _interopRequireDefault(require_getWeekYear());
    var _index98 = _interopRequireDefault(require_getWeeksInMonth());
    var _index99 = _interopRequireDefault(require_getYear());
    var _index100 = _interopRequireDefault(require_hoursToMilliseconds());
    var _index101 = _interopRequireDefault(require_hoursToMinutes());
    var _index102 = _interopRequireDefault(require_hoursToSeconds());
    var _index103 = _interopRequireDefault(require_intervalToDuration());
    var _index104 = _interopRequireDefault(require_intlFormat());
    var _index105 = _interopRequireDefault(require_intlFormatDistance());
    var _index106 = _interopRequireDefault(require_isAfter());
    var _index107 = _interopRequireDefault(require_isBefore());
    var _index108 = _interopRequireDefault(require_isDate());
    var _index109 = _interopRequireDefault(require_isEqual());
    var _index110 = _interopRequireDefault(require_isExists());
    var _index111 = _interopRequireDefault(require_isFirstDayOfMonth());
    var _index112 = _interopRequireDefault(require_isFriday());
    var _index113 = _interopRequireDefault(require_isFuture());
    var _index114 = _interopRequireDefault(require_isLastDayOfMonth());
    var _index115 = _interopRequireDefault(require_isLeapYear());
    var _index116 = _interopRequireDefault(require_isMatch());
    var _index117 = _interopRequireDefault(require_isMonday());
    var _index118 = _interopRequireDefault(require_isPast());
    var _index119 = _interopRequireDefault(require_isSameDay());
    var _index120 = _interopRequireDefault(require_isSameHour());
    var _index121 = _interopRequireDefault(require_isSameISOWeek());
    var _index122 = _interopRequireDefault(require_isSameISOWeekYear());
    var _index123 = _interopRequireDefault(require_isSameMinute());
    var _index124 = _interopRequireDefault(require_isSameMonth());
    var _index125 = _interopRequireDefault(require_isSameQuarter());
    var _index126 = _interopRequireDefault(require_isSameSecond());
    var _index127 = _interopRequireDefault(require_isSameWeek());
    var _index128 = _interopRequireDefault(require_isSameYear());
    var _index129 = _interopRequireDefault(require_isSaturday());
    var _index130 = _interopRequireDefault(require_isSunday());
    var _index131 = _interopRequireDefault(require_isThisHour());
    var _index132 = _interopRequireDefault(require_isThisISOWeek());
    var _index133 = _interopRequireDefault(require_isThisMinute());
    var _index134 = _interopRequireDefault(require_isThisMonth());
    var _index135 = _interopRequireDefault(require_isThisQuarter());
    var _index136 = _interopRequireDefault(require_isThisSecond());
    var _index137 = _interopRequireDefault(require_isThisWeek());
    var _index138 = _interopRequireDefault(require_isThisYear());
    var _index139 = _interopRequireDefault(require_isThursday());
    var _index140 = _interopRequireDefault(require_isToday());
    var _index141 = _interopRequireDefault(require_isTomorrow());
    var _index142 = _interopRequireDefault(require_isTuesday());
    var _index143 = _interopRequireDefault(require_isValid());
    var _index144 = _interopRequireDefault(require_isWednesday());
    var _index145 = _interopRequireDefault(require_isWeekend());
    var _index146 = _interopRequireDefault(require_isWithinInterval());
    var _index147 = _interopRequireDefault(require_isYesterday());
    var _index148 = _interopRequireDefault(require_lastDayOfDecade());
    var _index149 = _interopRequireDefault(require_lastDayOfISOWeek());
    var _index150 = _interopRequireDefault(require_lastDayOfISOWeekYear());
    var _index151 = _interopRequireDefault(require_lastDayOfMonth());
    var _index152 = _interopRequireDefault(require_lastDayOfQuarter());
    var _index153 = _interopRequireDefault(require_lastDayOfWeek());
    var _index154 = _interopRequireDefault(require_lastDayOfYear());
    var _index155 = _interopRequireDefault(require_lightFormat());
    var _index156 = _interopRequireDefault(require_max());
    var _index157 = _interopRequireDefault(require_milliseconds());
    var _index158 = _interopRequireDefault(require_millisecondsToHours());
    var _index159 = _interopRequireDefault(require_millisecondsToMinutes());
    var _index160 = _interopRequireDefault(require_millisecondsToSeconds());
    var _index161 = _interopRequireDefault(require_min());
    var _index162 = _interopRequireDefault(require_minutesToHours());
    var _index163 = _interopRequireDefault(require_minutesToMilliseconds());
    var _index164 = _interopRequireDefault(require_minutesToSeconds());
    var _index165 = _interopRequireDefault(require_monthsToQuarters());
    var _index166 = _interopRequireDefault(require_monthsToYears());
    var _index167 = _interopRequireDefault(require_nextDay());
    var _index168 = _interopRequireDefault(require_nextFriday());
    var _index169 = _interopRequireDefault(require_nextMonday());
    var _index170 = _interopRequireDefault(require_nextSaturday());
    var _index171 = _interopRequireDefault(require_nextSunday());
    var _index172 = _interopRequireDefault(require_nextThursday());
    var _index173 = _interopRequireDefault(require_nextTuesday());
    var _index174 = _interopRequireDefault(require_nextWednesday());
    var _index175 = _interopRequireDefault(require_parse());
    var _index176 = _interopRequireDefault(require_parseISO());
    var _index177 = _interopRequireDefault(require_parseJSON());
    var _index178 = _interopRequireDefault(require_previousDay());
    var _index179 = _interopRequireDefault(require_previousFriday());
    var _index180 = _interopRequireDefault(require_previousMonday());
    var _index181 = _interopRequireDefault(require_previousSaturday());
    var _index182 = _interopRequireDefault(require_previousSunday());
    var _index183 = _interopRequireDefault(require_previousThursday());
    var _index184 = _interopRequireDefault(require_previousTuesday());
    var _index185 = _interopRequireDefault(require_previousWednesday());
    var _index186 = _interopRequireDefault(require_quartersToMonths());
    var _index187 = _interopRequireDefault(require_quartersToYears());
    var _index188 = _interopRequireDefault(require_roundToNearestMinutes());
    var _index189 = _interopRequireDefault(require_secondsToHours());
    var _index190 = _interopRequireDefault(require_secondsToMilliseconds());
    var _index191 = _interopRequireDefault(require_secondsToMinutes());
    var _index192 = _interopRequireDefault(require_set());
    var _index193 = _interopRequireDefault(require_setDate());
    var _index194 = _interopRequireDefault(require_setDay());
    var _index195 = _interopRequireDefault(require_setDayOfYear());
    var _index196 = _interopRequireDefault(require_setDefaultOptions());
    var _index197 = _interopRequireDefault(require_setHours());
    var _index198 = _interopRequireDefault(require_setISODay());
    var _index199 = _interopRequireDefault(require_setISOWeek());
    var _index200 = _interopRequireDefault(require_setISOWeekYear());
    var _index201 = _interopRequireDefault(require_setMilliseconds());
    var _index202 = _interopRequireDefault(require_setMinutes());
    var _index203 = _interopRequireDefault(require_setMonth());
    var _index204 = _interopRequireDefault(require_setQuarter());
    var _index205 = _interopRequireDefault(require_setSeconds());
    var _index206 = _interopRequireDefault(require_setWeek());
    var _index207 = _interopRequireDefault(require_setWeekYear());
    var _index208 = _interopRequireDefault(require_setYear());
    var _index209 = _interopRequireDefault(require_startOfDay());
    var _index210 = _interopRequireDefault(require_startOfDecade());
    var _index211 = _interopRequireDefault(require_startOfHour());
    var _index212 = _interopRequireDefault(require_startOfISOWeek());
    var _index213 = _interopRequireDefault(require_startOfISOWeekYear());
    var _index214 = _interopRequireDefault(require_startOfMinute());
    var _index215 = _interopRequireDefault(require_startOfMonth());
    var _index216 = _interopRequireDefault(require_startOfQuarter());
    var _index217 = _interopRequireDefault(require_startOfSecond());
    var _index218 = _interopRequireDefault(require_startOfToday());
    var _index219 = _interopRequireDefault(require_startOfTomorrow());
    var _index220 = _interopRequireDefault(require_startOfWeek());
    var _index221 = _interopRequireDefault(require_startOfWeekYear());
    var _index222 = _interopRequireDefault(require_startOfYear());
    var _index223 = _interopRequireDefault(require_startOfYesterday());
    var _index224 = _interopRequireDefault(require_sub());
    var _index225 = _interopRequireDefault(require_subBusinessDays());
    var _index226 = _interopRequireDefault(require_subDays());
    var _index227 = _interopRequireDefault(require_subHours());
    var _index228 = _interopRequireDefault(require_subISOWeekYears());
    var _index229 = _interopRequireDefault(require_subMilliseconds());
    var _index230 = _interopRequireDefault(require_subMinutes());
    var _index231 = _interopRequireDefault(require_subMonths());
    var _index232 = _interopRequireDefault(require_subQuarters());
    var _index233 = _interopRequireDefault(require_subSeconds());
    var _index234 = _interopRequireDefault(require_subWeeks());
    var _index235 = _interopRequireDefault(require_subYears());
    var _index236 = _interopRequireDefault(require_toDate());
    var _index237 = _interopRequireDefault(require_weeksToDays());
    var _index238 = _interopRequireDefault(require_yearsToMonths());
    var _index239 = _interopRequireDefault(require_yearsToQuarters());
    var _index240 = require_constants();
    Object.keys(_index240).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports2 && exports2[key] === _index240[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function get() {
          return _index240[key];
        }
      });
    });
  }
});

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/lodash/lodash.js"(exports2, module2) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context2) {
        context2 = context2 == null ? root : _5.defaults(root.Object(), context2, _5.pick(root, contextProps));
        var Array2 = context2.Array, Date2 = context2.Date, Error2 = context2.Error, Function2 = context2.Function, Math2 = context2.Math, Object2 = context2.Object, RegExp2 = context2.RegExp, String2 = context2.String, TypeError2 = context2.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context2["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer2 = moduleExports ? context2.Buffer : undefined2, Symbol2 = context2.Symbol, Uint8Array2 = context2.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context2.clearTimeout !== root.clearTimeout && context2.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context2.setTimeout !== root.setTimeout && context2.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context2.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context2.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView2 = getNative(context2, "DataView"), Map2 = getNative(context2, "Map"), Promise2 = getNative(context2, "Promise"), Set2 = getNative(context2, "Set"), WeakMap2 = getNative(context2, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = /* @__PURE__ */ function() {
          function object() {
          }
          return function(proto) {
            if (!isObject2(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack2(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack2.prototype.clear = stackClear;
        Stack2.prototype["delete"] = stackDelete;
        Stack2.prototype.get = stackGet;
        Stack2.prototype.has = stackHas;
        Stack2.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip2 = object == null;
          while (++index < length) {
            result2[index] = skip2 ? undefined2 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject2(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack2());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path2) {
          path2 = castPath(path2, object);
          var index = 0, length = path2.length;
          while (object != null && index < length) {
            object = object[toKey(path2[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path2, args) {
          path2 = castPath(path2, object);
          object = parent(object, path2);
          var func = object == null ? object : object[toKey(last(path2))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack2());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack2());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack2());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack2();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject2(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject2(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path2, srcValue) {
          if (isKey(path2) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path2), srcValue);
          }
          return function(object) {
            var objValue = get(object, path2);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path2) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack2());
            if (isObject2(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject2(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path2) {
            return hasIn(object, path2);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path2 = paths[index], value = baseGet(object, path2);
            if (predicate(value, path2)) {
              baseSet(result2, castPath(path2, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path2) {
          return function(object) {
            return baseGet(object, path2);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path2, value, customizer) {
          if (!isObject2(object)) {
            return object;
          }
          path2 = castPath(path2, object);
          var index = -1, length = path2.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path2[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject2(objValue) ? objValue : isIndex(path2[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path2) {
          path2 = castPath(path2, object);
          object = parent(object, path2);
          return object == null || delete object[toKey(last(path2))];
        }
        function baseUpdate(object, path2, updater, customizer) {
          return baseSet(object, path2, updater(baseGet(object, path2)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id2) {
          return root.clearTimeout(id2);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn2.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject2(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn2, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn2 = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn2 = Ctor || createCtor(fn2);
            }
            return fn2.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn2, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject2(objValue) && isObject2(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path2, hasFunc) {
          path2 = castPath(path2, object);
          var index = -1, length = path2.length, result2 = false;
          while (++index < length) {
            var key = toKey(path2[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject2(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject2(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path2) {
          return path2.length < 2 ? object : baseGet(object, baseSlice(path2, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact2(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join3(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse2(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse2],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse2);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString2(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path2, args) {
          var index = -1, isFunc = typeof path2 == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path2, value, args) : baseInvoke(value, path2, args);
          });
          return result2;
        });
        var keyBy2 = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy2(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString2(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject2(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject2(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap2(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt2 = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(/* @__PURE__ */ function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual2(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject2(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject2(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString2(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt2 = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString2(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject2(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject2(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at2 = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path2, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path2);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path2) {
          return object != null && hasPath(object, path2, baseHas);
        }
        function hasIn(object, path2) {
          return object != null && hasPath(object, path2, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path2) {
            path2 = castPath(path2, object);
            isDeep || (isDeep = path2.length > 1);
            return path2;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path2) {
            return predicate(value, path2[0]);
          });
        }
        function result(object, path2, defaultValue) {
          path2 = castPath(path2, object);
          var index = -1, length = path2.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path2[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path2, value) {
          return object == null ? object : baseSet(object, path2, value);
        }
        function setWith(object, path2, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path2, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject2(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path2) {
          return object == null ? true : baseUnset(object, path2);
        }
        function update(object, path2, updater) {
          return object == null ? object : baseUpdate(object, path2, castFunction(updater));
        }
        function updateWith(object, path2, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path2, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject2(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape2(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path2, srcValue) {
          return baseMatchesProperty(path2, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path2, args) {
          return function(object) {
            return baseInvoke(object, path2, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path2) {
            return baseInvoke(object, path2, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject2(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path2) {
          return isKey(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
        }
        function propertyOf(object) {
          return function(path2) {
            return object == null ? undefined2 : baseGet(object, path2);
          };
        }
        var range3 = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id2 = ++idCounter;
          return toString(prefix) + id2;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum2(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at2;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact2;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy2;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy2;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range3;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse2;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap2;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt2;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual2;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject2;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString2;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join3;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt2;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum2;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape2;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path2, args) {
          if (typeof path2 == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path2, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _5 = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _5;
        define(function() {
          return _5;
        });
      } else if (freeModule) {
        (freeModule.exports = _5)._ = _5;
        freeExports._ = _5;
      } else {
        root._ = _5;
      }
    }).call(exports2);
  }
});

// node_modules/dataloader/index.js
var require_dataloader = __commonJS({
  "node_modules/dataloader/index.js"(exports2, module2) {
    "use strict";
    var DataLoader2 = /* @__PURE__ */ function() {
      function DataLoader3(batchLoadFn, options) {
        if (typeof batchLoadFn !== "function") {
          throw new TypeError("DataLoader must be constructed with a function which accepts " + ("Array<key> and returns Promise<Array<value>>, but got: " + batchLoadFn + "."));
        }
        this._batchLoadFn = batchLoadFn;
        this._maxBatchSize = getValidMaxBatchSize(options);
        this._batchScheduleFn = getValidBatchScheduleFn(options);
        this._cacheKeyFn = getValidCacheKeyFn(options);
        this._cacheMap = getValidCacheMap(options);
        this._batch = null;
        this.name = getValidName(options);
      }
      var _proto = DataLoader3.prototype;
      _proto.load = function load(key) {
        if (key === null || key === void 0) {
          throw new TypeError("The loader.load() function must be called with a value, " + ("but got: " + String(key) + "."));
        }
        var batch = getCurrentBatch(this);
        var cacheMap = this._cacheMap;
        var cacheKey;
        if (cacheMap) {
          cacheKey = this._cacheKeyFn(key);
          var cachedPromise = cacheMap.get(cacheKey);
          if (cachedPromise) {
            var cacheHits = batch.cacheHits || (batch.cacheHits = []);
            return new Promise(function(resolve) {
              cacheHits.push(function() {
                resolve(cachedPromise);
              });
            });
          }
        }
        batch.keys.push(key);
        var promise = new Promise(function(resolve, reject) {
          batch.callbacks.push({
            resolve,
            reject
          });
        });
        if (cacheMap) {
          cacheMap.set(cacheKey, promise);
        }
        return promise;
      };
      _proto.loadMany = function loadMany(keys) {
        if (!isArrayLike(keys)) {
          throw new TypeError("The loader.loadMany() function must be called with Array<key> " + ("but got: " + keys + "."));
        }
        var loadPromises = [];
        for (var i = 0; i < keys.length; i++) {
          loadPromises.push(this.load(keys[i])["catch"](function(error) {
            return error;
          }));
        }
        return Promise.all(loadPromises);
      };
      _proto.clear = function clear(key) {
        var cacheMap = this._cacheMap;
        if (cacheMap) {
          var cacheKey = this._cacheKeyFn(key);
          cacheMap["delete"](cacheKey);
        }
        return this;
      };
      _proto.clearAll = function clearAll() {
        var cacheMap = this._cacheMap;
        if (cacheMap) {
          cacheMap.clear();
        }
        return this;
      };
      _proto.prime = function prime(key, value) {
        var cacheMap = this._cacheMap;
        if (cacheMap) {
          var cacheKey = this._cacheKeyFn(key);
          if (cacheMap.get(cacheKey) === void 0) {
            var promise;
            if (value instanceof Error) {
              promise = Promise.reject(value);
              promise["catch"](function() {
              });
            } else {
              promise = Promise.resolve(value);
            }
            cacheMap.set(cacheKey, promise);
          }
        }
        return this;
      };
      return DataLoader3;
    }();
    var enqueuePostPromiseJob = typeof process === "object" && typeof process.nextTick === "function" ? function(fn2) {
      if (!resolvedPromise) {
        resolvedPromise = Promise.resolve();
      }
      resolvedPromise.then(function() {
        process.nextTick(fn2);
      });
    } : typeof setImmediate === "function" ? function(fn2) {
      setImmediate(fn2);
    } : function(fn2) {
      setTimeout(fn2);
    };
    var resolvedPromise;
    function getCurrentBatch(loader) {
      var existingBatch = loader._batch;
      if (existingBatch !== null && !existingBatch.hasDispatched && existingBatch.keys.length < loader._maxBatchSize) {
        return existingBatch;
      }
      var newBatch = {
        hasDispatched: false,
        keys: [],
        callbacks: []
      };
      loader._batch = newBatch;
      loader._batchScheduleFn(function() {
        dispatchBatch(loader, newBatch);
      });
      return newBatch;
    }
    function dispatchBatch(loader, batch) {
      batch.hasDispatched = true;
      if (batch.keys.length === 0) {
        resolveCacheHits(batch);
        return;
      }
      var batchPromise;
      try {
        batchPromise = loader._batchLoadFn(batch.keys);
      } catch (e) {
        return failedDispatch(loader, batch, new TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function " + ("errored synchronously: " + String(e) + ".")));
      }
      if (!batchPromise || typeof batchPromise.then !== "function") {
        return failedDispatch(loader, batch, new TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did " + ("not return a Promise: " + String(batchPromise) + ".")));
      }
      batchPromise.then(function(values) {
        if (!isArrayLike(values)) {
          throw new TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did " + ("not return a Promise of an Array: " + String(values) + "."));
        }
        if (values.length !== batch.keys.length) {
          throw new TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise of an Array of the same length as the Array of keys." + ("\n\nKeys:\n" + String(batch.keys)) + ("\n\nValues:\n" + String(values)));
        }
        resolveCacheHits(batch);
        for (var i = 0; i < batch.callbacks.length; i++) {
          var _value = values[i];
          if (_value instanceof Error) {
            batch.callbacks[i].reject(_value);
          } else {
            batch.callbacks[i].resolve(_value);
          }
        }
      })["catch"](function(error) {
        failedDispatch(loader, batch, error);
      });
    }
    function failedDispatch(loader, batch, error) {
      resolveCacheHits(batch);
      for (var i = 0; i < batch.keys.length; i++) {
        loader.clear(batch.keys[i]);
        batch.callbacks[i].reject(error);
      }
    }
    function resolveCacheHits(batch) {
      if (batch.cacheHits) {
        for (var i = 0; i < batch.cacheHits.length; i++) {
          batch.cacheHits[i]();
        }
      }
    }
    function getValidMaxBatchSize(options) {
      var shouldBatch = !options || options.batch !== false;
      if (!shouldBatch) {
        return 1;
      }
      var maxBatchSize = options && options.maxBatchSize;
      if (maxBatchSize === void 0) {
        return Infinity;
      }
      if (typeof maxBatchSize !== "number" || maxBatchSize < 1) {
        throw new TypeError("maxBatchSize must be a positive number: " + maxBatchSize);
      }
      return maxBatchSize;
    }
    function getValidBatchScheduleFn(options) {
      var batchScheduleFn = options && options.batchScheduleFn;
      if (batchScheduleFn === void 0) {
        return enqueuePostPromiseJob;
      }
      if (typeof batchScheduleFn !== "function") {
        throw new TypeError("batchScheduleFn must be a function: " + batchScheduleFn);
      }
      return batchScheduleFn;
    }
    function getValidCacheKeyFn(options) {
      var cacheKeyFn2 = options && options.cacheKeyFn;
      if (cacheKeyFn2 === void 0) {
        return function(key) {
          return key;
        };
      }
      if (typeof cacheKeyFn2 !== "function") {
        throw new TypeError("cacheKeyFn must be a function: " + cacheKeyFn2);
      }
      return cacheKeyFn2;
    }
    function getValidCacheMap(options) {
      var shouldCache = !options || options.cache !== false;
      if (!shouldCache) {
        return null;
      }
      var cacheMap = options && options.cacheMap;
      if (cacheMap === void 0) {
        return /* @__PURE__ */ new Map();
      }
      if (cacheMap !== null) {
        var cacheFunctions = ["get", "set", "delete", "clear"];
        var missingFunctions = cacheFunctions.filter(function(fnName) {
          return cacheMap && typeof cacheMap[fnName] !== "function";
        });
        if (missingFunctions.length !== 0) {
          throw new TypeError("Custom cacheMap missing methods: " + missingFunctions.join(", "));
        }
      }
      return cacheMap;
    }
    function getValidName(options) {
      if (options && options.name) {
        return options.name;
      }
      return null;
    }
    function isArrayLike(x2) {
      return typeof x2 === "object" && x2 !== null && typeof x2.length === "number" && (x2.length === 0 || x2.length > 0 && Object.prototype.hasOwnProperty.call(x2, x2.length - 1));
    }
    module2.exports = DataLoader2;
  }
});

// node_modules/jsonify/lib/parse.js
var require_parse2 = __commonJS({
  "node_modules/jsonify/lib/parse.js"(exports2, module2) {
    "use strict";
    var at2;
    var ch;
    var escapee = {
      '"': '"',
      "\\": "\\",
      "/": "/",
      b: "\b",
      f: "\f",
      n: "\n",
      r: "\r",
      t: "	"
    };
    var text;
    function error(m2) {
      throw {
        name: "SyntaxError",
        message: m2,
        at: at2,
        text
      };
    }
    function next(c) {
      if (c && c !== ch) {
        error("Expected '" + c + "' instead of '" + ch + "'");
      }
      ch = text.charAt(at2);
      at2 += 1;
      return ch;
    }
    function number() {
      var num;
      var str = "";
      if (ch === "-") {
        str = "-";
        next("-");
      }
      while (ch >= "0" && ch <= "9") {
        str += ch;
        next();
      }
      if (ch === ".") {
        str += ".";
        while (next() && ch >= "0" && ch <= "9") {
          str += ch;
        }
      }
      if (ch === "e" || ch === "E") {
        str += ch;
        next();
        if (ch === "-" || ch === "+") {
          str += ch;
          next();
        }
        while (ch >= "0" && ch <= "9") {
          str += ch;
          next();
        }
      }
      num = Number(str);
      if (!isFinite(num)) {
        error("Bad number");
      }
      return num;
    }
    function string() {
      var hex;
      var i;
      var str = "";
      var uffff;
      if (ch === '"') {
        while (next()) {
          if (ch === '"') {
            next();
            return str;
          } else if (ch === "\\") {
            next();
            if (ch === "u") {
              uffff = 0;
              for (i = 0; i < 4; i += 1) {
                hex = parseInt(next(), 16);
                if (!isFinite(hex)) {
                  break;
                }
                uffff = uffff * 16 + hex;
              }
              str += String.fromCharCode(uffff);
            } else if (typeof escapee[ch] === "string") {
              str += escapee[ch];
            } else {
              break;
            }
          } else {
            str += ch;
          }
        }
      }
      error("Bad string");
    }
    function white() {
      while (ch && ch <= " ") {
        next();
      }
    }
    function word() {
      switch (ch) {
        case "t":
          next("t");
          next("r");
          next("u");
          next("e");
          return true;
        case "f":
          next("f");
          next("a");
          next("l");
          next("s");
          next("e");
          return false;
        case "n":
          next("n");
          next("u");
          next("l");
          next("l");
          return null;
        default:
          error("Unexpected '" + ch + "'");
      }
    }
    function array() {
      var arr = [];
      if (ch === "[") {
        next("[");
        white();
        if (ch === "]") {
          next("]");
          return arr;
        }
        while (ch) {
          arr.push(value());
          white();
          if (ch === "]") {
            next("]");
            return arr;
          }
          next(",");
          white();
        }
      }
      error("Bad array");
    }
    function object() {
      var key;
      var obj = {};
      if (ch === "{") {
        next("{");
        white();
        if (ch === "}") {
          next("}");
          return obj;
        }
        while (ch) {
          key = string();
          white();
          next(":");
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            error('Duplicate key "' + key + '"');
          }
          obj[key] = value();
          white();
          if (ch === "}") {
            next("}");
            return obj;
          }
          next(",");
          white();
        }
      }
      error("Bad object");
    }
    function value() {
      white();
      switch (ch) {
        case "{":
          return object();
        case "[":
          return array();
        case '"':
          return string();
        case "-":
          return number();
        default:
          return ch >= "0" && ch <= "9" ? number() : word();
      }
    }
    module2.exports = function(source, reviver) {
      var result;
      text = source;
      at2 = 0;
      ch = " ";
      result = value();
      white();
      if (ch) {
        error("Syntax error");
      }
      return typeof reviver === "function" ? function walk(holder, key) {
        var k2;
        var v;
        var val = holder[key];
        if (val && typeof val === "object") {
          for (k2 in value) {
            if (Object.prototype.hasOwnProperty.call(val, k2)) {
              v = walk(val, k2);
              if (typeof v === "undefined") {
                delete val[k2];
              } else {
                val[k2] = v;
              }
            }
          }
        }
        return reviver.call(holder, key, val);
      }({ "": result }, "") : result;
    };
  }
});

// node_modules/jsonify/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/jsonify/lib/stringify.js"(exports2, module2) {
    "use strict";
    var escapable = /[\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    var gap;
    var indent2;
    var meta = {
      // table of character substitutions
      "\b": "\\b",
      "	": "\\t",
      "\n": "\\n",
      "\f": "\\f",
      "\r": "\\r",
      '"': '\\"',
      "\\": "\\\\"
    };
    var rep;
    function quote(string) {
      escapable.lastIndex = 0;
      return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
        var c = meta[a];
        return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
      }) + '"' : '"' + string + '"';
    }
    function str(key, holder) {
      var i;
      var k2;
      var v;
      var length;
      var mind = gap;
      var partial;
      var value = holder[key];
      if (value && typeof value === "object" && typeof value.toJSON === "function") {
        value = value.toJSON(key);
      }
      if (typeof rep === "function") {
        value = rep.call(holder, key, value);
      }
      switch (typeof value) {
        case "string":
          return quote(value);
        case "number":
          return isFinite(value) ? String(value) : "null";
        case "boolean":
        case "null":
          return String(value);
        case "object":
          if (!value) {
            return "null";
          }
          gap += indent2;
          partial = [];
          if (Object.prototype.toString.apply(value) === "[object Array]") {
            length = value.length;
            for (i = 0; i < length; i += 1) {
              partial[i] = str(i, value) || "null";
            }
            v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
            gap = mind;
            return v;
          }
          if (rep && typeof rep === "object") {
            length = rep.length;
            for (i = 0; i < length; i += 1) {
              k2 = rep[i];
              if (typeof k2 === "string") {
                v = str(k2, value);
                if (v) {
                  partial.push(quote(k2) + (gap ? ": " : ":") + v);
                }
              }
            }
          } else {
            for (k2 in value) {
              if (Object.prototype.hasOwnProperty.call(value, k2)) {
                v = str(k2, value);
                if (v) {
                  partial.push(quote(k2) + (gap ? ": " : ":") + v);
                }
              }
            }
          }
          v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
          gap = mind;
          return v;
        default:
      }
    }
    module2.exports = function(value, replacer, space) {
      var i;
      gap = "";
      indent2 = "";
      if (typeof space === "number") {
        for (i = 0; i < space; i += 1) {
          indent2 += " ";
        }
      } else if (typeof space === "string") {
        indent2 = space;
      }
      rep = replacer;
      if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
        throw new Error("JSON.stringify");
      }
      return str("", { "": value });
    };
  }
});

// node_modules/jsonify/index.js
var require_jsonify = __commonJS({
  "node_modules/jsonify/index.js"(exports2) {
    "use strict";
    exports2.parse = require_parse2();
    exports2.stringify = require_stringify();
  }
});

// node_modules/isarray/index.js
var require_isarray = __commonJS({
  "node_modules/isarray/index.js"(exports2, module2) {
    var toString = {}.toString;
    module2.exports = Array.isArray || function(arr) {
      return toString.call(arr) == "[object Array]";
    };
  }
});

// node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/object-keys/isArguments.js"(exports2, module2) {
    "use strict";
    var toStr = Object.prototype.toString;
    module2.exports = function isArguments(value) {
      var str = toStr.call(value);
      var isArgs = str === "[object Arguments]";
      if (!isArgs) {
        isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
      }
      return isArgs;
    };
  }
});

// node_modules/object-keys/implementation.js
var require_implementation = __commonJS({
  "node_modules/object-keys/implementation.js"(exports2, module2) {
    "use strict";
    var keysShim;
    if (!Object.keys) {
      has = Object.prototype.hasOwnProperty;
      toStr = Object.prototype.toString;
      isArgs = require_isArguments();
      isEnumerable = Object.prototype.propertyIsEnumerable;
      hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
      hasProtoEnumBug = isEnumerable.call(function() {
      }, "prototype");
      dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
      };
      excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
      };
      hasAutomationEqualityBug = function() {
        if (typeof window === "undefined") {
          return false;
        }
        for (var k2 in window) {
          try {
            if (!excludedKeys["$" + k2] && has.call(window, k2) && window[k2] !== null && typeof window[k2] === "object") {
              try {
                equalsConstructorPrototype(window[k2]);
              } catch (e) {
                return true;
              }
            }
          } catch (e) {
            return true;
          }
        }
        return false;
      }();
      equalsConstructorPrototypeIfNotBuggy = function(o) {
        if (typeof window === "undefined" || !hasAutomationEqualityBug) {
          return equalsConstructorPrototype(o);
        }
        try {
          return equalsConstructorPrototype(o);
        } catch (e) {
          return false;
        }
      };
      keysShim = function keys(object) {
        var isObject2 = object !== null && typeof object === "object";
        var isFunction = toStr.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString2 = isObject2 && toStr.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject2 && !isFunction && !isArguments) {
          throw new TypeError("Object.keys called on a non-object");
        }
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString2 && object.length > 0 && !has.call(object, 0)) {
          for (var i = 0; i < object.length; ++i) {
            theKeys.push(String(i));
          }
        }
        if (isArguments && object.length > 0) {
          for (var j2 = 0; j2 < object.length; ++j2) {
            theKeys.push(String(j2));
          }
        } else {
          for (var name in object) {
            if (!(skipProto && name === "prototype") && has.call(object, name)) {
              theKeys.push(String(name));
            }
          }
        }
        if (hasDontEnumBug) {
          var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
          for (var k2 = 0; k2 < dontEnums.length; ++k2) {
            if (!(skipConstructor && dontEnums[k2] === "constructor") && has.call(object, dontEnums[k2])) {
              theKeys.push(dontEnums[k2]);
            }
          }
        }
        return theKeys;
      };
    }
    var has;
    var toStr;
    var isArgs;
    var isEnumerable;
    var hasDontEnumBug;
    var hasProtoEnumBug;
    var dontEnums;
    var equalsConstructorPrototype;
    var excludedKeys;
    var hasAutomationEqualityBug;
    var equalsConstructorPrototypeIfNotBuggy;
    module2.exports = keysShim;
  }
});

// node_modules/object-keys/index.js
var require_object_keys = __commonJS({
  "node_modules/object-keys/index.js"(exports2, module2) {
    "use strict";
    var slice = Array.prototype.slice;
    var isArgs = require_isArguments();
    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) {
      return origKeys(o);
    } : require_implementation();
    var originalKeys = Object.keys;
    keysShim.shim = function shimObjectKeys() {
      if (Object.keys) {
        var keysWorksWithArguments = function() {
          var args = Object.keys(arguments);
          return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) {
          Object.keys = function keys(object) {
            if (isArgs(object)) {
              return originalKeys(slice.call(object));
            }
            return originalKeys(object);
          };
        }
      } else {
        Object.keys = keysShim;
      }
      return Object.keys || keysShim;
    };
    module2.exports = keysShim;
  }
});

// node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  "node_modules/es-errors/index.js"(exports2, module2) {
    "use strict";
    module2.exports = Error;
  }
});

// node_modules/es-errors/eval.js
var require_eval = __commonJS({
  "node_modules/es-errors/eval.js"(exports2, module2) {
    "use strict";
    module2.exports = EvalError;
  }
});

// node_modules/es-errors/range.js
var require_range = __commonJS({
  "node_modules/es-errors/range.js"(exports2, module2) {
    "use strict";
    module2.exports = RangeError;
  }
});

// node_modules/es-errors/ref.js
var require_ref = __commonJS({
  "node_modules/es-errors/ref.js"(exports2, module2) {
    "use strict";
    module2.exports = ReferenceError;
  }
});

// node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  "node_modules/es-errors/syntax.js"(exports2, module2) {
    "use strict";
    module2.exports = SyntaxError;
  }
});

// node_modules/es-errors/type.js
var require_type = __commonJS({
  "node_modules/es-errors/type.js"(exports2, module2) {
    "use strict";
    module2.exports = TypeError;
  }
});

// node_modules/es-errors/uri.js
var require_uri = __commonJS({
  "node_modules/es-errors/uri.js"(exports2, module2) {
    "use strict";
    module2.exports = URIError;
  }
});

// node_modules/gopd/gOPD.js
var require_gOPD = __commonJS({
  "node_modules/gopd/gOPD.js"(exports2, module2) {
    "use strict";
    module2.exports = Object.getOwnPropertyDescriptor;
  }
});

// node_modules/gopd/index.js
var require_gopd = __commonJS({
  "node_modules/gopd/index.js"(exports2, module2) {
    "use strict";
    var $gOPD = require_gOPD();
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module2.exports = $gOPD;
  }
});

// node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({
  "node_modules/es-define-property/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = Object.defineProperty || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    module2.exports = $defineProperty;
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports2, module2) {
    "use strict";
    module2.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (var _5 in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = (
          /** @type {PropertyDescriptor} */
          Object.getOwnPropertyDescriptor(obj, sym)
        );
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports2, module2) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module2.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/function-bind/implementation.js
var require_implementation2 = __commonJS({
  "node_modules/function-bind/implementation.js"(exports2, module2) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b2) {
      var arr = [];
      for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
      }
      for (var j2 = 0; j2 < b2.length; j2 += 1) {
        arr[j2 + a.length] = b2[j2];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i = offset || 0, j2 = 0; i < arrLike.length; i += 1, j2 += 1) {
        arr[j2] = arrLike[i];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module2.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = "$" + i;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation2();
    module2.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/call-bind-apply-helpers/functionCall.js
var require_functionCall = __commonJS({
  "node_modules/call-bind-apply-helpers/functionCall.js"(exports2, module2) {
    "use strict";
    module2.exports = Function.prototype.call;
  }
});

// node_modules/call-bind-apply-helpers/functionApply.js
var require_functionApply = __commonJS({
  "node_modules/call-bind-apply-helpers/functionApply.js"(exports2, module2) {
    "use strict";
    module2.exports = Function.prototype.apply;
  }
});

// node_modules/call-bind-apply-helpers/reflectApply.js
var require_reflectApply = __commonJS({
  "node_modules/call-bind-apply-helpers/reflectApply.js"(exports2, module2) {
    "use strict";
    module2.exports = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
  }
});

// node_modules/call-bind-apply-helpers/actualApply.js
var require_actualApply = __commonJS({
  "node_modules/call-bind-apply-helpers/actualApply.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var $reflectApply = require_reflectApply();
    module2.exports = $reflectApply || bind.call($call, $apply);
  }
});

// node_modules/call-bind-apply-helpers/index.js
var require_call_bind_apply_helpers = __commonJS({
  "node_modules/call-bind-apply-helpers/index.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var $TypeError = require_type();
    var $call = require_functionCall();
    var $actualApply = require_actualApply();
    module2.exports = function callBindBasic(args) {
      if (args.length < 1 || typeof args[0] !== "function") {
        throw new $TypeError("a function is required");
      }
      return $actualApply(bind, $call, args);
    };
  }
});

// node_modules/dunder-proto/get.js
var require_get = __commonJS({
  "node_modules/dunder-proto/get.js"(exports2, module2) {
    "use strict";
    var callBind = require_call_bind_apply_helpers();
    var gOPD = require_gopd();
    var hasProtoAccessor = (
      /** @type {{ __proto__?: typeof Array.prototype }} */
      [].__proto__ === Array.prototype
    );
    var desc = hasProtoAccessor && gOPD && gOPD(
      Object.prototype,
      /** @type {keyof typeof Object.prototype} */
      "__proto__"
    );
    var $Object = Object;
    var $getPrototypeOf = $Object.getPrototypeOf;
    module2.exports = desc && typeof desc.get === "function" ? callBind([desc.get]) : typeof $getPrototypeOf === "function" ? (
      /** @type {import('./get')} */
      function getDunder(value) {
        return $getPrototypeOf(value == null ? value : $Object(value));
      }
    ) : false;
  }
});

// node_modules/hasown/index.js
var require_hasown = __commonJS({
  "node_modules/hasown/index.js"(exports2, module2) {
    "use strict";
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module2.exports = bind.call(call, $hasOwn);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports2, module2) {
    "use strict";
    var undefined2;
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var $Function = Function;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = require_gopd();
    var $defineProperty = require_es_define_property();
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getDunderProto = require_get();
    var getProto = typeof Reflect === "function" && Reflect.getPrototypeOf || Object.getPrototypeOf || getDunderProto;
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": $EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%Object.getOwnPropertyDescriptor%": $gOPD,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet,
      "%Function.prototype.call%": $call,
      "%Function.prototype.apply%": $apply,
      "%Object.defineProperty%": $defineProperty
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn2 = doEval2("%AsyncGeneratorFunction%");
        if (fn2) {
          value = fn2.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call($call, Array.prototype.concat);
    var $spliceApply = bind.call($apply, Array.prototype.splice);
    var $replace = bind.call($call, String.prototype.replace);
    var $strSlice = bind.call($call, String.prototype.slice);
    var $exec = bind.call($call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module2.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/define-data-property/index.js
var require_define_data_property = __commonJS({
  "node_modules/define-data-property/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var gopd = require_gopd();
    module2.exports = function defineDataProperty(obj, property, value) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new $TypeError("`obj` must be an object or a function`");
      }
      if (typeof property !== "string" && typeof property !== "symbol") {
        throw new $TypeError("`property` must be a string or a symbol`");
      }
      if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
        throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
        throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
        throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
        throw new $TypeError("`loose`, if provided, must be a boolean");
      }
      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
      var nonWritable = arguments.length > 4 ? arguments[4] : null;
      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
      var loose = arguments.length > 6 ? arguments[6] : false;
      var desc = !!gopd && gopd(obj, property);
      if ($defineProperty) {
        $defineProperty(obj, property, {
          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
          value,
          writable: nonWritable === null && desc ? desc.writable : !nonWritable
        });
      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
        obj[property] = value;
      } else {
        throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      }
    };
  }
});

// node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "node_modules/has-property-descriptors/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      return !!$defineProperty;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!$defineProperty) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e) {
        return true;
      }
    };
    module2.exports = hasPropertyDescriptors;
  }
});

// node_modules/set-function-length/index.js
var require_set_function_length = __commonJS({
  "node_modules/set-function-length/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var define2 = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var gOPD = require_gopd();
    var $TypeError = require_type();
    var $floor = GetIntrinsic("%Math.floor%");
    module2.exports = function setFunctionLength(fn2, length) {
      if (typeof fn2 !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
        throw new $TypeError("`length` must be a positive 32-bit integer");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      var functionLengthIsConfigurable = true;
      var functionLengthIsWritable = true;
      if ("length" in fn2 && gOPD) {
        var desc = gOPD(fn2, "length");
        if (desc && !desc.configurable) {
          functionLengthIsConfigurable = false;
        }
        if (desc && !desc.writable) {
          functionLengthIsWritable = false;
        }
      }
      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) {
          define2(
            /** @type {Parameters<define>[0]} */
            fn2,
            "length",
            length,
            true,
            true
          );
        } else {
          define2(
            /** @type {Parameters<define>[0]} */
            fn2,
            "length",
            length
          );
        }
      }
      return fn2;
    };
  }
});

// node_modules/call-bind-apply-helpers/applyBind.js
var require_applyBind = __commonJS({
  "node_modules/call-bind-apply-helpers/applyBind.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var $apply = require_functionApply();
    var actualApply = require_actualApply();
    module2.exports = function applyBind() {
      return actualApply(bind, $apply, arguments);
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports2, module2) {
    "use strict";
    var setFunctionLength = require_set_function_length();
    var $defineProperty = require_es_define_property();
    var callBindBasic = require_call_bind_apply_helpers();
    var applyBind = require_applyBind();
    module2.exports = function callBind(originalFunction) {
      var func = callBindBasic(arguments);
      var adjustedLength = originalFunction.length - (arguments.length - 1);
      return setFunctionLength(
        func,
        1 + (adjustedLength > 0 ? adjustedLength : 0),
        true
      );
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/call-bind/callBound.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module2.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// node_modules/json-stable-stringify/index.js
var require_json_stable_stringify = __commonJS({
  "node_modules/json-stable-stringify/index.js"(exports2, module2) {
    "use strict";
    var jsonStringify = (typeof JSON !== "undefined" ? JSON : require_jsonify()).stringify;
    var isArray = require_isarray();
    var objectKeys = require_object_keys();
    var callBind = require_call_bind();
    var callBound = require_callBound();
    var $join = callBound("Array.prototype.join");
    var $push = callBound("Array.prototype.push");
    var strRepeat = function repeat(n, char) {
      var str = "";
      for (var i = 0; i < n; i += 1) {
        str += char;
      }
      return str;
    };
    var defaultReplacer = function(parent, key, value) {
      return value;
    };
    module2.exports = function stableStringify(obj) {
      var opts = arguments.length > 1 ? arguments[1] : void 0;
      var space = opts && opts.space || "";
      if (typeof space === "number") {
        space = strRepeat(space, " ");
      }
      var cycles = !!opts && typeof opts.cycles === "boolean" && opts.cycles;
      var replacer = opts && opts.replacer ? callBind(opts.replacer) : defaultReplacer;
      var cmpOpt = typeof opts === "function" ? opts : opts && opts.cmp;
      var cmp = cmpOpt && function(node) {
        var get = cmpOpt.length > 2 && function get2(k2) {
          return node[k2];
        };
        return function(a, b2) {
          return cmpOpt(
            { key: a, value: node[a] },
            { key: b2, value: node[b2] },
            get ? { __proto__: null, get } : void 0
          );
        };
      };
      var seen = [];
      return function stringify4(parent, key, node, level) {
        var indent2 = space ? "\n" + strRepeat(level, space) : "";
        var colonSeparator = space ? ": " : ":";
        if (node && node.toJSON && typeof node.toJSON === "function") {
          node = node.toJSON();
        }
        node = replacer(parent, key, node);
        if (node === void 0) {
          return;
        }
        if (typeof node !== "object" || node === null) {
          return jsonStringify(node);
        }
        if (isArray(node)) {
          var out = [];
          for (var i = 0; i < node.length; i++) {
            var item = stringify4(node, i, node[i], level + 1) || jsonStringify(null);
            $push(out, indent2 + space + item);
          }
          return "[" + $join(out, ",") + indent2 + "]";
        }
        if (seen.indexOf(node) !== -1) {
          if (cycles) {
            return jsonStringify("__cycle__");
          }
          throw new TypeError("Converting circular structure to JSON");
        } else {
          $push(seen, node);
        }
        var keys = objectKeys(node).sort(cmp && cmp(node));
        var out = [];
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = stringify4(node, key, node[key], level + 1);
          if (!value) {
            continue;
          }
          var keyValue = jsonStringify(key) + colonSeparator + value;
          $push(out, indent2 + space + keyValue);
        }
        seen.splice(seen.indexOf(node), 1);
        return "{" + $join(out, ",") + indent2 + "}";
      }({ "": obj }, "", obj, 0);
    };
  }
});

// node_modules/@apollo/utils.isnodelike/dist/index.js
var require_dist = __commonJS({
  "node_modules/@apollo/utils.isnodelike/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isNodeLike = void 0;
    exports2.isNodeLike = typeof process === "object" && process && process.release && process.versions && typeof process.versions.node === "string";
  }
});

// node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/PrefixingKeyValueCache.js
var require_PrefixingKeyValueCache = __commonJS({
  "node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/PrefixingKeyValueCache.js"(exports2) {
    "use strict";
    var _a2;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PrefixingKeyValueCache = void 0;
    var prefixesAreUnnecessaryForIsolationSymbol = Symbol("prefixesAreUnnecessaryForIsolation");
    var PrefixingKeyValueCache2 = class _PrefixingKeyValueCache {
      constructor(wrapped, prefix) {
        this.wrapped = wrapped;
        if (_PrefixingKeyValueCache.prefixesAreUnnecessaryForIsolation(wrapped)) {
          this.prefix = "";
          this[prefixesAreUnnecessaryForIsolationSymbol] = true;
        } else {
          this.prefix = prefix;
        }
      }
      get(key) {
        return this.wrapped.get(this.prefix + key);
      }
      set(key, value, options) {
        return this.wrapped.set(this.prefix + key, value, options);
      }
      delete(key) {
        return this.wrapped.delete(this.prefix + key);
      }
      static prefixesAreUnnecessaryForIsolation(c) {
        return prefixesAreUnnecessaryForIsolationSymbol in c;
      }
      static cacheDangerouslyDoesNotNeedPrefixesForIsolation(c) {
        return new PrefixesAreUnnecessaryForIsolationCache(c);
      }
    };
    exports2.PrefixingKeyValueCache = PrefixingKeyValueCache2;
    var PrefixesAreUnnecessaryForIsolationCache = class {
      constructor(wrapped) {
        this.wrapped = wrapped;
        this[_a2] = true;
      }
      get(key) {
        return this.wrapped.get(key);
      }
      set(key, value, options) {
        return this.wrapped.set(key, value, options);
      }
      delete(key) {
        return this.wrapped.delete(key);
      }
    };
    _a2 = prefixesAreUnnecessaryForIsolationSymbol;
  }
});

// node_modules/@apollo/server/node_modules/lru-cache/index.js
var require_lru_cache = __commonJS({
  "node_modules/@apollo/server/node_modules/lru-cache/index.js"(exports2, module2) {
    var perf2 = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
    var hasAbortController2 = typeof AbortController === "function";
    var AC2 = hasAbortController2 ? AbortController : class AbortController {
      constructor() {
        this.signal = new AS2();
      }
      abort(reason = new Error("This operation was aborted")) {
        this.signal.reason = this.signal.reason || reason;
        this.signal.aborted = true;
        this.signal.dispatchEvent({
          type: "abort",
          target: this.signal
        });
      }
    };
    var hasAbortSignal2 = typeof AbortSignal === "function";
    var hasACAbortSignal2 = typeof AC2.AbortSignal === "function";
    var AS2 = hasAbortSignal2 ? AbortSignal : hasACAbortSignal2 ? AC2.AbortController : class AbortSignal {
      constructor() {
        this.reason = void 0;
        this.aborted = false;
        this._listeners = [];
      }
      dispatchEvent(e) {
        if (e.type === "abort") {
          this.aborted = true;
          this.onabort(e);
          this._listeners.forEach((f) => f(e), this);
        }
      }
      onabort() {
      }
      addEventListener(ev, fn2) {
        if (ev === "abort") {
          this._listeners.push(fn2);
        }
      }
      removeEventListener(ev, fn2) {
        if (ev === "abort") {
          this._listeners = this._listeners.filter((f) => f !== fn2);
        }
      }
    };
    var warned2 = /* @__PURE__ */ new Set();
    var deprecatedOption2 = (opt, instead) => {
      const code = `LRU_CACHE_OPTION_${opt}`;
      if (shouldWarn2(code)) {
        warn2(code, `${opt} option`, `options.${instead}`, LRUCache2);
      }
    };
    var deprecatedMethod2 = (method, instead) => {
      const code = `LRU_CACHE_METHOD_${method}`;
      if (shouldWarn2(code)) {
        const { prototype } = LRUCache2;
        const { get } = Object.getOwnPropertyDescriptor(prototype, method);
        warn2(code, `${method} method`, `cache.${instead}()`, get);
      }
    };
    var deprecatedProperty2 = (field, instead) => {
      const code = `LRU_CACHE_PROPERTY_${field}`;
      if (shouldWarn2(code)) {
        const { prototype } = LRUCache2;
        const { get } = Object.getOwnPropertyDescriptor(prototype, field);
        warn2(code, `${field} property`, `cache.${instead}`, get);
      }
    };
    var emitWarning2 = (...a) => {
      typeof process === "object" && process && typeof process.emitWarning === "function" ? process.emitWarning(...a) : console.error(...a);
    };
    var shouldWarn2 = (code) => !warned2.has(code);
    var warn2 = (code, what, instead, fn2) => {
      warned2.add(code);
      const msg = `The ${what} is deprecated. Please use ${instead} instead.`;
      emitWarning2(msg, "DeprecationWarning", code, fn2);
    };
    var isPosInt2 = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);
    var getUintArray2 = (max) => !isPosInt2(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray2 : null;
    var ZeroArray2 = class extends Array {
      constructor(size) {
        super(size);
        this.fill(0);
      }
    };
    var Stack2 = class {
      constructor(max) {
        if (max === 0) {
          return [];
        }
        const UintArray = getUintArray2(max);
        this.heap = new UintArray(max);
        this.length = 0;
      }
      push(n) {
        this.heap[this.length++] = n;
      }
      pop() {
        return this.heap[--this.length];
      }
    };
    var LRUCache2 = class _LRUCache {
      constructor(options = {}) {
        const {
          max = 0,
          ttl,
          ttlResolution = 1,
          ttlAutopurge,
          updateAgeOnGet,
          updateAgeOnHas,
          allowStale,
          dispose,
          disposeAfter,
          noDisposeOnSet,
          noUpdateTTL,
          maxSize = 0,
          maxEntrySize = 0,
          sizeCalculation,
          fetchMethod,
          fetchContext,
          noDeleteOnFetchRejection,
          noDeleteOnStaleGet,
          allowStaleOnFetchRejection,
          allowStaleOnFetchAbort,
          ignoreFetchAbort
        } = options;
        const { length, maxAge, stale } = options instanceof _LRUCache ? {} : options;
        if (max !== 0 && !isPosInt2(max)) {
          throw new TypeError("max option must be a nonnegative integer");
        }
        const UintArray = max ? getUintArray2(max) : Array;
        if (!UintArray) {
          throw new Error("invalid max value: " + max);
        }
        this.max = max;
        this.maxSize = maxSize;
        this.maxEntrySize = maxEntrySize || this.maxSize;
        this.sizeCalculation = sizeCalculation || length;
        if (this.sizeCalculation) {
          if (!this.maxSize && !this.maxEntrySize) {
            throw new TypeError(
              "cannot set sizeCalculation without setting maxSize or maxEntrySize"
            );
          }
          if (typeof this.sizeCalculation !== "function") {
            throw new TypeError("sizeCalculation set to non-function");
          }
        }
        this.fetchMethod = fetchMethod || null;
        if (this.fetchMethod && typeof this.fetchMethod !== "function") {
          throw new TypeError(
            "fetchMethod must be a function if specified"
          );
        }
        this.fetchContext = fetchContext;
        if (!this.fetchMethod && fetchContext !== void 0) {
          throw new TypeError(
            "cannot set fetchContext without fetchMethod"
          );
        }
        this.keyMap = /* @__PURE__ */ new Map();
        this.keyList = new Array(max).fill(null);
        this.valList = new Array(max).fill(null);
        this.next = new UintArray(max);
        this.prev = new UintArray(max);
        this.head = 0;
        this.tail = 0;
        this.free = new Stack2(max);
        this.initialFill = 1;
        this.size = 0;
        if (typeof dispose === "function") {
          this.dispose = dispose;
        }
        if (typeof disposeAfter === "function") {
          this.disposeAfter = disposeAfter;
          this.disposed = [];
        } else {
          this.disposeAfter = null;
          this.disposed = null;
        }
        this.noDisposeOnSet = !!noDisposeOnSet;
        this.noUpdateTTL = !!noUpdateTTL;
        this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
        this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
        this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
        this.ignoreFetchAbort = !!ignoreFetchAbort;
        if (this.maxEntrySize !== 0) {
          if (this.maxSize !== 0) {
            if (!isPosInt2(this.maxSize)) {
              throw new TypeError(
                "maxSize must be a positive integer if specified"
              );
            }
          }
          if (!isPosInt2(this.maxEntrySize)) {
            throw new TypeError(
              "maxEntrySize must be a positive integer if specified"
            );
          }
          this.initializeSizeTracking();
        }
        this.allowStale = !!allowStale || !!stale;
        this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
        this.updateAgeOnGet = !!updateAgeOnGet;
        this.updateAgeOnHas = !!updateAgeOnHas;
        this.ttlResolution = isPosInt2(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
        this.ttlAutopurge = !!ttlAutopurge;
        this.ttl = ttl || maxAge || 0;
        if (this.ttl) {
          if (!isPosInt2(this.ttl)) {
            throw new TypeError(
              "ttl must be a positive integer if specified"
            );
          }
          this.initializeTTLTracking();
        }
        if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {
          throw new TypeError(
            "At least one of max, maxSize, or ttl is required"
          );
        }
        if (!this.ttlAutopurge && !this.max && !this.maxSize) {
          const code = "LRU_CACHE_UNBOUNDED";
          if (shouldWarn2(code)) {
            warned2.add(code);
            const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
            emitWarning2(msg, "UnboundedCacheWarning", code, _LRUCache);
          }
        }
        if (stale) {
          deprecatedOption2("stale", "allowStale");
        }
        if (maxAge) {
          deprecatedOption2("maxAge", "ttl");
        }
        if (length) {
          deprecatedOption2("length", "sizeCalculation");
        }
      }
      getRemainingTTL(key) {
        return this.has(key, { updateAgeOnHas: false }) ? Infinity : 0;
      }
      initializeTTLTracking() {
        this.ttls = new ZeroArray2(this.max);
        this.starts = new ZeroArray2(this.max);
        this.setItemTTL = (index, ttl, start = perf2.now()) => {
          this.starts[index] = ttl !== 0 ? start : 0;
          this.ttls[index] = ttl;
          if (ttl !== 0 && this.ttlAutopurge) {
            const t = setTimeout(() => {
              if (this.isStale(index)) {
                this.delete(this.keyList[index]);
              }
            }, ttl + 1);
            if (t.unref) {
              t.unref();
            }
          }
        };
        this.updateItemAge = (index) => {
          this.starts[index] = this.ttls[index] !== 0 ? perf2.now() : 0;
        };
        this.statusTTL = (status, index) => {
          if (status) {
            status.ttl = this.ttls[index];
            status.start = this.starts[index];
            status.now = cachedNow || getNow();
            status.remainingTTL = status.now + status.ttl - status.start;
          }
        };
        let cachedNow = 0;
        const getNow = () => {
          const n = perf2.now();
          if (this.ttlResolution > 0) {
            cachedNow = n;
            const t = setTimeout(
              () => cachedNow = 0,
              this.ttlResolution
            );
            if (t.unref) {
              t.unref();
            }
          }
          return n;
        };
        this.getRemainingTTL = (key) => {
          const index = this.keyMap.get(key);
          if (index === void 0) {
            return 0;
          }
          return this.ttls[index] === 0 || this.starts[index] === 0 ? Infinity : this.starts[index] + this.ttls[index] - (cachedNow || getNow());
        };
        this.isStale = (index) => {
          return this.ttls[index] !== 0 && this.starts[index] !== 0 && (cachedNow || getNow()) - this.starts[index] > this.ttls[index];
        };
      }
      updateItemAge(_index) {
      }
      statusTTL(_status, _index) {
      }
      setItemTTL(_index, _ttl, _start) {
      }
      isStale(_index) {
        return false;
      }
      initializeSizeTracking() {
        this.calculatedSize = 0;
        this.sizes = new ZeroArray2(this.max);
        this.removeItemSize = (index) => {
          this.calculatedSize -= this.sizes[index];
          this.sizes[index] = 0;
        };
        this.requireSize = (k2, v, size, sizeCalculation) => {
          if (this.isBackgroundFetch(v)) {
            return 0;
          }
          if (!isPosInt2(size)) {
            if (sizeCalculation) {
              if (typeof sizeCalculation !== "function") {
                throw new TypeError("sizeCalculation must be a function");
              }
              size = sizeCalculation(v, k2);
              if (!isPosInt2(size)) {
                throw new TypeError(
                  "sizeCalculation return invalid (expect positive integer)"
                );
              }
            } else {
              throw new TypeError(
                "invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set."
              );
            }
          }
          return size;
        };
        this.addItemSize = (index, size, status) => {
          this.sizes[index] = size;
          if (this.maxSize) {
            const maxSize = this.maxSize - this.sizes[index];
            while (this.calculatedSize > maxSize) {
              this.evict(true);
            }
          }
          this.calculatedSize += this.sizes[index];
          if (status) {
            status.entrySize = size;
            status.totalCalculatedSize = this.calculatedSize;
          }
        };
      }
      removeItemSize(_index) {
      }
      addItemSize(_index, _size) {
      }
      requireSize(_k, _v, size, sizeCalculation) {
        if (size || sizeCalculation) {
          throw new TypeError(
            "cannot set size without setting maxSize or maxEntrySize on cache"
          );
        }
      }
      *indexes({ allowStale = this.allowStale } = {}) {
        if (this.size) {
          for (let i = this.tail; true; ) {
            if (!this.isValidIndex(i)) {
              break;
            }
            if (allowStale || !this.isStale(i)) {
              yield i;
            }
            if (i === this.head) {
              break;
            } else {
              i = this.prev[i];
            }
          }
        }
      }
      *rindexes({ allowStale = this.allowStale } = {}) {
        if (this.size) {
          for (let i = this.head; true; ) {
            if (!this.isValidIndex(i)) {
              break;
            }
            if (allowStale || !this.isStale(i)) {
              yield i;
            }
            if (i === this.tail) {
              break;
            } else {
              i = this.next[i];
            }
          }
        }
      }
      isValidIndex(index) {
        return index !== void 0 && this.keyMap.get(this.keyList[index]) === index;
      }
      *entries() {
        for (const i of this.indexes()) {
          if (this.valList[i] !== void 0 && this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
            yield [this.keyList[i], this.valList[i]];
          }
        }
      }
      *rentries() {
        for (const i of this.rindexes()) {
          if (this.valList[i] !== void 0 && this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
            yield [this.keyList[i], this.valList[i]];
          }
        }
      }
      *keys() {
        for (const i of this.indexes()) {
          if (this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
            yield this.keyList[i];
          }
        }
      }
      *rkeys() {
        for (const i of this.rindexes()) {
          if (this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
            yield this.keyList[i];
          }
        }
      }
      *values() {
        for (const i of this.indexes()) {
          if (this.valList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
            yield this.valList[i];
          }
        }
      }
      *rvalues() {
        for (const i of this.rindexes()) {
          if (this.valList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
            yield this.valList[i];
          }
        }
      }
      [Symbol.iterator]() {
        return this.entries();
      }
      find(fn2, getOptions) {
        for (const i of this.indexes()) {
          const v = this.valList[i];
          const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0) continue;
          if (fn2(value, this.keyList[i], this)) {
            return this.get(this.keyList[i], getOptions);
          }
        }
      }
      forEach(fn2, thisp = this) {
        for (const i of this.indexes()) {
          const v = this.valList[i];
          const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0) continue;
          fn2.call(thisp, value, this.keyList[i], this);
        }
      }
      rforEach(fn2, thisp = this) {
        for (const i of this.rindexes()) {
          const v = this.valList[i];
          const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0) continue;
          fn2.call(thisp, value, this.keyList[i], this);
        }
      }
      get prune() {
        deprecatedMethod2("prune", "purgeStale");
        return this.purgeStale;
      }
      purgeStale() {
        let deleted = false;
        for (const i of this.rindexes({ allowStale: true })) {
          if (this.isStale(i)) {
            this.delete(this.keyList[i]);
            deleted = true;
          }
        }
        return deleted;
      }
      dump() {
        const arr = [];
        for (const i of this.indexes({ allowStale: true })) {
          const key = this.keyList[i];
          const v = this.valList[i];
          const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0) continue;
          const entry = { value };
          if (this.ttls) {
            entry.ttl = this.ttls[i];
            const age = perf2.now() - this.starts[i];
            entry.start = Math.floor(Date.now() - age);
          }
          if (this.sizes) {
            entry.size = this.sizes[i];
          }
          arr.unshift([key, entry]);
        }
        return arr;
      }
      load(arr) {
        this.clear();
        for (const [key, entry] of arr) {
          if (entry.start) {
            const age = Date.now() - entry.start;
            entry.start = perf2.now() - age;
          }
          this.set(key, entry.value, entry);
        }
      }
      dispose(_v, _k, _reason) {
      }
      set(k2, v, {
        ttl = this.ttl,
        start,
        noDisposeOnSet = this.noDisposeOnSet,
        size = 0,
        sizeCalculation = this.sizeCalculation,
        noUpdateTTL = this.noUpdateTTL,
        status
      } = {}) {
        size = this.requireSize(k2, v, size, sizeCalculation);
        if (this.maxEntrySize && size > this.maxEntrySize) {
          if (status) {
            status.set = "miss";
            status.maxEntrySizeExceeded = true;
          }
          this.delete(k2);
          return this;
        }
        let index = this.size === 0 ? void 0 : this.keyMap.get(k2);
        if (index === void 0) {
          index = this.newIndex();
          this.keyList[index] = k2;
          this.valList[index] = v;
          this.keyMap.set(k2, index);
          this.next[this.tail] = index;
          this.prev[index] = this.tail;
          this.tail = index;
          this.size++;
          this.addItemSize(index, size, status);
          if (status) {
            status.set = "add";
          }
          noUpdateTTL = false;
        } else {
          this.moveToTail(index);
          const oldVal = this.valList[index];
          if (v !== oldVal) {
            if (this.isBackgroundFetch(oldVal)) {
              oldVal.__abortController.abort(new Error("replaced"));
            } else {
              if (!noDisposeOnSet) {
                this.dispose(oldVal, k2, "set");
                if (this.disposeAfter) {
                  this.disposed.push([oldVal, k2, "set"]);
                }
              }
            }
            this.removeItemSize(index);
            this.valList[index] = v;
            this.addItemSize(index, size, status);
            if (status) {
              status.set = "replace";
              const oldValue = oldVal && this.isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
              if (oldValue !== void 0) status.oldValue = oldValue;
            }
          } else if (status) {
            status.set = "update";
          }
        }
        if (ttl !== 0 && this.ttl === 0 && !this.ttls) {
          this.initializeTTLTracking();
        }
        if (!noUpdateTTL) {
          this.setItemTTL(index, ttl, start);
        }
        this.statusTTL(status, index);
        if (this.disposeAfter) {
          while (this.disposed.length) {
            this.disposeAfter(...this.disposed.shift());
          }
        }
        return this;
      }
      newIndex() {
        if (this.size === 0) {
          return this.tail;
        }
        if (this.size === this.max && this.max !== 0) {
          return this.evict(false);
        }
        if (this.free.length !== 0) {
          return this.free.pop();
        }
        return this.initialFill++;
      }
      pop() {
        if (this.size) {
          const val = this.valList[this.head];
          this.evict(true);
          return val;
        }
      }
      evict(free) {
        const head = this.head;
        const k2 = this.keyList[head];
        const v = this.valList[head];
        if (this.isBackgroundFetch(v)) {
          v.__abortController.abort(new Error("evicted"));
        } else {
          this.dispose(v, k2, "evict");
          if (this.disposeAfter) {
            this.disposed.push([v, k2, "evict"]);
          }
        }
        this.removeItemSize(head);
        if (free) {
          this.keyList[head] = null;
          this.valList[head] = null;
          this.free.push(head);
        }
        this.head = this.next[head];
        this.keyMap.delete(k2);
        this.size--;
        return head;
      }
      has(k2, { updateAgeOnHas = this.updateAgeOnHas, status } = {}) {
        const index = this.keyMap.get(k2);
        if (index !== void 0) {
          if (!this.isStale(index)) {
            if (updateAgeOnHas) {
              this.updateItemAge(index);
            }
            if (status) status.has = "hit";
            this.statusTTL(status, index);
            return true;
          } else if (status) {
            status.has = "stale";
            this.statusTTL(status, index);
          }
        } else if (status) {
          status.has = "miss";
        }
        return false;
      }
      // like get(), but without any LRU updating or TTL expiration
      peek(k2, { allowStale = this.allowStale } = {}) {
        const index = this.keyMap.get(k2);
        if (index !== void 0 && (allowStale || !this.isStale(index))) {
          const v = this.valList[index];
          return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
        }
      }
      backgroundFetch(k2, index, options, context2) {
        const v = index === void 0 ? void 0 : this.valList[index];
        if (this.isBackgroundFetch(v)) {
          return v;
        }
        const ac2 = new AC2();
        if (options.signal) {
          options.signal.addEventListener(
            "abort",
            () => ac2.abort(options.signal.reason)
          );
        }
        const fetchOpts = {
          signal: ac2.signal,
          options,
          context: context2
        };
        const cb = (v2, updateCache = false) => {
          const { aborted } = ac2.signal;
          const ignoreAbort = options.ignoreFetchAbort && v2 !== void 0;
          if (options.status) {
            if (aborted && !updateCache) {
              options.status.fetchAborted = true;
              options.status.fetchError = ac2.signal.reason;
              if (ignoreAbort) options.status.fetchAbortIgnored = true;
            } else {
              options.status.fetchResolved = true;
            }
          }
          if (aborted && !ignoreAbort && !updateCache) {
            return fetchFail(ac2.signal.reason);
          }
          if (this.valList[index] === p) {
            if (v2 === void 0) {
              if (p.__staleWhileFetching) {
                this.valList[index] = p.__staleWhileFetching;
              } else {
                this.delete(k2);
              }
            } else {
              if (options.status) options.status.fetchUpdated = true;
              this.set(k2, v2, fetchOpts.options);
            }
          }
          return v2;
        };
        const eb = (er2) => {
          if (options.status) {
            options.status.fetchRejected = true;
            options.status.fetchError = er2;
          }
          return fetchFail(er2);
        };
        const fetchFail = (er2) => {
          const { aborted } = ac2.signal;
          const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
          const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
          const noDelete = allowStale || options.noDeleteOnFetchRejection;
          if (this.valList[index] === p) {
            const del = !noDelete || p.__staleWhileFetching === void 0;
            if (del) {
              this.delete(k2);
            } else if (!allowStaleAborted) {
              this.valList[index] = p.__staleWhileFetching;
            }
          }
          if (allowStale) {
            if (options.status && p.__staleWhileFetching !== void 0) {
              options.status.returnedStale = true;
            }
            return p.__staleWhileFetching;
          } else if (p.__returned === p) {
            throw er2;
          }
        };
        const pcall = (res, rej) => {
          this.fetchMethod(k2, v, fetchOpts).then((v2) => res(v2), rej);
          ac2.signal.addEventListener("abort", () => {
            if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
              res();
              if (options.allowStaleOnFetchAbort) {
                res = (v2) => cb(v2, true);
              }
            }
          });
        };
        if (options.status) options.status.fetchDispatched = true;
        const p = new Promise(pcall).then(cb, eb);
        p.__abortController = ac2;
        p.__staleWhileFetching = v;
        p.__returned = null;
        if (index === void 0) {
          this.set(k2, p, { ...fetchOpts.options, status: void 0 });
          index = this.keyMap.get(k2);
        } else {
          this.valList[index] = p;
        }
        return p;
      }
      isBackgroundFetch(p) {
        return p && typeof p === "object" && typeof p.then === "function" && Object.prototype.hasOwnProperty.call(
          p,
          "__staleWhileFetching"
        ) && Object.prototype.hasOwnProperty.call(p, "__returned") && (p.__returned === p || p.__returned === null);
      }
      // this takes the union of get() and set() opts, because it does both
      async fetch(k2, {
        // get options
        allowStale = this.allowStale,
        updateAgeOnGet = this.updateAgeOnGet,
        noDeleteOnStaleGet = this.noDeleteOnStaleGet,
        // set options
        ttl = this.ttl,
        noDisposeOnSet = this.noDisposeOnSet,
        size = 0,
        sizeCalculation = this.sizeCalculation,
        noUpdateTTL = this.noUpdateTTL,
        // fetch exclusive options
        noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
        allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
        ignoreFetchAbort = this.ignoreFetchAbort,
        allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
        fetchContext = this.fetchContext,
        forceRefresh = false,
        status,
        signal
      } = {}) {
        if (!this.fetchMethod) {
          if (status) status.fetch = "get";
          return this.get(k2, {
            allowStale,
            updateAgeOnGet,
            noDeleteOnStaleGet,
            status
          });
        }
        const options = {
          allowStale,
          updateAgeOnGet,
          noDeleteOnStaleGet,
          ttl,
          noDisposeOnSet,
          size,
          sizeCalculation,
          noUpdateTTL,
          noDeleteOnFetchRejection,
          allowStaleOnFetchRejection,
          allowStaleOnFetchAbort,
          ignoreFetchAbort,
          status,
          signal
        };
        let index = this.keyMap.get(k2);
        if (index === void 0) {
          if (status) status.fetch = "miss";
          const p = this.backgroundFetch(k2, index, options, fetchContext);
          return p.__returned = p;
        } else {
          const v = this.valList[index];
          if (this.isBackgroundFetch(v)) {
            const stale = allowStale && v.__staleWhileFetching !== void 0;
            if (status) {
              status.fetch = "inflight";
              if (stale) status.returnedStale = true;
            }
            return stale ? v.__staleWhileFetching : v.__returned = v;
          }
          const isStale = this.isStale(index);
          if (!forceRefresh && !isStale) {
            if (status) status.fetch = "hit";
            this.moveToTail(index);
            if (updateAgeOnGet) {
              this.updateItemAge(index);
            }
            this.statusTTL(status, index);
            return v;
          }
          const p = this.backgroundFetch(k2, index, options, fetchContext);
          const hasStale = p.__staleWhileFetching !== void 0;
          const staleVal = hasStale && allowStale;
          if (status) {
            status.fetch = hasStale && isStale ? "stale" : "refresh";
            if (staleVal && isStale) status.returnedStale = true;
          }
          return staleVal ? p.__staleWhileFetching : p.__returned = p;
        }
      }
      get(k2, {
        allowStale = this.allowStale,
        updateAgeOnGet = this.updateAgeOnGet,
        noDeleteOnStaleGet = this.noDeleteOnStaleGet,
        status
      } = {}) {
        const index = this.keyMap.get(k2);
        if (index !== void 0) {
          const value = this.valList[index];
          const fetching = this.isBackgroundFetch(value);
          this.statusTTL(status, index);
          if (this.isStale(index)) {
            if (status) status.get = "stale";
            if (!fetching) {
              if (!noDeleteOnStaleGet) {
                this.delete(k2);
              }
              if (status) status.returnedStale = allowStale;
              return allowStale ? value : void 0;
            } else {
              if (status) {
                status.returnedStale = allowStale && value.__staleWhileFetching !== void 0;
              }
              return allowStale ? value.__staleWhileFetching : void 0;
            }
          } else {
            if (status) status.get = "hit";
            if (fetching) {
              return value.__staleWhileFetching;
            }
            this.moveToTail(index);
            if (updateAgeOnGet) {
              this.updateItemAge(index);
            }
            return value;
          }
        } else if (status) {
          status.get = "miss";
        }
      }
      connect(p, n) {
        this.prev[n] = p;
        this.next[p] = n;
      }
      moveToTail(index) {
        if (index !== this.tail) {
          if (index === this.head) {
            this.head = this.next[index];
          } else {
            this.connect(this.prev[index], this.next[index]);
          }
          this.connect(this.tail, index);
          this.tail = index;
        }
      }
      get del() {
        deprecatedMethod2("del", "delete");
        return this.delete;
      }
      delete(k2) {
        let deleted = false;
        if (this.size !== 0) {
          const index = this.keyMap.get(k2);
          if (index !== void 0) {
            deleted = true;
            if (this.size === 1) {
              this.clear();
            } else {
              this.removeItemSize(index);
              const v = this.valList[index];
              if (this.isBackgroundFetch(v)) {
                v.__abortController.abort(new Error("deleted"));
              } else {
                this.dispose(v, k2, "delete");
                if (this.disposeAfter) {
                  this.disposed.push([v, k2, "delete"]);
                }
              }
              this.keyMap.delete(k2);
              this.keyList[index] = null;
              this.valList[index] = null;
              if (index === this.tail) {
                this.tail = this.prev[index];
              } else if (index === this.head) {
                this.head = this.next[index];
              } else {
                this.next[this.prev[index]] = this.next[index];
                this.prev[this.next[index]] = this.prev[index];
              }
              this.size--;
              this.free.push(index);
            }
          }
        }
        if (this.disposed) {
          while (this.disposed.length) {
            this.disposeAfter(...this.disposed.shift());
          }
        }
        return deleted;
      }
      clear() {
        for (const index of this.rindexes({ allowStale: true })) {
          const v = this.valList[index];
          if (this.isBackgroundFetch(v)) {
            v.__abortController.abort(new Error("deleted"));
          } else {
            const k2 = this.keyList[index];
            this.dispose(v, k2, "delete");
            if (this.disposeAfter) {
              this.disposed.push([v, k2, "delete"]);
            }
          }
        }
        this.keyMap.clear();
        this.valList.fill(null);
        this.keyList.fill(null);
        if (this.ttls) {
          this.ttls.fill(0);
          this.starts.fill(0);
        }
        if (this.sizes) {
          this.sizes.fill(0);
        }
        this.head = 0;
        this.tail = 0;
        this.initialFill = 1;
        this.free.length = 0;
        this.calculatedSize = 0;
        this.size = 0;
        if (this.disposed) {
          while (this.disposed.length) {
            this.disposeAfter(...this.disposed.shift());
          }
        }
      }
      get reset() {
        deprecatedMethod2("reset", "clear");
        return this.clear;
      }
      get length() {
        deprecatedProperty2("length", "size");
        return this.size;
      }
      static get AbortController() {
        return AC2;
      }
      static get AbortSignal() {
        return AS2;
      }
    };
    module2.exports = LRUCache2;
  }
});

// node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/InMemoryLRUCache.js
var require_InMemoryLRUCache = __commonJS({
  "node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/InMemoryLRUCache.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InMemoryLRUCache = void 0;
    var lru_cache_1 = __importDefault2(require_lru_cache());
    var InMemoryLRUCache2 = class _InMemoryLRUCache {
      constructor(lruCacheOpts) {
        this.cache = new lru_cache_1.default({
          sizeCalculation: _InMemoryLRUCache.sizeCalculation,
          maxSize: Math.pow(2, 20) * 30,
          ...lruCacheOpts
        });
      }
      static sizeCalculation(item) {
        if (typeof item === "string") {
          return item.length;
        }
        if (typeof item === "object") {
          return Buffer.byteLength(JSON.stringify(item), "utf8");
        }
        return 1;
      }
      async set(key, value, options) {
        if (options === null || options === void 0 ? void 0 : options.ttl) {
          this.cache.set(key, value, { ttl: options.ttl * 1e3 });
        } else {
          this.cache.set(key, value);
        }
      }
      async get(key) {
        return this.cache.get(key);
      }
      async delete(key) {
        return this.cache.delete(key);
      }
      clear() {
        this.cache.clear();
      }
      keys() {
        return [...this.cache.keys()];
      }
    };
    exports2.InMemoryLRUCache = InMemoryLRUCache2;
  }
});

// node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/ErrorsAreMissesCache.js
var require_ErrorsAreMissesCache = __commonJS({
  "node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/ErrorsAreMissesCache.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ErrorsAreMissesCache = void 0;
    var ErrorsAreMissesCache = class {
      constructor(cache, logger) {
        this.cache = cache;
        this.logger = logger;
      }
      async get(key) {
        try {
          return await this.cache.get(key);
        } catch (e) {
          if (this.logger) {
            if (e instanceof Error) {
              this.logger.error(e.message);
            } else {
              this.logger.error(e);
            }
          }
          return void 0;
        }
      }
      async set(key, value, opts) {
        return this.cache.set(key, value, opts);
      }
      async delete(key) {
        return this.cache.delete(key);
      }
    };
    exports2.ErrorsAreMissesCache = ErrorsAreMissesCache;
  }
});

// node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ErrorsAreMissesCache = exports2.InMemoryLRUCache = exports2.PrefixingKeyValueCache = void 0;
    var PrefixingKeyValueCache_1 = require_PrefixingKeyValueCache();
    Object.defineProperty(exports2, "PrefixingKeyValueCache", { enumerable: true, get: function() {
      return PrefixingKeyValueCache_1.PrefixingKeyValueCache;
    } });
    var InMemoryLRUCache_1 = require_InMemoryLRUCache();
    Object.defineProperty(exports2, "InMemoryLRUCache", { enumerable: true, get: function() {
      return InMemoryLRUCache_1.InMemoryLRUCache;
    } });
    var ErrorsAreMissesCache_1 = require_ErrorsAreMissesCache();
    Object.defineProperty(exports2, "ErrorsAreMissesCache", { enumerable: true, get: function() {
      return ErrorsAreMissesCache_1.ErrorsAreMissesCache;
    } });
  }
});

// node_modules/graphql/version.js
var require_version = __commonJS({
  "node_modules/graphql/version.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.versionInfo = exports2.version = void 0;
    var version2 = "16.9.0";
    exports2.version = version2;
    var versionInfo = Object.freeze({
      major: 16,
      minor: 9,
      patch: 0,
      preReleaseTag: null
    });
    exports2.versionInfo = versionInfo;
  }
});

// node_modules/graphql/jsutils/devAssert.js
var require_devAssert = __commonJS({
  "node_modules/graphql/jsutils/devAssert.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.devAssert = devAssert;
    function devAssert(condition, message) {
      const booleanCondition = Boolean(condition);
      if (!booleanCondition) {
        throw new Error(message);
      }
    }
  }
});

// node_modules/graphql/jsutils/isPromise.js
var require_isPromise = __commonJS({
  "node_modules/graphql/jsutils/isPromise.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.isPromise = isPromise2;
    function isPromise2(value) {
      return typeof (value === null || value === void 0 ? void 0 : value.then) === "function";
    }
  }
});

// node_modules/graphql/jsutils/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/graphql/jsutils/isObjectLike.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.isObjectLike = isObjectLike;
    function isObjectLike(value) {
      return typeof value == "object" && value !== null;
    }
  }
});

// node_modules/graphql/jsutils/invariant.js
var require_invariant = __commonJS({
  "node_modules/graphql/jsutils/invariant.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.invariant = invariant;
    function invariant(condition, message) {
      const booleanCondition = Boolean(condition);
      if (!booleanCondition) {
        throw new Error(
          message != null ? message : "Unexpected invariant triggered."
        );
      }
    }
  }
});

// node_modules/graphql/language/location.js
var require_location = __commonJS({
  "node_modules/graphql/language/location.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getLocation = getLocation;
    var _invariant = require_invariant();
    var LineRegExp = /\r\n|[\n\r]/g;
    function getLocation(source, position) {
      let lastLineStart = 0;
      let line = 1;
      for (const match of source.body.matchAll(LineRegExp)) {
        typeof match.index === "number" || (0, _invariant.invariant)(false);
        if (match.index >= position) {
          break;
        }
        lastLineStart = match.index + match[0].length;
        line += 1;
      }
      return {
        line,
        column: position + 1 - lastLineStart
      };
    }
  }
});

// node_modules/graphql/language/printLocation.js
var require_printLocation = __commonJS({
  "node_modules/graphql/language/printLocation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.printLocation = printLocation;
    exports2.printSourceLocation = printSourceLocation;
    var _location = require_location();
    function printLocation(location) {
      return printSourceLocation(
        location.source,
        (0, _location.getLocation)(location.source, location.start)
      );
    }
    function printSourceLocation(source, sourceLocation) {
      const firstLineColumnOffset = source.locationOffset.column - 1;
      const body = "".padStart(firstLineColumnOffset) + source.body;
      const lineIndex = sourceLocation.line - 1;
      const lineOffset = source.locationOffset.line - 1;
      const lineNum = sourceLocation.line + lineOffset;
      const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
      const columnNum = sourceLocation.column + columnOffset;
      const locationStr = `${source.name}:${lineNum}:${columnNum}
`;
      const lines = body.split(/\r\n|[\n\r]/g);
      const locationLine = lines[lineIndex];
      if (locationLine.length > 120) {
        const subLineIndex = Math.floor(columnNum / 80);
        const subLineColumnNum = columnNum % 80;
        const subLines = [];
        for (let i = 0; i < locationLine.length; i += 80) {
          subLines.push(locationLine.slice(i, i + 80));
        }
        return locationStr + printPrefixedLines([
          [`${lineNum} |`, subLines[0]],
          ...subLines.slice(1, subLineIndex + 1).map((subLine) => ["|", subLine]),
          ["|", "^".padStart(subLineColumnNum)],
          ["|", subLines[subLineIndex + 1]]
        ]);
      }
      return locationStr + printPrefixedLines([
        // Lines specified like this: ["prefix", "string"],
        [`${lineNum - 1} |`, lines[lineIndex - 1]],
        [`${lineNum} |`, locationLine],
        ["|", "^".padStart(columnNum)],
        [`${lineNum + 1} |`, lines[lineIndex + 1]]
      ]);
    }
    function printPrefixedLines(lines) {
      const existingLines = lines.filter(([_5, line]) => line !== void 0);
      const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));
      return existingLines.map(([prefix, line]) => prefix.padStart(padLen) + (line ? " " + line : "")).join("\n");
    }
  }
});

// node_modules/graphql/error/GraphQLError.js
var require_GraphQLError = __commonJS({
  "node_modules/graphql/error/GraphQLError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.GraphQLError = void 0;
    exports2.formatError = formatError2;
    exports2.printError = printError;
    var _isObjectLike = require_isObjectLike();
    var _location = require_location();
    var _printLocation = require_printLocation();
    function toNormalizedOptions(args) {
      const firstArg = args[0];
      if (firstArg == null || "kind" in firstArg || "length" in firstArg) {
        return {
          nodes: firstArg,
          source: args[1],
          positions: args[2],
          path: args[3],
          originalError: args[4],
          extensions: args[5]
        };
      }
      return firstArg;
    }
    var GraphQLError7 = class _GraphQLError extends Error {
      /**
       * An array of `{ line, column }` locations within the source GraphQL document
       * which correspond to this error.
       *
       * Errors during validation often contain multiple locations, for example to
       * point out two things with the same name. Errors during execution include a
       * single location, the field which produced the error.
       *
       * Enumerable, and appears in the result of JSON.stringify().
       */
      /**
       * An array describing the JSON-path into the execution response which
       * corresponds to this error. Only included for errors during execution.
       *
       * Enumerable, and appears in the result of JSON.stringify().
       */
      /**
       * An array of GraphQL AST Nodes corresponding to this error.
       */
      /**
       * The source GraphQL document for the first location of this error.
       *
       * Note that if this Error represents more than one node, the source may not
       * represent nodes after the first node.
       */
      /**
       * An array of character offsets within the source GraphQL document
       * which correspond to this error.
       */
      /**
       * The original error thrown from a field resolver during execution.
       */
      /**
       * Extension fields to add to the formatted error.
       */
      /**
       * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.
       */
      constructor(message, ...rawArgs) {
        var _this$nodes, _nodeLocations$, _ref;
        const { nodes, source, positions, path: path2, originalError, extensions } = toNormalizedOptions(rawArgs);
        super(message);
        this.name = "GraphQLError";
        this.path = path2 !== null && path2 !== void 0 ? path2 : void 0;
        this.originalError = originalError !== null && originalError !== void 0 ? originalError : void 0;
        this.nodes = undefinedIfEmpty(
          Array.isArray(nodes) ? nodes : nodes ? [nodes] : void 0
        );
        const nodeLocations = undefinedIfEmpty(
          (_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map((node) => node.loc).filter((loc) => loc != null)
        );
        this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;
        this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => loc.start);
        this.locations = positions && source ? positions.map((pos) => (0, _location.getLocation)(source, pos)) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(
          (loc) => (0, _location.getLocation)(loc.source, loc.start)
        );
        const originalExtensions = (0, _isObjectLike.isObjectLike)(
          originalError === null || originalError === void 0 ? void 0 : originalError.extensions
        ) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : void 0;
        this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : /* @__PURE__ */ Object.create(null);
        Object.defineProperties(this, {
          message: {
            writable: true,
            enumerable: true
          },
          name: {
            enumerable: false
          },
          nodes: {
            enumerable: false
          },
          source: {
            enumerable: false
          },
          positions: {
            enumerable: false
          },
          originalError: {
            enumerable: false
          }
        });
        if (originalError !== null && originalError !== void 0 && originalError.stack) {
          Object.defineProperty(this, "stack", {
            value: originalError.stack,
            writable: true,
            configurable: true
          });
        } else if (Error.captureStackTrace) {
          Error.captureStackTrace(this, _GraphQLError);
        } else {
          Object.defineProperty(this, "stack", {
            value: Error().stack,
            writable: true,
            configurable: true
          });
        }
      }
      get [Symbol.toStringTag]() {
        return "GraphQLError";
      }
      toString() {
        let output = this.message;
        if (this.nodes) {
          for (const node of this.nodes) {
            if (node.loc) {
              output += "\n\n" + (0, _printLocation.printLocation)(node.loc);
            }
          }
        } else if (this.source && this.locations) {
          for (const location of this.locations) {
            output += "\n\n" + (0, _printLocation.printSourceLocation)(this.source, location);
          }
        }
        return output;
      }
      toJSON() {
        const formattedError = {
          message: this.message
        };
        if (this.locations != null) {
          formattedError.locations = this.locations;
        }
        if (this.path != null) {
          formattedError.path = this.path;
        }
        if (this.extensions != null && Object.keys(this.extensions).length > 0) {
          formattedError.extensions = this.extensions;
        }
        return formattedError;
      }
    };
    exports2.GraphQLError = GraphQLError7;
    function undefinedIfEmpty(array) {
      return array === void 0 || array.length === 0 ? void 0 : array;
    }
    function printError(error) {
      return error.toString();
    }
    function formatError2(error) {
      return error.toJSON();
    }
  }
});

// node_modules/graphql/error/syntaxError.js
var require_syntaxError = __commonJS({
  "node_modules/graphql/error/syntaxError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.syntaxError = syntaxError;
    var _GraphQLError = require_GraphQLError();
    function syntaxError(source, position, description) {
      return new _GraphQLError.GraphQLError(`Syntax Error: ${description}`, {
        source,
        positions: [position]
      });
    }
  }
});

// node_modules/graphql/language/ast.js
var require_ast = __commonJS({
  "node_modules/graphql/language/ast.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Token = exports2.QueryDocumentKeys = exports2.OperationTypeNode = exports2.Location = void 0;
    exports2.isNode = isNode;
    var Location = class {
      /**
       * The character offset at which this Node begins.
       */
      /**
       * The character offset at which this Node ends.
       */
      /**
       * The Token at which this Node begins.
       */
      /**
       * The Token at which this Node ends.
       */
      /**
       * The Source document the AST represents.
       */
      constructor(startToken, endToken, source) {
        this.start = startToken.start;
        this.end = endToken.end;
        this.startToken = startToken;
        this.endToken = endToken;
        this.source = source;
      }
      get [Symbol.toStringTag]() {
        return "Location";
      }
      toJSON() {
        return {
          start: this.start,
          end: this.end
        };
      }
    };
    exports2.Location = Location;
    var Token = class {
      /**
       * The kind of Token.
       */
      /**
       * The character offset at which this Node begins.
       */
      /**
       * The character offset at which this Node ends.
       */
      /**
       * The 1-indexed line number on which this Token appears.
       */
      /**
       * The 1-indexed column number at which this Token begins.
       */
      /**
       * For non-punctuation tokens, represents the interpreted value of the token.
       *
       * Note: is undefined for punctuation tokens, but typed as string for
       * convenience in the parser.
       */
      /**
       * Tokens exist as nodes in a double-linked-list amongst all tokens
       * including ignored tokens. <SOF> is always the first node and <EOF>
       * the last.
       */
      constructor(kind, start, end, line, column, value) {
        this.kind = kind;
        this.start = start;
        this.end = end;
        this.line = line;
        this.column = column;
        this.value = value;
        this.prev = null;
        this.next = null;
      }
      get [Symbol.toStringTag]() {
        return "Token";
      }
      toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column
        };
      }
    };
    exports2.Token = Token;
    var QueryDocumentKeys = {
      Name: [],
      Document: ["definitions"],
      OperationDefinition: [
        "name",
        "variableDefinitions",
        "directives",
        "selectionSet"
      ],
      VariableDefinition: ["variable", "type", "defaultValue", "directives"],
      Variable: ["name"],
      SelectionSet: ["selections"],
      Field: ["alias", "name", "arguments", "directives", "selectionSet"],
      Argument: ["name", "value"],
      FragmentSpread: ["name", "directives"],
      InlineFragment: ["typeCondition", "directives", "selectionSet"],
      FragmentDefinition: [
        "name",
        // Note: fragment variable definitions are deprecated and will removed in v17.0.0
        "variableDefinitions",
        "typeCondition",
        "directives",
        "selectionSet"
      ],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ["values"],
      ObjectValue: ["fields"],
      ObjectField: ["name", "value"],
      Directive: ["name", "arguments"],
      NamedType: ["name"],
      ListType: ["type"],
      NonNullType: ["type"],
      SchemaDefinition: ["description", "directives", "operationTypes"],
      OperationTypeDefinition: ["type"],
      ScalarTypeDefinition: ["description", "name", "directives"],
      ObjectTypeDefinition: [
        "description",
        "name",
        "interfaces",
        "directives",
        "fields"
      ],
      FieldDefinition: ["description", "name", "arguments", "type", "directives"],
      InputValueDefinition: [
        "description",
        "name",
        "type",
        "defaultValue",
        "directives"
      ],
      InterfaceTypeDefinition: [
        "description",
        "name",
        "interfaces",
        "directives",
        "fields"
      ],
      UnionTypeDefinition: ["description", "name", "directives", "types"],
      EnumTypeDefinition: ["description", "name", "directives", "values"],
      EnumValueDefinition: ["description", "name", "directives"],
      InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
      DirectiveDefinition: ["description", "name", "arguments", "locations"],
      SchemaExtension: ["directives", "operationTypes"],
      ScalarTypeExtension: ["name", "directives"],
      ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
      InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
      UnionTypeExtension: ["name", "directives", "types"],
      EnumTypeExtension: ["name", "directives", "values"],
      InputObjectTypeExtension: ["name", "directives", "fields"]
    };
    exports2.QueryDocumentKeys = QueryDocumentKeys;
    var kindValues = new Set(Object.keys(QueryDocumentKeys));
    function isNode(maybeNode) {
      const maybeKind = maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;
      return typeof maybeKind === "string" && kindValues.has(maybeKind);
    }
    var OperationTypeNode;
    exports2.OperationTypeNode = OperationTypeNode;
    (function(OperationTypeNode2) {
      OperationTypeNode2["QUERY"] = "query";
      OperationTypeNode2["MUTATION"] = "mutation";
      OperationTypeNode2["SUBSCRIPTION"] = "subscription";
    })(OperationTypeNode || (exports2.OperationTypeNode = OperationTypeNode = {}));
  }
});

// node_modules/graphql/language/directiveLocation.js
var require_directiveLocation = __commonJS({
  "node_modules/graphql/language/directiveLocation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.DirectiveLocation = void 0;
    var DirectiveLocation;
    exports2.DirectiveLocation = DirectiveLocation;
    (function(DirectiveLocation2) {
      DirectiveLocation2["QUERY"] = "QUERY";
      DirectiveLocation2["MUTATION"] = "MUTATION";
      DirectiveLocation2["SUBSCRIPTION"] = "SUBSCRIPTION";
      DirectiveLocation2["FIELD"] = "FIELD";
      DirectiveLocation2["FRAGMENT_DEFINITION"] = "FRAGMENT_DEFINITION";
      DirectiveLocation2["FRAGMENT_SPREAD"] = "FRAGMENT_SPREAD";
      DirectiveLocation2["INLINE_FRAGMENT"] = "INLINE_FRAGMENT";
      DirectiveLocation2["VARIABLE_DEFINITION"] = "VARIABLE_DEFINITION";
      DirectiveLocation2["SCHEMA"] = "SCHEMA";
      DirectiveLocation2["SCALAR"] = "SCALAR";
      DirectiveLocation2["OBJECT"] = "OBJECT";
      DirectiveLocation2["FIELD_DEFINITION"] = "FIELD_DEFINITION";
      DirectiveLocation2["ARGUMENT_DEFINITION"] = "ARGUMENT_DEFINITION";
      DirectiveLocation2["INTERFACE"] = "INTERFACE";
      DirectiveLocation2["UNION"] = "UNION";
      DirectiveLocation2["ENUM"] = "ENUM";
      DirectiveLocation2["ENUM_VALUE"] = "ENUM_VALUE";
      DirectiveLocation2["INPUT_OBJECT"] = "INPUT_OBJECT";
      DirectiveLocation2["INPUT_FIELD_DEFINITION"] = "INPUT_FIELD_DEFINITION";
    })(DirectiveLocation || (exports2.DirectiveLocation = DirectiveLocation = {}));
  }
});

// node_modules/graphql/language/kinds.js
var require_kinds = __commonJS({
  "node_modules/graphql/language/kinds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Kind = void 0;
    var Kind19;
    exports2.Kind = Kind19;
    (function(Kind20) {
      Kind20["NAME"] = "Name";
      Kind20["DOCUMENT"] = "Document";
      Kind20["OPERATION_DEFINITION"] = "OperationDefinition";
      Kind20["VARIABLE_DEFINITION"] = "VariableDefinition";
      Kind20["SELECTION_SET"] = "SelectionSet";
      Kind20["FIELD"] = "Field";
      Kind20["ARGUMENT"] = "Argument";
      Kind20["FRAGMENT_SPREAD"] = "FragmentSpread";
      Kind20["INLINE_FRAGMENT"] = "InlineFragment";
      Kind20["FRAGMENT_DEFINITION"] = "FragmentDefinition";
      Kind20["VARIABLE"] = "Variable";
      Kind20["INT"] = "IntValue";
      Kind20["FLOAT"] = "FloatValue";
      Kind20["STRING"] = "StringValue";
      Kind20["BOOLEAN"] = "BooleanValue";
      Kind20["NULL"] = "NullValue";
      Kind20["ENUM"] = "EnumValue";
      Kind20["LIST"] = "ListValue";
      Kind20["OBJECT"] = "ObjectValue";
      Kind20["OBJECT_FIELD"] = "ObjectField";
      Kind20["DIRECTIVE"] = "Directive";
      Kind20["NAMED_TYPE"] = "NamedType";
      Kind20["LIST_TYPE"] = "ListType";
      Kind20["NON_NULL_TYPE"] = "NonNullType";
      Kind20["SCHEMA_DEFINITION"] = "SchemaDefinition";
      Kind20["OPERATION_TYPE_DEFINITION"] = "OperationTypeDefinition";
      Kind20["SCALAR_TYPE_DEFINITION"] = "ScalarTypeDefinition";
      Kind20["OBJECT_TYPE_DEFINITION"] = "ObjectTypeDefinition";
      Kind20["FIELD_DEFINITION"] = "FieldDefinition";
      Kind20["INPUT_VALUE_DEFINITION"] = "InputValueDefinition";
      Kind20["INTERFACE_TYPE_DEFINITION"] = "InterfaceTypeDefinition";
      Kind20["UNION_TYPE_DEFINITION"] = "UnionTypeDefinition";
      Kind20["ENUM_TYPE_DEFINITION"] = "EnumTypeDefinition";
      Kind20["ENUM_VALUE_DEFINITION"] = "EnumValueDefinition";
      Kind20["INPUT_OBJECT_TYPE_DEFINITION"] = "InputObjectTypeDefinition";
      Kind20["DIRECTIVE_DEFINITION"] = "DirectiveDefinition";
      Kind20["SCHEMA_EXTENSION"] = "SchemaExtension";
      Kind20["SCALAR_TYPE_EXTENSION"] = "ScalarTypeExtension";
      Kind20["OBJECT_TYPE_EXTENSION"] = "ObjectTypeExtension";
      Kind20["INTERFACE_TYPE_EXTENSION"] = "InterfaceTypeExtension";
      Kind20["UNION_TYPE_EXTENSION"] = "UnionTypeExtension";
      Kind20["ENUM_TYPE_EXTENSION"] = "EnumTypeExtension";
      Kind20["INPUT_OBJECT_TYPE_EXTENSION"] = "InputObjectTypeExtension";
    })(Kind19 || (exports2.Kind = Kind19 = {}));
  }
});

// node_modules/graphql/language/characterClasses.js
var require_characterClasses = __commonJS({
  "node_modules/graphql/language/characterClasses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.isDigit = isDigit;
    exports2.isLetter = isLetter;
    exports2.isNameContinue = isNameContinue;
    exports2.isNameStart = isNameStart;
    exports2.isWhiteSpace = isWhiteSpace;
    function isWhiteSpace(code) {
      return code === 9 || code === 32;
    }
    function isDigit(code) {
      return code >= 48 && code <= 57;
    }
    function isLetter(code) {
      return code >= 97 && code <= 122 || // A-Z
      code >= 65 && code <= 90;
    }
    function isNameStart(code) {
      return isLetter(code) || code === 95;
    }
    function isNameContinue(code) {
      return isLetter(code) || isDigit(code) || code === 95;
    }
  }
});

// node_modules/graphql/language/blockString.js
var require_blockString = __commonJS({
  "node_modules/graphql/language/blockString.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.dedentBlockStringLines = dedentBlockStringLines;
    exports2.isPrintableAsBlockString = isPrintableAsBlockString;
    exports2.printBlockString = printBlockString2;
    var _characterClasses = require_characterClasses();
    function dedentBlockStringLines(lines) {
      var _firstNonEmptyLine2;
      let commonIndent = Number.MAX_SAFE_INTEGER;
      let firstNonEmptyLine = null;
      let lastNonEmptyLine = -1;
      for (let i = 0; i < lines.length; ++i) {
        var _firstNonEmptyLine;
        const line = lines[i];
        const indent2 = leadingWhitespace2(line);
        if (indent2 === line.length) {
          continue;
        }
        firstNonEmptyLine = (_firstNonEmptyLine = firstNonEmptyLine) !== null && _firstNonEmptyLine !== void 0 ? _firstNonEmptyLine : i;
        lastNonEmptyLine = i;
        if (i !== 0 && indent2 < commonIndent) {
          commonIndent = indent2;
        }
      }
      return lines.map((line, i) => i === 0 ? line : line.slice(commonIndent)).slice(
        (_firstNonEmptyLine2 = firstNonEmptyLine) !== null && _firstNonEmptyLine2 !== void 0 ? _firstNonEmptyLine2 : 0,
        lastNonEmptyLine + 1
      );
    }
    function leadingWhitespace2(str) {
      let i = 0;
      while (i < str.length && (0, _characterClasses.isWhiteSpace)(str.charCodeAt(i))) {
        ++i;
      }
      return i;
    }
    function isPrintableAsBlockString(value) {
      if (value === "") {
        return true;
      }
      let isEmptyLine = true;
      let hasIndent = false;
      let hasCommonIndent = true;
      let seenNonEmptyLine = false;
      for (let i = 0; i < value.length; ++i) {
        switch (value.codePointAt(i)) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 11:
          case 12:
          case 14:
          case 15:
            return false;
          // Has non-printable characters
          case 13:
            return false;
          // Has \r or \r\n which will be replaced as \n
          case 10:
            if (isEmptyLine && !seenNonEmptyLine) {
              return false;
            }
            seenNonEmptyLine = true;
            isEmptyLine = true;
            hasIndent = false;
            break;
          case 9:
          //   \t
          case 32:
            hasIndent || (hasIndent = isEmptyLine);
            break;
          default:
            hasCommonIndent && (hasCommonIndent = hasIndent);
            isEmptyLine = false;
        }
      }
      if (isEmptyLine) {
        return false;
      }
      if (hasCommonIndent && seenNonEmptyLine) {
        return false;
      }
      return true;
    }
    function printBlockString2(value, options) {
      const escapedValue = value.replace(/"""/g, '\\"""');
      const lines = escapedValue.split(/\r\n|[\n\r]/g);
      const isSingleLine = lines.length === 1;
      const forceLeadingNewLine = lines.length > 1 && lines.slice(1).every(
        (line) => line.length === 0 || (0, _characterClasses.isWhiteSpace)(line.charCodeAt(0))
      );
      const hasTrailingTripleQuotes = escapedValue.endsWith('\\"""');
      const hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes;
      const hasTrailingSlash = value.endsWith("\\");
      const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;
      const printAsMultipleLines = !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability
      (!isSingleLine || value.length > 70 || forceTrailingNewline || forceLeadingNewLine || hasTrailingTripleQuotes);
      let result = "";
      const skipLeadingNewLine = isSingleLine && (0, _characterClasses.isWhiteSpace)(value.charCodeAt(0));
      if (printAsMultipleLines && !skipLeadingNewLine || forceLeadingNewLine) {
        result += "\n";
      }
      result += escapedValue;
      if (printAsMultipleLines || forceTrailingNewline) {
        result += "\n";
      }
      return '"""' + result + '"""';
    }
  }
});

// node_modules/graphql/language/tokenKind.js
var require_tokenKind = __commonJS({
  "node_modules/graphql/language/tokenKind.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TokenKind = void 0;
    var TokenKind2;
    exports2.TokenKind = TokenKind2;
    (function(TokenKind3) {
      TokenKind3["SOF"] = "<SOF>";
      TokenKind3["EOF"] = "<EOF>";
      TokenKind3["BANG"] = "!";
      TokenKind3["DOLLAR"] = "$";
      TokenKind3["AMP"] = "&";
      TokenKind3["PAREN_L"] = "(";
      TokenKind3["PAREN_R"] = ")";
      TokenKind3["SPREAD"] = "...";
      TokenKind3["COLON"] = ":";
      TokenKind3["EQUALS"] = "=";
      TokenKind3["AT"] = "@";
      TokenKind3["BRACKET_L"] = "[";
      TokenKind3["BRACKET_R"] = "]";
      TokenKind3["BRACE_L"] = "{";
      TokenKind3["PIPE"] = "|";
      TokenKind3["BRACE_R"] = "}";
      TokenKind3["NAME"] = "Name";
      TokenKind3["INT"] = "Int";
      TokenKind3["FLOAT"] = "Float";
      TokenKind3["STRING"] = "String";
      TokenKind3["BLOCK_STRING"] = "BlockString";
      TokenKind3["COMMENT"] = "Comment";
    })(TokenKind2 || (exports2.TokenKind = TokenKind2 = {}));
  }
});

// node_modules/graphql/language/lexer.js
var require_lexer = __commonJS({
  "node_modules/graphql/language/lexer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Lexer = void 0;
    exports2.isPunctuatorTokenKind = isPunctuatorTokenKind;
    var _syntaxError = require_syntaxError();
    var _ast = require_ast();
    var _blockString = require_blockString();
    var _characterClasses = require_characterClasses();
    var _tokenKind = require_tokenKind();
    var Lexer = class {
      /**
       * The previously focused non-ignored token.
       */
      /**
       * The currently focused non-ignored token.
       */
      /**
       * The (1-indexed) line containing the current token.
       */
      /**
       * The character offset at which the current line begins.
       */
      constructor(source) {
        const startOfFileToken = new _ast.Token(
          _tokenKind.TokenKind.SOF,
          0,
          0,
          0,
          0
        );
        this.source = source;
        this.lastToken = startOfFileToken;
        this.token = startOfFileToken;
        this.line = 1;
        this.lineStart = 0;
      }
      get [Symbol.toStringTag]() {
        return "Lexer";
      }
      /**
       * Advances the token stream to the next non-ignored token.
       */
      advance() {
        this.lastToken = this.token;
        const token = this.token = this.lookahead();
        return token;
      }
      /**
       * Looks ahead and returns the next non-ignored token, but does not change
       * the state of Lexer.
       */
      lookahead() {
        let token = this.token;
        if (token.kind !== _tokenKind.TokenKind.EOF) {
          do {
            if (token.next) {
              token = token.next;
            } else {
              const nextToken = readNextToken(this, token.end);
              token.next = nextToken;
              nextToken.prev = token;
              token = nextToken;
            }
          } while (token.kind === _tokenKind.TokenKind.COMMENT);
        }
        return token;
      }
    };
    exports2.Lexer = Lexer;
    function isPunctuatorTokenKind(kind) {
      return kind === _tokenKind.TokenKind.BANG || kind === _tokenKind.TokenKind.DOLLAR || kind === _tokenKind.TokenKind.AMP || kind === _tokenKind.TokenKind.PAREN_L || kind === _tokenKind.TokenKind.PAREN_R || kind === _tokenKind.TokenKind.SPREAD || kind === _tokenKind.TokenKind.COLON || kind === _tokenKind.TokenKind.EQUALS || kind === _tokenKind.TokenKind.AT || kind === _tokenKind.TokenKind.BRACKET_L || kind === _tokenKind.TokenKind.BRACKET_R || kind === _tokenKind.TokenKind.BRACE_L || kind === _tokenKind.TokenKind.PIPE || kind === _tokenKind.TokenKind.BRACE_R;
    }
    function isUnicodeScalarValue(code) {
      return code >= 0 && code <= 55295 || code >= 57344 && code <= 1114111;
    }
    function isSupplementaryCodePoint(body, location) {
      return isLeadingSurrogate(body.charCodeAt(location)) && isTrailingSurrogate(body.charCodeAt(location + 1));
    }
    function isLeadingSurrogate(code) {
      return code >= 55296 && code <= 56319;
    }
    function isTrailingSurrogate(code) {
      return code >= 56320 && code <= 57343;
    }
    function printCodePointAt(lexer, location) {
      const code = lexer.source.body.codePointAt(location);
      if (code === void 0) {
        return _tokenKind.TokenKind.EOF;
      } else if (code >= 32 && code <= 126) {
        const char = String.fromCodePoint(code);
        return char === '"' ? `'"'` : `"${char}"`;
      }
      return "U+" + code.toString(16).toUpperCase().padStart(4, "0");
    }
    function createToken(lexer, kind, start, end, value) {
      const line = lexer.line;
      const col = 1 + start - lexer.lineStart;
      return new _ast.Token(kind, start, end, line, col, value);
    }
    function readNextToken(lexer, start) {
      const body = lexer.source.body;
      const bodyLength = body.length;
      let position = start;
      while (position < bodyLength) {
        const code = body.charCodeAt(position);
        switch (code) {
          // Ignored ::
          //   - UnicodeBOM
          //   - WhiteSpace
          //   - LineTerminator
          //   - Comment
          //   - Comma
          //
          // UnicodeBOM :: "Byte Order Mark (U+FEFF)"
          //
          // WhiteSpace ::
          //   - "Horizontal Tab (U+0009)"
          //   - "Space (U+0020)"
          //
          // Comma :: ,
          case 65279:
          // <BOM>
          case 9:
          // \t
          case 32:
          // <space>
          case 44:
            ++position;
            continue;
          // LineTerminator ::
          //   - "New Line (U+000A)"
          //   - "Carriage Return (U+000D)" [lookahead != "New Line (U+000A)"]
          //   - "Carriage Return (U+000D)" "New Line (U+000A)"
          case 10:
            ++position;
            ++lexer.line;
            lexer.lineStart = position;
            continue;
          case 13:
            if (body.charCodeAt(position + 1) === 10) {
              position += 2;
            } else {
              ++position;
            }
            ++lexer.line;
            lexer.lineStart = position;
            continue;
          // Comment
          case 35:
            return readComment(lexer, position);
          // Token ::
          //   - Punctuator
          //   - Name
          //   - IntValue
          //   - FloatValue
          //   - StringValue
          //
          // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }
          case 33:
            return createToken(
              lexer,
              _tokenKind.TokenKind.BANG,
              position,
              position + 1
            );
          case 36:
            return createToken(
              lexer,
              _tokenKind.TokenKind.DOLLAR,
              position,
              position + 1
            );
          case 38:
            return createToken(
              lexer,
              _tokenKind.TokenKind.AMP,
              position,
              position + 1
            );
          case 40:
            return createToken(
              lexer,
              _tokenKind.TokenKind.PAREN_L,
              position,
              position + 1
            );
          case 41:
            return createToken(
              lexer,
              _tokenKind.TokenKind.PAREN_R,
              position,
              position + 1
            );
          case 46:
            if (body.charCodeAt(position + 1) === 46 && body.charCodeAt(position + 2) === 46) {
              return createToken(
                lexer,
                _tokenKind.TokenKind.SPREAD,
                position,
                position + 3
              );
            }
            break;
          case 58:
            return createToken(
              lexer,
              _tokenKind.TokenKind.COLON,
              position,
              position + 1
            );
          case 61:
            return createToken(
              lexer,
              _tokenKind.TokenKind.EQUALS,
              position,
              position + 1
            );
          case 64:
            return createToken(
              lexer,
              _tokenKind.TokenKind.AT,
              position,
              position + 1
            );
          case 91:
            return createToken(
              lexer,
              _tokenKind.TokenKind.BRACKET_L,
              position,
              position + 1
            );
          case 93:
            return createToken(
              lexer,
              _tokenKind.TokenKind.BRACKET_R,
              position,
              position + 1
            );
          case 123:
            return createToken(
              lexer,
              _tokenKind.TokenKind.BRACE_L,
              position,
              position + 1
            );
          case 124:
            return createToken(
              lexer,
              _tokenKind.TokenKind.PIPE,
              position,
              position + 1
            );
          case 125:
            return createToken(
              lexer,
              _tokenKind.TokenKind.BRACE_R,
              position,
              position + 1
            );
          // StringValue
          case 34:
            if (body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
              return readBlockString(lexer, position);
            }
            return readString(lexer, position);
        }
        if ((0, _characterClasses.isDigit)(code) || code === 45) {
          return readNumber(lexer, position, code);
        }
        if ((0, _characterClasses.isNameStart)(code)) {
          return readName(lexer, position);
        }
        throw (0, _syntaxError.syntaxError)(
          lexer.source,
          position,
          code === 39 ? `Unexpected single quote character ('), did you mean to use a double quote (")?` : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position) ? `Unexpected character: ${printCodePointAt(lexer, position)}.` : `Invalid character: ${printCodePointAt(lexer, position)}.`
        );
      }
      return createToken(lexer, _tokenKind.TokenKind.EOF, bodyLength, bodyLength);
    }
    function readComment(lexer, start) {
      const body = lexer.source.body;
      const bodyLength = body.length;
      let position = start + 1;
      while (position < bodyLength) {
        const code = body.charCodeAt(position);
        if (code === 10 || code === 13) {
          break;
        }
        if (isUnicodeScalarValue(code)) {
          ++position;
        } else if (isSupplementaryCodePoint(body, position)) {
          position += 2;
        } else {
          break;
        }
      }
      return createToken(
        lexer,
        _tokenKind.TokenKind.COMMENT,
        start,
        position,
        body.slice(start + 1, position)
      );
    }
    function readNumber(lexer, start, firstCode) {
      const body = lexer.source.body;
      let position = start;
      let code = firstCode;
      let isFloat = false;
      if (code === 45) {
        code = body.charCodeAt(++position);
      }
      if (code === 48) {
        code = body.charCodeAt(++position);
        if ((0, _characterClasses.isDigit)(code)) {
          throw (0, _syntaxError.syntaxError)(
            lexer.source,
            position,
            `Invalid number, unexpected digit after 0: ${printCodePointAt(
              lexer,
              position
            )}.`
          );
        }
      } else {
        position = readDigits(lexer, position, code);
        code = body.charCodeAt(position);
      }
      if (code === 46) {
        isFloat = true;
        code = body.charCodeAt(++position);
        position = readDigits(lexer, position, code);
        code = body.charCodeAt(position);
      }
      if (code === 69 || code === 101) {
        isFloat = true;
        code = body.charCodeAt(++position);
        if (code === 43 || code === 45) {
          code = body.charCodeAt(++position);
        }
        position = readDigits(lexer, position, code);
        code = body.charCodeAt(position);
      }
      if (code === 46 || (0, _characterClasses.isNameStart)(code)) {
        throw (0, _syntaxError.syntaxError)(
          lexer.source,
          position,
          `Invalid number, expected digit but got: ${printCodePointAt(
            lexer,
            position
          )}.`
        );
      }
      return createToken(
        lexer,
        isFloat ? _tokenKind.TokenKind.FLOAT : _tokenKind.TokenKind.INT,
        start,
        position,
        body.slice(start, position)
      );
    }
    function readDigits(lexer, start, firstCode) {
      if (!(0, _characterClasses.isDigit)(firstCode)) {
        throw (0, _syntaxError.syntaxError)(
          lexer.source,
          start,
          `Invalid number, expected digit but got: ${printCodePointAt(
            lexer,
            start
          )}.`
        );
      }
      const body = lexer.source.body;
      let position = start + 1;
      while ((0, _characterClasses.isDigit)(body.charCodeAt(position))) {
        ++position;
      }
      return position;
    }
    function readString(lexer, start) {
      const body = lexer.source.body;
      const bodyLength = body.length;
      let position = start + 1;
      let chunkStart = position;
      let value = "";
      while (position < bodyLength) {
        const code = body.charCodeAt(position);
        if (code === 34) {
          value += body.slice(chunkStart, position);
          return createToken(
            lexer,
            _tokenKind.TokenKind.STRING,
            start,
            position + 1,
            value
          );
        }
        if (code === 92) {
          value += body.slice(chunkStart, position);
          const escape = body.charCodeAt(position + 1) === 117 ? body.charCodeAt(position + 2) === 123 ? readEscapedUnicodeVariableWidth(lexer, position) : readEscapedUnicodeFixedWidth(lexer, position) : readEscapedCharacter(lexer, position);
          value += escape.value;
          position += escape.size;
          chunkStart = position;
          continue;
        }
        if (code === 10 || code === 13) {
          break;
        }
        if (isUnicodeScalarValue(code)) {
          ++position;
        } else if (isSupplementaryCodePoint(body, position)) {
          position += 2;
        } else {
          throw (0, _syntaxError.syntaxError)(
            lexer.source,
            position,
            `Invalid character within String: ${printCodePointAt(
              lexer,
              position
            )}.`
          );
        }
      }
      throw (0, _syntaxError.syntaxError)(
        lexer.source,
        position,
        "Unterminated string."
      );
    }
    function readEscapedUnicodeVariableWidth(lexer, position) {
      const body = lexer.source.body;
      let point = 0;
      let size = 3;
      while (size < 12) {
        const code = body.charCodeAt(position + size++);
        if (code === 125) {
          if (size < 5 || !isUnicodeScalarValue(point)) {
            break;
          }
          return {
            value: String.fromCodePoint(point),
            size
          };
        }
        point = point << 4 | readHexDigit(code);
        if (point < 0) {
          break;
        }
      }
      throw (0, _syntaxError.syntaxError)(
        lexer.source,
        position,
        `Invalid Unicode escape sequence: "${body.slice(
          position,
          position + size
        )}".`
      );
    }
    function readEscapedUnicodeFixedWidth(lexer, position) {
      const body = lexer.source.body;
      const code = read16BitHexCode(body, position + 2);
      if (isUnicodeScalarValue(code)) {
        return {
          value: String.fromCodePoint(code),
          size: 6
        };
      }
      if (isLeadingSurrogate(code)) {
        if (body.charCodeAt(position + 6) === 92 && body.charCodeAt(position + 7) === 117) {
          const trailingCode = read16BitHexCode(body, position + 8);
          if (isTrailingSurrogate(trailingCode)) {
            return {
              value: String.fromCodePoint(code, trailingCode),
              size: 12
            };
          }
        }
      }
      throw (0, _syntaxError.syntaxError)(
        lexer.source,
        position,
        `Invalid Unicode escape sequence: "${body.slice(position, position + 6)}".`
      );
    }
    function read16BitHexCode(body, position) {
      return readHexDigit(body.charCodeAt(position)) << 12 | readHexDigit(body.charCodeAt(position + 1)) << 8 | readHexDigit(body.charCodeAt(position + 2)) << 4 | readHexDigit(body.charCodeAt(position + 3));
    }
    function readHexDigit(code) {
      return code >= 48 && code <= 57 ? code - 48 : code >= 65 && code <= 70 ? code - 55 : code >= 97 && code <= 102 ? code - 87 : -1;
    }
    function readEscapedCharacter(lexer, position) {
      const body = lexer.source.body;
      const code = body.charCodeAt(position + 1);
      switch (code) {
        case 34:
          return {
            value: '"',
            size: 2
          };
        case 92:
          return {
            value: "\\",
            size: 2
          };
        case 47:
          return {
            value: "/",
            size: 2
          };
        case 98:
          return {
            value: "\b",
            size: 2
          };
        case 102:
          return {
            value: "\f",
            size: 2
          };
        case 110:
          return {
            value: "\n",
            size: 2
          };
        case 114:
          return {
            value: "\r",
            size: 2
          };
        case 116:
          return {
            value: "	",
            size: 2
          };
      }
      throw (0, _syntaxError.syntaxError)(
        lexer.source,
        position,
        `Invalid character escape sequence: "${body.slice(
          position,
          position + 2
        )}".`
      );
    }
    function readBlockString(lexer, start) {
      const body = lexer.source.body;
      const bodyLength = body.length;
      let lineStart = lexer.lineStart;
      let position = start + 3;
      let chunkStart = position;
      let currentLine = "";
      const blockLines = [];
      while (position < bodyLength) {
        const code = body.charCodeAt(position);
        if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
          currentLine += body.slice(chunkStart, position);
          blockLines.push(currentLine);
          const token = createToken(
            lexer,
            _tokenKind.TokenKind.BLOCK_STRING,
            start,
            position + 3,
            // Return a string of the lines joined with U+000A.
            (0, _blockString.dedentBlockStringLines)(blockLines).join("\n")
          );
          lexer.line += blockLines.length - 1;
          lexer.lineStart = lineStart;
          return token;
        }
        if (code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
          currentLine += body.slice(chunkStart, position);
          chunkStart = position + 1;
          position += 4;
          continue;
        }
        if (code === 10 || code === 13) {
          currentLine += body.slice(chunkStart, position);
          blockLines.push(currentLine);
          if (code === 13 && body.charCodeAt(position + 1) === 10) {
            position += 2;
          } else {
            ++position;
          }
          currentLine = "";
          chunkStart = position;
          lineStart = position;
          continue;
        }
        if (isUnicodeScalarValue(code)) {
          ++position;
        } else if (isSupplementaryCodePoint(body, position)) {
          position += 2;
        } else {
          throw (0, _syntaxError.syntaxError)(
            lexer.source,
            position,
            `Invalid character within String: ${printCodePointAt(
              lexer,
              position
            )}.`
          );
        }
      }
      throw (0, _syntaxError.syntaxError)(
        lexer.source,
        position,
        "Unterminated string."
      );
    }
    function readName(lexer, start) {
      const body = lexer.source.body;
      const bodyLength = body.length;
      let position = start + 1;
      while (position < bodyLength) {
        const code = body.charCodeAt(position);
        if ((0, _characterClasses.isNameContinue)(code)) {
          ++position;
        } else {
          break;
        }
      }
      return createToken(
        lexer,
        _tokenKind.TokenKind.NAME,
        start,
        position,
        body.slice(start, position)
      );
    }
  }
});

// node_modules/graphql/jsutils/inspect.js
var require_inspect = __commonJS({
  "node_modules/graphql/jsutils/inspect.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.inspect = inspect2;
    var MAX_ARRAY_LENGTH = 10;
    var MAX_RECURSIVE_DEPTH2 = 2;
    function inspect2(value) {
      return formatValue2(value, []);
    }
    function formatValue2(value, seenValues) {
      switch (typeof value) {
        case "string":
          return JSON.stringify(value);
        case "function":
          return value.name ? `[function ${value.name}]` : "[function]";
        case "object":
          return formatObjectValue2(value, seenValues);
        default:
          return String(value);
      }
    }
    function formatObjectValue2(value, previouslySeenValues) {
      if (value === null) {
        return "null";
      }
      if (previouslySeenValues.includes(value)) {
        return "[Circular]";
      }
      const seenValues = [...previouslySeenValues, value];
      if (isJSONable2(value)) {
        const jsonValue = value.toJSON();
        if (jsonValue !== value) {
          return typeof jsonValue === "string" ? jsonValue : formatValue2(jsonValue, seenValues);
        }
      } else if (Array.isArray(value)) {
        return formatArray2(value, seenValues);
      }
      return formatObject2(value, seenValues);
    }
    function isJSONable2(value) {
      return typeof value.toJSON === "function";
    }
    function formatObject2(object, seenValues) {
      const entries = Object.entries(object);
      if (entries.length === 0) {
        return "{}";
      }
      if (seenValues.length > MAX_RECURSIVE_DEPTH2) {
        return "[" + getObjectTag2(object) + "]";
      }
      const properties = entries.map(
        ([key, value]) => key + ": " + formatValue2(value, seenValues)
      );
      return "{ " + properties.join(", ") + " }";
    }
    function formatArray2(array, seenValues) {
      if (array.length === 0) {
        return "[]";
      }
      if (seenValues.length > MAX_RECURSIVE_DEPTH2) {
        return "[Array]";
      }
      const len = Math.min(MAX_ARRAY_LENGTH, array.length);
      const remaining = array.length - len;
      const items = [];
      for (let i = 0; i < len; ++i) {
        items.push(formatValue2(array[i], seenValues));
      }
      if (remaining === 1) {
        items.push("... 1 more item");
      } else if (remaining > 1) {
        items.push(`... ${remaining} more items`);
      }
      return "[" + items.join(", ") + "]";
    }
    function getObjectTag2(object) {
      const tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
      if (tag === "Object" && typeof object.constructor === "function") {
        const name = object.constructor.name;
        if (typeof name === "string" && name !== "") {
          return name;
        }
      }
      return tag;
    }
  }
});

// node_modules/graphql/jsutils/instanceOf.js
var require_instanceOf = __commonJS({
  "node_modules/graphql/jsutils/instanceOf.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.instanceOf = void 0;
    var _inspect = require_inspect();
    var isProduction = globalThis.process && // eslint-disable-next-line no-undef
    process.env.NODE_ENV === "production";
    var instanceOf = (
      /* c8 ignore next 6 */
      // FIXME: https://github.com/graphql/graphql-js/issues/2317
      isProduction ? function instanceOf2(value, constructor) {
        return value instanceof constructor;
      } : function instanceOf2(value, constructor) {
        if (value instanceof constructor) {
          return true;
        }
        if (typeof value === "object" && value !== null) {
          var _value$constructor;
          const className = constructor.prototype[Symbol.toStringTag];
          const valueClassName = (
            // We still need to support constructor's name to detect conflicts with older versions of this library.
            Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name
          );
          if (className === valueClassName) {
            const stringifiedValue = (0, _inspect.inspect)(value);
            throw new Error(`Cannot use ${className} "${stringifiedValue}" from another module or realm.

Ensure that there is only one instance of "graphql" in the node_modules
directory. If different versions of "graphql" are the dependencies of other
relied on modules, use "resolutions" to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate "graphql" modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.`);
          }
        }
        return false;
      }
    );
    exports2.instanceOf = instanceOf;
  }
});

// node_modules/graphql/language/source.js
var require_source = __commonJS({
  "node_modules/graphql/language/source.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Source = void 0;
    exports2.isSource = isSource;
    var _devAssert = require_devAssert();
    var _inspect = require_inspect();
    var _instanceOf = require_instanceOf();
    var Source2 = class {
      constructor(body, name = "GraphQL request", locationOffset = {
        line: 1,
        column: 1
      }) {
        typeof body === "string" || (0, _devAssert.devAssert)(
          false,
          `Body must be a string. Received: ${(0, _inspect.inspect)(body)}.`
        );
        this.body = body;
        this.name = name;
        this.locationOffset = locationOffset;
        this.locationOffset.line > 0 || (0, _devAssert.devAssert)(
          false,
          "line in locationOffset is 1-indexed and must be positive."
        );
        this.locationOffset.column > 0 || (0, _devAssert.devAssert)(
          false,
          "column in locationOffset is 1-indexed and must be positive."
        );
      }
      get [Symbol.toStringTag]() {
        return "Source";
      }
    };
    exports2.Source = Source2;
    function isSource(source) {
      return (0, _instanceOf.instanceOf)(source, Source2);
    }
  }
});

// node_modules/graphql/language/parser.js
var require_parser = __commonJS({
  "node_modules/graphql/language/parser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Parser = void 0;
    exports2.parse = parse4;
    exports2.parseConstValue = parseConstValue;
    exports2.parseType = parseType;
    exports2.parseValue = parseValue;
    var _syntaxError = require_syntaxError();
    var _ast = require_ast();
    var _directiveLocation = require_directiveLocation();
    var _kinds = require_kinds();
    var _lexer = require_lexer();
    var _source = require_source();
    var _tokenKind = require_tokenKind();
    function parse4(source, options) {
      const parser = new Parser(source, options);
      return parser.parseDocument();
    }
    function parseValue(source, options) {
      const parser = new Parser(source, options);
      parser.expectToken(_tokenKind.TokenKind.SOF);
      const value = parser.parseValueLiteral(false);
      parser.expectToken(_tokenKind.TokenKind.EOF);
      return value;
    }
    function parseConstValue(source, options) {
      const parser = new Parser(source, options);
      parser.expectToken(_tokenKind.TokenKind.SOF);
      const value = parser.parseConstValueLiteral();
      parser.expectToken(_tokenKind.TokenKind.EOF);
      return value;
    }
    function parseType(source, options) {
      const parser = new Parser(source, options);
      parser.expectToken(_tokenKind.TokenKind.SOF);
      const type = parser.parseTypeReference();
      parser.expectToken(_tokenKind.TokenKind.EOF);
      return type;
    }
    var Parser = class {
      constructor(source, options = {}) {
        const sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
        this._lexer = new _lexer.Lexer(sourceObj);
        this._options = options;
        this._tokenCounter = 0;
      }
      /**
       * Converts a name lex token into a name parse node.
       */
      parseName() {
        const token = this.expectToken(_tokenKind.TokenKind.NAME);
        return this.node(token, {
          kind: _kinds.Kind.NAME,
          value: token.value
        });
      }
      // Implements the parsing rules in the Document section.
      /**
       * Document : Definition+
       */
      parseDocument() {
        return this.node(this._lexer.token, {
          kind: _kinds.Kind.DOCUMENT,
          definitions: this.many(
            _tokenKind.TokenKind.SOF,
            this.parseDefinition,
            _tokenKind.TokenKind.EOF
          )
        });
      }
      /**
       * Definition :
       *   - ExecutableDefinition
       *   - TypeSystemDefinition
       *   - TypeSystemExtension
       *
       * ExecutableDefinition :
       *   - OperationDefinition
       *   - FragmentDefinition
       *
       * TypeSystemDefinition :
       *   - SchemaDefinition
       *   - TypeDefinition
       *   - DirectiveDefinition
       *
       * TypeDefinition :
       *   - ScalarTypeDefinition
       *   - ObjectTypeDefinition
       *   - InterfaceTypeDefinition
       *   - UnionTypeDefinition
       *   - EnumTypeDefinition
       *   - InputObjectTypeDefinition
       */
      parseDefinition() {
        if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
          return this.parseOperationDefinition();
        }
        const hasDescription = this.peekDescription();
        const keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;
        if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaDefinition();
            case "scalar":
              return this.parseScalarTypeDefinition();
            case "type":
              return this.parseObjectTypeDefinition();
            case "interface":
              return this.parseInterfaceTypeDefinition();
            case "union":
              return this.parseUnionTypeDefinition();
            case "enum":
              return this.parseEnumTypeDefinition();
            case "input":
              return this.parseInputObjectTypeDefinition();
            case "directive":
              return this.parseDirectiveDefinition();
          }
          if (hasDescription) {
            throw (0, _syntaxError.syntaxError)(
              this._lexer.source,
              this._lexer.token.start,
              "Unexpected description, descriptions are supported only on type definitions."
            );
          }
          switch (keywordToken.value) {
            case "query":
            case "mutation":
            case "subscription":
              return this.parseOperationDefinition();
            case "fragment":
              return this.parseFragmentDefinition();
            case "extend":
              return this.parseTypeSystemExtension();
          }
        }
        throw this.unexpected(keywordToken);
      }
      // Implements the parsing rules in the Operations section.
      /**
       * OperationDefinition :
       *  - SelectionSet
       *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
       */
      parseOperationDefinition() {
        const start = this._lexer.token;
        if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
          return this.node(start, {
            kind: _kinds.Kind.OPERATION_DEFINITION,
            operation: _ast.OperationTypeNode.QUERY,
            name: void 0,
            variableDefinitions: [],
            directives: [],
            selectionSet: this.parseSelectionSet()
          });
        }
        const operation = this.parseOperationType();
        let name;
        if (this.peek(_tokenKind.TokenKind.NAME)) {
          name = this.parseName();
        }
        return this.node(start, {
          kind: _kinds.Kind.OPERATION_DEFINITION,
          operation,
          name,
          variableDefinitions: this.parseVariableDefinitions(),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet()
        });
      }
      /**
       * OperationType : one of query mutation subscription
       */
      parseOperationType() {
        const operationToken = this.expectToken(_tokenKind.TokenKind.NAME);
        switch (operationToken.value) {
          case "query":
            return _ast.OperationTypeNode.QUERY;
          case "mutation":
            return _ast.OperationTypeNode.MUTATION;
          case "subscription":
            return _ast.OperationTypeNode.SUBSCRIPTION;
        }
        throw this.unexpected(operationToken);
      }
      /**
       * VariableDefinitions : ( VariableDefinition+ )
       */
      parseVariableDefinitions() {
        return this.optionalMany(
          _tokenKind.TokenKind.PAREN_L,
          this.parseVariableDefinition,
          _tokenKind.TokenKind.PAREN_R
        );
      }
      /**
       * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
       */
      parseVariableDefinition() {
        return this.node(this._lexer.token, {
          kind: _kinds.Kind.VARIABLE_DEFINITION,
          variable: this.parseVariable(),
          type: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseTypeReference()),
          defaultValue: this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.parseConstValueLiteral() : void 0,
          directives: this.parseConstDirectives()
        });
      }
      /**
       * Variable : $ Name
       */
      parseVariable() {
        const start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.DOLLAR);
        return this.node(start, {
          kind: _kinds.Kind.VARIABLE,
          name: this.parseName()
        });
      }
      /**
       * ```
       * SelectionSet : { Selection+ }
       * ```
       */
      parseSelectionSet() {
        return this.node(this._lexer.token, {
          kind: _kinds.Kind.SELECTION_SET,
          selections: this.many(
            _tokenKind.TokenKind.BRACE_L,
            this.parseSelection,
            _tokenKind.TokenKind.BRACE_R
          )
        });
      }
      /**
       * Selection :
       *   - Field
       *   - FragmentSpread
       *   - InlineFragment
       */
      parseSelection() {
        return this.peek(_tokenKind.TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
      }
      /**
       * Field : Alias? Name Arguments? Directives? SelectionSet?
       *
       * Alias : Name :
       */
      parseField() {
        const start = this._lexer.token;
        const nameOrAlias = this.parseName();
        let alias;
        let name;
        if (this.expectOptionalToken(_tokenKind.TokenKind.COLON)) {
          alias = nameOrAlias;
          name = this.parseName();
        } else {
          name = nameOrAlias;
        }
        return this.node(start, {
          kind: _kinds.Kind.FIELD,
          alias,
          name,
          arguments: this.parseArguments(false),
          directives: this.parseDirectives(false),
          selectionSet: this.peek(_tokenKind.TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0
        });
      }
      /**
       * Arguments[Const] : ( Argument[?Const]+ )
       */
      parseArguments(isConst) {
        const item = isConst ? this.parseConstArgument : this.parseArgument;
        return this.optionalMany(
          _tokenKind.TokenKind.PAREN_L,
          item,
          _tokenKind.TokenKind.PAREN_R
        );
      }
      /**
       * Argument[Const] : Name : Value[?Const]
       */
      parseArgument(isConst = false) {
        const start = this._lexer.token;
        const name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        return this.node(start, {
          kind: _kinds.Kind.ARGUMENT,
          name,
          value: this.parseValueLiteral(isConst)
        });
      }
      parseConstArgument() {
        return this.parseArgument(true);
      }
      // Implements the parsing rules in the Fragments section.
      /**
       * Corresponds to both FragmentSpread and InlineFragment in the spec.
       *
       * FragmentSpread : ... FragmentName Directives?
       *
       * InlineFragment : ... TypeCondition? Directives? SelectionSet
       */
      parseFragment() {
        const start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.SPREAD);
        const hasTypeCondition = this.expectOptionalKeyword("on");
        if (!hasTypeCondition && this.peek(_tokenKind.TokenKind.NAME)) {
          return this.node(start, {
            kind: _kinds.Kind.FRAGMENT_SPREAD,
            name: this.parseFragmentName(),
            directives: this.parseDirectives(false)
          });
        }
        return this.node(start, {
          kind: _kinds.Kind.INLINE_FRAGMENT,
          typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet()
        });
      }
      /**
       * FragmentDefinition :
       *   - fragment FragmentName on TypeCondition Directives? SelectionSet
       *
       * TypeCondition : NamedType
       */
      parseFragmentDefinition() {
        const start = this._lexer.token;
        this.expectKeyword("fragment");
        if (this._options.allowLegacyFragmentVariables === true) {
          return this.node(start, {
            kind: _kinds.Kind.FRAGMENT_DEFINITION,
            name: this.parseFragmentName(),
            variableDefinitions: this.parseVariableDefinitions(),
            typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet()
          });
        }
        return this.node(start, {
          kind: _kinds.Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet()
        });
      }
      /**
       * FragmentName : Name but not `on`
       */
      parseFragmentName() {
        if (this._lexer.token.value === "on") {
          throw this.unexpected();
        }
        return this.parseName();
      }
      // Implements the parsing rules in the Values section.
      /**
       * Value[Const] :
       *   - [~Const] Variable
       *   - IntValue
       *   - FloatValue
       *   - StringValue
       *   - BooleanValue
       *   - NullValue
       *   - EnumValue
       *   - ListValue[?Const]
       *   - ObjectValue[?Const]
       *
       * BooleanValue : one of `true` `false`
       *
       * NullValue : `null`
       *
       * EnumValue : Name but not `true`, `false` or `null`
       */
      parseValueLiteral(isConst) {
        const token = this._lexer.token;
        switch (token.kind) {
          case _tokenKind.TokenKind.BRACKET_L:
            return this.parseList(isConst);
          case _tokenKind.TokenKind.BRACE_L:
            return this.parseObject(isConst);
          case _tokenKind.TokenKind.INT:
            this.advanceLexer();
            return this.node(token, {
              kind: _kinds.Kind.INT,
              value: token.value
            });
          case _tokenKind.TokenKind.FLOAT:
            this.advanceLexer();
            return this.node(token, {
              kind: _kinds.Kind.FLOAT,
              value: token.value
            });
          case _tokenKind.TokenKind.STRING:
          case _tokenKind.TokenKind.BLOCK_STRING:
            return this.parseStringLiteral();
          case _tokenKind.TokenKind.NAME:
            this.advanceLexer();
            switch (token.value) {
              case "true":
                return this.node(token, {
                  kind: _kinds.Kind.BOOLEAN,
                  value: true
                });
              case "false":
                return this.node(token, {
                  kind: _kinds.Kind.BOOLEAN,
                  value: false
                });
              case "null":
                return this.node(token, {
                  kind: _kinds.Kind.NULL
                });
              default:
                return this.node(token, {
                  kind: _kinds.Kind.ENUM,
                  value: token.value
                });
            }
          case _tokenKind.TokenKind.DOLLAR:
            if (isConst) {
              this.expectToken(_tokenKind.TokenKind.DOLLAR);
              if (this._lexer.token.kind === _tokenKind.TokenKind.NAME) {
                const varName = this._lexer.token.value;
                throw (0, _syntaxError.syntaxError)(
                  this._lexer.source,
                  token.start,
                  `Unexpected variable "$${varName}" in constant value.`
                );
              } else {
                throw this.unexpected(token);
              }
            }
            return this.parseVariable();
          default:
            throw this.unexpected();
        }
      }
      parseConstValueLiteral() {
        return this.parseValueLiteral(true);
      }
      parseStringLiteral() {
        const token = this._lexer.token;
        this.advanceLexer();
        return this.node(token, {
          kind: _kinds.Kind.STRING,
          value: token.value,
          block: token.kind === _tokenKind.TokenKind.BLOCK_STRING
        });
      }
      /**
       * ListValue[Const] :
       *   - [ ]
       *   - [ Value[?Const]+ ]
       */
      parseList(isConst) {
        const item = () => this.parseValueLiteral(isConst);
        return this.node(this._lexer.token, {
          kind: _kinds.Kind.LIST,
          values: this.any(
            _tokenKind.TokenKind.BRACKET_L,
            item,
            _tokenKind.TokenKind.BRACKET_R
          )
        });
      }
      /**
       * ```
       * ObjectValue[Const] :
       *   - { }
       *   - { ObjectField[?Const]+ }
       * ```
       */
      parseObject(isConst) {
        const item = () => this.parseObjectField(isConst);
        return this.node(this._lexer.token, {
          kind: _kinds.Kind.OBJECT,
          fields: this.any(
            _tokenKind.TokenKind.BRACE_L,
            item,
            _tokenKind.TokenKind.BRACE_R
          )
        });
      }
      /**
       * ObjectField[Const] : Name : Value[?Const]
       */
      parseObjectField(isConst) {
        const start = this._lexer.token;
        const name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        return this.node(start, {
          kind: _kinds.Kind.OBJECT_FIELD,
          name,
          value: this.parseValueLiteral(isConst)
        });
      }
      // Implements the parsing rules in the Directives section.
      /**
       * Directives[Const] : Directive[?Const]+
       */
      parseDirectives(isConst) {
        const directives = [];
        while (this.peek(_tokenKind.TokenKind.AT)) {
          directives.push(this.parseDirective(isConst));
        }
        return directives;
      }
      parseConstDirectives() {
        return this.parseDirectives(true);
      }
      /**
       * ```
       * Directive[Const] : @ Name Arguments[?Const]?
       * ```
       */
      parseDirective(isConst) {
        const start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.AT);
        return this.node(start, {
          kind: _kinds.Kind.DIRECTIVE,
          name: this.parseName(),
          arguments: this.parseArguments(isConst)
        });
      }
      // Implements the parsing rules in the Types section.
      /**
       * Type :
       *   - NamedType
       *   - ListType
       *   - NonNullType
       */
      parseTypeReference() {
        const start = this._lexer.token;
        let type;
        if (this.expectOptionalToken(_tokenKind.TokenKind.BRACKET_L)) {
          const innerType = this.parseTypeReference();
          this.expectToken(_tokenKind.TokenKind.BRACKET_R);
          type = this.node(start, {
            kind: _kinds.Kind.LIST_TYPE,
            type: innerType
          });
        } else {
          type = this.parseNamedType();
        }
        if (this.expectOptionalToken(_tokenKind.TokenKind.BANG)) {
          return this.node(start, {
            kind: _kinds.Kind.NON_NULL_TYPE,
            type
          });
        }
        return type;
      }
      /**
       * NamedType : Name
       */
      parseNamedType() {
        return this.node(this._lexer.token, {
          kind: _kinds.Kind.NAMED_TYPE,
          name: this.parseName()
        });
      }
      // Implements the parsing rules in the Type Definition section.
      peekDescription() {
        return this.peek(_tokenKind.TokenKind.STRING) || this.peek(_tokenKind.TokenKind.BLOCK_STRING);
      }
      /**
       * Description : StringValue
       */
      parseDescription() {
        if (this.peekDescription()) {
          return this.parseStringLiteral();
        }
      }
      /**
       * ```
       * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
       * ```
       */
      parseSchemaDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("schema");
        const directives = this.parseConstDirectives();
        const operationTypes = this.many(
          _tokenKind.TokenKind.BRACE_L,
          this.parseOperationTypeDefinition,
          _tokenKind.TokenKind.BRACE_R
        );
        return this.node(start, {
          kind: _kinds.Kind.SCHEMA_DEFINITION,
          description,
          directives,
          operationTypes
        });
      }
      /**
       * OperationTypeDefinition : OperationType : NamedType
       */
      parseOperationTypeDefinition() {
        const start = this._lexer.token;
        const operation = this.parseOperationType();
        this.expectToken(_tokenKind.TokenKind.COLON);
        const type = this.parseNamedType();
        return this.node(start, {
          kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,
          operation,
          type
        });
      }
      /**
       * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
       */
      parseScalarTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("scalar");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,
          description,
          name,
          directives
        });
      }
      /**
       * ObjectTypeDefinition :
       *   Description?
       *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
       */
      parseObjectTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("type");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        return this.node(start, {
          kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields
        });
      }
      /**
       * ImplementsInterfaces :
       *   - implements `&`? NamedType
       *   - ImplementsInterfaces & NamedType
       */
      parseImplementsInterfaces() {
        return this.expectOptionalKeyword("implements") ? this.delimitedMany(_tokenKind.TokenKind.AMP, this.parseNamedType) : [];
      }
      /**
       * ```
       * FieldsDefinition : { FieldDefinition+ }
       * ```
       */
      parseFieldsDefinition() {
        return this.optionalMany(
          _tokenKind.TokenKind.BRACE_L,
          this.parseFieldDefinition,
          _tokenKind.TokenKind.BRACE_R
        );
      }
      /**
       * FieldDefinition :
       *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
       */
      parseFieldDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        const name = this.parseName();
        const args = this.parseArgumentDefs();
        this.expectToken(_tokenKind.TokenKind.COLON);
        const type = this.parseTypeReference();
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: _kinds.Kind.FIELD_DEFINITION,
          description,
          name,
          arguments: args,
          type,
          directives
        });
      }
      /**
       * ArgumentsDefinition : ( InputValueDefinition+ )
       */
      parseArgumentDefs() {
        return this.optionalMany(
          _tokenKind.TokenKind.PAREN_L,
          this.parseInputValueDef,
          _tokenKind.TokenKind.PAREN_R
        );
      }
      /**
       * InputValueDefinition :
       *   - Description? Name : Type DefaultValue? Directives[Const]?
       */
      parseInputValueDef() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        const name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        const type = this.parseTypeReference();
        let defaultValue;
        if (this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)) {
          defaultValue = this.parseConstValueLiteral();
        }
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: _kinds.Kind.INPUT_VALUE_DEFINITION,
          description,
          name,
          type,
          defaultValue,
          directives
        });
      }
      /**
       * InterfaceTypeDefinition :
       *   - Description? interface Name Directives[Const]? FieldsDefinition?
       */
      parseInterfaceTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("interface");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        return this.node(start, {
          kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields
        });
      }
      /**
       * UnionTypeDefinition :
       *   - Description? union Name Directives[Const]? UnionMemberTypes?
       */
      parseUnionTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("union");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const types = this.parseUnionMemberTypes();
        return this.node(start, {
          kind: _kinds.Kind.UNION_TYPE_DEFINITION,
          description,
          name,
          directives,
          types
        });
      }
      /**
       * UnionMemberTypes :
       *   - = `|`? NamedType
       *   - UnionMemberTypes | NamedType
       */
      parseUnionMemberTypes() {
        return this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseNamedType) : [];
      }
      /**
       * EnumTypeDefinition :
       *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
       */
      parseEnumTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("enum");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const values = this.parseEnumValuesDefinition();
        return this.node(start, {
          kind: _kinds.Kind.ENUM_TYPE_DEFINITION,
          description,
          name,
          directives,
          values
        });
      }
      /**
       * ```
       * EnumValuesDefinition : { EnumValueDefinition+ }
       * ```
       */
      parseEnumValuesDefinition() {
        return this.optionalMany(
          _tokenKind.TokenKind.BRACE_L,
          this.parseEnumValueDefinition,
          _tokenKind.TokenKind.BRACE_R
        );
      }
      /**
       * EnumValueDefinition : Description? EnumValue Directives[Const]?
       */
      parseEnumValueDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        const name = this.parseEnumValueName();
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: _kinds.Kind.ENUM_VALUE_DEFINITION,
          description,
          name,
          directives
        });
      }
      /**
       * EnumValue : Name but not `true`, `false` or `null`
       */
      parseEnumValueName() {
        if (this._lexer.token.value === "true" || this._lexer.token.value === "false" || this._lexer.token.value === "null") {
          throw (0, _syntaxError.syntaxError)(
            this._lexer.source,
            this._lexer.token.start,
            `${getTokenDesc(
              this._lexer.token
            )} is reserved and cannot be used for an enum value.`
          );
        }
        return this.parseName();
      }
      /**
       * InputObjectTypeDefinition :
       *   - Description? input Name Directives[Const]? InputFieldsDefinition?
       */
      parseInputObjectTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("input");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const fields = this.parseInputFieldsDefinition();
        return this.node(start, {
          kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,
          description,
          name,
          directives,
          fields
        });
      }
      /**
       * ```
       * InputFieldsDefinition : { InputValueDefinition+ }
       * ```
       */
      parseInputFieldsDefinition() {
        return this.optionalMany(
          _tokenKind.TokenKind.BRACE_L,
          this.parseInputValueDef,
          _tokenKind.TokenKind.BRACE_R
        );
      }
      /**
       * TypeSystemExtension :
       *   - SchemaExtension
       *   - TypeExtension
       *
       * TypeExtension :
       *   - ScalarTypeExtension
       *   - ObjectTypeExtension
       *   - InterfaceTypeExtension
       *   - UnionTypeExtension
       *   - EnumTypeExtension
       *   - InputObjectTypeDefinition
       */
      parseTypeSystemExtension() {
        const keywordToken = this._lexer.lookahead();
        if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaExtension();
            case "scalar":
              return this.parseScalarTypeExtension();
            case "type":
              return this.parseObjectTypeExtension();
            case "interface":
              return this.parseInterfaceTypeExtension();
            case "union":
              return this.parseUnionTypeExtension();
            case "enum":
              return this.parseEnumTypeExtension();
            case "input":
              return this.parseInputObjectTypeExtension();
          }
        }
        throw this.unexpected(keywordToken);
      }
      /**
       * ```
       * SchemaExtension :
       *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
       *  - extend schema Directives[Const]
       * ```
       */
      parseSchemaExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("schema");
        const directives = this.parseConstDirectives();
        const operationTypes = this.optionalMany(
          _tokenKind.TokenKind.BRACE_L,
          this.parseOperationTypeDefinition,
          _tokenKind.TokenKind.BRACE_R
        );
        if (directives.length === 0 && operationTypes.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: _kinds.Kind.SCHEMA_EXTENSION,
          directives,
          operationTypes
        });
      }
      /**
       * ScalarTypeExtension :
       *   - extend scalar Name Directives[Const]
       */
      parseScalarTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("scalar");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        if (directives.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,
          name,
          directives
        });
      }
      /**
       * ObjectTypeExtension :
       *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
       *  - extend type Name ImplementsInterfaces? Directives[Const]
       *  - extend type Name ImplementsInterfaces
       */
      parseObjectTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("type");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields
        });
      }
      /**
       * InterfaceTypeExtension :
       *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
       *  - extend interface Name ImplementsInterfaces? Directives[Const]
       *  - extend interface Name ImplementsInterfaces
       */
      parseInterfaceTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("interface");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields
        });
      }
      /**
       * UnionTypeExtension :
       *   - extend union Name Directives[Const]? UnionMemberTypes
       *   - extend union Name Directives[Const]
       */
      parseUnionTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("union");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const types = this.parseUnionMemberTypes();
        if (directives.length === 0 && types.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: _kinds.Kind.UNION_TYPE_EXTENSION,
          name,
          directives,
          types
        });
      }
      /**
       * EnumTypeExtension :
       *   - extend enum Name Directives[Const]? EnumValuesDefinition
       *   - extend enum Name Directives[Const]
       */
      parseEnumTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("enum");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const values = this.parseEnumValuesDefinition();
        if (directives.length === 0 && values.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: _kinds.Kind.ENUM_TYPE_EXTENSION,
          name,
          directives,
          values
        });
      }
      /**
       * InputObjectTypeExtension :
       *   - extend input Name Directives[Const]? InputFieldsDefinition
       *   - extend input Name Directives[Const]
       */
      parseInputObjectTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("input");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const fields = this.parseInputFieldsDefinition();
        if (directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,
          name,
          directives,
          fields
        });
      }
      /**
       * ```
       * DirectiveDefinition :
       *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
       * ```
       */
      parseDirectiveDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("directive");
        this.expectToken(_tokenKind.TokenKind.AT);
        const name = this.parseName();
        const args = this.parseArgumentDefs();
        const repeatable = this.expectOptionalKeyword("repeatable");
        this.expectKeyword("on");
        const locations = this.parseDirectiveLocations();
        return this.node(start, {
          kind: _kinds.Kind.DIRECTIVE_DEFINITION,
          description,
          name,
          arguments: args,
          repeatable,
          locations
        });
      }
      /**
       * DirectiveLocations :
       *   - `|`? DirectiveLocation
       *   - DirectiveLocations | DirectiveLocation
       */
      parseDirectiveLocations() {
        return this.delimitedMany(
          _tokenKind.TokenKind.PIPE,
          this.parseDirectiveLocation
        );
      }
      /*
       * DirectiveLocation :
       *   - ExecutableDirectiveLocation
       *   - TypeSystemDirectiveLocation
       *
       * ExecutableDirectiveLocation : one of
       *   `QUERY`
       *   `MUTATION`
       *   `SUBSCRIPTION`
       *   `FIELD`
       *   `FRAGMENT_DEFINITION`
       *   `FRAGMENT_SPREAD`
       *   `INLINE_FRAGMENT`
       *
       * TypeSystemDirectiveLocation : one of
       *   `SCHEMA`
       *   `SCALAR`
       *   `OBJECT`
       *   `FIELD_DEFINITION`
       *   `ARGUMENT_DEFINITION`
       *   `INTERFACE`
       *   `UNION`
       *   `ENUM`
       *   `ENUM_VALUE`
       *   `INPUT_OBJECT`
       *   `INPUT_FIELD_DEFINITION`
       */
      parseDirectiveLocation() {
        const start = this._lexer.token;
        const name = this.parseName();
        if (Object.prototype.hasOwnProperty.call(
          _directiveLocation.DirectiveLocation,
          name.value
        )) {
          return name;
        }
        throw this.unexpected(start);
      }
      // Core parsing utility functions
      /**
       * Returns a node that, if configured to do so, sets a "loc" field as a
       * location object, used to identify the place in the source that created a
       * given parsed object.
       */
      node(startToken, node) {
        if (this._options.noLocation !== true) {
          node.loc = new _ast.Location(
            startToken,
            this._lexer.lastToken,
            this._lexer.source
          );
        }
        return node;
      }
      /**
       * Determines if the next token is of a given kind
       */
      peek(kind) {
        return this._lexer.token.kind === kind;
      }
      /**
       * If the next token is of the given kind, return that token after advancing the lexer.
       * Otherwise, do not change the parser state and throw an error.
       */
      expectToken(kind) {
        const token = this._lexer.token;
        if (token.kind === kind) {
          this.advanceLexer();
          return token;
        }
        throw (0, _syntaxError.syntaxError)(
          this._lexer.source,
          token.start,
          `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`
        );
      }
      /**
       * If the next token is of the given kind, return "true" after advancing the lexer.
       * Otherwise, do not change the parser state and return "false".
       */
      expectOptionalToken(kind) {
        const token = this._lexer.token;
        if (token.kind === kind) {
          this.advanceLexer();
          return true;
        }
        return false;
      }
      /**
       * If the next token is a given keyword, advance the lexer.
       * Otherwise, do not change the parser state and throw an error.
       */
      expectKeyword(value) {
        const token = this._lexer.token;
        if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
          this.advanceLexer();
        } else {
          throw (0, _syntaxError.syntaxError)(
            this._lexer.source,
            token.start,
            `Expected "${value}", found ${getTokenDesc(token)}.`
          );
        }
      }
      /**
       * If the next token is a given keyword, return "true" after advancing the lexer.
       * Otherwise, do not change the parser state and return "false".
       */
      expectOptionalKeyword(value) {
        const token = this._lexer.token;
        if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
          this.advanceLexer();
          return true;
        }
        return false;
      }
      /**
       * Helper function for creating an error when an unexpected lexed token is encountered.
       */
      unexpected(atToken) {
        const token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
        return (0, _syntaxError.syntaxError)(
          this._lexer.source,
          token.start,
          `Unexpected ${getTokenDesc(token)}.`
        );
      }
      /**
       * Returns a possibly empty list of parse nodes, determined by the parseFn.
       * This list begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      any(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        const nodes = [];
        while (!this.expectOptionalToken(closeKind)) {
          nodes.push(parseFn.call(this));
        }
        return nodes;
      }
      /**
       * Returns a list of parse nodes, determined by the parseFn.
       * It can be empty only if open token is missing otherwise it will always return non-empty list
       * that begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      optionalMany(openKind, parseFn, closeKind) {
        if (this.expectOptionalToken(openKind)) {
          const nodes = [];
          do {
            nodes.push(parseFn.call(this));
          } while (!this.expectOptionalToken(closeKind));
          return nodes;
        }
        return [];
      }
      /**
       * Returns a non-empty list of parse nodes, determined by the parseFn.
       * This list begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      many(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        const nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (!this.expectOptionalToken(closeKind));
        return nodes;
      }
      /**
       * Returns a non-empty list of parse nodes, determined by the parseFn.
       * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
       * Advances the parser to the next lex token after last item in the list.
       */
      delimitedMany(delimiterKind, parseFn) {
        this.expectOptionalToken(delimiterKind);
        const nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (this.expectOptionalToken(delimiterKind));
        return nodes;
      }
      advanceLexer() {
        const { maxTokens } = this._options;
        const token = this._lexer.advance();
        if (maxTokens !== void 0 && token.kind !== _tokenKind.TokenKind.EOF) {
          ++this._tokenCounter;
          if (this._tokenCounter > maxTokens) {
            throw (0, _syntaxError.syntaxError)(
              this._lexer.source,
              token.start,
              `Document contains more that ${maxTokens} tokens. Parsing aborted.`
            );
          }
        }
      }
    };
    exports2.Parser = Parser;
    function getTokenDesc(token) {
      const value = token.value;
      return getTokenKindDesc(token.kind) + (value != null ? ` "${value}"` : "");
    }
    function getTokenKindDesc(kind) {
      return (0, _lexer.isPunctuatorTokenKind)(kind) ? `"${kind}"` : kind;
    }
  }
});

// node_modules/graphql/jsutils/didYouMean.js
var require_didYouMean = __commonJS({
  "node_modules/graphql/jsutils/didYouMean.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.didYouMean = didYouMean;
    var MAX_SUGGESTIONS = 5;
    function didYouMean(firstArg, secondArg) {
      const [subMessage, suggestionsArg] = secondArg ? [firstArg, secondArg] : [void 0, firstArg];
      let message = " Did you mean ";
      if (subMessage) {
        message += subMessage + " ";
      }
      const suggestions = suggestionsArg.map((x2) => `"${x2}"`);
      switch (suggestions.length) {
        case 0:
          return "";
        case 1:
          return message + suggestions[0] + "?";
        case 2:
          return message + suggestions[0] + " or " + suggestions[1] + "?";
      }
      const selected = suggestions.slice(0, MAX_SUGGESTIONS);
      const lastItem = selected.pop();
      return message + selected.join(", ") + ", or " + lastItem + "?";
    }
  }
});

// node_modules/graphql/jsutils/identityFunc.js
var require_identityFunc = __commonJS({
  "node_modules/graphql/jsutils/identityFunc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.identityFunc = identityFunc;
    function identityFunc(x2) {
      return x2;
    }
  }
});

// node_modules/graphql/jsutils/keyMap.js
var require_keyMap = __commonJS({
  "node_modules/graphql/jsutils/keyMap.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.keyMap = keyMap;
    function keyMap(list, keyFn) {
      const result = /* @__PURE__ */ Object.create(null);
      for (const item of list) {
        result[keyFn(item)] = item;
      }
      return result;
    }
  }
});

// node_modules/graphql/jsutils/keyValMap.js
var require_keyValMap = __commonJS({
  "node_modules/graphql/jsutils/keyValMap.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.keyValMap = keyValMap;
    function keyValMap(list, keyFn, valFn) {
      const result = /* @__PURE__ */ Object.create(null);
      for (const item of list) {
        result[keyFn(item)] = valFn(item);
      }
      return result;
    }
  }
});

// node_modules/graphql/jsutils/mapValue.js
var require_mapValue = __commonJS({
  "node_modules/graphql/jsutils/mapValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.mapValue = mapValue;
    function mapValue(map, fn2) {
      const result = /* @__PURE__ */ Object.create(null);
      for (const key of Object.keys(map)) {
        result[key] = fn2(map[key], key);
      }
      return result;
    }
  }
});

// node_modules/graphql/jsutils/naturalCompare.js
var require_naturalCompare = __commonJS({
  "node_modules/graphql/jsutils/naturalCompare.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.naturalCompare = naturalCompare;
    function naturalCompare(aStr, bStr) {
      let aIndex = 0;
      let bIndex = 0;
      while (aIndex < aStr.length && bIndex < bStr.length) {
        let aChar = aStr.charCodeAt(aIndex);
        let bChar = bStr.charCodeAt(bIndex);
        if (isDigit(aChar) && isDigit(bChar)) {
          let aNum = 0;
          do {
            ++aIndex;
            aNum = aNum * 10 + aChar - DIGIT_0;
            aChar = aStr.charCodeAt(aIndex);
          } while (isDigit(aChar) && aNum > 0);
          let bNum = 0;
          do {
            ++bIndex;
            bNum = bNum * 10 + bChar - DIGIT_0;
            bChar = bStr.charCodeAt(bIndex);
          } while (isDigit(bChar) && bNum > 0);
          if (aNum < bNum) {
            return -1;
          }
          if (aNum > bNum) {
            return 1;
          }
        } else {
          if (aChar < bChar) {
            return -1;
          }
          if (aChar > bChar) {
            return 1;
          }
          ++aIndex;
          ++bIndex;
        }
      }
      return aStr.length - bStr.length;
    }
    var DIGIT_0 = 48;
    var DIGIT_9 = 57;
    function isDigit(code) {
      return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;
    }
  }
});

// node_modules/graphql/jsutils/suggestionList.js
var require_suggestionList = __commonJS({
  "node_modules/graphql/jsutils/suggestionList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.suggestionList = suggestionList;
    var _naturalCompare = require_naturalCompare();
    function suggestionList(input, options) {
      const optionsByDistance = /* @__PURE__ */ Object.create(null);
      const lexicalDistance = new LexicalDistance(input);
      const threshold = Math.floor(input.length * 0.4) + 1;
      for (const option of options) {
        const distance = lexicalDistance.measure(option, threshold);
        if (distance !== void 0) {
          optionsByDistance[option] = distance;
        }
      }
      return Object.keys(optionsByDistance).sort((a, b2) => {
        const distanceDiff = optionsByDistance[a] - optionsByDistance[b2];
        return distanceDiff !== 0 ? distanceDiff : (0, _naturalCompare.naturalCompare)(a, b2);
      });
    }
    var LexicalDistance = class {
      constructor(input) {
        this._input = input;
        this._inputLowerCase = input.toLowerCase();
        this._inputArray = stringToArray(this._inputLowerCase);
        this._rows = [
          new Array(input.length + 1).fill(0),
          new Array(input.length + 1).fill(0),
          new Array(input.length + 1).fill(0)
        ];
      }
      measure(option, threshold) {
        if (this._input === option) {
          return 0;
        }
        const optionLowerCase = option.toLowerCase();
        if (this._inputLowerCase === optionLowerCase) {
          return 1;
        }
        let a = stringToArray(optionLowerCase);
        let b2 = this._inputArray;
        if (a.length < b2.length) {
          const tmp = a;
          a = b2;
          b2 = tmp;
        }
        const aLength = a.length;
        const bLength = b2.length;
        if (aLength - bLength > threshold) {
          return void 0;
        }
        const rows = this._rows;
        for (let j2 = 0; j2 <= bLength; j2++) {
          rows[0][j2] = j2;
        }
        for (let i = 1; i <= aLength; i++) {
          const upRow = rows[(i - 1) % 3];
          const currentRow = rows[i % 3];
          let smallestCell = currentRow[0] = i;
          for (let j2 = 1; j2 <= bLength; j2++) {
            const cost = a[i - 1] === b2[j2 - 1] ? 0 : 1;
            let currentCell = Math.min(
              upRow[j2] + 1,
              // delete
              currentRow[j2 - 1] + 1,
              // insert
              upRow[j2 - 1] + cost
              // substitute
            );
            if (i > 1 && j2 > 1 && a[i - 1] === b2[j2 - 2] && a[i - 2] === b2[j2 - 1]) {
              const doubleDiagonalCell = rows[(i - 2) % 3][j2 - 2];
              currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
            }
            if (currentCell < smallestCell) {
              smallestCell = currentCell;
            }
            currentRow[j2] = currentCell;
          }
          if (smallestCell > threshold) {
            return void 0;
          }
        }
        const distance = rows[aLength % 3][bLength];
        return distance <= threshold ? distance : void 0;
      }
    };
    function stringToArray(str) {
      const strLength = str.length;
      const array = new Array(strLength);
      for (let i = 0; i < strLength; ++i) {
        array[i] = str.charCodeAt(i);
      }
      return array;
    }
  }
});

// node_modules/graphql/jsutils/toObjMap.js
var require_toObjMap = __commonJS({
  "node_modules/graphql/jsutils/toObjMap.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.toObjMap = toObjMap;
    function toObjMap(obj) {
      if (obj == null) {
        return /* @__PURE__ */ Object.create(null);
      }
      if (Object.getPrototypeOf(obj) === null) {
        return obj;
      }
      const map = /* @__PURE__ */ Object.create(null);
      for (const [key, value] of Object.entries(obj)) {
        map[key] = value;
      }
      return map;
    }
  }
});

// node_modules/graphql/language/printString.js
var require_printString = __commonJS({
  "node_modules/graphql/language/printString.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.printString = printString;
    function printString(str) {
      return `"${str.replace(escapedRegExp, escapedReplacer)}"`;
    }
    var escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
    function escapedReplacer(str) {
      return escapeSequences[str.charCodeAt(0)];
    }
    var escapeSequences = [
      "\\u0000",
      "\\u0001",
      "\\u0002",
      "\\u0003",
      "\\u0004",
      "\\u0005",
      "\\u0006",
      "\\u0007",
      "\\b",
      "\\t",
      "\\n",
      "\\u000B",
      "\\f",
      "\\r",
      "\\u000E",
      "\\u000F",
      "\\u0010",
      "\\u0011",
      "\\u0012",
      "\\u0013",
      "\\u0014",
      "\\u0015",
      "\\u0016",
      "\\u0017",
      "\\u0018",
      "\\u0019",
      "\\u001A",
      "\\u001B",
      "\\u001C",
      "\\u001D",
      "\\u001E",
      "\\u001F",
      "",
      "",
      '\\"',
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 2F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 3F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 4F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\\\",
      "",
      "",
      "",
      // 5F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 6F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\u007F",
      "\\u0080",
      "\\u0081",
      "\\u0082",
      "\\u0083",
      "\\u0084",
      "\\u0085",
      "\\u0086",
      "\\u0087",
      "\\u0088",
      "\\u0089",
      "\\u008A",
      "\\u008B",
      "\\u008C",
      "\\u008D",
      "\\u008E",
      "\\u008F",
      "\\u0090",
      "\\u0091",
      "\\u0092",
      "\\u0093",
      "\\u0094",
      "\\u0095",
      "\\u0096",
      "\\u0097",
      "\\u0098",
      "\\u0099",
      "\\u009A",
      "\\u009B",
      "\\u009C",
      "\\u009D",
      "\\u009E",
      "\\u009F"
    ];
  }
});

// node_modules/graphql/language/visitor.js
var require_visitor = __commonJS({
  "node_modules/graphql/language/visitor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.BREAK = void 0;
    exports2.getEnterLeaveForKind = getEnterLeaveForKind;
    exports2.getVisitFn = getVisitFn;
    exports2.visit = visit2;
    exports2.visitInParallel = visitInParallel;
    var _devAssert = require_devAssert();
    var _inspect = require_inspect();
    var _ast = require_ast();
    var _kinds = require_kinds();
    var BREAK = Object.freeze({});
    exports2.BREAK = BREAK;
    function visit2(root, visitor, visitorKeys = _ast.QueryDocumentKeys) {
      const enterLeaveMap = /* @__PURE__ */ new Map();
      for (const kind of Object.values(_kinds.Kind)) {
        enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
      }
      let stack = void 0;
      let inArray = Array.isArray(root);
      let keys = [root];
      let index = -1;
      let edits = [];
      let node = root;
      let key = void 0;
      let parent = void 0;
      const path2 = [];
      const ancestors = [];
      do {
        index++;
        const isLeaving = index === keys.length;
        const isEdited = isLeaving && edits.length !== 0;
        if (isLeaving) {
          key = ancestors.length === 0 ? void 0 : path2[path2.length - 1];
          node = parent;
          parent = ancestors.pop();
          if (isEdited) {
            if (inArray) {
              node = node.slice();
              let editOffset = 0;
              for (const [editKey, editValue] of edits) {
                const arrayKey = editKey - editOffset;
                if (editValue === null) {
                  node.splice(arrayKey, 1);
                  editOffset++;
                } else {
                  node[arrayKey] = editValue;
                }
              }
            } else {
              node = Object.defineProperties(
                {},
                Object.getOwnPropertyDescriptors(node)
              );
              for (const [editKey, editValue] of edits) {
                node[editKey] = editValue;
              }
            }
          }
          index = stack.index;
          keys = stack.keys;
          edits = stack.edits;
          inArray = stack.inArray;
          stack = stack.prev;
        } else if (parent) {
          key = inArray ? index : keys[index];
          node = parent[key];
          if (node === null || node === void 0) {
            continue;
          }
          path2.push(key);
        }
        let result;
        if (!Array.isArray(node)) {
          var _enterLeaveMap$get, _enterLeaveMap$get2;
          (0, _ast.isNode)(node) || (0, _devAssert.devAssert)(
            false,
            `Invalid AST Node: ${(0, _inspect.inspect)(node)}.`
          );
          const visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;
          result = visitFn === null || visitFn === void 0 ? void 0 : visitFn.call(visitor, node, key, parent, path2, ancestors);
          if (result === BREAK) {
            break;
          }
          if (result === false) {
            if (!isLeaving) {
              path2.pop();
              continue;
            }
          } else if (result !== void 0) {
            edits.push([key, result]);
            if (!isLeaving) {
              if ((0, _ast.isNode)(result)) {
                node = result;
              } else {
                path2.pop();
                continue;
              }
            }
          }
        }
        if (result === void 0 && isEdited) {
          edits.push([key, node]);
        }
        if (isLeaving) {
          path2.pop();
        } else {
          var _node$kind;
          stack = {
            inArray,
            index,
            keys,
            edits,
            prev: stack
          };
          inArray = Array.isArray(node);
          keys = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [];
          index = -1;
          edits = [];
          if (parent) {
            ancestors.push(parent);
          }
          parent = node;
        }
      } while (stack !== void 0);
      if (edits.length !== 0) {
        return edits[edits.length - 1][1];
      }
      return root;
    }
    function visitInParallel(visitors) {
      const skipping = new Array(visitors.length).fill(null);
      const mergedVisitor = /* @__PURE__ */ Object.create(null);
      for (const kind of Object.values(_kinds.Kind)) {
        let hasVisitor = false;
        const enterList = new Array(visitors.length).fill(void 0);
        const leaveList = new Array(visitors.length).fill(void 0);
        for (let i = 0; i < visitors.length; ++i) {
          const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);
          hasVisitor || (hasVisitor = enter != null || leave != null);
          enterList[i] = enter;
          leaveList[i] = leave;
        }
        if (!hasVisitor) {
          continue;
        }
        const mergedEnterLeave = {
          enter(...args) {
            const node = args[0];
            for (let i = 0; i < visitors.length; i++) {
              if (skipping[i] === null) {
                var _enterList$i;
                const result = (_enterList$i = enterList[i]) === null || _enterList$i === void 0 ? void 0 : _enterList$i.apply(visitors[i], args);
                if (result === false) {
                  skipping[i] = node;
                } else if (result === BREAK) {
                  skipping[i] = BREAK;
                } else if (result !== void 0) {
                  return result;
                }
              }
            }
          },
          leave(...args) {
            const node = args[0];
            for (let i = 0; i < visitors.length; i++) {
              if (skipping[i] === null) {
                var _leaveList$i;
                const result = (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0 ? void 0 : _leaveList$i.apply(visitors[i], args);
                if (result === BREAK) {
                  skipping[i] = BREAK;
                } else if (result !== void 0 && result !== false) {
                  return result;
                }
              } else if (skipping[i] === node) {
                skipping[i] = null;
              }
            }
          }
        };
        mergedVisitor[kind] = mergedEnterLeave;
      }
      return mergedVisitor;
    }
    function getEnterLeaveForKind(visitor, kind) {
      const kindVisitor = visitor[kind];
      if (typeof kindVisitor === "object") {
        return kindVisitor;
      } else if (typeof kindVisitor === "function") {
        return {
          enter: kindVisitor,
          leave: void 0
        };
      }
      return {
        enter: visitor.enter,
        leave: visitor.leave
      };
    }
    function getVisitFn(visitor, kind, isLeaving) {
      const { enter, leave } = getEnterLeaveForKind(visitor, kind);
      return isLeaving ? leave : enter;
    }
  }
});

// node_modules/graphql/language/printer.js
var require_printer = __commonJS({
  "node_modules/graphql/language/printer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.print = print4;
    var _blockString = require_blockString();
    var _printString = require_printString();
    var _visitor = require_visitor();
    function print4(ast) {
      return (0, _visitor.visit)(ast, printDocASTReducer2);
    }
    var MAX_LINE_LENGTH2 = 80;
    var printDocASTReducer2 = {
      Name: {
        leave: (node) => node.value
      },
      Variable: {
        leave: (node) => "$" + node.name
      },
      // Document
      Document: {
        leave: (node) => join3(node.definitions, "\n\n")
      },
      OperationDefinition: {
        leave(node) {
          const varDefs = wrap2("(", join3(node.variableDefinitions, ", "), ")");
          const prefix = join3(
            [
              node.operation,
              join3([node.name, varDefs]),
              join3(node.directives, " ")
            ],
            " "
          );
          return (prefix === "query" ? "" : prefix + " ") + node.selectionSet;
        }
      },
      VariableDefinition: {
        leave: ({ variable, type, defaultValue, directives }) => variable + ": " + type + wrap2(" = ", defaultValue) + wrap2(" ", join3(directives, " "))
      },
      SelectionSet: {
        leave: ({ selections }) => block2(selections)
      },
      Field: {
        leave({ alias, name, arguments: args, directives, selectionSet }) {
          const prefix = wrap2("", alias, ": ") + name;
          let argsLine = prefix + wrap2("(", join3(args, ", "), ")");
          if (argsLine.length > MAX_LINE_LENGTH2) {
            argsLine = prefix + wrap2("(\n", indent2(join3(args, "\n")), "\n)");
          }
          return join3([argsLine, join3(directives, " "), selectionSet], " ");
        }
      },
      Argument: {
        leave: ({ name, value }) => name + ": " + value
      },
      // Fragments
      FragmentSpread: {
        leave: ({ name, directives }) => "..." + name + wrap2(" ", join3(directives, " "))
      },
      InlineFragment: {
        leave: ({ typeCondition, directives, selectionSet }) => join3(
          [
            "...",
            wrap2("on ", typeCondition),
            join3(directives, " "),
            selectionSet
          ],
          " "
        )
      },
      FragmentDefinition: {
        leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => (
          // or removed in the future.
          `fragment ${name}${wrap2("(", join3(variableDefinitions, ", "), ")")} on ${typeCondition} ${wrap2("", join3(directives, " "), " ")}` + selectionSet
        )
      },
      // Value
      IntValue: {
        leave: ({ value }) => value
      },
      FloatValue: {
        leave: ({ value }) => value
      },
      StringValue: {
        leave: ({ value, block: isBlockString }) => isBlockString ? (0, _blockString.printBlockString)(value) : (0, _printString.printString)(value)
      },
      BooleanValue: {
        leave: ({ value }) => value ? "true" : "false"
      },
      NullValue: {
        leave: () => "null"
      },
      EnumValue: {
        leave: ({ value }) => value
      },
      ListValue: {
        leave: ({ values }) => "[" + join3(values, ", ") + "]"
      },
      ObjectValue: {
        leave: ({ fields }) => "{" + join3(fields, ", ") + "}"
      },
      ObjectField: {
        leave: ({ name, value }) => name + ": " + value
      },
      // Directive
      Directive: {
        leave: ({ name, arguments: args }) => "@" + name + wrap2("(", join3(args, ", "), ")")
      },
      // Type
      NamedType: {
        leave: ({ name }) => name
      },
      ListType: {
        leave: ({ type }) => "[" + type + "]"
      },
      NonNullType: {
        leave: ({ type }) => type + "!"
      },
      // Type System Definitions
      SchemaDefinition: {
        leave: ({ description, directives, operationTypes }) => wrap2("", description, "\n") + join3(["schema", join3(directives, " "), block2(operationTypes)], " ")
      },
      OperationTypeDefinition: {
        leave: ({ operation, type }) => operation + ": " + type
      },
      ScalarTypeDefinition: {
        leave: ({ description, name, directives }) => wrap2("", description, "\n") + join3(["scalar", name, join3(directives, " ")], " ")
      },
      ObjectTypeDefinition: {
        leave: ({ description, name, interfaces, directives, fields }) => wrap2("", description, "\n") + join3(
          [
            "type",
            name,
            wrap2("implements ", join3(interfaces, " & ")),
            join3(directives, " "),
            block2(fields)
          ],
          " "
        )
      },
      FieldDefinition: {
        leave: ({ description, name, arguments: args, type, directives }) => wrap2("", description, "\n") + name + (hasMultilineItems2(args) ? wrap2("(\n", indent2(join3(args, "\n")), "\n)") : wrap2("(", join3(args, ", "), ")")) + ": " + type + wrap2(" ", join3(directives, " "))
      },
      InputValueDefinition: {
        leave: ({ description, name, type, defaultValue, directives }) => wrap2("", description, "\n") + join3(
          [name + ": " + type, wrap2("= ", defaultValue), join3(directives, " ")],
          " "
        )
      },
      InterfaceTypeDefinition: {
        leave: ({ description, name, interfaces, directives, fields }) => wrap2("", description, "\n") + join3(
          [
            "interface",
            name,
            wrap2("implements ", join3(interfaces, " & ")),
            join3(directives, " "),
            block2(fields)
          ],
          " "
        )
      },
      UnionTypeDefinition: {
        leave: ({ description, name, directives, types }) => wrap2("", description, "\n") + join3(
          ["union", name, join3(directives, " "), wrap2("= ", join3(types, " | "))],
          " "
        )
      },
      EnumTypeDefinition: {
        leave: ({ description, name, directives, values }) => wrap2("", description, "\n") + join3(["enum", name, join3(directives, " "), block2(values)], " ")
      },
      EnumValueDefinition: {
        leave: ({ description, name, directives }) => wrap2("", description, "\n") + join3([name, join3(directives, " ")], " ")
      },
      InputObjectTypeDefinition: {
        leave: ({ description, name, directives, fields }) => wrap2("", description, "\n") + join3(["input", name, join3(directives, " "), block2(fields)], " ")
      },
      DirectiveDefinition: {
        leave: ({ description, name, arguments: args, repeatable, locations }) => wrap2("", description, "\n") + "directive @" + name + (hasMultilineItems2(args) ? wrap2("(\n", indent2(join3(args, "\n")), "\n)") : wrap2("(", join3(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join3(locations, " | ")
      },
      SchemaExtension: {
        leave: ({ directives, operationTypes }) => join3(
          ["extend schema", join3(directives, " "), block2(operationTypes)],
          " "
        )
      },
      ScalarTypeExtension: {
        leave: ({ name, directives }) => join3(["extend scalar", name, join3(directives, " ")], " ")
      },
      ObjectTypeExtension: {
        leave: ({ name, interfaces, directives, fields }) => join3(
          [
            "extend type",
            name,
            wrap2("implements ", join3(interfaces, " & ")),
            join3(directives, " "),
            block2(fields)
          ],
          " "
        )
      },
      InterfaceTypeExtension: {
        leave: ({ name, interfaces, directives, fields }) => join3(
          [
            "extend interface",
            name,
            wrap2("implements ", join3(interfaces, " & ")),
            join3(directives, " "),
            block2(fields)
          ],
          " "
        )
      },
      UnionTypeExtension: {
        leave: ({ name, directives, types }) => join3(
          [
            "extend union",
            name,
            join3(directives, " "),
            wrap2("= ", join3(types, " | "))
          ],
          " "
        )
      },
      EnumTypeExtension: {
        leave: ({ name, directives, values }) => join3(["extend enum", name, join3(directives, " "), block2(values)], " ")
      },
      InputObjectTypeExtension: {
        leave: ({ name, directives, fields }) => join3(["extend input", name, join3(directives, " "), block2(fields)], " ")
      }
    };
    function join3(maybeArray, separator = "") {
      var _maybeArray$filter$jo;
      return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter((x2) => x2).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
    }
    function block2(array) {
      return wrap2("{\n", indent2(join3(array, "\n")), "\n}");
    }
    function wrap2(start, maybeString, end = "") {
      return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
    }
    function indent2(str) {
      return wrap2("  ", str.replace(/\n/g, "\n  "));
    }
    function hasMultilineItems2(maybeArray) {
      var _maybeArray$some;
      return (_maybeArray$some = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some((str) => str.includes("\n"))) !== null && _maybeArray$some !== void 0 ? _maybeArray$some : false;
    }
  }
});

// node_modules/graphql/utilities/valueFromASTUntyped.js
var require_valueFromASTUntyped = __commonJS({
  "node_modules/graphql/utilities/valueFromASTUntyped.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.valueFromASTUntyped = valueFromASTUntyped;
    var _keyValMap = require_keyValMap();
    var _kinds = require_kinds();
    function valueFromASTUntyped(valueNode, variables) {
      switch (valueNode.kind) {
        case _kinds.Kind.NULL:
          return null;
        case _kinds.Kind.INT:
          return parseInt(valueNode.value, 10);
        case _kinds.Kind.FLOAT:
          return parseFloat(valueNode.value);
        case _kinds.Kind.STRING:
        case _kinds.Kind.ENUM:
        case _kinds.Kind.BOOLEAN:
          return valueNode.value;
        case _kinds.Kind.LIST:
          return valueNode.values.map(
            (node) => valueFromASTUntyped(node, variables)
          );
        case _kinds.Kind.OBJECT:
          return (0, _keyValMap.keyValMap)(
            valueNode.fields,
            (field) => field.name.value,
            (field) => valueFromASTUntyped(field.value, variables)
          );
        case _kinds.Kind.VARIABLE:
          return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
      }
    }
  }
});

// node_modules/graphql/type/assertName.js
var require_assertName = __commonJS({
  "node_modules/graphql/type/assertName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.assertEnumValueName = assertEnumValueName;
    exports2.assertName = assertName;
    var _devAssert = require_devAssert();
    var _GraphQLError = require_GraphQLError();
    var _characterClasses = require_characterClasses();
    function assertName(name) {
      name != null || (0, _devAssert.devAssert)(false, "Must provide name.");
      typeof name === "string" || (0, _devAssert.devAssert)(false, "Expected name to be a string.");
      if (name.length === 0) {
        throw new _GraphQLError.GraphQLError(
          "Expected name to be a non-empty string."
        );
      }
      for (let i = 1; i < name.length; ++i) {
        if (!(0, _characterClasses.isNameContinue)(name.charCodeAt(i))) {
          throw new _GraphQLError.GraphQLError(
            `Names must only contain [_a-zA-Z0-9] but "${name}" does not.`
          );
        }
      }
      if (!(0, _characterClasses.isNameStart)(name.charCodeAt(0))) {
        throw new _GraphQLError.GraphQLError(
          `Names must start with [_a-zA-Z] but "${name}" does not.`
        );
      }
      return name;
    }
    function assertEnumValueName(name) {
      if (name === "true" || name === "false" || name === "null") {
        throw new _GraphQLError.GraphQLError(
          `Enum values cannot be named: ${name}`
        );
      }
      return assertName(name);
    }
  }
});

// node_modules/graphql/type/definition.js
var require_definition = __commonJS({
  "node_modules/graphql/type/definition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.GraphQLUnionType = exports2.GraphQLScalarType = exports2.GraphQLObjectType = exports2.GraphQLNonNull = exports2.GraphQLList = exports2.GraphQLInterfaceType = exports2.GraphQLInputObjectType = exports2.GraphQLEnumType = void 0;
    exports2.argsToArgsConfig = argsToArgsConfig;
    exports2.assertAbstractType = assertAbstractType;
    exports2.assertCompositeType = assertCompositeType;
    exports2.assertEnumType = assertEnumType;
    exports2.assertInputObjectType = assertInputObjectType;
    exports2.assertInputType = assertInputType;
    exports2.assertInterfaceType = assertInterfaceType;
    exports2.assertLeafType = assertLeafType;
    exports2.assertListType = assertListType;
    exports2.assertNamedType = assertNamedType;
    exports2.assertNonNullType = assertNonNullType;
    exports2.assertNullableType = assertNullableType;
    exports2.assertObjectType = assertObjectType;
    exports2.assertOutputType = assertOutputType;
    exports2.assertScalarType = assertScalarType;
    exports2.assertType = assertType;
    exports2.assertUnionType = assertUnionType;
    exports2.assertWrappingType = assertWrappingType;
    exports2.defineArguments = defineArguments;
    exports2.getNamedType = getNamedType6;
    exports2.getNullableType = getNullableType2;
    exports2.isAbstractType = isAbstractType;
    exports2.isCompositeType = isCompositeType2;
    exports2.isEnumType = isEnumType5;
    exports2.isInputObjectType = isInputObjectType7;
    exports2.isInputType = isInputType;
    exports2.isInterfaceType = isInterfaceType7;
    exports2.isLeafType = isLeafType4;
    exports2.isListType = isListType6;
    exports2.isNamedType = isNamedType4;
    exports2.isNonNullType = isNonNullType6;
    exports2.isNullableType = isNullableType;
    exports2.isObjectType = isObjectType11;
    exports2.isOutputType = isOutputType;
    exports2.isRequiredArgument = isRequiredArgument;
    exports2.isRequiredInputField = isRequiredInputField;
    exports2.isScalarType = isScalarType7;
    exports2.isType = isType;
    exports2.isUnionType = isUnionType6;
    exports2.isWrappingType = isWrappingType;
    exports2.resolveObjMapThunk = resolveObjMapThunk;
    exports2.resolveReadonlyArrayThunk = resolveReadonlyArrayThunk;
    var _devAssert = require_devAssert();
    var _didYouMean = require_didYouMean();
    var _identityFunc = require_identityFunc();
    var _inspect = require_inspect();
    var _instanceOf = require_instanceOf();
    var _isObjectLike = require_isObjectLike();
    var _keyMap = require_keyMap();
    var _keyValMap = require_keyValMap();
    var _mapValue = require_mapValue();
    var _suggestionList = require_suggestionList();
    var _toObjMap = require_toObjMap();
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _printer = require_printer();
    var _valueFromASTUntyped = require_valueFromASTUntyped();
    var _assertName = require_assertName();
    function isType(type) {
      return isScalarType7(type) || isObjectType11(type) || isInterfaceType7(type) || isUnionType6(type) || isEnumType5(type) || isInputObjectType7(type) || isListType6(type) || isNonNullType6(type);
    }
    function assertType(type) {
      if (!isType(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL type.`
        );
      }
      return type;
    }
    function isScalarType7(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLScalarType3);
    }
    function assertScalarType(type) {
      if (!isScalarType7(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Scalar type.`
        );
      }
      return type;
    }
    function isObjectType11(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLObjectType6);
    }
    function assertObjectType(type) {
      if (!isObjectType11(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Object type.`
        );
      }
      return type;
    }
    function isInterfaceType7(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLInterfaceType5);
    }
    function assertInterfaceType(type) {
      if (!isInterfaceType7(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Interface type.`
        );
      }
      return type;
    }
    function isUnionType6(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLUnionType3);
    }
    function assertUnionType(type) {
      if (!isUnionType6(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Union type.`
        );
      }
      return type;
    }
    function isEnumType5(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLEnumType4);
    }
    function assertEnumType(type) {
      if (!isEnumType5(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Enum type.`
        );
      }
      return type;
    }
    function isInputObjectType7(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLInputObjectType4);
    }
    function assertInputObjectType(type) {
      if (!isInputObjectType7(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(
            type
          )} to be a GraphQL Input Object type.`
        );
      }
      return type;
    }
    function isListType6(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLList5);
    }
    function assertListType(type) {
      if (!isListType6(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL List type.`
        );
      }
      return type;
    }
    function isNonNullType6(type) {
      return (0, _instanceOf.instanceOf)(type, GraphQLNonNull5);
    }
    function assertNonNullType(type) {
      if (!isNonNullType6(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Non-Null type.`
        );
      }
      return type;
    }
    function isInputType(type) {
      return isScalarType7(type) || isEnumType5(type) || isInputObjectType7(type) || isWrappingType(type) && isInputType(type.ofType);
    }
    function assertInputType(type) {
      if (!isInputType(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL input type.`
        );
      }
      return type;
    }
    function isOutputType(type) {
      return isScalarType7(type) || isObjectType11(type) || isInterfaceType7(type) || isUnionType6(type) || isEnumType5(type) || isWrappingType(type) && isOutputType(type.ofType);
    }
    function assertOutputType(type) {
      if (!isOutputType(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL output type.`
        );
      }
      return type;
    }
    function isLeafType4(type) {
      return isScalarType7(type) || isEnumType5(type);
    }
    function assertLeafType(type) {
      if (!isLeafType4(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL leaf type.`
        );
      }
      return type;
    }
    function isCompositeType2(type) {
      return isObjectType11(type) || isInterfaceType7(type) || isUnionType6(type);
    }
    function assertCompositeType(type) {
      if (!isCompositeType2(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL composite type.`
        );
      }
      return type;
    }
    function isAbstractType(type) {
      return isInterfaceType7(type) || isUnionType6(type);
    }
    function assertAbstractType(type) {
      if (!isAbstractType(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL abstract type.`
        );
      }
      return type;
    }
    var GraphQLList5 = class {
      constructor(ofType) {
        isType(ofType) || (0, _devAssert.devAssert)(
          false,
          `Expected ${(0, _inspect.inspect)(ofType)} to be a GraphQL type.`
        );
        this.ofType = ofType;
      }
      get [Symbol.toStringTag]() {
        return "GraphQLList";
      }
      toString() {
        return "[" + String(this.ofType) + "]";
      }
      toJSON() {
        return this.toString();
      }
    };
    exports2.GraphQLList = GraphQLList5;
    var GraphQLNonNull5 = class {
      constructor(ofType) {
        isNullableType(ofType) || (0, _devAssert.devAssert)(
          false,
          `Expected ${(0, _inspect.inspect)(
            ofType
          )} to be a GraphQL nullable type.`
        );
        this.ofType = ofType;
      }
      get [Symbol.toStringTag]() {
        return "GraphQLNonNull";
      }
      toString() {
        return String(this.ofType) + "!";
      }
      toJSON() {
        return this.toString();
      }
    };
    exports2.GraphQLNonNull = GraphQLNonNull5;
    function isWrappingType(type) {
      return isListType6(type) || isNonNullType6(type);
    }
    function assertWrappingType(type) {
      if (!isWrappingType(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL wrapping type.`
        );
      }
      return type;
    }
    function isNullableType(type) {
      return isType(type) && !isNonNullType6(type);
    }
    function assertNullableType(type) {
      if (!isNullableType(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL nullable type.`
        );
      }
      return type;
    }
    function getNullableType2(type) {
      if (type) {
        return isNonNullType6(type) ? type.ofType : type;
      }
    }
    function isNamedType4(type) {
      return isScalarType7(type) || isObjectType11(type) || isInterfaceType7(type) || isUnionType6(type) || isEnumType5(type) || isInputObjectType7(type);
    }
    function assertNamedType(type) {
      if (!isNamedType4(type)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL named type.`
        );
      }
      return type;
    }
    function getNamedType6(type) {
      if (type) {
        let unwrappedType = type;
        while (isWrappingType(unwrappedType)) {
          unwrappedType = unwrappedType.ofType;
        }
        return unwrappedType;
      }
    }
    function resolveReadonlyArrayThunk(thunk) {
      return typeof thunk === "function" ? thunk() : thunk;
    }
    function resolveObjMapThunk(thunk) {
      return typeof thunk === "function" ? thunk() : thunk;
    }
    var GraphQLScalarType3 = class {
      constructor(config2) {
        var _config$parseValue, _config$serialize, _config$parseLiteral, _config$extensionASTN;
        const parseValue = (_config$parseValue = config2.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : _identityFunc.identityFunc;
        this.name = (0, _assertName.assertName)(config2.name);
        this.description = config2.description;
        this.specifiedByURL = config2.specifiedByURL;
        this.serialize = (_config$serialize = config2.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : _identityFunc.identityFunc;
        this.parseValue = parseValue;
        this.parseLiteral = (_config$parseLiteral = config2.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : (node, variables) => parseValue(
          (0, _valueFromASTUntyped.valueFromASTUntyped)(node, variables)
        );
        this.extensions = (0, _toObjMap.toObjMap)(config2.extensions);
        this.astNode = config2.astNode;
        this.extensionASTNodes = (_config$extensionASTN = config2.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [];
        config2.specifiedByURL == null || typeof config2.specifiedByURL === "string" || (0, _devAssert.devAssert)(
          false,
          `${this.name} must provide "specifiedByURL" as a string, but got: ${(0, _inspect.inspect)(config2.specifiedByURL)}.`
        );
        config2.serialize == null || typeof config2.serialize === "function" || (0, _devAssert.devAssert)(
          false,
          `${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`
        );
        if (config2.parseLiteral) {
          typeof config2.parseValue === "function" && typeof config2.parseLiteral === "function" || (0, _devAssert.devAssert)(
            false,
            `${this.name} must provide both "parseValue" and "parseLiteral" functions.`
          );
        }
      }
      get [Symbol.toStringTag]() {
        return "GraphQLScalarType";
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          specifiedByURL: this.specifiedByURL,
          serialize: this.serialize,
          parseValue: this.parseValue,
          parseLiteral: this.parseLiteral,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    exports2.GraphQLScalarType = GraphQLScalarType3;
    var GraphQLObjectType6 = class {
      constructor(config2) {
        var _config$extensionASTN2;
        this.name = (0, _assertName.assertName)(config2.name);
        this.description = config2.description;
        this.isTypeOf = config2.isTypeOf;
        this.extensions = (0, _toObjMap.toObjMap)(config2.extensions);
        this.astNode = config2.astNode;
        this.extensionASTNodes = (_config$extensionASTN2 = config2.extensionASTNodes) !== null && _config$extensionASTN2 !== void 0 ? _config$extensionASTN2 : [];
        this._fields = () => defineFieldMap(config2);
        this._interfaces = () => defineInterfaces(config2);
        config2.isTypeOf == null || typeof config2.isTypeOf === "function" || (0, _devAssert.devAssert)(
          false,
          `${this.name} must provide "isTypeOf" as a function, but got: ${(0, _inspect.inspect)(config2.isTypeOf)}.`
        );
      }
      get [Symbol.toStringTag]() {
        return "GraphQLObjectType";
      }
      getFields() {
        if (typeof this._fields === "function") {
          this._fields = this._fields();
        }
        return this._fields;
      }
      getInterfaces() {
        if (typeof this._interfaces === "function") {
          this._interfaces = this._interfaces();
        }
        return this._interfaces;
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          interfaces: this.getInterfaces(),
          fields: fieldsToFieldsConfig(this.getFields()),
          isTypeOf: this.isTypeOf,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    exports2.GraphQLObjectType = GraphQLObjectType6;
    function defineInterfaces(config2) {
      var _config$interfaces;
      const interfaces = resolveReadonlyArrayThunk(
        (_config$interfaces = config2.interfaces) !== null && _config$interfaces !== void 0 ? _config$interfaces : []
      );
      Array.isArray(interfaces) || (0, _devAssert.devAssert)(
        false,
        `${config2.name} interfaces must be an Array or a function which returns an Array.`
      );
      return interfaces;
    }
    function defineFieldMap(config2) {
      const fieldMap = resolveObjMapThunk(config2.fields);
      isPlainObj(fieldMap) || (0, _devAssert.devAssert)(
        false,
        `${config2.name} fields must be an object with field names as keys or a function which returns such an object.`
      );
      return (0, _mapValue.mapValue)(fieldMap, (fieldConfig, fieldName) => {
        var _fieldConfig$args;
        isPlainObj(fieldConfig) || (0, _devAssert.devAssert)(
          false,
          `${config2.name}.${fieldName} field config must be an object.`
        );
        fieldConfig.resolve == null || typeof fieldConfig.resolve === "function" || (0, _devAssert.devAssert)(
          false,
          `${config2.name}.${fieldName} field resolver must be a function if provided, but got: ${(0, _inspect.inspect)(fieldConfig.resolve)}.`
        );
        const argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};
        isPlainObj(argsConfig) || (0, _devAssert.devAssert)(
          false,
          `${config2.name}.${fieldName} args must be an object with argument names as keys.`
        );
        return {
          name: (0, _assertName.assertName)(fieldName),
          description: fieldConfig.description,
          type: fieldConfig.type,
          args: defineArguments(argsConfig),
          resolve: fieldConfig.resolve,
          subscribe: fieldConfig.subscribe,
          deprecationReason: fieldConfig.deprecationReason,
          extensions: (0, _toObjMap.toObjMap)(fieldConfig.extensions),
          astNode: fieldConfig.astNode
        };
      });
    }
    function defineArguments(config2) {
      return Object.entries(config2).map(([argName, argConfig]) => ({
        name: (0, _assertName.assertName)(argName),
        description: argConfig.description,
        type: argConfig.type,
        defaultValue: argConfig.defaultValue,
        deprecationReason: argConfig.deprecationReason,
        extensions: (0, _toObjMap.toObjMap)(argConfig.extensions),
        astNode: argConfig.astNode
      }));
    }
    function isPlainObj(obj) {
      return (0, _isObjectLike.isObjectLike)(obj) && !Array.isArray(obj);
    }
    function fieldsToFieldsConfig(fields) {
      return (0, _mapValue.mapValue)(fields, (field) => ({
        description: field.description,
        type: field.type,
        args: argsToArgsConfig(field.args),
        resolve: field.resolve,
        subscribe: field.subscribe,
        deprecationReason: field.deprecationReason,
        extensions: field.extensions,
        astNode: field.astNode
      }));
    }
    function argsToArgsConfig(args) {
      return (0, _keyValMap.keyValMap)(
        args,
        (arg) => arg.name,
        (arg) => ({
          description: arg.description,
          type: arg.type,
          defaultValue: arg.defaultValue,
          deprecationReason: arg.deprecationReason,
          extensions: arg.extensions,
          astNode: arg.astNode
        })
      );
    }
    function isRequiredArgument(arg) {
      return isNonNullType6(arg.type) && arg.defaultValue === void 0;
    }
    var GraphQLInterfaceType5 = class {
      constructor(config2) {
        var _config$extensionASTN3;
        this.name = (0, _assertName.assertName)(config2.name);
        this.description = config2.description;
        this.resolveType = config2.resolveType;
        this.extensions = (0, _toObjMap.toObjMap)(config2.extensions);
        this.astNode = config2.astNode;
        this.extensionASTNodes = (_config$extensionASTN3 = config2.extensionASTNodes) !== null && _config$extensionASTN3 !== void 0 ? _config$extensionASTN3 : [];
        this._fields = defineFieldMap.bind(void 0, config2);
        this._interfaces = defineInterfaces.bind(void 0, config2);
        config2.resolveType == null || typeof config2.resolveType === "function" || (0, _devAssert.devAssert)(
          false,
          `${this.name} must provide "resolveType" as a function, but got: ${(0, _inspect.inspect)(config2.resolveType)}.`
        );
      }
      get [Symbol.toStringTag]() {
        return "GraphQLInterfaceType";
      }
      getFields() {
        if (typeof this._fields === "function") {
          this._fields = this._fields();
        }
        return this._fields;
      }
      getInterfaces() {
        if (typeof this._interfaces === "function") {
          this._interfaces = this._interfaces();
        }
        return this._interfaces;
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          interfaces: this.getInterfaces(),
          fields: fieldsToFieldsConfig(this.getFields()),
          resolveType: this.resolveType,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    exports2.GraphQLInterfaceType = GraphQLInterfaceType5;
    var GraphQLUnionType3 = class {
      constructor(config2) {
        var _config$extensionASTN4;
        this.name = (0, _assertName.assertName)(config2.name);
        this.description = config2.description;
        this.resolveType = config2.resolveType;
        this.extensions = (0, _toObjMap.toObjMap)(config2.extensions);
        this.astNode = config2.astNode;
        this.extensionASTNodes = (_config$extensionASTN4 = config2.extensionASTNodes) !== null && _config$extensionASTN4 !== void 0 ? _config$extensionASTN4 : [];
        this._types = defineTypes.bind(void 0, config2);
        config2.resolveType == null || typeof config2.resolveType === "function" || (0, _devAssert.devAssert)(
          false,
          `${this.name} must provide "resolveType" as a function, but got: ${(0, _inspect.inspect)(config2.resolveType)}.`
        );
      }
      get [Symbol.toStringTag]() {
        return "GraphQLUnionType";
      }
      getTypes() {
        if (typeof this._types === "function") {
          this._types = this._types();
        }
        return this._types;
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          types: this.getTypes(),
          resolveType: this.resolveType,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    exports2.GraphQLUnionType = GraphQLUnionType3;
    function defineTypes(config2) {
      const types = resolveReadonlyArrayThunk(config2.types);
      Array.isArray(types) || (0, _devAssert.devAssert)(
        false,
        `Must provide Array of types or a function which returns such an array for Union ${config2.name}.`
      );
      return types;
    }
    var GraphQLEnumType4 = class {
      /* <T> */
      constructor(config2) {
        var _config$extensionASTN5;
        this.name = (0, _assertName.assertName)(config2.name);
        this.description = config2.description;
        this.extensions = (0, _toObjMap.toObjMap)(config2.extensions);
        this.astNode = config2.astNode;
        this.extensionASTNodes = (_config$extensionASTN5 = config2.extensionASTNodes) !== null && _config$extensionASTN5 !== void 0 ? _config$extensionASTN5 : [];
        this._values = typeof config2.values === "function" ? config2.values : defineEnumValues(this.name, config2.values);
        this._valueLookup = null;
        this._nameLookup = null;
      }
      get [Symbol.toStringTag]() {
        return "GraphQLEnumType";
      }
      getValues() {
        if (typeof this._values === "function") {
          this._values = defineEnumValues(this.name, this._values());
        }
        return this._values;
      }
      getValue(name) {
        if (this._nameLookup === null) {
          this._nameLookup = (0, _keyMap.keyMap)(
            this.getValues(),
            (value) => value.name
          );
        }
        return this._nameLookup[name];
      }
      serialize(outputValue) {
        if (this._valueLookup === null) {
          this._valueLookup = new Map(
            this.getValues().map((enumValue2) => [enumValue2.value, enumValue2])
          );
        }
        const enumValue = this._valueLookup.get(outputValue);
        if (enumValue === void 0) {
          throw new _GraphQLError.GraphQLError(
            `Enum "${this.name}" cannot represent value: ${(0, _inspect.inspect)(
              outputValue
            )}`
          );
        }
        return enumValue.name;
      }
      parseValue(inputValue) {
        if (typeof inputValue !== "string") {
          const valueStr = (0, _inspect.inspect)(inputValue);
          throw new _GraphQLError.GraphQLError(
            `Enum "${this.name}" cannot represent non-string value: ${valueStr}.` + didYouMeanEnumValue(this, valueStr)
          );
        }
        const enumValue = this.getValue(inputValue);
        if (enumValue == null) {
          throw new _GraphQLError.GraphQLError(
            `Value "${inputValue}" does not exist in "${this.name}" enum.` + didYouMeanEnumValue(this, inputValue)
          );
        }
        return enumValue.value;
      }
      parseLiteral(valueNode, _variables) {
        if (valueNode.kind !== _kinds.Kind.ENUM) {
          const valueStr = (0, _printer.print)(valueNode);
          throw new _GraphQLError.GraphQLError(
            `Enum "${this.name}" cannot represent non-enum value: ${valueStr}.` + didYouMeanEnumValue(this, valueStr),
            {
              nodes: valueNode
            }
          );
        }
        const enumValue = this.getValue(valueNode.value);
        if (enumValue == null) {
          const valueStr = (0, _printer.print)(valueNode);
          throw new _GraphQLError.GraphQLError(
            `Value "${valueStr}" does not exist in "${this.name}" enum.` + didYouMeanEnumValue(this, valueStr),
            {
              nodes: valueNode
            }
          );
        }
        return enumValue.value;
      }
      toConfig() {
        const values = (0, _keyValMap.keyValMap)(
          this.getValues(),
          (value) => value.name,
          (value) => ({
            description: value.description,
            value: value.value,
            deprecationReason: value.deprecationReason,
            extensions: value.extensions,
            astNode: value.astNode
          })
        );
        return {
          name: this.name,
          description: this.description,
          values,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    exports2.GraphQLEnumType = GraphQLEnumType4;
    function didYouMeanEnumValue(enumType, unknownValueStr) {
      const allNames = enumType.getValues().map((value) => value.name);
      const suggestedValues = (0, _suggestionList.suggestionList)(
        unknownValueStr,
        allNames
      );
      return (0, _didYouMean.didYouMean)("the enum value", suggestedValues);
    }
    function defineEnumValues(typeName, valueMap) {
      isPlainObj(valueMap) || (0, _devAssert.devAssert)(
        false,
        `${typeName} values must be an object with value names as keys.`
      );
      return Object.entries(valueMap).map(([valueName, valueConfig]) => {
        isPlainObj(valueConfig) || (0, _devAssert.devAssert)(
          false,
          `${typeName}.${valueName} must refer to an object with a "value" key representing an internal value but got: ${(0, _inspect.inspect)(
            valueConfig
          )}.`
        );
        return {
          name: (0, _assertName.assertEnumValueName)(valueName),
          description: valueConfig.description,
          value: valueConfig.value !== void 0 ? valueConfig.value : valueName,
          deprecationReason: valueConfig.deprecationReason,
          extensions: (0, _toObjMap.toObjMap)(valueConfig.extensions),
          astNode: valueConfig.astNode
        };
      });
    }
    var GraphQLInputObjectType4 = class {
      constructor(config2) {
        var _config$extensionASTN6, _config$isOneOf;
        this.name = (0, _assertName.assertName)(config2.name);
        this.description = config2.description;
        this.extensions = (0, _toObjMap.toObjMap)(config2.extensions);
        this.astNode = config2.astNode;
        this.extensionASTNodes = (_config$extensionASTN6 = config2.extensionASTNodes) !== null && _config$extensionASTN6 !== void 0 ? _config$extensionASTN6 : [];
        this.isOneOf = (_config$isOneOf = config2.isOneOf) !== null && _config$isOneOf !== void 0 ? _config$isOneOf : false;
        this._fields = defineInputFieldMap.bind(void 0, config2);
      }
      get [Symbol.toStringTag]() {
        return "GraphQLInputObjectType";
      }
      getFields() {
        if (typeof this._fields === "function") {
          this._fields = this._fields();
        }
        return this._fields;
      }
      toConfig() {
        const fields = (0, _mapValue.mapValue)(this.getFields(), (field) => ({
          description: field.description,
          type: field.type,
          defaultValue: field.defaultValue,
          deprecationReason: field.deprecationReason,
          extensions: field.extensions,
          astNode: field.astNode
        }));
        return {
          name: this.name,
          description: this.description,
          fields,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes,
          isOneOf: this.isOneOf
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    exports2.GraphQLInputObjectType = GraphQLInputObjectType4;
    function defineInputFieldMap(config2) {
      const fieldMap = resolveObjMapThunk(config2.fields);
      isPlainObj(fieldMap) || (0, _devAssert.devAssert)(
        false,
        `${config2.name} fields must be an object with field names as keys or a function which returns such an object.`
      );
      return (0, _mapValue.mapValue)(fieldMap, (fieldConfig, fieldName) => {
        !("resolve" in fieldConfig) || (0, _devAssert.devAssert)(
          false,
          `${config2.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`
        );
        return {
          name: (0, _assertName.assertName)(fieldName),
          description: fieldConfig.description,
          type: fieldConfig.type,
          defaultValue: fieldConfig.defaultValue,
          deprecationReason: fieldConfig.deprecationReason,
          extensions: (0, _toObjMap.toObjMap)(fieldConfig.extensions),
          astNode: fieldConfig.astNode
        };
      });
    }
    function isRequiredInputField(field) {
      return isNonNullType6(field.type) && field.defaultValue === void 0;
    }
  }
});

// node_modules/graphql/utilities/typeComparators.js
var require_typeComparators = __commonJS({
  "node_modules/graphql/utilities/typeComparators.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.doTypesOverlap = doTypesOverlap;
    exports2.isEqualType = isEqualType;
    exports2.isTypeSubTypeOf = isTypeSubTypeOf;
    var _definition = require_definition();
    function isEqualType(typeA, typeB) {
      if (typeA === typeB) {
        return true;
      }
      if ((0, _definition.isNonNullType)(typeA) && (0, _definition.isNonNullType)(typeB)) {
        return isEqualType(typeA.ofType, typeB.ofType);
      }
      if ((0, _definition.isListType)(typeA) && (0, _definition.isListType)(typeB)) {
        return isEqualType(typeA.ofType, typeB.ofType);
      }
      return false;
    }
    function isTypeSubTypeOf(schema, maybeSubType, superType) {
      if (maybeSubType === superType) {
        return true;
      }
      if ((0, _definition.isNonNullType)(superType)) {
        if ((0, _definition.isNonNullType)(maybeSubType)) {
          return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
        }
        return false;
      }
      if ((0, _definition.isNonNullType)(maybeSubType)) {
        return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);
      }
      if ((0, _definition.isListType)(superType)) {
        if ((0, _definition.isListType)(maybeSubType)) {
          return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
        }
        return false;
      }
      if ((0, _definition.isListType)(maybeSubType)) {
        return false;
      }
      return (0, _definition.isAbstractType)(superType) && ((0, _definition.isInterfaceType)(maybeSubType) || (0, _definition.isObjectType)(maybeSubType)) && schema.isSubType(superType, maybeSubType);
    }
    function doTypesOverlap(schema, typeA, typeB) {
      if (typeA === typeB) {
        return true;
      }
      if ((0, _definition.isAbstractType)(typeA)) {
        if ((0, _definition.isAbstractType)(typeB)) {
          return schema.getPossibleTypes(typeA).some((type) => schema.isSubType(typeB, type));
        }
        return schema.isSubType(typeA, typeB);
      }
      if ((0, _definition.isAbstractType)(typeB)) {
        return schema.isSubType(typeB, typeA);
      }
      return false;
    }
  }
});

// node_modules/graphql/type/scalars.js
var require_scalars = __commonJS({
  "node_modules/graphql/type/scalars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.GraphQLString = exports2.GraphQLInt = exports2.GraphQLID = exports2.GraphQLFloat = exports2.GraphQLBoolean = exports2.GRAPHQL_MIN_INT = exports2.GRAPHQL_MAX_INT = void 0;
    exports2.isSpecifiedScalarType = isSpecifiedScalarType4;
    exports2.specifiedScalarTypes = void 0;
    var _inspect = require_inspect();
    var _isObjectLike = require_isObjectLike();
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _printer = require_printer();
    var _definition = require_definition();
    var GRAPHQL_MAX_INT = 2147483647;
    exports2.GRAPHQL_MAX_INT = GRAPHQL_MAX_INT;
    var GRAPHQL_MIN_INT = -2147483648;
    exports2.GRAPHQL_MIN_INT = GRAPHQL_MIN_INT;
    var GraphQLInt2 = new _definition.GraphQLScalarType({
      name: "Int",
      description: "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
      serialize(outputValue) {
        const coercedValue = serializeObject(outputValue);
        if (typeof coercedValue === "boolean") {
          return coercedValue ? 1 : 0;
        }
        let num = coercedValue;
        if (typeof coercedValue === "string" && coercedValue !== "") {
          num = Number(coercedValue);
        }
        if (typeof num !== "number" || !Number.isInteger(num)) {
          throw new _GraphQLError.GraphQLError(
            `Int cannot represent non-integer value: ${(0, _inspect.inspect)(
              coercedValue
            )}`
          );
        }
        if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {
          throw new _GraphQLError.GraphQLError(
            "Int cannot represent non 32-bit signed integer value: " + (0, _inspect.inspect)(coercedValue)
          );
        }
        return num;
      },
      parseValue(inputValue) {
        if (typeof inputValue !== "number" || !Number.isInteger(inputValue)) {
          throw new _GraphQLError.GraphQLError(
            `Int cannot represent non-integer value: ${(0, _inspect.inspect)(
              inputValue
            )}`
          );
        }
        if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {
          throw new _GraphQLError.GraphQLError(
            `Int cannot represent non 32-bit signed integer value: ${inputValue}`
          );
        }
        return inputValue;
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.INT) {
          throw new _GraphQLError.GraphQLError(
            `Int cannot represent non-integer value: ${(0, _printer.print)(
              valueNode
            )}`,
            {
              nodes: valueNode
            }
          );
        }
        const num = parseInt(valueNode.value, 10);
        if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {
          throw new _GraphQLError.GraphQLError(
            `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,
            {
              nodes: valueNode
            }
          );
        }
        return num;
      }
    });
    exports2.GraphQLInt = GraphQLInt2;
    var GraphQLFloat2 = new _definition.GraphQLScalarType({
      name: "Float",
      description: "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
      serialize(outputValue) {
        const coercedValue = serializeObject(outputValue);
        if (typeof coercedValue === "boolean") {
          return coercedValue ? 1 : 0;
        }
        let num = coercedValue;
        if (typeof coercedValue === "string" && coercedValue !== "") {
          num = Number(coercedValue);
        }
        if (typeof num !== "number" || !Number.isFinite(num)) {
          throw new _GraphQLError.GraphQLError(
            `Float cannot represent non numeric value: ${(0, _inspect.inspect)(
              coercedValue
            )}`
          );
        }
        return num;
      },
      parseValue(inputValue) {
        if (typeof inputValue !== "number" || !Number.isFinite(inputValue)) {
          throw new _GraphQLError.GraphQLError(
            `Float cannot represent non numeric value: ${(0, _inspect.inspect)(
              inputValue
            )}`
          );
        }
        return inputValue;
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.FLOAT && valueNode.kind !== _kinds.Kind.INT) {
          throw new _GraphQLError.GraphQLError(
            `Float cannot represent non numeric value: ${(0, _printer.print)(
              valueNode
            )}`,
            valueNode
          );
        }
        return parseFloat(valueNode.value);
      }
    });
    exports2.GraphQLFloat = GraphQLFloat2;
    var GraphQLString2 = new _definition.GraphQLScalarType({
      name: "String",
      description: "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
      serialize(outputValue) {
        const coercedValue = serializeObject(outputValue);
        if (typeof coercedValue === "string") {
          return coercedValue;
        }
        if (typeof coercedValue === "boolean") {
          return coercedValue ? "true" : "false";
        }
        if (typeof coercedValue === "number" && Number.isFinite(coercedValue)) {
          return coercedValue.toString();
        }
        throw new _GraphQLError.GraphQLError(
          `String cannot represent value: ${(0, _inspect.inspect)(outputValue)}`
        );
      },
      parseValue(inputValue) {
        if (typeof inputValue !== "string") {
          throw new _GraphQLError.GraphQLError(
            `String cannot represent a non string value: ${(0, _inspect.inspect)(
              inputValue
            )}`
          );
        }
        return inputValue;
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.STRING) {
          throw new _GraphQLError.GraphQLError(
            `String cannot represent a non string value: ${(0, _printer.print)(
              valueNode
            )}`,
            {
              nodes: valueNode
            }
          );
        }
        return valueNode.value;
      }
    });
    exports2.GraphQLString = GraphQLString2;
    var GraphQLBoolean2 = new _definition.GraphQLScalarType({
      name: "Boolean",
      description: "The `Boolean` scalar type represents `true` or `false`.",
      serialize(outputValue) {
        const coercedValue = serializeObject(outputValue);
        if (typeof coercedValue === "boolean") {
          return coercedValue;
        }
        if (Number.isFinite(coercedValue)) {
          return coercedValue !== 0;
        }
        throw new _GraphQLError.GraphQLError(
          `Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(
            coercedValue
          )}`
        );
      },
      parseValue(inputValue) {
        if (typeof inputValue !== "boolean") {
          throw new _GraphQLError.GraphQLError(
            `Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(
              inputValue
            )}`
          );
        }
        return inputValue;
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.BOOLEAN) {
          throw new _GraphQLError.GraphQLError(
            `Boolean cannot represent a non boolean value: ${(0, _printer.print)(
              valueNode
            )}`,
            {
              nodes: valueNode
            }
          );
        }
        return valueNode.value;
      }
    });
    exports2.GraphQLBoolean = GraphQLBoolean2;
    var GraphQLID2 = new _definition.GraphQLScalarType({
      name: "ID",
      description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
      serialize(outputValue) {
        const coercedValue = serializeObject(outputValue);
        if (typeof coercedValue === "string") {
          return coercedValue;
        }
        if (Number.isInteger(coercedValue)) {
          return String(coercedValue);
        }
        throw new _GraphQLError.GraphQLError(
          `ID cannot represent value: ${(0, _inspect.inspect)(outputValue)}`
        );
      },
      parseValue(inputValue) {
        if (typeof inputValue === "string") {
          return inputValue;
        }
        if (typeof inputValue === "number" && Number.isInteger(inputValue)) {
          return inputValue.toString();
        }
        throw new _GraphQLError.GraphQLError(
          `ID cannot represent value: ${(0, _inspect.inspect)(inputValue)}`
        );
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== _kinds.Kind.STRING && valueNode.kind !== _kinds.Kind.INT) {
          throw new _GraphQLError.GraphQLError(
            "ID cannot represent a non-string and non-integer value: " + (0, _printer.print)(valueNode),
            {
              nodes: valueNode
            }
          );
        }
        return valueNode.value;
      }
    });
    exports2.GraphQLID = GraphQLID2;
    var specifiedScalarTypes = Object.freeze([
      GraphQLString2,
      GraphQLInt2,
      GraphQLFloat2,
      GraphQLBoolean2,
      GraphQLID2
    ]);
    exports2.specifiedScalarTypes = specifiedScalarTypes;
    function isSpecifiedScalarType4(type) {
      return specifiedScalarTypes.some(({ name }) => type.name === name);
    }
    function serializeObject(outputValue) {
      if ((0, _isObjectLike.isObjectLike)(outputValue)) {
        if (typeof outputValue.valueOf === "function") {
          const valueOfResult = outputValue.valueOf();
          if (!(0, _isObjectLike.isObjectLike)(valueOfResult)) {
            return valueOfResult;
          }
        }
        if (typeof outputValue.toJSON === "function") {
          return outputValue.toJSON();
        }
      }
      return outputValue;
    }
  }
});

// node_modules/graphql/type/directives.js
var require_directives = __commonJS({
  "node_modules/graphql/type/directives.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.GraphQLSpecifiedByDirective = exports2.GraphQLSkipDirective = exports2.GraphQLOneOfDirective = exports2.GraphQLIncludeDirective = exports2.GraphQLDirective = exports2.GraphQLDeprecatedDirective = exports2.DEFAULT_DEPRECATION_REASON = void 0;
    exports2.assertDirective = assertDirective;
    exports2.isDirective = isDirective;
    exports2.isSpecifiedDirective = isSpecifiedDirective3;
    exports2.specifiedDirectives = void 0;
    var _devAssert = require_devAssert();
    var _inspect = require_inspect();
    var _instanceOf = require_instanceOf();
    var _isObjectLike = require_isObjectLike();
    var _toObjMap = require_toObjMap();
    var _directiveLocation = require_directiveLocation();
    var _assertName = require_assertName();
    var _definition = require_definition();
    var _scalars = require_scalars();
    function isDirective(directive) {
      return (0, _instanceOf.instanceOf)(directive, GraphQLDirective2);
    }
    function assertDirective(directive) {
      if (!isDirective(directive)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(directive)} to be a GraphQL directive.`
        );
      }
      return directive;
    }
    var GraphQLDirective2 = class {
      constructor(config2) {
        var _config$isRepeatable, _config$args;
        this.name = (0, _assertName.assertName)(config2.name);
        this.description = config2.description;
        this.locations = config2.locations;
        this.isRepeatable = (_config$isRepeatable = config2.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;
        this.extensions = (0, _toObjMap.toObjMap)(config2.extensions);
        this.astNode = config2.astNode;
        Array.isArray(config2.locations) || (0, _devAssert.devAssert)(
          false,
          `@${config2.name} locations must be an Array.`
        );
        const args = (_config$args = config2.args) !== null && _config$args !== void 0 ? _config$args : {};
        (0, _isObjectLike.isObjectLike)(args) && !Array.isArray(args) || (0, _devAssert.devAssert)(
          false,
          `@${config2.name} args must be an object with argument names as keys.`
        );
        this.args = (0, _definition.defineArguments)(args);
      }
      get [Symbol.toStringTag]() {
        return "GraphQLDirective";
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          locations: this.locations,
          args: (0, _definition.argsToArgsConfig)(this.args),
          isRepeatable: this.isRepeatable,
          extensions: this.extensions,
          astNode: this.astNode
        };
      }
      toString() {
        return "@" + this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    exports2.GraphQLDirective = GraphQLDirective2;
    var GraphQLIncludeDirective = new GraphQLDirective2({
      name: "include",
      description: "Directs the executor to include this field or fragment only when the `if` argument is true.",
      locations: [
        _directiveLocation.DirectiveLocation.FIELD,
        _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
        _directiveLocation.DirectiveLocation.INLINE_FRAGMENT
      ],
      args: {
        if: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          description: "Included when true."
        }
      }
    });
    exports2.GraphQLIncludeDirective = GraphQLIncludeDirective;
    var GraphQLSkipDirective = new GraphQLDirective2({
      name: "skip",
      description: "Directs the executor to skip this field or fragment when the `if` argument is true.",
      locations: [
        _directiveLocation.DirectiveLocation.FIELD,
        _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
        _directiveLocation.DirectiveLocation.INLINE_FRAGMENT
      ],
      args: {
        if: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          description: "Skipped when true."
        }
      }
    });
    exports2.GraphQLSkipDirective = GraphQLSkipDirective;
    var DEFAULT_DEPRECATION_REASON = "No longer supported";
    exports2.DEFAULT_DEPRECATION_REASON = DEFAULT_DEPRECATION_REASON;
    var GraphQLDeprecatedDirective2 = new GraphQLDirective2({
      name: "deprecated",
      description: "Marks an element of a GraphQL schema as no longer supported.",
      locations: [
        _directiveLocation.DirectiveLocation.FIELD_DEFINITION,
        _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,
        _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,
        _directiveLocation.DirectiveLocation.ENUM_VALUE
      ],
      args: {
        reason: {
          type: _scalars.GraphQLString,
          description: "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",
          defaultValue: DEFAULT_DEPRECATION_REASON
        }
      }
    });
    exports2.GraphQLDeprecatedDirective = GraphQLDeprecatedDirective2;
    var GraphQLSpecifiedByDirective = new GraphQLDirective2({
      name: "specifiedBy",
      description: "Exposes a URL that specifies the behavior of this scalar.",
      locations: [_directiveLocation.DirectiveLocation.SCALAR],
      args: {
        url: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          description: "The URL that specifies the behavior of this scalar."
        }
      }
    });
    exports2.GraphQLSpecifiedByDirective = GraphQLSpecifiedByDirective;
    var GraphQLOneOfDirective = new GraphQLDirective2({
      name: "oneOf",
      description: "Indicates exactly one field must be supplied and this field must not be `null`.",
      locations: [_directiveLocation.DirectiveLocation.INPUT_OBJECT],
      args: {}
    });
    exports2.GraphQLOneOfDirective = GraphQLOneOfDirective;
    var specifiedDirectives = Object.freeze([
      GraphQLIncludeDirective,
      GraphQLSkipDirective,
      GraphQLDeprecatedDirective2,
      GraphQLSpecifiedByDirective,
      GraphQLOneOfDirective
    ]);
    exports2.specifiedDirectives = specifiedDirectives;
    function isSpecifiedDirective3(directive) {
      return specifiedDirectives.some(({ name }) => name === directive.name);
    }
  }
});

// node_modules/graphql/jsutils/isIterableObject.js
var require_isIterableObject = __commonJS({
  "node_modules/graphql/jsutils/isIterableObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.isIterableObject = isIterableObject;
    function isIterableObject(maybeIterable) {
      return typeof maybeIterable === "object" && typeof (maybeIterable === null || maybeIterable === void 0 ? void 0 : maybeIterable[Symbol.iterator]) === "function";
    }
  }
});

// node_modules/graphql/utilities/astFromValue.js
var require_astFromValue = __commonJS({
  "node_modules/graphql/utilities/astFromValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.astFromValue = astFromValue2;
    var _inspect = require_inspect();
    var _invariant = require_invariant();
    var _isIterableObject = require_isIterableObject();
    var _isObjectLike = require_isObjectLike();
    var _kinds = require_kinds();
    var _definition = require_definition();
    var _scalars = require_scalars();
    function astFromValue2(value, type) {
      if ((0, _definition.isNonNullType)(type)) {
        const astValue = astFromValue2(value, type.ofType);
        if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === _kinds.Kind.NULL) {
          return null;
        }
        return astValue;
      }
      if (value === null) {
        return {
          kind: _kinds.Kind.NULL
        };
      }
      if (value === void 0) {
        return null;
      }
      if ((0, _definition.isListType)(type)) {
        const itemType = type.ofType;
        if ((0, _isIterableObject.isIterableObject)(value)) {
          const valuesNodes = [];
          for (const item of value) {
            const itemNode = astFromValue2(item, itemType);
            if (itemNode != null) {
              valuesNodes.push(itemNode);
            }
          }
          return {
            kind: _kinds.Kind.LIST,
            values: valuesNodes
          };
        }
        return astFromValue2(value, itemType);
      }
      if ((0, _definition.isInputObjectType)(type)) {
        if (!(0, _isObjectLike.isObjectLike)(value)) {
          return null;
        }
        const fieldNodes = [];
        for (const field of Object.values(type.getFields())) {
          const fieldValue = astFromValue2(value[field.name], field.type);
          if (fieldValue) {
            fieldNodes.push({
              kind: _kinds.Kind.OBJECT_FIELD,
              name: {
                kind: _kinds.Kind.NAME,
                value: field.name
              },
              value: fieldValue
            });
          }
        }
        return {
          kind: _kinds.Kind.OBJECT,
          fields: fieldNodes
        };
      }
      if ((0, _definition.isLeafType)(type)) {
        const serialized = type.serialize(value);
        if (serialized == null) {
          return null;
        }
        if (typeof serialized === "boolean") {
          return {
            kind: _kinds.Kind.BOOLEAN,
            value: serialized
          };
        }
        if (typeof serialized === "number" && Number.isFinite(serialized)) {
          const stringNum = String(serialized);
          return integerStringRegExp2.test(stringNum) ? {
            kind: _kinds.Kind.INT,
            value: stringNum
          } : {
            kind: _kinds.Kind.FLOAT,
            value: stringNum
          };
        }
        if (typeof serialized === "string") {
          if ((0, _definition.isEnumType)(type)) {
            return {
              kind: _kinds.Kind.ENUM,
              value: serialized
            };
          }
          if (type === _scalars.GraphQLID && integerStringRegExp2.test(serialized)) {
            return {
              kind: _kinds.Kind.INT,
              value: serialized
            };
          }
          return {
            kind: _kinds.Kind.STRING,
            value: serialized
          };
        }
        throw new TypeError(
          `Cannot convert value to AST: ${(0, _inspect.inspect)(serialized)}.`
        );
      }
      (0, _invariant.invariant)(
        false,
        "Unexpected input type: " + (0, _inspect.inspect)(type)
      );
    }
    var integerStringRegExp2 = /^-?(?:0|[1-9][0-9]*)$/;
  }
});

// node_modules/graphql/type/introspection.js
var require_introspection = __commonJS({
  "node_modules/graphql/type/introspection.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.introspectionTypes = exports2.__TypeKind = exports2.__Type = exports2.__Schema = exports2.__InputValue = exports2.__Field = exports2.__EnumValue = exports2.__DirectiveLocation = exports2.__Directive = exports2.TypeNameMetaFieldDef = exports2.TypeMetaFieldDef = exports2.TypeKind = exports2.SchemaMetaFieldDef = void 0;
    exports2.isIntrospectionType = isIntrospectionType2;
    var _inspect = require_inspect();
    var _invariant = require_invariant();
    var _directiveLocation = require_directiveLocation();
    var _printer = require_printer();
    var _astFromValue = require_astFromValue();
    var _definition = require_definition();
    var _scalars = require_scalars();
    var __Schema = new _definition.GraphQLObjectType({
      name: "__Schema",
      description: "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
      fields: () => ({
        description: {
          type: _scalars.GraphQLString,
          resolve: (schema) => schema.description
        },
        types: {
          description: "A list of all types supported by this server.",
          type: new _definition.GraphQLNonNull(
            new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type))
          ),
          resolve(schema) {
            return Object.values(schema.getTypeMap());
          }
        },
        queryType: {
          description: "The type that query operations will be rooted at.",
          type: new _definition.GraphQLNonNull(__Type),
          resolve: (schema) => schema.getQueryType()
        },
        mutationType: {
          description: "If this server supports mutation, the type that mutation operations will be rooted at.",
          type: __Type,
          resolve: (schema) => schema.getMutationType()
        },
        subscriptionType: {
          description: "If this server support subscription, the type that subscription operations will be rooted at.",
          type: __Type,
          resolve: (schema) => schema.getSubscriptionType()
        },
        directives: {
          description: "A list of all directives supported by this server.",
          type: new _definition.GraphQLNonNull(
            new _definition.GraphQLList(
              new _definition.GraphQLNonNull(__Directive)
            )
          ),
          resolve: (schema) => schema.getDirectives()
        }
      })
    });
    exports2.__Schema = __Schema;
    var __Directive = new _definition.GraphQLObjectType({
      name: "__Directive",
      description: "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
      fields: () => ({
        name: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          resolve: (directive) => directive.name
        },
        description: {
          type: _scalars.GraphQLString,
          resolve: (directive) => directive.description
        },
        isRepeatable: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          resolve: (directive) => directive.isRepeatable
        },
        locations: {
          type: new _definition.GraphQLNonNull(
            new _definition.GraphQLList(
              new _definition.GraphQLNonNull(__DirectiveLocation)
            )
          ),
          resolve: (directive) => directive.locations
        },
        args: {
          type: new _definition.GraphQLNonNull(
            new _definition.GraphQLList(
              new _definition.GraphQLNonNull(__InputValue)
            )
          ),
          args: {
            includeDeprecated: {
              type: _scalars.GraphQLBoolean,
              defaultValue: false
            }
          },
          resolve(field, { includeDeprecated }) {
            return includeDeprecated ? field.args : field.args.filter((arg) => arg.deprecationReason == null);
          }
        }
      })
    });
    exports2.__Directive = __Directive;
    var __DirectiveLocation = new _definition.GraphQLEnumType({
      name: "__DirectiveLocation",
      description: "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
      values: {
        QUERY: {
          value: _directiveLocation.DirectiveLocation.QUERY,
          description: "Location adjacent to a query operation."
        },
        MUTATION: {
          value: _directiveLocation.DirectiveLocation.MUTATION,
          description: "Location adjacent to a mutation operation."
        },
        SUBSCRIPTION: {
          value: _directiveLocation.DirectiveLocation.SUBSCRIPTION,
          description: "Location adjacent to a subscription operation."
        },
        FIELD: {
          value: _directiveLocation.DirectiveLocation.FIELD,
          description: "Location adjacent to a field."
        },
        FRAGMENT_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION,
          description: "Location adjacent to a fragment definition."
        },
        FRAGMENT_SPREAD: {
          value: _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
          description: "Location adjacent to a fragment spread."
        },
        INLINE_FRAGMENT: {
          value: _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,
          description: "Location adjacent to an inline fragment."
        },
        VARIABLE_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION,
          description: "Location adjacent to a variable definition."
        },
        SCHEMA: {
          value: _directiveLocation.DirectiveLocation.SCHEMA,
          description: "Location adjacent to a schema definition."
        },
        SCALAR: {
          value: _directiveLocation.DirectiveLocation.SCALAR,
          description: "Location adjacent to a scalar definition."
        },
        OBJECT: {
          value: _directiveLocation.DirectiveLocation.OBJECT,
          description: "Location adjacent to an object type definition."
        },
        FIELD_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.FIELD_DEFINITION,
          description: "Location adjacent to a field definition."
        },
        ARGUMENT_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,
          description: "Location adjacent to an argument definition."
        },
        INTERFACE: {
          value: _directiveLocation.DirectiveLocation.INTERFACE,
          description: "Location adjacent to an interface definition."
        },
        UNION: {
          value: _directiveLocation.DirectiveLocation.UNION,
          description: "Location adjacent to a union definition."
        },
        ENUM: {
          value: _directiveLocation.DirectiveLocation.ENUM,
          description: "Location adjacent to an enum definition."
        },
        ENUM_VALUE: {
          value: _directiveLocation.DirectiveLocation.ENUM_VALUE,
          description: "Location adjacent to an enum value definition."
        },
        INPUT_OBJECT: {
          value: _directiveLocation.DirectiveLocation.INPUT_OBJECT,
          description: "Location adjacent to an input object type definition."
        },
        INPUT_FIELD_DEFINITION: {
          value: _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,
          description: "Location adjacent to an input object field definition."
        }
      }
    });
    exports2.__DirectiveLocation = __DirectiveLocation;
    var __Type = new _definition.GraphQLObjectType({
      name: "__Type",
      description: "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
      fields: () => ({
        kind: {
          type: new _definition.GraphQLNonNull(__TypeKind),
          resolve(type) {
            if ((0, _definition.isScalarType)(type)) {
              return TypeKind.SCALAR;
            }
            if ((0, _definition.isObjectType)(type)) {
              return TypeKind.OBJECT;
            }
            if ((0, _definition.isInterfaceType)(type)) {
              return TypeKind.INTERFACE;
            }
            if ((0, _definition.isUnionType)(type)) {
              return TypeKind.UNION;
            }
            if ((0, _definition.isEnumType)(type)) {
              return TypeKind.ENUM;
            }
            if ((0, _definition.isInputObjectType)(type)) {
              return TypeKind.INPUT_OBJECT;
            }
            if ((0, _definition.isListType)(type)) {
              return TypeKind.LIST;
            }
            if ((0, _definition.isNonNullType)(type)) {
              return TypeKind.NON_NULL;
            }
            (0, _invariant.invariant)(
              false,
              `Unexpected type: "${(0, _inspect.inspect)(type)}".`
            );
          }
        },
        name: {
          type: _scalars.GraphQLString,
          resolve: (type) => "name" in type ? type.name : void 0
        },
        description: {
          type: _scalars.GraphQLString,
          resolve: (type) => (
            /* c8 ignore next */
            "description" in type ? type.description : void 0
          )
        },
        specifiedByURL: {
          type: _scalars.GraphQLString,
          resolve: (obj) => "specifiedByURL" in obj ? obj.specifiedByURL : void 0
        },
        fields: {
          type: new _definition.GraphQLList(
            new _definition.GraphQLNonNull(__Field)
          ),
          args: {
            includeDeprecated: {
              type: _scalars.GraphQLBoolean,
              defaultValue: false
            }
          },
          resolve(type, { includeDeprecated }) {
            if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
              const fields = Object.values(type.getFields());
              return includeDeprecated ? fields : fields.filter((field) => field.deprecationReason == null);
            }
          }
        },
        interfaces: {
          type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),
          resolve(type) {
            if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
              return type.getInterfaces();
            }
          }
        },
        possibleTypes: {
          type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),
          resolve(type, _args, _context, { schema }) {
            if ((0, _definition.isAbstractType)(type)) {
              return schema.getPossibleTypes(type);
            }
          }
        },
        enumValues: {
          type: new _definition.GraphQLList(
            new _definition.GraphQLNonNull(__EnumValue)
          ),
          args: {
            includeDeprecated: {
              type: _scalars.GraphQLBoolean,
              defaultValue: false
            }
          },
          resolve(type, { includeDeprecated }) {
            if ((0, _definition.isEnumType)(type)) {
              const values = type.getValues();
              return includeDeprecated ? values : values.filter((field) => field.deprecationReason == null);
            }
          }
        },
        inputFields: {
          type: new _definition.GraphQLList(
            new _definition.GraphQLNonNull(__InputValue)
          ),
          args: {
            includeDeprecated: {
              type: _scalars.GraphQLBoolean,
              defaultValue: false
            }
          },
          resolve(type, { includeDeprecated }) {
            if ((0, _definition.isInputObjectType)(type)) {
              const values = Object.values(type.getFields());
              return includeDeprecated ? values : values.filter((field) => field.deprecationReason == null);
            }
          }
        },
        ofType: {
          type: __Type,
          resolve: (type) => "ofType" in type ? type.ofType : void 0
        },
        isOneOf: {
          type: _scalars.GraphQLBoolean,
          resolve: (type) => {
            if ((0, _definition.isInputObjectType)(type)) {
              return type.isOneOf;
            }
          }
        }
      })
    });
    exports2.__Type = __Type;
    var __Field = new _definition.GraphQLObjectType({
      name: "__Field",
      description: "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
      fields: () => ({
        name: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          resolve: (field) => field.name
        },
        description: {
          type: _scalars.GraphQLString,
          resolve: (field) => field.description
        },
        args: {
          type: new _definition.GraphQLNonNull(
            new _definition.GraphQLList(
              new _definition.GraphQLNonNull(__InputValue)
            )
          ),
          args: {
            includeDeprecated: {
              type: _scalars.GraphQLBoolean,
              defaultValue: false
            }
          },
          resolve(field, { includeDeprecated }) {
            return includeDeprecated ? field.args : field.args.filter((arg) => arg.deprecationReason == null);
          }
        },
        type: {
          type: new _definition.GraphQLNonNull(__Type),
          resolve: (field) => field.type
        },
        isDeprecated: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          resolve: (field) => field.deprecationReason != null
        },
        deprecationReason: {
          type: _scalars.GraphQLString,
          resolve: (field) => field.deprecationReason
        }
      })
    });
    exports2.__Field = __Field;
    var __InputValue = new _definition.GraphQLObjectType({
      name: "__InputValue",
      description: "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
      fields: () => ({
        name: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          resolve: (inputValue) => inputValue.name
        },
        description: {
          type: _scalars.GraphQLString,
          resolve: (inputValue) => inputValue.description
        },
        type: {
          type: new _definition.GraphQLNonNull(__Type),
          resolve: (inputValue) => inputValue.type
        },
        defaultValue: {
          type: _scalars.GraphQLString,
          description: "A GraphQL-formatted string representing the default value for this input value.",
          resolve(inputValue) {
            const { type, defaultValue } = inputValue;
            const valueAST = (0, _astFromValue.astFromValue)(defaultValue, type);
            return valueAST ? (0, _printer.print)(valueAST) : null;
          }
        },
        isDeprecated: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          resolve: (field) => field.deprecationReason != null
        },
        deprecationReason: {
          type: _scalars.GraphQLString,
          resolve: (obj) => obj.deprecationReason
        }
      })
    });
    exports2.__InputValue = __InputValue;
    var __EnumValue = new _definition.GraphQLObjectType({
      name: "__EnumValue",
      description: "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
      fields: () => ({
        name: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          resolve: (enumValue) => enumValue.name
        },
        description: {
          type: _scalars.GraphQLString,
          resolve: (enumValue) => enumValue.description
        },
        isDeprecated: {
          type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
          resolve: (enumValue) => enumValue.deprecationReason != null
        },
        deprecationReason: {
          type: _scalars.GraphQLString,
          resolve: (enumValue) => enumValue.deprecationReason
        }
      })
    });
    exports2.__EnumValue = __EnumValue;
    var TypeKind;
    exports2.TypeKind = TypeKind;
    (function(TypeKind2) {
      TypeKind2["SCALAR"] = "SCALAR";
      TypeKind2["OBJECT"] = "OBJECT";
      TypeKind2["INTERFACE"] = "INTERFACE";
      TypeKind2["UNION"] = "UNION";
      TypeKind2["ENUM"] = "ENUM";
      TypeKind2["INPUT_OBJECT"] = "INPUT_OBJECT";
      TypeKind2["LIST"] = "LIST";
      TypeKind2["NON_NULL"] = "NON_NULL";
    })(TypeKind || (exports2.TypeKind = TypeKind = {}));
    var __TypeKind = new _definition.GraphQLEnumType({
      name: "__TypeKind",
      description: "An enum describing what kind of type a given `__Type` is.",
      values: {
        SCALAR: {
          value: TypeKind.SCALAR,
          description: "Indicates this type is a scalar."
        },
        OBJECT: {
          value: TypeKind.OBJECT,
          description: "Indicates this type is an object. `fields` and `interfaces` are valid fields."
        },
        INTERFACE: {
          value: TypeKind.INTERFACE,
          description: "Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."
        },
        UNION: {
          value: TypeKind.UNION,
          description: "Indicates this type is a union. `possibleTypes` is a valid field."
        },
        ENUM: {
          value: TypeKind.ENUM,
          description: "Indicates this type is an enum. `enumValues` is a valid field."
        },
        INPUT_OBJECT: {
          value: TypeKind.INPUT_OBJECT,
          description: "Indicates this type is an input object. `inputFields` is a valid field."
        },
        LIST: {
          value: TypeKind.LIST,
          description: "Indicates this type is a list. `ofType` is a valid field."
        },
        NON_NULL: {
          value: TypeKind.NON_NULL,
          description: "Indicates this type is a non-null. `ofType` is a valid field."
        }
      }
    });
    exports2.__TypeKind = __TypeKind;
    var SchemaMetaFieldDef = {
      name: "__schema",
      type: new _definition.GraphQLNonNull(__Schema),
      description: "Access the current type schema of this server.",
      args: [],
      resolve: (_source, _args, _context, { schema }) => schema,
      deprecationReason: void 0,
      extensions: /* @__PURE__ */ Object.create(null),
      astNode: void 0
    };
    exports2.SchemaMetaFieldDef = SchemaMetaFieldDef;
    var TypeMetaFieldDef = {
      name: "__type",
      type: __Type,
      description: "Request the type information of a single type.",
      args: [
        {
          name: "name",
          description: void 0,
          type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
          defaultValue: void 0,
          deprecationReason: void 0,
          extensions: /* @__PURE__ */ Object.create(null),
          astNode: void 0
        }
      ],
      resolve: (_source, { name }, _context, { schema }) => schema.getType(name),
      deprecationReason: void 0,
      extensions: /* @__PURE__ */ Object.create(null),
      astNode: void 0
    };
    exports2.TypeMetaFieldDef = TypeMetaFieldDef;
    var TypeNameMetaFieldDef = {
      name: "__typename",
      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
      description: "The name of the current Object type at runtime.",
      args: [],
      resolve: (_source, _args, _context, { parentType }) => parentType.name,
      deprecationReason: void 0,
      extensions: /* @__PURE__ */ Object.create(null),
      astNode: void 0
    };
    exports2.TypeNameMetaFieldDef = TypeNameMetaFieldDef;
    var introspectionTypes = Object.freeze([
      __Schema,
      __Directive,
      __DirectiveLocation,
      __Type,
      __Field,
      __InputValue,
      __EnumValue,
      __TypeKind
    ]);
    exports2.introspectionTypes = introspectionTypes;
    function isIntrospectionType2(type) {
      return introspectionTypes.some(({ name }) => type.name === name);
    }
  }
});

// node_modules/graphql/type/schema.js
var require_schema = __commonJS({
  "node_modules/graphql/type/schema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.GraphQLSchema = void 0;
    exports2.assertSchema = assertSchema;
    exports2.isSchema = isSchema3;
    var _devAssert = require_devAssert();
    var _inspect = require_inspect();
    var _instanceOf = require_instanceOf();
    var _isObjectLike = require_isObjectLike();
    var _toObjMap = require_toObjMap();
    var _ast = require_ast();
    var _definition = require_definition();
    var _directives = require_directives();
    var _introspection = require_introspection();
    function isSchema3(schema) {
      return (0, _instanceOf.instanceOf)(schema, GraphQLSchema2);
    }
    function assertSchema(schema) {
      if (!isSchema3(schema)) {
        throw new Error(
          `Expected ${(0, _inspect.inspect)(schema)} to be a GraphQL schema.`
        );
      }
      return schema;
    }
    var GraphQLSchema2 = class {
      // Used as a cache for validateSchema().
      constructor(config2) {
        var _config$extensionASTN, _config$directives;
        this.__validationErrors = config2.assumeValid === true ? [] : void 0;
        (0, _isObjectLike.isObjectLike)(config2) || (0, _devAssert.devAssert)(false, "Must provide configuration object.");
        !config2.types || Array.isArray(config2.types) || (0, _devAssert.devAssert)(
          false,
          `"types" must be Array if provided but got: ${(0, _inspect.inspect)(
            config2.types
          )}.`
        );
        !config2.directives || Array.isArray(config2.directives) || (0, _devAssert.devAssert)(
          false,
          `"directives" must be Array if provided but got: ${(0, _inspect.inspect)(config2.directives)}.`
        );
        this.description = config2.description;
        this.extensions = (0, _toObjMap.toObjMap)(config2.extensions);
        this.astNode = config2.astNode;
        this.extensionASTNodes = (_config$extensionASTN = config2.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [];
        this._queryType = config2.query;
        this._mutationType = config2.mutation;
        this._subscriptionType = config2.subscription;
        this._directives = (_config$directives = config2.directives) !== null && _config$directives !== void 0 ? _config$directives : _directives.specifiedDirectives;
        const allReferencedTypes = new Set(config2.types);
        if (config2.types != null) {
          for (const type of config2.types) {
            allReferencedTypes.delete(type);
            collectReferencedTypes(type, allReferencedTypes);
          }
        }
        if (this._queryType != null) {
          collectReferencedTypes(this._queryType, allReferencedTypes);
        }
        if (this._mutationType != null) {
          collectReferencedTypes(this._mutationType, allReferencedTypes);
        }
        if (this._subscriptionType != null) {
          collectReferencedTypes(this._subscriptionType, allReferencedTypes);
        }
        for (const directive of this._directives) {
          if ((0, _directives.isDirective)(directive)) {
            for (const arg of directive.args) {
              collectReferencedTypes(arg.type, allReferencedTypes);
            }
          }
        }
        collectReferencedTypes(_introspection.__Schema, allReferencedTypes);
        this._typeMap = /* @__PURE__ */ Object.create(null);
        this._subTypeMap = /* @__PURE__ */ Object.create(null);
        this._implementationsMap = /* @__PURE__ */ Object.create(null);
        for (const namedType of allReferencedTypes) {
          if (namedType == null) {
            continue;
          }
          const typeName = namedType.name;
          typeName || (0, _devAssert.devAssert)(
            false,
            "One of the provided types for building the Schema is missing a name."
          );
          if (this._typeMap[typeName] !== void 0) {
            throw new Error(
              `Schema must contain uniquely named types but contains multiple types named "${typeName}".`
            );
          }
          this._typeMap[typeName] = namedType;
          if ((0, _definition.isInterfaceType)(namedType)) {
            for (const iface of namedType.getInterfaces()) {
              if ((0, _definition.isInterfaceType)(iface)) {
                let implementations = this._implementationsMap[iface.name];
                if (implementations === void 0) {
                  implementations = this._implementationsMap[iface.name] = {
                    objects: [],
                    interfaces: []
                  };
                }
                implementations.interfaces.push(namedType);
              }
            }
          } else if ((0, _definition.isObjectType)(namedType)) {
            for (const iface of namedType.getInterfaces()) {
              if ((0, _definition.isInterfaceType)(iface)) {
                let implementations = this._implementationsMap[iface.name];
                if (implementations === void 0) {
                  implementations = this._implementationsMap[iface.name] = {
                    objects: [],
                    interfaces: []
                  };
                }
                implementations.objects.push(namedType);
              }
            }
          }
        }
      }
      get [Symbol.toStringTag]() {
        return "GraphQLSchema";
      }
      getQueryType() {
        return this._queryType;
      }
      getMutationType() {
        return this._mutationType;
      }
      getSubscriptionType() {
        return this._subscriptionType;
      }
      getRootType(operation) {
        switch (operation) {
          case _ast.OperationTypeNode.QUERY:
            return this.getQueryType();
          case _ast.OperationTypeNode.MUTATION:
            return this.getMutationType();
          case _ast.OperationTypeNode.SUBSCRIPTION:
            return this.getSubscriptionType();
        }
      }
      getTypeMap() {
        return this._typeMap;
      }
      getType(name) {
        return this.getTypeMap()[name];
      }
      getPossibleTypes(abstractType) {
        return (0, _definition.isUnionType)(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;
      }
      getImplementations(interfaceType) {
        const implementations = this._implementationsMap[interfaceType.name];
        return implementations !== null && implementations !== void 0 ? implementations : {
          objects: [],
          interfaces: []
        };
      }
      isSubType(abstractType, maybeSubType) {
        let map = this._subTypeMap[abstractType.name];
        if (map === void 0) {
          map = /* @__PURE__ */ Object.create(null);
          if ((0, _definition.isUnionType)(abstractType)) {
            for (const type of abstractType.getTypes()) {
              map[type.name] = true;
            }
          } else {
            const implementations = this.getImplementations(abstractType);
            for (const type of implementations.objects) {
              map[type.name] = true;
            }
            for (const type of implementations.interfaces) {
              map[type.name] = true;
            }
          }
          this._subTypeMap[abstractType.name] = map;
        }
        return map[maybeSubType.name] !== void 0;
      }
      getDirectives() {
        return this._directives;
      }
      getDirective(name) {
        return this.getDirectives().find((directive) => directive.name === name);
      }
      toConfig() {
        return {
          description: this.description,
          query: this.getQueryType(),
          mutation: this.getMutationType(),
          subscription: this.getSubscriptionType(),
          types: Object.values(this.getTypeMap()),
          directives: this.getDirectives(),
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes,
          assumeValid: this.__validationErrors !== void 0
        };
      }
    };
    exports2.GraphQLSchema = GraphQLSchema2;
    function collectReferencedTypes(type, typeSet) {
      const namedType = (0, _definition.getNamedType)(type);
      if (!typeSet.has(namedType)) {
        typeSet.add(namedType);
        if ((0, _definition.isUnionType)(namedType)) {
          for (const memberType of namedType.getTypes()) {
            collectReferencedTypes(memberType, typeSet);
          }
        } else if ((0, _definition.isObjectType)(namedType) || (0, _definition.isInterfaceType)(namedType)) {
          for (const interfaceType of namedType.getInterfaces()) {
            collectReferencedTypes(interfaceType, typeSet);
          }
          for (const field of Object.values(namedType.getFields())) {
            collectReferencedTypes(field.type, typeSet);
            for (const arg of field.args) {
              collectReferencedTypes(arg.type, typeSet);
            }
          }
        } else if ((0, _definition.isInputObjectType)(namedType)) {
          for (const field of Object.values(namedType.getFields())) {
            collectReferencedTypes(field.type, typeSet);
          }
        }
      }
      return typeSet;
    }
  }
});

// node_modules/graphql/type/validate.js
var require_validate = __commonJS({
  "node_modules/graphql/type/validate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.assertValidSchema = assertValidSchema2;
    exports2.validateSchema = validateSchema2;
    var _inspect = require_inspect();
    var _GraphQLError = require_GraphQLError();
    var _ast = require_ast();
    var _typeComparators = require_typeComparators();
    var _definition = require_definition();
    var _directives = require_directives();
    var _introspection = require_introspection();
    var _schema = require_schema();
    function validateSchema2(schema) {
      (0, _schema.assertSchema)(schema);
      if (schema.__validationErrors) {
        return schema.__validationErrors;
      }
      const context2 = new SchemaValidationContext(schema);
      validateRootTypes(context2);
      validateDirectives(context2);
      validateTypes(context2);
      const errors = context2.getErrors();
      schema.__validationErrors = errors;
      return errors;
    }
    function assertValidSchema2(schema) {
      const errors = validateSchema2(schema);
      if (errors.length !== 0) {
        throw new Error(errors.map((error) => error.message).join("\n\n"));
      }
    }
    var SchemaValidationContext = class {
      constructor(schema) {
        this._errors = [];
        this.schema = schema;
      }
      reportError(message, nodes) {
        const _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;
        this._errors.push(
          new _GraphQLError.GraphQLError(message, {
            nodes: _nodes
          })
        );
      }
      getErrors() {
        return this._errors;
      }
    };
    function validateRootTypes(context2) {
      const schema = context2.schema;
      const queryType = schema.getQueryType();
      if (!queryType) {
        context2.reportError("Query root type must be provided.", schema.astNode);
      } else if (!(0, _definition.isObjectType)(queryType)) {
        var _getOperationTypeNode;
        context2.reportError(
          `Query root type must be Object type, it cannot be ${(0, _inspect.inspect)(queryType)}.`,
          (_getOperationTypeNode = getOperationTypeNode(
            schema,
            _ast.OperationTypeNode.QUERY
          )) !== null && _getOperationTypeNode !== void 0 ? _getOperationTypeNode : queryType.astNode
        );
      }
      const mutationType = schema.getMutationType();
      if (mutationType && !(0, _definition.isObjectType)(mutationType)) {
        var _getOperationTypeNode2;
        context2.reportError(
          `Mutation root type must be Object type if provided, it cannot be ${(0, _inspect.inspect)(mutationType)}.`,
          (_getOperationTypeNode2 = getOperationTypeNode(
            schema,
            _ast.OperationTypeNode.MUTATION
          )) !== null && _getOperationTypeNode2 !== void 0 ? _getOperationTypeNode2 : mutationType.astNode
        );
      }
      const subscriptionType = schema.getSubscriptionType();
      if (subscriptionType && !(0, _definition.isObjectType)(subscriptionType)) {
        var _getOperationTypeNode3;
        context2.reportError(
          `Subscription root type must be Object type if provided, it cannot be ${(0, _inspect.inspect)(subscriptionType)}.`,
          (_getOperationTypeNode3 = getOperationTypeNode(
            schema,
            _ast.OperationTypeNode.SUBSCRIPTION
          )) !== null && _getOperationTypeNode3 !== void 0 ? _getOperationTypeNode3 : subscriptionType.astNode
        );
      }
    }
    function getOperationTypeNode(schema, operation) {
      var _flatMap$find;
      return (_flatMap$find = [schema.astNode, ...schema.extensionASTNodes].flatMap(
        // FIXME: https://github.com/graphql/graphql-js/issues/2203
        (schemaNode) => {
          var _schemaNode$operation;
          return (
            /* c8 ignore next */
            (_schemaNode$operation = schemaNode === null || schemaNode === void 0 ? void 0 : schemaNode.operationTypes) !== null && _schemaNode$operation !== void 0 ? _schemaNode$operation : []
          );
        }
      ).find((operationNode) => operationNode.operation === operation)) === null || _flatMap$find === void 0 ? void 0 : _flatMap$find.type;
    }
    function validateDirectives(context2) {
      for (const directive of context2.schema.getDirectives()) {
        if (!(0, _directives.isDirective)(directive)) {
          context2.reportError(
            `Expected directive but got: ${(0, _inspect.inspect)(directive)}.`,
            directive === null || directive === void 0 ? void 0 : directive.astNode
          );
          continue;
        }
        validateName(context2, directive);
        for (const arg of directive.args) {
          validateName(context2, arg);
          if (!(0, _definition.isInputType)(arg.type)) {
            context2.reportError(
              `The type of @${directive.name}(${arg.name}:) must be Input Type but got: ${(0, _inspect.inspect)(arg.type)}.`,
              arg.astNode
            );
          }
          if ((0, _definition.isRequiredArgument)(arg) && arg.deprecationReason != null) {
            var _arg$astNode;
            context2.reportError(
              `Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`,
              [
                getDeprecatedDirectiveNode(arg.astNode),
                (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0 ? void 0 : _arg$astNode.type
              ]
            );
          }
        }
      }
    }
    function validateName(context2, node) {
      if (node.name.startsWith("__")) {
        context2.reportError(
          `Name "${node.name}" must not begin with "__", which is reserved by GraphQL introspection.`,
          node.astNode
        );
      }
    }
    function validateTypes(context2) {
      const validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context2);
      const typeMap = context2.schema.getTypeMap();
      for (const type of Object.values(typeMap)) {
        if (!(0, _definition.isNamedType)(type)) {
          context2.reportError(
            `Expected GraphQL named type but got: ${(0, _inspect.inspect)(type)}.`,
            type.astNode
          );
          continue;
        }
        if (!(0, _introspection.isIntrospectionType)(type)) {
          validateName(context2, type);
        }
        if ((0, _definition.isObjectType)(type)) {
          validateFields(context2, type);
          validateInterfaces(context2, type);
        } else if ((0, _definition.isInterfaceType)(type)) {
          validateFields(context2, type);
          validateInterfaces(context2, type);
        } else if ((0, _definition.isUnionType)(type)) {
          validateUnionMembers(context2, type);
        } else if ((0, _definition.isEnumType)(type)) {
          validateEnumValues(context2, type);
        } else if ((0, _definition.isInputObjectType)(type)) {
          validateInputFields(context2, type);
          validateInputObjectCircularRefs(type);
        }
      }
    }
    function validateFields(context2, type) {
      const fields = Object.values(type.getFields());
      if (fields.length === 0) {
        context2.reportError(`Type ${type.name} must define one or more fields.`, [
          type.astNode,
          ...type.extensionASTNodes
        ]);
      }
      for (const field of fields) {
        validateName(context2, field);
        if (!(0, _definition.isOutputType)(field.type)) {
          var _field$astNode;
          context2.reportError(
            `The type of ${type.name}.${field.name} must be Output Type but got: ${(0, _inspect.inspect)(field.type)}.`,
            (_field$astNode = field.astNode) === null || _field$astNode === void 0 ? void 0 : _field$astNode.type
          );
        }
        for (const arg of field.args) {
          const argName = arg.name;
          validateName(context2, arg);
          if (!(0, _definition.isInputType)(arg.type)) {
            var _arg$astNode2;
            context2.reportError(
              `The type of ${type.name}.${field.name}(${argName}:) must be Input Type but got: ${(0, _inspect.inspect)(arg.type)}.`,
              (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0 ? void 0 : _arg$astNode2.type
            );
          }
          if ((0, _definition.isRequiredArgument)(arg) && arg.deprecationReason != null) {
            var _arg$astNode3;
            context2.reportError(
              `Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`,
              [
                getDeprecatedDirectiveNode(arg.astNode),
                (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0 ? void 0 : _arg$astNode3.type
              ]
            );
          }
        }
      }
    }
    function validateInterfaces(context2, type) {
      const ifaceTypeNames = /* @__PURE__ */ Object.create(null);
      for (const iface of type.getInterfaces()) {
        if (!(0, _definition.isInterfaceType)(iface)) {
          context2.reportError(
            `Type ${(0, _inspect.inspect)(
              type
            )} must only implement Interface types, it cannot implement ${(0, _inspect.inspect)(iface)}.`,
            getAllImplementsInterfaceNodes(type, iface)
          );
          continue;
        }
        if (type === iface) {
          context2.reportError(
            `Type ${type.name} cannot implement itself because it would create a circular reference.`,
            getAllImplementsInterfaceNodes(type, iface)
          );
          continue;
        }
        if (ifaceTypeNames[iface.name]) {
          context2.reportError(
            `Type ${type.name} can only implement ${iface.name} once.`,
            getAllImplementsInterfaceNodes(type, iface)
          );
          continue;
        }
        ifaceTypeNames[iface.name] = true;
        validateTypeImplementsAncestors(context2, type, iface);
        validateTypeImplementsInterface(context2, type, iface);
      }
    }
    function validateTypeImplementsInterface(context2, type, iface) {
      const typeFieldMap = type.getFields();
      for (const ifaceField of Object.values(iface.getFields())) {
        const fieldName = ifaceField.name;
        const typeField = typeFieldMap[fieldName];
        if (!typeField) {
          context2.reportError(
            `Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`,
            [ifaceField.astNode, type.astNode, ...type.extensionASTNodes]
          );
          continue;
        }
        if (!(0, _typeComparators.isTypeSubTypeOf)(
          context2.schema,
          typeField.type,
          ifaceField.type
        )) {
          var _ifaceField$astNode, _typeField$astNode;
          context2.reportError(
            `Interface field ${iface.name}.${fieldName} expects type ${(0, _inspect.inspect)(ifaceField.type)} but ${type.name}.${fieldName} is type ${(0, _inspect.inspect)(typeField.type)}.`,
            [
              (_ifaceField$astNode = ifaceField.astNode) === null || _ifaceField$astNode === void 0 ? void 0 : _ifaceField$astNode.type,
              (_typeField$astNode = typeField.astNode) === null || _typeField$astNode === void 0 ? void 0 : _typeField$astNode.type
            ]
          );
        }
        for (const ifaceArg of ifaceField.args) {
          const argName = ifaceArg.name;
          const typeArg = typeField.args.find((arg) => arg.name === argName);
          if (!typeArg) {
            context2.reportError(
              `Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`,
              [ifaceArg.astNode, typeField.astNode]
            );
            continue;
          }
          if (!(0, _typeComparators.isEqualType)(ifaceArg.type, typeArg.type)) {
            var _ifaceArg$astNode, _typeArg$astNode;
            context2.reportError(
              `Interface field argument ${iface.name}.${fieldName}(${argName}:) expects type ${(0, _inspect.inspect)(ifaceArg.type)} but ${type.name}.${fieldName}(${argName}:) is type ${(0, _inspect.inspect)(typeArg.type)}.`,
              [
                (_ifaceArg$astNode = ifaceArg.astNode) === null || _ifaceArg$astNode === void 0 ? void 0 : _ifaceArg$astNode.type,
                (_typeArg$astNode = typeArg.astNode) === null || _typeArg$astNode === void 0 ? void 0 : _typeArg$astNode.type
              ]
            );
          }
        }
        for (const typeArg of typeField.args) {
          const argName = typeArg.name;
          const ifaceArg = ifaceField.args.find((arg) => arg.name === argName);
          if (!ifaceArg && (0, _definition.isRequiredArgument)(typeArg)) {
            context2.reportError(
              `Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`,
              [typeArg.astNode, ifaceField.astNode]
            );
          }
        }
      }
    }
    function validateTypeImplementsAncestors(context2, type, iface) {
      const ifaceInterfaces = type.getInterfaces();
      for (const transitive of iface.getInterfaces()) {
        if (!ifaceInterfaces.includes(transitive)) {
          context2.reportError(
            transitive === type ? `Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.` : `Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`,
            [
              ...getAllImplementsInterfaceNodes(iface, transitive),
              ...getAllImplementsInterfaceNodes(type, iface)
            ]
          );
        }
      }
    }
    function validateUnionMembers(context2, union) {
      const memberTypes = union.getTypes();
      if (memberTypes.length === 0) {
        context2.reportError(
          `Union type ${union.name} must define one or more member types.`,
          [union.astNode, ...union.extensionASTNodes]
        );
      }
      const includedTypeNames = /* @__PURE__ */ Object.create(null);
      for (const memberType of memberTypes) {
        if (includedTypeNames[memberType.name]) {
          context2.reportError(
            `Union type ${union.name} can only include type ${memberType.name} once.`,
            getUnionMemberTypeNodes(union, memberType.name)
          );
          continue;
        }
        includedTypeNames[memberType.name] = true;
        if (!(0, _definition.isObjectType)(memberType)) {
          context2.reportError(
            `Union type ${union.name} can only include Object types, it cannot include ${(0, _inspect.inspect)(memberType)}.`,
            getUnionMemberTypeNodes(union, String(memberType))
          );
        }
      }
    }
    function validateEnumValues(context2, enumType) {
      const enumValues = enumType.getValues();
      if (enumValues.length === 0) {
        context2.reportError(
          `Enum type ${enumType.name} must define one or more values.`,
          [enumType.astNode, ...enumType.extensionASTNodes]
        );
      }
      for (const enumValue of enumValues) {
        validateName(context2, enumValue);
      }
    }
    function validateInputFields(context2, inputObj) {
      const fields = Object.values(inputObj.getFields());
      if (fields.length === 0) {
        context2.reportError(
          `Input Object type ${inputObj.name} must define one or more fields.`,
          [inputObj.astNode, ...inputObj.extensionASTNodes]
        );
      }
      for (const field of fields) {
        validateName(context2, field);
        if (!(0, _definition.isInputType)(field.type)) {
          var _field$astNode2;
          context2.reportError(
            `The type of ${inputObj.name}.${field.name} must be Input Type but got: ${(0, _inspect.inspect)(field.type)}.`,
            (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0 ? void 0 : _field$astNode2.type
          );
        }
        if ((0, _definition.isRequiredInputField)(field) && field.deprecationReason != null) {
          var _field$astNode3;
          context2.reportError(
            `Required input field ${inputObj.name}.${field.name} cannot be deprecated.`,
            [
              getDeprecatedDirectiveNode(field.astNode),
              (_field$astNode3 = field.astNode) === null || _field$astNode3 === void 0 ? void 0 : _field$astNode3.type
            ]
          );
        }
        if (inputObj.isOneOf) {
          validateOneOfInputObjectField(inputObj, field, context2);
        }
      }
    }
    function validateOneOfInputObjectField(type, field, context2) {
      if ((0, _definition.isNonNullType)(field.type)) {
        var _field$astNode4;
        context2.reportError(
          `OneOf input field ${type.name}.${field.name} must be nullable.`,
          (_field$astNode4 = field.astNode) === null || _field$astNode4 === void 0 ? void 0 : _field$astNode4.type
        );
      }
      if (field.defaultValue !== void 0) {
        context2.reportError(
          `OneOf input field ${type.name}.${field.name} cannot have a default value.`,
          field.astNode
        );
      }
    }
    function createInputObjectCircularRefsValidator(context2) {
      const visitedTypes = /* @__PURE__ */ Object.create(null);
      const fieldPath = [];
      const fieldPathIndexByTypeName = /* @__PURE__ */ Object.create(null);
      return detectCycleRecursive;
      function detectCycleRecursive(inputObj) {
        if (visitedTypes[inputObj.name]) {
          return;
        }
        visitedTypes[inputObj.name] = true;
        fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;
        const fields = Object.values(inputObj.getFields());
        for (const field of fields) {
          if ((0, _definition.isNonNullType)(field.type) && (0, _definition.isInputObjectType)(field.type.ofType)) {
            const fieldType = field.type.ofType;
            const cycleIndex = fieldPathIndexByTypeName[fieldType.name];
            fieldPath.push(field);
            if (cycleIndex === void 0) {
              detectCycleRecursive(fieldType);
            } else {
              const cyclePath = fieldPath.slice(cycleIndex);
              const pathStr = cyclePath.map((fieldObj) => fieldObj.name).join(".");
              context2.reportError(
                `Cannot reference Input Object "${fieldType.name}" within itself through a series of non-null fields: "${pathStr}".`,
                cyclePath.map((fieldObj) => fieldObj.astNode)
              );
            }
            fieldPath.pop();
          }
        }
        fieldPathIndexByTypeName[inputObj.name] = void 0;
      }
    }
    function getAllImplementsInterfaceNodes(type, iface) {
      const { astNode, extensionASTNodes } = type;
      const nodes = astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes;
      return nodes.flatMap((typeNode) => {
        var _typeNode$interfaces;
        return (
          /* c8 ignore next */
          (_typeNode$interfaces = typeNode.interfaces) !== null && _typeNode$interfaces !== void 0 ? _typeNode$interfaces : []
        );
      }).filter((ifaceNode) => ifaceNode.name.value === iface.name);
    }
    function getUnionMemberTypeNodes(union, typeName) {
      const { astNode, extensionASTNodes } = union;
      const nodes = astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes;
      return nodes.flatMap((unionNode) => {
        var _unionNode$types;
        return (
          /* c8 ignore next */
          (_unionNode$types = unionNode.types) !== null && _unionNode$types !== void 0 ? _unionNode$types : []
        );
      }).filter((typeNode) => typeNode.name.value === typeName);
    }
    function getDeprecatedDirectiveNode(definitionNode) {
      var _definitionNode$direc;
      return definitionNode === null || definitionNode === void 0 ? void 0 : (_definitionNode$direc = definitionNode.directives) === null || _definitionNode$direc === void 0 ? void 0 : _definitionNode$direc.find(
        (node) => node.name.value === _directives.GraphQLDeprecatedDirective.name
      );
    }
  }
});

// node_modules/graphql/utilities/typeFromAST.js
var require_typeFromAST = __commonJS({
  "node_modules/graphql/utilities/typeFromAST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.typeFromAST = typeFromAST;
    var _kinds = require_kinds();
    var _definition = require_definition();
    function typeFromAST(schema, typeNode) {
      switch (typeNode.kind) {
        case _kinds.Kind.LIST_TYPE: {
          const innerType = typeFromAST(schema, typeNode.type);
          return innerType && new _definition.GraphQLList(innerType);
        }
        case _kinds.Kind.NON_NULL_TYPE: {
          const innerType = typeFromAST(schema, typeNode.type);
          return innerType && new _definition.GraphQLNonNull(innerType);
        }
        case _kinds.Kind.NAMED_TYPE:
          return schema.getType(typeNode.name.value);
      }
    }
  }
});

// node_modules/graphql/utilities/TypeInfo.js
var require_TypeInfo = __commonJS({
  "node_modules/graphql/utilities/TypeInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.TypeInfo = void 0;
    exports2.visitWithTypeInfo = visitWithTypeInfo;
    var _ast = require_ast();
    var _kinds = require_kinds();
    var _visitor = require_visitor();
    var _definition = require_definition();
    var _introspection = require_introspection();
    var _typeFromAST = require_typeFromAST();
    var TypeInfo = class {
      constructor(schema, initialType, getFieldDefFn) {
        this._schema = schema;
        this._typeStack = [];
        this._parentTypeStack = [];
        this._inputTypeStack = [];
        this._fieldDefStack = [];
        this._defaultValueStack = [];
        this._directive = null;
        this._argument = null;
        this._enumValue = null;
        this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;
        if (initialType) {
          if ((0, _definition.isInputType)(initialType)) {
            this._inputTypeStack.push(initialType);
          }
          if ((0, _definition.isCompositeType)(initialType)) {
            this._parentTypeStack.push(initialType);
          }
          if ((0, _definition.isOutputType)(initialType)) {
            this._typeStack.push(initialType);
          }
        }
      }
      get [Symbol.toStringTag]() {
        return "TypeInfo";
      }
      getType() {
        if (this._typeStack.length > 0) {
          return this._typeStack[this._typeStack.length - 1];
        }
      }
      getParentType() {
        if (this._parentTypeStack.length > 0) {
          return this._parentTypeStack[this._parentTypeStack.length - 1];
        }
      }
      getInputType() {
        if (this._inputTypeStack.length > 0) {
          return this._inputTypeStack[this._inputTypeStack.length - 1];
        }
      }
      getParentInputType() {
        if (this._inputTypeStack.length > 1) {
          return this._inputTypeStack[this._inputTypeStack.length - 2];
        }
      }
      getFieldDef() {
        if (this._fieldDefStack.length > 0) {
          return this._fieldDefStack[this._fieldDefStack.length - 1];
        }
      }
      getDefaultValue() {
        if (this._defaultValueStack.length > 0) {
          return this._defaultValueStack[this._defaultValueStack.length - 1];
        }
      }
      getDirective() {
        return this._directive;
      }
      getArgument() {
        return this._argument;
      }
      getEnumValue() {
        return this._enumValue;
      }
      enter(node) {
        const schema = this._schema;
        switch (node.kind) {
          case _kinds.Kind.SELECTION_SET: {
            const namedType = (0, _definition.getNamedType)(this.getType());
            this._parentTypeStack.push(
              (0, _definition.isCompositeType)(namedType) ? namedType : void 0
            );
            break;
          }
          case _kinds.Kind.FIELD: {
            const parentType = this.getParentType();
            let fieldDef;
            let fieldType;
            if (parentType) {
              fieldDef = this._getFieldDef(schema, parentType, node);
              if (fieldDef) {
                fieldType = fieldDef.type;
              }
            }
            this._fieldDefStack.push(fieldDef);
            this._typeStack.push(
              (0, _definition.isOutputType)(fieldType) ? fieldType : void 0
            );
            break;
          }
          case _kinds.Kind.DIRECTIVE:
            this._directive = schema.getDirective(node.name.value);
            break;
          case _kinds.Kind.OPERATION_DEFINITION: {
            const rootType = schema.getRootType(node.operation);
            this._typeStack.push(
              (0, _definition.isObjectType)(rootType) ? rootType : void 0
            );
            break;
          }
          case _kinds.Kind.INLINE_FRAGMENT:
          case _kinds.Kind.FRAGMENT_DEFINITION: {
            const typeConditionAST = node.typeCondition;
            const outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST) : (0, _definition.getNamedType)(this.getType());
            this._typeStack.push(
              (0, _definition.isOutputType)(outputType) ? outputType : void 0
            );
            break;
          }
          case _kinds.Kind.VARIABLE_DEFINITION: {
            const inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);
            this._inputTypeStack.push(
              (0, _definition.isInputType)(inputType) ? inputType : void 0
            );
            break;
          }
          case _kinds.Kind.ARGUMENT: {
            var _this$getDirective;
            let argDef;
            let argType;
            const fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();
            if (fieldOrDirective) {
              argDef = fieldOrDirective.args.find(
                (arg) => arg.name === node.name.value
              );
              if (argDef) {
                argType = argDef.type;
              }
            }
            this._argument = argDef;
            this._defaultValueStack.push(argDef ? argDef.defaultValue : void 0);
            this._inputTypeStack.push(
              (0, _definition.isInputType)(argType) ? argType : void 0
            );
            break;
          }
          case _kinds.Kind.LIST: {
            const listType = (0, _definition.getNullableType)(this.getInputType());
            const itemType = (0, _definition.isListType)(listType) ? listType.ofType : listType;
            this._defaultValueStack.push(void 0);
            this._inputTypeStack.push(
              (0, _definition.isInputType)(itemType) ? itemType : void 0
            );
            break;
          }
          case _kinds.Kind.OBJECT_FIELD: {
            const objectType = (0, _definition.getNamedType)(this.getInputType());
            let inputFieldType;
            let inputField;
            if ((0, _definition.isInputObjectType)(objectType)) {
              inputField = objectType.getFields()[node.name.value];
              if (inputField) {
                inputFieldType = inputField.type;
              }
            }
            this._defaultValueStack.push(
              inputField ? inputField.defaultValue : void 0
            );
            this._inputTypeStack.push(
              (0, _definition.isInputType)(inputFieldType) ? inputFieldType : void 0
            );
            break;
          }
          case _kinds.Kind.ENUM: {
            const enumType = (0, _definition.getNamedType)(this.getInputType());
            let enumValue;
            if ((0, _definition.isEnumType)(enumType)) {
              enumValue = enumType.getValue(node.value);
            }
            this._enumValue = enumValue;
            break;
          }
          default:
        }
      }
      leave(node) {
        switch (node.kind) {
          case _kinds.Kind.SELECTION_SET:
            this._parentTypeStack.pop();
            break;
          case _kinds.Kind.FIELD:
            this._fieldDefStack.pop();
            this._typeStack.pop();
            break;
          case _kinds.Kind.DIRECTIVE:
            this._directive = null;
            break;
          case _kinds.Kind.OPERATION_DEFINITION:
          case _kinds.Kind.INLINE_FRAGMENT:
          case _kinds.Kind.FRAGMENT_DEFINITION:
            this._typeStack.pop();
            break;
          case _kinds.Kind.VARIABLE_DEFINITION:
            this._inputTypeStack.pop();
            break;
          case _kinds.Kind.ARGUMENT:
            this._argument = null;
            this._defaultValueStack.pop();
            this._inputTypeStack.pop();
            break;
          case _kinds.Kind.LIST:
          case _kinds.Kind.OBJECT_FIELD:
            this._defaultValueStack.pop();
            this._inputTypeStack.pop();
            break;
          case _kinds.Kind.ENUM:
            this._enumValue = null;
            break;
          default:
        }
      }
    };
    exports2.TypeInfo = TypeInfo;
    function getFieldDef(schema, parentType, fieldNode) {
      const name = fieldNode.name.value;
      if (name === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
        return _introspection.SchemaMetaFieldDef;
      }
      if (name === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
        return _introspection.TypeMetaFieldDef;
      }
      if (name === _introspection.TypeNameMetaFieldDef.name && (0, _definition.isCompositeType)(parentType)) {
        return _introspection.TypeNameMetaFieldDef;
      }
      if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
        return parentType.getFields()[name];
      }
    }
    function visitWithTypeInfo(typeInfo, visitor) {
      return {
        enter(...args) {
          const node = args[0];
          typeInfo.enter(node);
          const fn2 = (0, _visitor.getEnterLeaveForKind)(visitor, node.kind).enter;
          if (fn2) {
            const result = fn2.apply(visitor, args);
            if (result !== void 0) {
              typeInfo.leave(node);
              if ((0, _ast.isNode)(result)) {
                typeInfo.enter(result);
              }
            }
            return result;
          }
        },
        leave(...args) {
          const node = args[0];
          const fn2 = (0, _visitor.getEnterLeaveForKind)(visitor, node.kind).leave;
          let result;
          if (fn2) {
            result = fn2.apply(visitor, args);
          }
          typeInfo.leave(node);
          return result;
        }
      };
    }
  }
});

// node_modules/graphql/language/predicates.js
var require_predicates = __commonJS({
  "node_modules/graphql/language/predicates.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.isConstValueNode = isConstValueNode;
    exports2.isDefinitionNode = isDefinitionNode2;
    exports2.isExecutableDefinitionNode = isExecutableDefinitionNode;
    exports2.isSelectionNode = isSelectionNode;
    exports2.isTypeDefinitionNode = isTypeDefinitionNode;
    exports2.isTypeExtensionNode = isTypeExtensionNode;
    exports2.isTypeNode = isTypeNode;
    exports2.isTypeSystemDefinitionNode = isTypeSystemDefinitionNode;
    exports2.isTypeSystemExtensionNode = isTypeSystemExtensionNode;
    exports2.isValueNode = isValueNode;
    var _kinds = require_kinds();
    function isDefinitionNode2(node) {
      return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);
    }
    function isExecutableDefinitionNode(node) {
      return node.kind === _kinds.Kind.OPERATION_DEFINITION || node.kind === _kinds.Kind.FRAGMENT_DEFINITION;
    }
    function isSelectionNode(node) {
      return node.kind === _kinds.Kind.FIELD || node.kind === _kinds.Kind.FRAGMENT_SPREAD || node.kind === _kinds.Kind.INLINE_FRAGMENT;
    }
    function isValueNode(node) {
      return node.kind === _kinds.Kind.VARIABLE || node.kind === _kinds.Kind.INT || node.kind === _kinds.Kind.FLOAT || node.kind === _kinds.Kind.STRING || node.kind === _kinds.Kind.BOOLEAN || node.kind === _kinds.Kind.NULL || node.kind === _kinds.Kind.ENUM || node.kind === _kinds.Kind.LIST || node.kind === _kinds.Kind.OBJECT;
    }
    function isConstValueNode(node) {
      return isValueNode(node) && (node.kind === _kinds.Kind.LIST ? node.values.some(isConstValueNode) : node.kind === _kinds.Kind.OBJECT ? node.fields.some((field) => isConstValueNode(field.value)) : node.kind !== _kinds.Kind.VARIABLE);
    }
    function isTypeNode(node) {
      return node.kind === _kinds.Kind.NAMED_TYPE || node.kind === _kinds.Kind.LIST_TYPE || node.kind === _kinds.Kind.NON_NULL_TYPE;
    }
    function isTypeSystemDefinitionNode(node) {
      return node.kind === _kinds.Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === _kinds.Kind.DIRECTIVE_DEFINITION;
    }
    function isTypeDefinitionNode(node) {
      return node.kind === _kinds.Kind.SCALAR_TYPE_DEFINITION || node.kind === _kinds.Kind.OBJECT_TYPE_DEFINITION || node.kind === _kinds.Kind.INTERFACE_TYPE_DEFINITION || node.kind === _kinds.Kind.UNION_TYPE_DEFINITION || node.kind === _kinds.Kind.ENUM_TYPE_DEFINITION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION;
    }
    function isTypeSystemExtensionNode(node) {
      return node.kind === _kinds.Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
    }
    function isTypeExtensionNode(node) {
      return node.kind === _kinds.Kind.SCALAR_TYPE_EXTENSION || node.kind === _kinds.Kind.OBJECT_TYPE_EXTENSION || node.kind === _kinds.Kind.INTERFACE_TYPE_EXTENSION || node.kind === _kinds.Kind.UNION_TYPE_EXTENSION || node.kind === _kinds.Kind.ENUM_TYPE_EXTENSION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
    }
  }
});

// node_modules/graphql/validation/rules/ExecutableDefinitionsRule.js
var require_ExecutableDefinitionsRule = __commonJS({
  "node_modules/graphql/validation/rules/ExecutableDefinitionsRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ExecutableDefinitionsRule = ExecutableDefinitionsRule;
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _predicates = require_predicates();
    function ExecutableDefinitionsRule(context2) {
      return {
        Document(node) {
          for (const definition of node.definitions) {
            if (!(0, _predicates.isExecutableDefinitionNode)(definition)) {
              const defName = definition.kind === _kinds.Kind.SCHEMA_DEFINITION || definition.kind === _kinds.Kind.SCHEMA_EXTENSION ? "schema" : '"' + definition.name.value + '"';
              context2.reportError(
                new _GraphQLError.GraphQLError(
                  `The ${defName} definition is not executable.`,
                  {
                    nodes: definition
                  }
                )
              );
            }
          }
          return false;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.js
var require_FieldsOnCorrectTypeRule = __commonJS({
  "node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule;
    var _didYouMean = require_didYouMean();
    var _naturalCompare = require_naturalCompare();
    var _suggestionList = require_suggestionList();
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    function FieldsOnCorrectTypeRule(context2) {
      return {
        Field(node) {
          const type = context2.getParentType();
          if (type) {
            const fieldDef = context2.getFieldDef();
            if (!fieldDef) {
              const schema = context2.getSchema();
              const fieldName = node.name.value;
              let suggestion = (0, _didYouMean.didYouMean)(
                "to use an inline fragment on",
                getSuggestedTypeNames(schema, type, fieldName)
              );
              if (suggestion === "") {
                suggestion = (0, _didYouMean.didYouMean)(
                  getSuggestedFieldNames(type, fieldName)
                );
              }
              context2.reportError(
                new _GraphQLError.GraphQLError(
                  `Cannot query field "${fieldName}" on type "${type.name}".` + suggestion,
                  {
                    nodes: node
                  }
                )
              );
            }
          }
        }
      };
    }
    function getSuggestedTypeNames(schema, type, fieldName) {
      if (!(0, _definition.isAbstractType)(type)) {
        return [];
      }
      const suggestedTypes = /* @__PURE__ */ new Set();
      const usageCount = /* @__PURE__ */ Object.create(null);
      for (const possibleType of schema.getPossibleTypes(type)) {
        if (!possibleType.getFields()[fieldName]) {
          continue;
        }
        suggestedTypes.add(possibleType);
        usageCount[possibleType.name] = 1;
        for (const possibleInterface of possibleType.getInterfaces()) {
          var _usageCount$possibleI;
          if (!possibleInterface.getFields()[fieldName]) {
            continue;
          }
          suggestedTypes.add(possibleInterface);
          usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;
        }
      }
      return [...suggestedTypes].sort((typeA, typeB) => {
        const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];
        if (usageCountDiff !== 0) {
          return usageCountDiff;
        }
        if ((0, _definition.isInterfaceType)(typeA) && schema.isSubType(typeA, typeB)) {
          return -1;
        }
        if ((0, _definition.isInterfaceType)(typeB) && schema.isSubType(typeB, typeA)) {
          return 1;
        }
        return (0, _naturalCompare.naturalCompare)(typeA.name, typeB.name);
      }).map((x2) => x2.name);
    }
    function getSuggestedFieldNames(type, fieldName) {
      if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
        const possibleFieldNames = Object.keys(type.getFields());
        return (0, _suggestionList.suggestionList)(fieldName, possibleFieldNames);
      }
      return [];
    }
  }
});

// node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.js
var require_FragmentsOnCompositeTypesRule = __commonJS({
  "node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.FragmentsOnCompositeTypesRule = FragmentsOnCompositeTypesRule;
    var _GraphQLError = require_GraphQLError();
    var _printer = require_printer();
    var _definition = require_definition();
    var _typeFromAST = require_typeFromAST();
    function FragmentsOnCompositeTypesRule(context2) {
      return {
        InlineFragment(node) {
          const typeCondition = node.typeCondition;
          if (typeCondition) {
            const type = (0, _typeFromAST.typeFromAST)(
              context2.getSchema(),
              typeCondition
            );
            if (type && !(0, _definition.isCompositeType)(type)) {
              const typeStr = (0, _printer.print)(typeCondition);
              context2.reportError(
                new _GraphQLError.GraphQLError(
                  `Fragment cannot condition on non composite type "${typeStr}".`,
                  {
                    nodes: typeCondition
                  }
                )
              );
            }
          }
        },
        FragmentDefinition(node) {
          const type = (0, _typeFromAST.typeFromAST)(
            context2.getSchema(),
            node.typeCondition
          );
          if (type && !(0, _definition.isCompositeType)(type)) {
            const typeStr = (0, _printer.print)(node.typeCondition);
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Fragment "${node.name.value}" cannot condition on non composite type "${typeStr}".`,
                {
                  nodes: node.typeCondition
                }
              )
            );
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/KnownArgumentNamesRule.js
var require_KnownArgumentNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/KnownArgumentNamesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;
    exports2.KnownArgumentNamesRule = KnownArgumentNamesRule;
    var _didYouMean = require_didYouMean();
    var _suggestionList = require_suggestionList();
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _directives = require_directives();
    function KnownArgumentNamesRule(context2) {
      return {
        // eslint-disable-next-line new-cap
        ...KnownArgumentNamesOnDirectivesRule(context2),
        Argument(argNode) {
          const argDef = context2.getArgument();
          const fieldDef = context2.getFieldDef();
          const parentType = context2.getParentType();
          if (!argDef && fieldDef && parentType) {
            const argName = argNode.name.value;
            const knownArgsNames = fieldDef.args.map((arg) => arg.name);
            const suggestions = (0, _suggestionList.suggestionList)(
              argName,
              knownArgsNames
            );
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Unknown argument "${argName}" on field "${parentType.name}.${fieldDef.name}".` + (0, _didYouMean.didYouMean)(suggestions),
                {
                  nodes: argNode
                }
              )
            );
          }
        }
      };
    }
    function KnownArgumentNamesOnDirectivesRule(context2) {
      const directiveArgs = /* @__PURE__ */ Object.create(null);
      const schema = context2.getSchema();
      const definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;
      for (const directive of definedDirectives) {
        directiveArgs[directive.name] = directive.args.map((arg) => arg.name);
      }
      const astDefinitions = context2.getDocument().definitions;
      for (const def of astDefinitions) {
        if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          var _def$arguments;
          const argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
          directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);
        }
      }
      return {
        Directive(directiveNode) {
          const directiveName = directiveNode.name.value;
          const knownArgs = directiveArgs[directiveName];
          if (directiveNode.arguments && knownArgs) {
            for (const argNode of directiveNode.arguments) {
              const argName = argNode.name.value;
              if (!knownArgs.includes(argName)) {
                const suggestions = (0, _suggestionList.suggestionList)(
                  argName,
                  knownArgs
                );
                context2.reportError(
                  new _GraphQLError.GraphQLError(
                    `Unknown argument "${argName}" on directive "@${directiveName}".` + (0, _didYouMean.didYouMean)(suggestions),
                    {
                      nodes: argNode
                    }
                  )
                );
              }
            }
          }
          return false;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/KnownDirectivesRule.js
var require_KnownDirectivesRule = __commonJS({
  "node_modules/graphql/validation/rules/KnownDirectivesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.KnownDirectivesRule = KnownDirectivesRule;
    var _inspect = require_inspect();
    var _invariant = require_invariant();
    var _GraphQLError = require_GraphQLError();
    var _ast = require_ast();
    var _directiveLocation = require_directiveLocation();
    var _kinds = require_kinds();
    var _directives = require_directives();
    function KnownDirectivesRule(context2) {
      const locationsMap = /* @__PURE__ */ Object.create(null);
      const schema = context2.getSchema();
      const definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;
      for (const directive of definedDirectives) {
        locationsMap[directive.name] = directive.locations;
      }
      const astDefinitions = context2.getDocument().definitions;
      for (const def of astDefinitions) {
        if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          locationsMap[def.name.value] = def.locations.map((name) => name.value);
        }
      }
      return {
        Directive(node, _key, _parent, _path, ancestors) {
          const name = node.name.value;
          const locations = locationsMap[name];
          if (!locations) {
            context2.reportError(
              new _GraphQLError.GraphQLError(`Unknown directive "@${name}".`, {
                nodes: node
              })
            );
            return;
          }
          const candidateLocation = getDirectiveLocationForASTPath(ancestors);
          if (candidateLocation && !locations.includes(candidateLocation)) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Directive "@${name}" may not be used on ${candidateLocation}.`,
                {
                  nodes: node
                }
              )
            );
          }
        }
      };
    }
    function getDirectiveLocationForASTPath(ancestors) {
      const appliedTo = ancestors[ancestors.length - 1];
      "kind" in appliedTo || (0, _invariant.invariant)(false);
      switch (appliedTo.kind) {
        case _kinds.Kind.OPERATION_DEFINITION:
          return getDirectiveLocationForOperation(appliedTo.operation);
        case _kinds.Kind.FIELD:
          return _directiveLocation.DirectiveLocation.FIELD;
        case _kinds.Kind.FRAGMENT_SPREAD:
          return _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD;
        case _kinds.Kind.INLINE_FRAGMENT:
          return _directiveLocation.DirectiveLocation.INLINE_FRAGMENT;
        case _kinds.Kind.FRAGMENT_DEFINITION:
          return _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION;
        case _kinds.Kind.VARIABLE_DEFINITION:
          return _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION;
        case _kinds.Kind.SCHEMA_DEFINITION:
        case _kinds.Kind.SCHEMA_EXTENSION:
          return _directiveLocation.DirectiveLocation.SCHEMA;
        case _kinds.Kind.SCALAR_TYPE_DEFINITION:
        case _kinds.Kind.SCALAR_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.SCALAR;
        case _kinds.Kind.OBJECT_TYPE_DEFINITION:
        case _kinds.Kind.OBJECT_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.OBJECT;
        case _kinds.Kind.FIELD_DEFINITION:
          return _directiveLocation.DirectiveLocation.FIELD_DEFINITION;
        case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
        case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.INTERFACE;
        case _kinds.Kind.UNION_TYPE_DEFINITION:
        case _kinds.Kind.UNION_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.UNION;
        case _kinds.Kind.ENUM_TYPE_DEFINITION:
        case _kinds.Kind.ENUM_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.ENUM;
        case _kinds.Kind.ENUM_VALUE_DEFINITION:
          return _directiveLocation.DirectiveLocation.ENUM_VALUE;
        case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
        case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
          return _directiveLocation.DirectiveLocation.INPUT_OBJECT;
        case _kinds.Kind.INPUT_VALUE_DEFINITION: {
          const parentNode = ancestors[ancestors.length - 3];
          "kind" in parentNode || (0, _invariant.invariant)(false);
          return parentNode.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION ? _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION : _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION;
        }
        // Not reachable, all possible types have been considered.
        /* c8 ignore next */
        default:
          (0, _invariant.invariant)(
            false,
            "Unexpected kind: " + (0, _inspect.inspect)(appliedTo.kind)
          );
      }
    }
    function getDirectiveLocationForOperation(operation) {
      switch (operation) {
        case _ast.OperationTypeNode.QUERY:
          return _directiveLocation.DirectiveLocation.QUERY;
        case _ast.OperationTypeNode.MUTATION:
          return _directiveLocation.DirectiveLocation.MUTATION;
        case _ast.OperationTypeNode.SUBSCRIPTION:
          return _directiveLocation.DirectiveLocation.SUBSCRIPTION;
      }
    }
  }
});

// node_modules/graphql/validation/rules/KnownFragmentNamesRule.js
var require_KnownFragmentNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/KnownFragmentNamesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.KnownFragmentNamesRule = KnownFragmentNamesRule;
    var _GraphQLError = require_GraphQLError();
    function KnownFragmentNamesRule(context2) {
      return {
        FragmentSpread(node) {
          const fragmentName = node.name.value;
          const fragment = context2.getFragment(fragmentName);
          if (!fragment) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Unknown fragment "${fragmentName}".`,
                {
                  nodes: node.name
                }
              )
            );
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/KnownTypeNamesRule.js
var require_KnownTypeNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/KnownTypeNamesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.KnownTypeNamesRule = KnownTypeNamesRule;
    var _didYouMean = require_didYouMean();
    var _suggestionList = require_suggestionList();
    var _GraphQLError = require_GraphQLError();
    var _predicates = require_predicates();
    var _introspection = require_introspection();
    var _scalars = require_scalars();
    function KnownTypeNamesRule(context2) {
      const schema = context2.getSchema();
      const existingTypesMap = schema ? schema.getTypeMap() : /* @__PURE__ */ Object.create(null);
      const definedTypes = /* @__PURE__ */ Object.create(null);
      for (const def of context2.getDocument().definitions) {
        if ((0, _predicates.isTypeDefinitionNode)(def)) {
          definedTypes[def.name.value] = true;
        }
      }
      const typeNames = [
        ...Object.keys(existingTypesMap),
        ...Object.keys(definedTypes)
      ];
      return {
        NamedType(node, _1, parent, _22, ancestors) {
          const typeName = node.name.value;
          if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
            var _ancestors$;
            const definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;
            const isSDL = definitionNode != null && isSDLNode(definitionNode);
            if (isSDL && standardTypeNames.includes(typeName)) {
              return;
            }
            const suggestedTypes = (0, _suggestionList.suggestionList)(
              typeName,
              isSDL ? standardTypeNames.concat(typeNames) : typeNames
            );
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Unknown type "${typeName}".` + (0, _didYouMean.didYouMean)(suggestedTypes),
                {
                  nodes: node
                }
              )
            );
          }
        }
      };
    }
    var standardTypeNames = [
      ..._scalars.specifiedScalarTypes,
      ..._introspection.introspectionTypes
    ].map((type) => type.name);
    function isSDLNode(value) {
      return "kind" in value && ((0, _predicates.isTypeSystemDefinitionNode)(value) || (0, _predicates.isTypeSystemExtensionNode)(value));
    }
  }
});

// node_modules/graphql/validation/rules/LoneAnonymousOperationRule.js
var require_LoneAnonymousOperationRule = __commonJS({
  "node_modules/graphql/validation/rules/LoneAnonymousOperationRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.LoneAnonymousOperationRule = LoneAnonymousOperationRule;
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    function LoneAnonymousOperationRule(context2) {
      let operationCount = 0;
      return {
        Document(node) {
          operationCount = node.definitions.filter(
            (definition) => definition.kind === _kinds.Kind.OPERATION_DEFINITION
          ).length;
        },
        OperationDefinition(node) {
          if (!node.name && operationCount > 1) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                "This anonymous operation must be the only defined operation.",
                {
                  nodes: node
                }
              )
            );
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.js
var require_LoneSchemaDefinitionRule = __commonJS({
  "node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.LoneSchemaDefinitionRule = LoneSchemaDefinitionRule;
    var _GraphQLError = require_GraphQLError();
    function LoneSchemaDefinitionRule(context2) {
      var _ref, _ref2, _oldSchema$astNode;
      const oldSchema = context2.getSchema();
      const alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getSubscriptionType();
      let schemaDefinitionsCount = 0;
      return {
        SchemaDefinition(node) {
          if (alreadyDefined) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                "Cannot define a new schema within a schema extension.",
                {
                  nodes: node
                }
              )
            );
            return;
          }
          if (schemaDefinitionsCount > 0) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                "Must provide only one schema definition.",
                {
                  nodes: node
                }
              )
            );
          }
          ++schemaDefinitionsCount;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/MaxIntrospectionDepthRule.js
var require_MaxIntrospectionDepthRule = __commonJS({
  "node_modules/graphql/validation/rules/MaxIntrospectionDepthRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.MaxIntrospectionDepthRule = MaxIntrospectionDepthRule;
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var MAX_LISTS_DEPTH = 3;
    function MaxIntrospectionDepthRule(context2) {
      function checkDepth(node, visitedFragments = /* @__PURE__ */ Object.create(null), depth = 0) {
        if (node.kind === _kinds.Kind.FRAGMENT_SPREAD) {
          const fragmentName = node.name.value;
          if (visitedFragments[fragmentName] === true) {
            return false;
          }
          const fragment = context2.getFragment(fragmentName);
          if (!fragment) {
            return false;
          }
          try {
            visitedFragments[fragmentName] = true;
            return checkDepth(fragment, visitedFragments, depth);
          } finally {
            visitedFragments[fragmentName] = void 0;
          }
        }
        if (node.kind === _kinds.Kind.FIELD && // check all introspection lists
        (node.name.value === "fields" || node.name.value === "interfaces" || node.name.value === "possibleTypes" || node.name.value === "inputFields")) {
          depth++;
          if (depth >= MAX_LISTS_DEPTH) {
            return true;
          }
        }
        if ("selectionSet" in node && node.selectionSet) {
          for (const child of node.selectionSet.selections) {
            if (checkDepth(child, visitedFragments, depth)) {
              return true;
            }
          }
        }
        return false;
      }
      return {
        Field(node) {
          if (node.name.value === "__schema" || node.name.value === "__type") {
            if (checkDepth(node)) {
              context2.reportError(
                new _GraphQLError.GraphQLError(
                  "Maximum introspection depth exceeded",
                  {
                    nodes: [node]
                  }
                )
              );
              return false;
            }
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/NoFragmentCyclesRule.js
var require_NoFragmentCyclesRule = __commonJS({
  "node_modules/graphql/validation/rules/NoFragmentCyclesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.NoFragmentCyclesRule = NoFragmentCyclesRule;
    var _GraphQLError = require_GraphQLError();
    function NoFragmentCyclesRule(context2) {
      const visitedFrags = /* @__PURE__ */ Object.create(null);
      const spreadPath = [];
      const spreadPathIndexByName = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition: () => false,
        FragmentDefinition(node) {
          detectCycleRecursive(node);
          return false;
        }
      };
      function detectCycleRecursive(fragment) {
        if (visitedFrags[fragment.name.value]) {
          return;
        }
        const fragmentName = fragment.name.value;
        visitedFrags[fragmentName] = true;
        const spreadNodes = context2.getFragmentSpreads(fragment.selectionSet);
        if (spreadNodes.length === 0) {
          return;
        }
        spreadPathIndexByName[fragmentName] = spreadPath.length;
        for (const spreadNode of spreadNodes) {
          const spreadName = spreadNode.name.value;
          const cycleIndex = spreadPathIndexByName[spreadName];
          spreadPath.push(spreadNode);
          if (cycleIndex === void 0) {
            const spreadFragment = context2.getFragment(spreadName);
            if (spreadFragment) {
              detectCycleRecursive(spreadFragment);
            }
          } else {
            const cyclePath = spreadPath.slice(cycleIndex);
            const viaPath = cyclePath.slice(0, -1).map((s) => '"' + s.name.value + '"').join(", ");
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Cannot spread fragment "${spreadName}" within itself` + (viaPath !== "" ? ` via ${viaPath}.` : "."),
                {
                  nodes: cyclePath
                }
              )
            );
          }
          spreadPath.pop();
        }
        spreadPathIndexByName[fragmentName] = void 0;
      }
    }
  }
});

// node_modules/graphql/validation/rules/NoUndefinedVariablesRule.js
var require_NoUndefinedVariablesRule = __commonJS({
  "node_modules/graphql/validation/rules/NoUndefinedVariablesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.NoUndefinedVariablesRule = NoUndefinedVariablesRule;
    var _GraphQLError = require_GraphQLError();
    function NoUndefinedVariablesRule(context2) {
      let variableNameDefined = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition: {
          enter() {
            variableNameDefined = /* @__PURE__ */ Object.create(null);
          },
          leave(operation) {
            const usages = context2.getRecursiveVariableUsages(operation);
            for (const { node } of usages) {
              const varName = node.name.value;
              if (variableNameDefined[varName] !== true) {
                context2.reportError(
                  new _GraphQLError.GraphQLError(
                    operation.name ? `Variable "$${varName}" is not defined by operation "${operation.name.value}".` : `Variable "$${varName}" is not defined.`,
                    {
                      nodes: [node, operation]
                    }
                  )
                );
              }
            }
          }
        },
        VariableDefinition(node) {
          variableNameDefined[node.variable.name.value] = true;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/NoUnusedFragmentsRule.js
var require_NoUnusedFragmentsRule = __commonJS({
  "node_modules/graphql/validation/rules/NoUnusedFragmentsRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.NoUnusedFragmentsRule = NoUnusedFragmentsRule;
    var _GraphQLError = require_GraphQLError();
    function NoUnusedFragmentsRule(context2) {
      const operationDefs = [];
      const fragmentDefs = [];
      return {
        OperationDefinition(node) {
          operationDefs.push(node);
          return false;
        },
        FragmentDefinition(node) {
          fragmentDefs.push(node);
          return false;
        },
        Document: {
          leave() {
            const fragmentNameUsed = /* @__PURE__ */ Object.create(null);
            for (const operation of operationDefs) {
              for (const fragment of context2.getRecursivelyReferencedFragments(
                operation
              )) {
                fragmentNameUsed[fragment.name.value] = true;
              }
            }
            for (const fragmentDef of fragmentDefs) {
              const fragName = fragmentDef.name.value;
              if (fragmentNameUsed[fragName] !== true) {
                context2.reportError(
                  new _GraphQLError.GraphQLError(
                    `Fragment "${fragName}" is never used.`,
                    {
                      nodes: fragmentDef
                    }
                  )
                );
              }
            }
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/NoUnusedVariablesRule.js
var require_NoUnusedVariablesRule = __commonJS({
  "node_modules/graphql/validation/rules/NoUnusedVariablesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.NoUnusedVariablesRule = NoUnusedVariablesRule;
    var _GraphQLError = require_GraphQLError();
    function NoUnusedVariablesRule(context2) {
      let variableDefs = [];
      return {
        OperationDefinition: {
          enter() {
            variableDefs = [];
          },
          leave(operation) {
            const variableNameUsed = /* @__PURE__ */ Object.create(null);
            const usages = context2.getRecursiveVariableUsages(operation);
            for (const { node } of usages) {
              variableNameUsed[node.name.value] = true;
            }
            for (const variableDef of variableDefs) {
              const variableName = variableDef.variable.name.value;
              if (variableNameUsed[variableName] !== true) {
                context2.reportError(
                  new _GraphQLError.GraphQLError(
                    operation.name ? `Variable "$${variableName}" is never used in operation "${operation.name.value}".` : `Variable "$${variableName}" is never used.`,
                    {
                      nodes: variableDef
                    }
                  )
                );
              }
            }
          }
        },
        VariableDefinition(def) {
          variableDefs.push(def);
        }
      };
    }
  }
});

// node_modules/graphql/utilities/sortValueNode.js
var require_sortValueNode = __commonJS({
  "node_modules/graphql/utilities/sortValueNode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.sortValueNode = sortValueNode;
    var _naturalCompare = require_naturalCompare();
    var _kinds = require_kinds();
    function sortValueNode(valueNode) {
      switch (valueNode.kind) {
        case _kinds.Kind.OBJECT:
          return { ...valueNode, fields: sortFields(valueNode.fields) };
        case _kinds.Kind.LIST:
          return { ...valueNode, values: valueNode.values.map(sortValueNode) };
        case _kinds.Kind.INT:
        case _kinds.Kind.FLOAT:
        case _kinds.Kind.STRING:
        case _kinds.Kind.BOOLEAN:
        case _kinds.Kind.NULL:
        case _kinds.Kind.ENUM:
        case _kinds.Kind.VARIABLE:
          return valueNode;
      }
    }
    function sortFields(fields) {
      return fields.map((fieldNode) => ({
        ...fieldNode,
        value: sortValueNode(fieldNode.value)
      })).sort(
        (fieldA, fieldB) => (0, _naturalCompare.naturalCompare)(fieldA.name.value, fieldB.name.value)
      );
    }
  }
});

// node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.js
var require_OverlappingFieldsCanBeMergedRule = __commonJS({
  "node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.OverlappingFieldsCanBeMergedRule = OverlappingFieldsCanBeMergedRule;
    var _inspect = require_inspect();
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _printer = require_printer();
    var _definition = require_definition();
    var _sortValueNode = require_sortValueNode();
    var _typeFromAST = require_typeFromAST();
    function reasonMessage(reason) {
      if (Array.isArray(reason)) {
        return reason.map(
          ([responseName, subReason]) => `subfields "${responseName}" conflict because ` + reasonMessage(subReason)
        ).join(" and ");
      }
      return reason;
    }
    function OverlappingFieldsCanBeMergedRule(context2) {
      const comparedFragmentPairs = new PairSet();
      const cachedFieldsAndFragmentNames = /* @__PURE__ */ new Map();
      return {
        SelectionSet(selectionSet) {
          const conflicts = findConflictsWithinSelectionSet(
            context2,
            cachedFieldsAndFragmentNames,
            comparedFragmentPairs,
            context2.getParentType(),
            selectionSet
          );
          for (const [[responseName, reason], fields1, fields2] of conflicts) {
            const reasonMsg = reasonMessage(reason);
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Fields "${responseName}" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,
                {
                  nodes: fields1.concat(fields2)
                }
              )
            );
          }
        }
      };
    }
    function findConflictsWithinSelectionSet(context2, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {
      const conflicts = [];
      const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(
        context2,
        cachedFieldsAndFragmentNames,
        parentType,
        selectionSet
      );
      collectConflictsWithin(
        context2,
        conflicts,
        cachedFieldsAndFragmentNames,
        comparedFragmentPairs,
        fieldMap
      );
      if (fragmentNames.length !== 0) {
        for (let i = 0; i < fragmentNames.length; i++) {
          collectConflictsBetweenFieldsAndFragment(
            context2,
            conflicts,
            cachedFieldsAndFragmentNames,
            comparedFragmentPairs,
            false,
            fieldMap,
            fragmentNames[i]
          );
          for (let j2 = i + 1; j2 < fragmentNames.length; j2++) {
            collectConflictsBetweenFragments(
              context2,
              conflicts,
              cachedFieldsAndFragmentNames,
              comparedFragmentPairs,
              false,
              fragmentNames[i],
              fragmentNames[j2]
            );
          }
        }
      }
      return conflicts;
    }
    function collectConflictsBetweenFieldsAndFragment(context2, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
      const fragment = context2.getFragment(fragmentName);
      if (!fragment) {
        return;
      }
      const [fieldMap2, referencedFragmentNames] = getReferencedFieldsAndFragmentNames(
        context2,
        cachedFieldsAndFragmentNames,
        fragment
      );
      if (fieldMap === fieldMap2) {
        return;
      }
      collectConflictsBetween(
        context2,
        conflicts,
        cachedFieldsAndFragmentNames,
        comparedFragmentPairs,
        areMutuallyExclusive,
        fieldMap,
        fieldMap2
      );
      for (const referencedFragmentName of referencedFragmentNames) {
        if (comparedFragmentPairs.has(
          referencedFragmentName,
          fragmentName,
          areMutuallyExclusive
        )) {
          continue;
        }
        comparedFragmentPairs.add(
          referencedFragmentName,
          fragmentName,
          areMutuallyExclusive
        );
        collectConflictsBetweenFieldsAndFragment(
          context2,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFragmentPairs,
          areMutuallyExclusive,
          fieldMap,
          referencedFragmentName
        );
      }
    }
    function collectConflictsBetweenFragments(context2, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
      if (fragmentName1 === fragmentName2) {
        return;
      }
      if (comparedFragmentPairs.has(
        fragmentName1,
        fragmentName2,
        areMutuallyExclusive
      )) {
        return;
      }
      comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);
      const fragment1 = context2.getFragment(fragmentName1);
      const fragment2 = context2.getFragment(fragmentName2);
      if (!fragment1 || !fragment2) {
        return;
      }
      const [fieldMap1, referencedFragmentNames1] = getReferencedFieldsAndFragmentNames(
        context2,
        cachedFieldsAndFragmentNames,
        fragment1
      );
      const [fieldMap2, referencedFragmentNames2] = getReferencedFieldsAndFragmentNames(
        context2,
        cachedFieldsAndFragmentNames,
        fragment2
      );
      collectConflictsBetween(
        context2,
        conflicts,
        cachedFieldsAndFragmentNames,
        comparedFragmentPairs,
        areMutuallyExclusive,
        fieldMap1,
        fieldMap2
      );
      for (const referencedFragmentName2 of referencedFragmentNames2) {
        collectConflictsBetweenFragments(
          context2,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFragmentPairs,
          areMutuallyExclusive,
          fragmentName1,
          referencedFragmentName2
        );
      }
      for (const referencedFragmentName1 of referencedFragmentNames1) {
        collectConflictsBetweenFragments(
          context2,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFragmentPairs,
          areMutuallyExclusive,
          referencedFragmentName1,
          fragmentName2
        );
      }
    }
    function findConflictsBetweenSubSelectionSets(context2, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
      const conflicts = [];
      const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(
        context2,
        cachedFieldsAndFragmentNames,
        parentType1,
        selectionSet1
      );
      const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(
        context2,
        cachedFieldsAndFragmentNames,
        parentType2,
        selectionSet2
      );
      collectConflictsBetween(
        context2,
        conflicts,
        cachedFieldsAndFragmentNames,
        comparedFragmentPairs,
        areMutuallyExclusive,
        fieldMap1,
        fieldMap2
      );
      for (const fragmentName2 of fragmentNames2) {
        collectConflictsBetweenFieldsAndFragment(
          context2,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFragmentPairs,
          areMutuallyExclusive,
          fieldMap1,
          fragmentName2
        );
      }
      for (const fragmentName1 of fragmentNames1) {
        collectConflictsBetweenFieldsAndFragment(
          context2,
          conflicts,
          cachedFieldsAndFragmentNames,
          comparedFragmentPairs,
          areMutuallyExclusive,
          fieldMap2,
          fragmentName1
        );
      }
      for (const fragmentName1 of fragmentNames1) {
        for (const fragmentName2 of fragmentNames2) {
          collectConflictsBetweenFragments(
            context2,
            conflicts,
            cachedFieldsAndFragmentNames,
            comparedFragmentPairs,
            areMutuallyExclusive,
            fragmentName1,
            fragmentName2
          );
        }
      }
      return conflicts;
    }
    function collectConflictsWithin(context2, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {
      for (const [responseName, fields] of Object.entries(fieldMap)) {
        if (fields.length > 1) {
          for (let i = 0; i < fields.length; i++) {
            for (let j2 = i + 1; j2 < fields.length; j2++) {
              const conflict = findConflict(
                context2,
                cachedFieldsAndFragmentNames,
                comparedFragmentPairs,
                false,
                // within one collection is never mutually exclusive
                responseName,
                fields[i],
                fields[j2]
              );
              if (conflict) {
                conflicts.push(conflict);
              }
            }
          }
        }
      }
    }
    function collectConflictsBetween(context2, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
      for (const [responseName, fields1] of Object.entries(fieldMap1)) {
        const fields2 = fieldMap2[responseName];
        if (fields2) {
          for (const field1 of fields1) {
            for (const field2 of fields2) {
              const conflict = findConflict(
                context2,
                cachedFieldsAndFragmentNames,
                comparedFragmentPairs,
                parentFieldsAreMutuallyExclusive,
                responseName,
                field1,
                field2
              );
              if (conflict) {
                conflicts.push(conflict);
              }
            }
          }
        }
      }
    }
    function findConflict(context2, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
      const [parentType1, node1, def1] = field1;
      const [parentType2, node2, def2] = field2;
      const areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && (0, _definition.isObjectType)(parentType1) && (0, _definition.isObjectType)(parentType2);
      if (!areMutuallyExclusive) {
        const name1 = node1.name.value;
        const name2 = node2.name.value;
        if (name1 !== name2) {
          return [
            [responseName, `"${name1}" and "${name2}" are different fields`],
            [node1],
            [node2]
          ];
        }
        if (!sameArguments(node1, node2)) {
          return [
            [responseName, "they have differing arguments"],
            [node1],
            [node2]
          ];
        }
      }
      const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;
      const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;
      if (type1 && type2 && doTypesConflict(type1, type2)) {
        return [
          [
            responseName,
            `they return conflicting types "${(0, _inspect.inspect)(
              type1
            )}" and "${(0, _inspect.inspect)(type2)}"`
          ],
          [node1],
          [node2]
        ];
      }
      const selectionSet1 = node1.selectionSet;
      const selectionSet2 = node2.selectionSet;
      if (selectionSet1 && selectionSet2) {
        const conflicts = findConflictsBetweenSubSelectionSets(
          context2,
          cachedFieldsAndFragmentNames,
          comparedFragmentPairs,
          areMutuallyExclusive,
          (0, _definition.getNamedType)(type1),
          selectionSet1,
          (0, _definition.getNamedType)(type2),
          selectionSet2
        );
        return subfieldConflicts(conflicts, responseName, node1, node2);
      }
    }
    function sameArguments(node1, node2) {
      const args1 = node1.arguments;
      const args2 = node2.arguments;
      if (args1 === void 0 || args1.length === 0) {
        return args2 === void 0 || args2.length === 0;
      }
      if (args2 === void 0 || args2.length === 0) {
        return false;
      }
      if (args1.length !== args2.length) {
        return false;
      }
      const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));
      return args1.every((arg1) => {
        const value1 = arg1.value;
        const value2 = values2.get(arg1.name.value);
        if (value2 === void 0) {
          return false;
        }
        return stringifyValue(value1) === stringifyValue(value2);
      });
    }
    function stringifyValue(value) {
      return (0, _printer.print)((0, _sortValueNode.sortValueNode)(value));
    }
    function doTypesConflict(type1, type2) {
      if ((0, _definition.isListType)(type1)) {
        return (0, _definition.isListType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
      }
      if ((0, _definition.isListType)(type2)) {
        return true;
      }
      if ((0, _definition.isNonNullType)(type1)) {
        return (0, _definition.isNonNullType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
      }
      if ((0, _definition.isNonNullType)(type2)) {
        return true;
      }
      if ((0, _definition.isLeafType)(type1) || (0, _definition.isLeafType)(type2)) {
        return type1 !== type2;
      }
      return false;
    }
    function getFieldsAndFragmentNames(context2, cachedFieldsAndFragmentNames, parentType, selectionSet) {
      const cached = cachedFieldsAndFragmentNames.get(selectionSet);
      if (cached) {
        return cached;
      }
      const nodeAndDefs = /* @__PURE__ */ Object.create(null);
      const fragmentNames = /* @__PURE__ */ Object.create(null);
      _collectFieldsAndFragmentNames(
        context2,
        parentType,
        selectionSet,
        nodeAndDefs,
        fragmentNames
      );
      const result = [nodeAndDefs, Object.keys(fragmentNames)];
      cachedFieldsAndFragmentNames.set(selectionSet, result);
      return result;
    }
    function getReferencedFieldsAndFragmentNames(context2, cachedFieldsAndFragmentNames, fragment) {
      const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);
      if (cached) {
        return cached;
      }
      const fragmentType = (0, _typeFromAST.typeFromAST)(
        context2.getSchema(),
        fragment.typeCondition
      );
      return getFieldsAndFragmentNames(
        context2,
        cachedFieldsAndFragmentNames,
        fragmentType,
        fragment.selectionSet
      );
    }
    function _collectFieldsAndFragmentNames(context2, parentType, selectionSet, nodeAndDefs, fragmentNames) {
      for (const selection of selectionSet.selections) {
        switch (selection.kind) {
          case _kinds.Kind.FIELD: {
            const fieldName = selection.name.value;
            let fieldDef;
            if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
              fieldDef = parentType.getFields()[fieldName];
            }
            const responseName = selection.alias ? selection.alias.value : fieldName;
            if (!nodeAndDefs[responseName]) {
              nodeAndDefs[responseName] = [];
            }
            nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
            break;
          }
          case _kinds.Kind.FRAGMENT_SPREAD:
            fragmentNames[selection.name.value] = true;
            break;
          case _kinds.Kind.INLINE_FRAGMENT: {
            const typeCondition = selection.typeCondition;
            const inlineFragmentType = typeCondition ? (0, _typeFromAST.typeFromAST)(context2.getSchema(), typeCondition) : parentType;
            _collectFieldsAndFragmentNames(
              context2,
              inlineFragmentType,
              selection.selectionSet,
              nodeAndDefs,
              fragmentNames
            );
            break;
          }
        }
      }
    }
    function subfieldConflicts(conflicts, responseName, node1, node2) {
      if (conflicts.length > 0) {
        return [
          [responseName, conflicts.map(([reason]) => reason)],
          [node1, ...conflicts.map(([, fields1]) => fields1).flat()],
          [node2, ...conflicts.map(([, , fields2]) => fields2).flat()]
        ];
      }
    }
    var PairSet = class {
      constructor() {
        this._data = /* @__PURE__ */ new Map();
      }
      has(a, b2, areMutuallyExclusive) {
        var _this$_data$get;
        const [key1, key2] = a < b2 ? [a, b2] : [b2, a];
        const result = (_this$_data$get = this._data.get(key1)) === null || _this$_data$get === void 0 ? void 0 : _this$_data$get.get(key2);
        if (result === void 0) {
          return false;
        }
        return areMutuallyExclusive ? true : areMutuallyExclusive === result;
      }
      add(a, b2, areMutuallyExclusive) {
        const [key1, key2] = a < b2 ? [a, b2] : [b2, a];
        const map = this._data.get(key1);
        if (map === void 0) {
          this._data.set(key1, /* @__PURE__ */ new Map([[key2, areMutuallyExclusive]]));
        } else {
          map.set(key2, areMutuallyExclusive);
        }
      }
    };
  }
});

// node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.js
var require_PossibleFragmentSpreadsRule = __commonJS({
  "node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.PossibleFragmentSpreadsRule = PossibleFragmentSpreadsRule;
    var _inspect = require_inspect();
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    var _typeComparators = require_typeComparators();
    var _typeFromAST = require_typeFromAST();
    function PossibleFragmentSpreadsRule(context2) {
      return {
        InlineFragment(node) {
          const fragType = context2.getType();
          const parentType = context2.getParentType();
          if ((0, _definition.isCompositeType)(fragType) && (0, _definition.isCompositeType)(parentType) && !(0, _typeComparators.doTypesOverlap)(
            context2.getSchema(),
            fragType,
            parentType
          )) {
            const parentTypeStr = (0, _inspect.inspect)(parentType);
            const fragTypeStr = (0, _inspect.inspect)(fragType);
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Fragment cannot be spread here as objects of type "${parentTypeStr}" can never be of type "${fragTypeStr}".`,
                {
                  nodes: node
                }
              )
            );
          }
        },
        FragmentSpread(node) {
          const fragName = node.name.value;
          const fragType = getFragmentType(context2, fragName);
          const parentType = context2.getParentType();
          if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(
            context2.getSchema(),
            fragType,
            parentType
          )) {
            const parentTypeStr = (0, _inspect.inspect)(parentType);
            const fragTypeStr = (0, _inspect.inspect)(fragType);
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Fragment "${fragName}" cannot be spread here as objects of type "${parentTypeStr}" can never be of type "${fragTypeStr}".`,
                {
                  nodes: node
                }
              )
            );
          }
        }
      };
    }
    function getFragmentType(context2, name) {
      const frag = context2.getFragment(name);
      if (frag) {
        const type = (0, _typeFromAST.typeFromAST)(
          context2.getSchema(),
          frag.typeCondition
        );
        if ((0, _definition.isCompositeType)(type)) {
          return type;
        }
      }
    }
  }
});

// node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.js
var require_PossibleTypeExtensionsRule = __commonJS({
  "node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.PossibleTypeExtensionsRule = PossibleTypeExtensionsRule;
    var _didYouMean = require_didYouMean();
    var _inspect = require_inspect();
    var _invariant = require_invariant();
    var _suggestionList = require_suggestionList();
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _predicates = require_predicates();
    var _definition = require_definition();
    function PossibleTypeExtensionsRule(context2) {
      const schema = context2.getSchema();
      const definedTypes = /* @__PURE__ */ Object.create(null);
      for (const def of context2.getDocument().definitions) {
        if ((0, _predicates.isTypeDefinitionNode)(def)) {
          definedTypes[def.name.value] = def;
        }
      }
      return {
        ScalarTypeExtension: checkExtension,
        ObjectTypeExtension: checkExtension,
        InterfaceTypeExtension: checkExtension,
        UnionTypeExtension: checkExtension,
        EnumTypeExtension: checkExtension,
        InputObjectTypeExtension: checkExtension
      };
      function checkExtension(node) {
        const typeName = node.name.value;
        const defNode = definedTypes[typeName];
        const existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);
        let expectedKind;
        if (defNode) {
          expectedKind = defKindToExtKind[defNode.kind];
        } else if (existingType) {
          expectedKind = typeToExtKind(existingType);
        }
        if (expectedKind) {
          if (expectedKind !== node.kind) {
            const kindStr = extensionKindToTypeName(node.kind);
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Cannot extend non-${kindStr} type "${typeName}".`,
                {
                  nodes: defNode ? [defNode, node] : node
                }
              )
            );
          }
        } else {
          const allTypeNames = Object.keys({
            ...definedTypes,
            ...schema === null || schema === void 0 ? void 0 : schema.getTypeMap()
          });
          const suggestedTypes = (0, _suggestionList.suggestionList)(
            typeName,
            allTypeNames
          );
          context2.reportError(
            new _GraphQLError.GraphQLError(
              `Cannot extend type "${typeName}" because it is not defined.` + (0, _didYouMean.didYouMean)(suggestedTypes),
              {
                nodes: node.name
              }
            )
          );
        }
      }
    }
    var defKindToExtKind = {
      [_kinds.Kind.SCALAR_TYPE_DEFINITION]: _kinds.Kind.SCALAR_TYPE_EXTENSION,
      [_kinds.Kind.OBJECT_TYPE_DEFINITION]: _kinds.Kind.OBJECT_TYPE_EXTENSION,
      [_kinds.Kind.INTERFACE_TYPE_DEFINITION]: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
      [_kinds.Kind.UNION_TYPE_DEFINITION]: _kinds.Kind.UNION_TYPE_EXTENSION,
      [_kinds.Kind.ENUM_TYPE_DEFINITION]: _kinds.Kind.ENUM_TYPE_EXTENSION,
      [_kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION]: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION
    };
    function typeToExtKind(type) {
      if ((0, _definition.isScalarType)(type)) {
        return _kinds.Kind.SCALAR_TYPE_EXTENSION;
      }
      if ((0, _definition.isObjectType)(type)) {
        return _kinds.Kind.OBJECT_TYPE_EXTENSION;
      }
      if ((0, _definition.isInterfaceType)(type)) {
        return _kinds.Kind.INTERFACE_TYPE_EXTENSION;
      }
      if ((0, _definition.isUnionType)(type)) {
        return _kinds.Kind.UNION_TYPE_EXTENSION;
      }
      if ((0, _definition.isEnumType)(type)) {
        return _kinds.Kind.ENUM_TYPE_EXTENSION;
      }
      if ((0, _definition.isInputObjectType)(type)) {
        return _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
      }
      (0, _invariant.invariant)(
        false,
        "Unexpected type: " + (0, _inspect.inspect)(type)
      );
    }
    function extensionKindToTypeName(kind) {
      switch (kind) {
        case _kinds.Kind.SCALAR_TYPE_EXTENSION:
          return "scalar";
        case _kinds.Kind.OBJECT_TYPE_EXTENSION:
          return "object";
        case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
          return "interface";
        case _kinds.Kind.UNION_TYPE_EXTENSION:
          return "union";
        case _kinds.Kind.ENUM_TYPE_EXTENSION:
          return "enum";
        case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
          return "input object";
        // Not reachable. All possible types have been considered
        /* c8 ignore next */
        default:
          (0, _invariant.invariant)(
            false,
            "Unexpected kind: " + (0, _inspect.inspect)(kind)
          );
      }
    }
  }
});

// node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.js
var require_ProvidedRequiredArgumentsRule = __commonJS({
  "node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ProvidedRequiredArgumentsOnDirectivesRule = ProvidedRequiredArgumentsOnDirectivesRule;
    exports2.ProvidedRequiredArgumentsRule = ProvidedRequiredArgumentsRule;
    var _inspect = require_inspect();
    var _keyMap = require_keyMap();
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _printer = require_printer();
    var _definition = require_definition();
    var _directives = require_directives();
    function ProvidedRequiredArgumentsRule(context2) {
      return {
        // eslint-disable-next-line new-cap
        ...ProvidedRequiredArgumentsOnDirectivesRule(context2),
        Field: {
          // Validate on leave to allow for deeper errors to appear first.
          leave(fieldNode) {
            var _fieldNode$arguments;
            const fieldDef = context2.getFieldDef();
            if (!fieldDef) {
              return false;
            }
            const providedArgs = new Set(
              // FIXME: https://github.com/graphql/graphql-js/issues/2203
              /* c8 ignore next */
              (_fieldNode$arguments = fieldNode.arguments) === null || _fieldNode$arguments === void 0 ? void 0 : _fieldNode$arguments.map((arg) => arg.name.value)
            );
            for (const argDef of fieldDef.args) {
              if (!providedArgs.has(argDef.name) && (0, _definition.isRequiredArgument)(argDef)) {
                const argTypeStr = (0, _inspect.inspect)(argDef.type);
                context2.reportError(
                  new _GraphQLError.GraphQLError(
                    `Field "${fieldDef.name}" argument "${argDef.name}" of type "${argTypeStr}" is required, but it was not provided.`,
                    {
                      nodes: fieldNode
                    }
                  )
                );
              }
            }
          }
        }
      };
    }
    function ProvidedRequiredArgumentsOnDirectivesRule(context2) {
      var _schema$getDirectives;
      const requiredArgsMap = /* @__PURE__ */ Object.create(null);
      const schema = context2.getSchema();
      const definedDirectives = (_schema$getDirectives = schema === null || schema === void 0 ? void 0 : schema.getDirectives()) !== null && _schema$getDirectives !== void 0 ? _schema$getDirectives : _directives.specifiedDirectives;
      for (const directive of definedDirectives) {
        requiredArgsMap[directive.name] = (0, _keyMap.keyMap)(
          directive.args.filter(_definition.isRequiredArgument),
          (arg) => arg.name
        );
      }
      const astDefinitions = context2.getDocument().definitions;
      for (const def of astDefinitions) {
        if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          var _def$arguments;
          const argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
          requiredArgsMap[def.name.value] = (0, _keyMap.keyMap)(
            argNodes.filter(isRequiredArgumentNode),
            (arg) => arg.name.value
          );
        }
      }
      return {
        Directive: {
          // Validate on leave to allow for deeper errors to appear first.
          leave(directiveNode) {
            const directiveName = directiveNode.name.value;
            const requiredArgs = requiredArgsMap[directiveName];
            if (requiredArgs) {
              var _directiveNode$argume;
              const argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];
              const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));
              for (const [argName, argDef] of Object.entries(requiredArgs)) {
                if (!argNodeMap.has(argName)) {
                  const argType = (0, _definition.isType)(argDef.type) ? (0, _inspect.inspect)(argDef.type) : (0, _printer.print)(argDef.type);
                  context2.reportError(
                    new _GraphQLError.GraphQLError(
                      `Directive "@${directiveName}" argument "${argName}" of type "${argType}" is required, but it was not provided.`,
                      {
                        nodes: directiveNode
                      }
                    )
                  );
                }
              }
            }
          }
        }
      };
    }
    function isRequiredArgumentNode(arg) {
      return arg.type.kind === _kinds.Kind.NON_NULL_TYPE && arg.defaultValue == null;
    }
  }
});

// node_modules/graphql/validation/rules/ScalarLeafsRule.js
var require_ScalarLeafsRule = __commonJS({
  "node_modules/graphql/validation/rules/ScalarLeafsRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ScalarLeafsRule = ScalarLeafsRule;
    var _inspect = require_inspect();
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    function ScalarLeafsRule(context2) {
      return {
        Field(node) {
          const type = context2.getType();
          const selectionSet = node.selectionSet;
          if (type) {
            if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {
              if (selectionSet) {
                const fieldName = node.name.value;
                const typeStr = (0, _inspect.inspect)(type);
                context2.reportError(
                  new _GraphQLError.GraphQLError(
                    `Field "${fieldName}" must not have a selection since type "${typeStr}" has no subfields.`,
                    {
                      nodes: selectionSet
                    }
                  )
                );
              }
            } else if (!selectionSet) {
              const fieldName = node.name.value;
              const typeStr = (0, _inspect.inspect)(type);
              context2.reportError(
                new _GraphQLError.GraphQLError(
                  `Field "${fieldName}" of type "${typeStr}" must have a selection of subfields. Did you mean "${fieldName} { ... }"?`,
                  {
                    nodes: node
                  }
                )
              );
            }
          }
        }
      };
    }
  }
});

// node_modules/graphql/jsutils/printPathArray.js
var require_printPathArray = __commonJS({
  "node_modules/graphql/jsutils/printPathArray.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.printPathArray = printPathArray;
    function printPathArray(path2) {
      return path2.map(
        (key) => typeof key === "number" ? "[" + key.toString() + "]" : "." + key
      ).join("");
    }
  }
});

// node_modules/graphql/jsutils/Path.js
var require_Path = __commonJS({
  "node_modules/graphql/jsutils/Path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.addPath = addPath;
    exports2.pathToArray = pathToArray;
    function addPath(prev, key, typename) {
      return {
        prev,
        key,
        typename
      };
    }
    function pathToArray(path2) {
      const flattened = [];
      let curr = path2;
      while (curr) {
        flattened.push(curr.key);
        curr = curr.prev;
      }
      return flattened.reverse();
    }
  }
});

// node_modules/graphql/utilities/coerceInputValue.js
var require_coerceInputValue = __commonJS({
  "node_modules/graphql/utilities/coerceInputValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.coerceInputValue = coerceInputValue;
    var _didYouMean = require_didYouMean();
    var _inspect = require_inspect();
    var _invariant = require_invariant();
    var _isIterableObject = require_isIterableObject();
    var _isObjectLike = require_isObjectLike();
    var _Path = require_Path();
    var _printPathArray = require_printPathArray();
    var _suggestionList = require_suggestionList();
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    function coerceInputValue(inputValue, type, onError = defaultOnError) {
      return coerceInputValueImpl(inputValue, type, onError, void 0);
    }
    function defaultOnError(path2, invalidValue, error) {
      let errorPrefix = "Invalid value " + (0, _inspect.inspect)(invalidValue);
      if (path2.length > 0) {
        errorPrefix += ` at "value${(0, _printPathArray.printPathArray)(path2)}"`;
      }
      error.message = errorPrefix + ": " + error.message;
      throw error;
    }
    function coerceInputValueImpl(inputValue, type, onError, path2) {
      if ((0, _definition.isNonNullType)(type)) {
        if (inputValue != null) {
          return coerceInputValueImpl(inputValue, type.ofType, onError, path2);
        }
        onError(
          (0, _Path.pathToArray)(path2),
          inputValue,
          new _GraphQLError.GraphQLError(
            `Expected non-nullable type "${(0, _inspect.inspect)(
              type
            )}" not to be null.`
          )
        );
        return;
      }
      if (inputValue == null) {
        return null;
      }
      if ((0, _definition.isListType)(type)) {
        const itemType = type.ofType;
        if ((0, _isIterableObject.isIterableObject)(inputValue)) {
          return Array.from(inputValue, (itemValue, index) => {
            const itemPath = (0, _Path.addPath)(path2, index, void 0);
            return coerceInputValueImpl(itemValue, itemType, onError, itemPath);
          });
        }
        return [coerceInputValueImpl(inputValue, itemType, onError, path2)];
      }
      if ((0, _definition.isInputObjectType)(type)) {
        if (!(0, _isObjectLike.isObjectLike)(inputValue)) {
          onError(
            (0, _Path.pathToArray)(path2),
            inputValue,
            new _GraphQLError.GraphQLError(
              `Expected type "${type.name}" to be an object.`
            )
          );
          return;
        }
        const coercedValue = {};
        const fieldDefs = type.getFields();
        for (const field of Object.values(fieldDefs)) {
          const fieldValue = inputValue[field.name];
          if (fieldValue === void 0) {
            if (field.defaultValue !== void 0) {
              coercedValue[field.name] = field.defaultValue;
            } else if ((0, _definition.isNonNullType)(field.type)) {
              const typeStr = (0, _inspect.inspect)(field.type);
              onError(
                (0, _Path.pathToArray)(path2),
                inputValue,
                new _GraphQLError.GraphQLError(
                  `Field "${field.name}" of required type "${typeStr}" was not provided.`
                )
              );
            }
            continue;
          }
          coercedValue[field.name] = coerceInputValueImpl(
            fieldValue,
            field.type,
            onError,
            (0, _Path.addPath)(path2, field.name, type.name)
          );
        }
        for (const fieldName of Object.keys(inputValue)) {
          if (!fieldDefs[fieldName]) {
            const suggestions = (0, _suggestionList.suggestionList)(
              fieldName,
              Object.keys(type.getFields())
            );
            onError(
              (0, _Path.pathToArray)(path2),
              inputValue,
              new _GraphQLError.GraphQLError(
                `Field "${fieldName}" is not defined by type "${type.name}".` + (0, _didYouMean.didYouMean)(suggestions)
              )
            );
          }
        }
        if (type.isOneOf) {
          const keys = Object.keys(coercedValue);
          if (keys.length !== 1) {
            onError(
              (0, _Path.pathToArray)(path2),
              inputValue,
              new _GraphQLError.GraphQLError(
                `Exactly one key must be specified for OneOf type "${type.name}".`
              )
            );
          }
          const key = keys[0];
          const value = coercedValue[key];
          if (value === null) {
            onError(
              (0, _Path.pathToArray)(path2).concat(key),
              value,
              new _GraphQLError.GraphQLError(`Field "${key}" must be non-null.`)
            );
          }
        }
        return coercedValue;
      }
      if ((0, _definition.isLeafType)(type)) {
        let parseResult;
        try {
          parseResult = type.parseValue(inputValue);
        } catch (error) {
          if (error instanceof _GraphQLError.GraphQLError) {
            onError((0, _Path.pathToArray)(path2), inputValue, error);
          } else {
            onError(
              (0, _Path.pathToArray)(path2),
              inputValue,
              new _GraphQLError.GraphQLError(
                `Expected type "${type.name}". ` + error.message,
                {
                  originalError: error
                }
              )
            );
          }
          return;
        }
        if (parseResult === void 0) {
          onError(
            (0, _Path.pathToArray)(path2),
            inputValue,
            new _GraphQLError.GraphQLError(`Expected type "${type.name}".`)
          );
        }
        return parseResult;
      }
      (0, _invariant.invariant)(
        false,
        "Unexpected input type: " + (0, _inspect.inspect)(type)
      );
    }
  }
});

// node_modules/graphql/utilities/valueFromAST.js
var require_valueFromAST = __commonJS({
  "node_modules/graphql/utilities/valueFromAST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.valueFromAST = valueFromAST;
    var _inspect = require_inspect();
    var _invariant = require_invariant();
    var _keyMap = require_keyMap();
    var _kinds = require_kinds();
    var _definition = require_definition();
    function valueFromAST(valueNode, type, variables) {
      if (!valueNode) {
        return;
      }
      if (valueNode.kind === _kinds.Kind.VARIABLE) {
        const variableName = valueNode.name.value;
        if (variables == null || variables[variableName] === void 0) {
          return;
        }
        const variableValue = variables[variableName];
        if (variableValue === null && (0, _definition.isNonNullType)(type)) {
          return;
        }
        return variableValue;
      }
      if ((0, _definition.isNonNullType)(type)) {
        if (valueNode.kind === _kinds.Kind.NULL) {
          return;
        }
        return valueFromAST(valueNode, type.ofType, variables);
      }
      if (valueNode.kind === _kinds.Kind.NULL) {
        return null;
      }
      if ((0, _definition.isListType)(type)) {
        const itemType = type.ofType;
        if (valueNode.kind === _kinds.Kind.LIST) {
          const coercedValues = [];
          for (const itemNode of valueNode.values) {
            if (isMissingVariable(itemNode, variables)) {
              if ((0, _definition.isNonNullType)(itemType)) {
                return;
              }
              coercedValues.push(null);
            } else {
              const itemValue = valueFromAST(itemNode, itemType, variables);
              if (itemValue === void 0) {
                return;
              }
              coercedValues.push(itemValue);
            }
          }
          return coercedValues;
        }
        const coercedValue = valueFromAST(valueNode, itemType, variables);
        if (coercedValue === void 0) {
          return;
        }
        return [coercedValue];
      }
      if ((0, _definition.isInputObjectType)(type)) {
        if (valueNode.kind !== _kinds.Kind.OBJECT) {
          return;
        }
        const coercedObj = /* @__PURE__ */ Object.create(null);
        const fieldNodes = (0, _keyMap.keyMap)(
          valueNode.fields,
          (field) => field.name.value
        );
        for (const field of Object.values(type.getFields())) {
          const fieldNode = fieldNodes[field.name];
          if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
            if (field.defaultValue !== void 0) {
              coercedObj[field.name] = field.defaultValue;
            } else if ((0, _definition.isNonNullType)(field.type)) {
              return;
            }
            continue;
          }
          const fieldValue = valueFromAST(fieldNode.value, field.type, variables);
          if (fieldValue === void 0) {
            return;
          }
          coercedObj[field.name] = fieldValue;
        }
        if (type.isOneOf) {
          const keys = Object.keys(coercedObj);
          if (keys.length !== 1) {
            return;
          }
          if (coercedObj[keys[0]] === null) {
            return;
          }
        }
        return coercedObj;
      }
      if ((0, _definition.isLeafType)(type)) {
        let result;
        try {
          result = type.parseLiteral(valueNode, variables);
        } catch (_error) {
          return;
        }
        if (result === void 0) {
          return;
        }
        return result;
      }
      (0, _invariant.invariant)(
        false,
        "Unexpected input type: " + (0, _inspect.inspect)(type)
      );
    }
    function isMissingVariable(valueNode, variables) {
      return valueNode.kind === _kinds.Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === void 0);
    }
  }
});

// node_modules/graphql/execution/values.js
var require_values = __commonJS({
  "node_modules/graphql/execution/values.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getArgumentValues = getArgumentValues;
    exports2.getDirectiveValues = getDirectiveValues;
    exports2.getVariableValues = getVariableValues;
    var _inspect = require_inspect();
    var _keyMap = require_keyMap();
    var _printPathArray = require_printPathArray();
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _printer = require_printer();
    var _definition = require_definition();
    var _coerceInputValue = require_coerceInputValue();
    var _typeFromAST = require_typeFromAST();
    var _valueFromAST = require_valueFromAST();
    function getVariableValues(schema, varDefNodes, inputs, options) {
      const errors = [];
      const maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;
      try {
        const coerced = coerceVariableValues(
          schema,
          varDefNodes,
          inputs,
          (error) => {
            if (maxErrors != null && errors.length >= maxErrors) {
              throw new _GraphQLError.GraphQLError(
                "Too many errors processing variables, error limit reached. Execution aborted."
              );
            }
            errors.push(error);
          }
        );
        if (errors.length === 0) {
          return {
            coerced
          };
        }
      } catch (error) {
        errors.push(error);
      }
      return {
        errors
      };
    }
    function coerceVariableValues(schema, varDefNodes, inputs, onError) {
      const coercedValues = {};
      for (const varDefNode of varDefNodes) {
        const varName = varDefNode.variable.name.value;
        const varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);
        if (!(0, _definition.isInputType)(varType)) {
          const varTypeStr = (0, _printer.print)(varDefNode.type);
          onError(
            new _GraphQLError.GraphQLError(
              `Variable "$${varName}" expected value of type "${varTypeStr}" which cannot be used as an input type.`,
              {
                nodes: varDefNode.type
              }
            )
          );
          continue;
        }
        if (!hasOwnProperty(inputs, varName)) {
          if (varDefNode.defaultValue) {
            coercedValues[varName] = (0, _valueFromAST.valueFromAST)(
              varDefNode.defaultValue,
              varType
            );
          } else if ((0, _definition.isNonNullType)(varType)) {
            const varTypeStr = (0, _inspect.inspect)(varType);
            onError(
              new _GraphQLError.GraphQLError(
                `Variable "$${varName}" of required type "${varTypeStr}" was not provided.`,
                {
                  nodes: varDefNode
                }
              )
            );
          }
          continue;
        }
        const value = inputs[varName];
        if (value === null && (0, _definition.isNonNullType)(varType)) {
          const varTypeStr = (0, _inspect.inspect)(varType);
          onError(
            new _GraphQLError.GraphQLError(
              `Variable "$${varName}" of non-null type "${varTypeStr}" must not be null.`,
              {
                nodes: varDefNode
              }
            )
          );
          continue;
        }
        coercedValues[varName] = (0, _coerceInputValue.coerceInputValue)(
          value,
          varType,
          (path2, invalidValue, error) => {
            let prefix = `Variable "$${varName}" got invalid value ` + (0, _inspect.inspect)(invalidValue);
            if (path2.length > 0) {
              prefix += ` at "${varName}${(0, _printPathArray.printPathArray)(
                path2
              )}"`;
            }
            onError(
              new _GraphQLError.GraphQLError(prefix + "; " + error.message, {
                nodes: varDefNode,
                originalError: error
              })
            );
          }
        );
      }
      return coercedValues;
    }
    function getArgumentValues(def, node, variableValues) {
      var _node$arguments;
      const coercedValues = {};
      const argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];
      const argNodeMap = (0, _keyMap.keyMap)(
        argumentNodes,
        (arg) => arg.name.value
      );
      for (const argDef of def.args) {
        const name = argDef.name;
        const argType = argDef.type;
        const argumentNode = argNodeMap[name];
        if (!argumentNode) {
          if (argDef.defaultValue !== void 0) {
            coercedValues[name] = argDef.defaultValue;
          } else if ((0, _definition.isNonNullType)(argType)) {
            throw new _GraphQLError.GraphQLError(
              `Argument "${name}" of required type "${(0, _inspect.inspect)(
                argType
              )}" was not provided.`,
              {
                nodes: node
              }
            );
          }
          continue;
        }
        const valueNode = argumentNode.value;
        let isNull = valueNode.kind === _kinds.Kind.NULL;
        if (valueNode.kind === _kinds.Kind.VARIABLE) {
          const variableName = valueNode.name.value;
          if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {
            if (argDef.defaultValue !== void 0) {
              coercedValues[name] = argDef.defaultValue;
            } else if ((0, _definition.isNonNullType)(argType)) {
              throw new _GraphQLError.GraphQLError(
                `Argument "${name}" of required type "${(0, _inspect.inspect)(
                  argType
                )}" was provided the variable "$${variableName}" which was not provided a runtime value.`,
                {
                  nodes: valueNode
                }
              );
            }
            continue;
          }
          isNull = variableValues[variableName] == null;
        }
        if (isNull && (0, _definition.isNonNullType)(argType)) {
          throw new _GraphQLError.GraphQLError(
            `Argument "${name}" of non-null type "${(0, _inspect.inspect)(
              argType
            )}" must not be null.`,
            {
              nodes: valueNode
            }
          );
        }
        const coercedValue = (0, _valueFromAST.valueFromAST)(
          valueNode,
          argType,
          variableValues
        );
        if (coercedValue === void 0) {
          throw new _GraphQLError.GraphQLError(
            `Argument "${name}" has invalid value ${(0, _printer.print)(
              valueNode
            )}.`,
            {
              nodes: valueNode
            }
          );
        }
        coercedValues[name] = coercedValue;
      }
      return coercedValues;
    }
    function getDirectiveValues(directiveDef, node, variableValues) {
      var _node$directives;
      const directiveNode = (_node$directives = node.directives) === null || _node$directives === void 0 ? void 0 : _node$directives.find(
        (directive) => directive.name.value === directiveDef.name
      );
      if (directiveNode) {
        return getArgumentValues(directiveDef, directiveNode, variableValues);
      }
    }
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
  }
});

// node_modules/graphql/execution/collectFields.js
var require_collectFields = __commonJS({
  "node_modules/graphql/execution/collectFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.collectFields = collectFields;
    exports2.collectSubfields = collectSubfields;
    var _kinds = require_kinds();
    var _definition = require_definition();
    var _directives = require_directives();
    var _typeFromAST = require_typeFromAST();
    var _values = require_values();
    function collectFields(schema, fragments, variableValues, runtimeType, selectionSet) {
      const fields = /* @__PURE__ */ new Map();
      collectFieldsImpl(
        schema,
        fragments,
        variableValues,
        runtimeType,
        selectionSet,
        fields,
        /* @__PURE__ */ new Set()
      );
      return fields;
    }
    function collectSubfields(schema, fragments, variableValues, returnType, fieldNodes) {
      const subFieldNodes = /* @__PURE__ */ new Map();
      const visitedFragmentNames = /* @__PURE__ */ new Set();
      for (const node of fieldNodes) {
        if (node.selectionSet) {
          collectFieldsImpl(
            schema,
            fragments,
            variableValues,
            returnType,
            node.selectionSet,
            subFieldNodes,
            visitedFragmentNames
          );
        }
      }
      return subFieldNodes;
    }
    function collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, visitedFragmentNames) {
      for (const selection of selectionSet.selections) {
        switch (selection.kind) {
          case _kinds.Kind.FIELD: {
            if (!shouldIncludeNode(variableValues, selection)) {
              continue;
            }
            const name = getFieldEntryKey(selection);
            const fieldList = fields.get(name);
            if (fieldList !== void 0) {
              fieldList.push(selection);
            } else {
              fields.set(name, [selection]);
            }
            break;
          }
          case _kinds.Kind.INLINE_FRAGMENT: {
            if (!shouldIncludeNode(variableValues, selection) || !doesFragmentConditionMatch(schema, selection, runtimeType)) {
              continue;
            }
            collectFieldsImpl(
              schema,
              fragments,
              variableValues,
              runtimeType,
              selection.selectionSet,
              fields,
              visitedFragmentNames
            );
            break;
          }
          case _kinds.Kind.FRAGMENT_SPREAD: {
            const fragName = selection.name.value;
            if (visitedFragmentNames.has(fragName) || !shouldIncludeNode(variableValues, selection)) {
              continue;
            }
            visitedFragmentNames.add(fragName);
            const fragment = fragments[fragName];
            if (!fragment || !doesFragmentConditionMatch(schema, fragment, runtimeType)) {
              continue;
            }
            collectFieldsImpl(
              schema,
              fragments,
              variableValues,
              runtimeType,
              fragment.selectionSet,
              fields,
              visitedFragmentNames
            );
            break;
          }
        }
      }
    }
    function shouldIncludeNode(variableValues, node) {
      const skip2 = (0, _values.getDirectiveValues)(
        _directives.GraphQLSkipDirective,
        node,
        variableValues
      );
      if ((skip2 === null || skip2 === void 0 ? void 0 : skip2.if) === true) {
        return false;
      }
      const include = (0, _values.getDirectiveValues)(
        _directives.GraphQLIncludeDirective,
        node,
        variableValues
      );
      if ((include === null || include === void 0 ? void 0 : include.if) === false) {
        return false;
      }
      return true;
    }
    function doesFragmentConditionMatch(schema, fragment, type) {
      const typeConditionNode = fragment.typeCondition;
      if (!typeConditionNode) {
        return true;
      }
      const conditionalType = (0, _typeFromAST.typeFromAST)(
        schema,
        typeConditionNode
      );
      if (conditionalType === type) {
        return true;
      }
      if ((0, _definition.isAbstractType)(conditionalType)) {
        return schema.isSubType(conditionalType, type);
      }
      return false;
    }
    function getFieldEntryKey(node) {
      return node.alias ? node.alias.value : node.name.value;
    }
  }
});

// node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.js
var require_SingleFieldSubscriptionsRule = __commonJS({
  "node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _collectFields = require_collectFields();
    function SingleFieldSubscriptionsRule(context2) {
      return {
        OperationDefinition(node) {
          if (node.operation === "subscription") {
            const schema = context2.getSchema();
            const subscriptionType = schema.getSubscriptionType();
            if (subscriptionType) {
              const operationName = node.name ? node.name.value : null;
              const variableValues = /* @__PURE__ */ Object.create(null);
              const document = context2.getDocument();
              const fragments = /* @__PURE__ */ Object.create(null);
              for (const definition of document.definitions) {
                if (definition.kind === _kinds.Kind.FRAGMENT_DEFINITION) {
                  fragments[definition.name.value] = definition;
                }
              }
              const fields = (0, _collectFields.collectFields)(
                schema,
                fragments,
                variableValues,
                subscriptionType,
                node.selectionSet
              );
              if (fields.size > 1) {
                const fieldSelectionLists = [...fields.values()];
                const extraFieldSelectionLists = fieldSelectionLists.slice(1);
                const extraFieldSelections = extraFieldSelectionLists.flat();
                context2.reportError(
                  new _GraphQLError.GraphQLError(
                    operationName != null ? `Subscription "${operationName}" must select only one top level field.` : "Anonymous Subscription must select only one top level field.",
                    {
                      nodes: extraFieldSelections
                    }
                  )
                );
              }
              for (const fieldNodes of fields.values()) {
                const field = fieldNodes[0];
                const fieldName = field.name.value;
                if (fieldName.startsWith("__")) {
                  context2.reportError(
                    new _GraphQLError.GraphQLError(
                      operationName != null ? `Subscription "${operationName}" must not select an introspection top level field.` : "Anonymous Subscription must not select an introspection top level field.",
                      {
                        nodes: fieldNodes
                      }
                    )
                  );
                }
              }
            }
          }
        }
      };
    }
  }
});

// node_modules/graphql/jsutils/groupBy.js
var require_groupBy = __commonJS({
  "node_modules/graphql/jsutils/groupBy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.groupBy = groupBy;
    function groupBy(list, keyFn) {
      const result = /* @__PURE__ */ new Map();
      for (const item of list) {
        const key = keyFn(item);
        const group = result.get(key);
        if (group === void 0) {
          result.set(key, [item]);
        } else {
          group.push(item);
        }
      }
      return result;
    }
  }
});

// node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.js
var require_UniqueArgumentDefinitionNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.UniqueArgumentDefinitionNamesRule = UniqueArgumentDefinitionNamesRule;
    var _groupBy = require_groupBy();
    var _GraphQLError = require_GraphQLError();
    function UniqueArgumentDefinitionNamesRule(context2) {
      return {
        DirectiveDefinition(directiveNode) {
          var _directiveNode$argume;
          const argumentNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];
          return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);
        },
        InterfaceTypeDefinition: checkArgUniquenessPerField,
        InterfaceTypeExtension: checkArgUniquenessPerField,
        ObjectTypeDefinition: checkArgUniquenessPerField,
        ObjectTypeExtension: checkArgUniquenessPerField
      };
      function checkArgUniquenessPerField(typeNode) {
        var _typeNode$fields;
        const typeName = typeNode.name.value;
        const fieldNodes = (_typeNode$fields = typeNode.fields) !== null && _typeNode$fields !== void 0 ? _typeNode$fields : [];
        for (const fieldDef of fieldNodes) {
          var _fieldDef$arguments;
          const fieldName = fieldDef.name.value;
          const argumentNodes = (_fieldDef$arguments = fieldDef.arguments) !== null && _fieldDef$arguments !== void 0 ? _fieldDef$arguments : [];
          checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);
        }
        return false;
      }
      function checkArgUniqueness(parentName, argumentNodes) {
        const seenArgs = (0, _groupBy.groupBy)(
          argumentNodes,
          (arg) => arg.name.value
        );
        for (const [argName, argNodes] of seenArgs) {
          if (argNodes.length > 1) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Argument "${parentName}(${argName}:)" can only be defined once.`,
                {
                  nodes: argNodes.map((node) => node.name)
                }
              )
            );
          }
        }
        return false;
      }
    }
  }
});

// node_modules/graphql/validation/rules/UniqueArgumentNamesRule.js
var require_UniqueArgumentNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueArgumentNamesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.UniqueArgumentNamesRule = UniqueArgumentNamesRule;
    var _groupBy = require_groupBy();
    var _GraphQLError = require_GraphQLError();
    function UniqueArgumentNamesRule(context2) {
      return {
        Field: checkArgUniqueness,
        Directive: checkArgUniqueness
      };
      function checkArgUniqueness(parentNode) {
        var _parentNode$arguments;
        const argumentNodes = (_parentNode$arguments = parentNode.arguments) !== null && _parentNode$arguments !== void 0 ? _parentNode$arguments : [];
        const seenArgs = (0, _groupBy.groupBy)(
          argumentNodes,
          (arg) => arg.name.value
        );
        for (const [argName, argNodes] of seenArgs) {
          if (argNodes.length > 1) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `There can be only one argument named "${argName}".`,
                {
                  nodes: argNodes.map((node) => node.name)
                }
              )
            );
          }
        }
      }
    }
  }
});

// node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.js
var require_UniqueDirectiveNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.UniqueDirectiveNamesRule = UniqueDirectiveNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueDirectiveNamesRule(context2) {
      const knownDirectiveNames = /* @__PURE__ */ Object.create(null);
      const schema = context2.getSchema();
      return {
        DirectiveDefinition(node) {
          const directiveName = node.name.value;
          if (schema !== null && schema !== void 0 && schema.getDirective(directiveName)) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Directive "@${directiveName}" already exists in the schema. It cannot be redefined.`,
                {
                  nodes: node.name
                }
              )
            );
            return;
          }
          if (knownDirectiveNames[directiveName]) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `There can be only one directive named "@${directiveName}".`,
                {
                  nodes: [knownDirectiveNames[directiveName], node.name]
                }
              )
            );
          } else {
            knownDirectiveNames[directiveName] = node.name;
          }
          return false;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.js
var require_UniqueDirectivesPerLocationRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule;
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _predicates = require_predicates();
    var _directives = require_directives();
    function UniqueDirectivesPerLocationRule(context2) {
      const uniqueDirectiveMap = /* @__PURE__ */ Object.create(null);
      const schema = context2.getSchema();
      const definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;
      for (const directive of definedDirectives) {
        uniqueDirectiveMap[directive.name] = !directive.isRepeatable;
      }
      const astDefinitions = context2.getDocument().definitions;
      for (const def of astDefinitions) {
        if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          uniqueDirectiveMap[def.name.value] = !def.repeatable;
        }
      }
      const schemaDirectives = /* @__PURE__ */ Object.create(null);
      const typeDirectivesMap = /* @__PURE__ */ Object.create(null);
      return {
        // Many different AST nodes may contain directives. Rather than listing
        // them all, just listen for entering any node, and check to see if it
        // defines any directives.
        enter(node) {
          if (!("directives" in node) || !node.directives) {
            return;
          }
          let seenDirectives;
          if (node.kind === _kinds.Kind.SCHEMA_DEFINITION || node.kind === _kinds.Kind.SCHEMA_EXTENSION) {
            seenDirectives = schemaDirectives;
          } else if ((0, _predicates.isTypeDefinitionNode)(node) || (0, _predicates.isTypeExtensionNode)(node)) {
            const typeName = node.name.value;
            seenDirectives = typeDirectivesMap[typeName];
            if (seenDirectives === void 0) {
              typeDirectivesMap[typeName] = seenDirectives = /* @__PURE__ */ Object.create(null);
            }
          } else {
            seenDirectives = /* @__PURE__ */ Object.create(null);
          }
          for (const directive of node.directives) {
            const directiveName = directive.name.value;
            if (uniqueDirectiveMap[directiveName]) {
              if (seenDirectives[directiveName]) {
                context2.reportError(
                  new _GraphQLError.GraphQLError(
                    `The directive "@${directiveName}" can only be used once at this location.`,
                    {
                      nodes: [seenDirectives[directiveName], directive]
                    }
                  )
                );
              } else {
                seenDirectives[directiveName] = directive;
              }
            }
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.js
var require_UniqueEnumValueNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.UniqueEnumValueNamesRule = UniqueEnumValueNamesRule;
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    function UniqueEnumValueNamesRule(context2) {
      const schema = context2.getSchema();
      const existingTypeMap = schema ? schema.getTypeMap() : /* @__PURE__ */ Object.create(null);
      const knownValueNames = /* @__PURE__ */ Object.create(null);
      return {
        EnumTypeDefinition: checkValueUniqueness,
        EnumTypeExtension: checkValueUniqueness
      };
      function checkValueUniqueness(node) {
        var _node$values;
        const typeName = node.name.value;
        if (!knownValueNames[typeName]) {
          knownValueNames[typeName] = /* @__PURE__ */ Object.create(null);
        }
        const valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
        const valueNames = knownValueNames[typeName];
        for (const valueDef of valueNodes) {
          const valueName = valueDef.name.value;
          const existingType = existingTypeMap[typeName];
          if ((0, _definition.isEnumType)(existingType) && existingType.getValue(valueName)) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Enum value "${typeName}.${valueName}" already exists in the schema. It cannot also be defined in this type extension.`,
                {
                  nodes: valueDef.name
                }
              )
            );
          } else if (valueNames[valueName]) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Enum value "${typeName}.${valueName}" can only be defined once.`,
                {
                  nodes: [valueNames[valueName], valueDef.name]
                }
              )
            );
          } else {
            valueNames[valueName] = valueDef.name;
          }
        }
        return false;
      }
    }
  }
});

// node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.js
var require_UniqueFieldDefinitionNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule;
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    function UniqueFieldDefinitionNamesRule(context2) {
      const schema = context2.getSchema();
      const existingTypeMap = schema ? schema.getTypeMap() : /* @__PURE__ */ Object.create(null);
      const knownFieldNames = /* @__PURE__ */ Object.create(null);
      return {
        InputObjectTypeDefinition: checkFieldUniqueness,
        InputObjectTypeExtension: checkFieldUniqueness,
        InterfaceTypeDefinition: checkFieldUniqueness,
        InterfaceTypeExtension: checkFieldUniqueness,
        ObjectTypeDefinition: checkFieldUniqueness,
        ObjectTypeExtension: checkFieldUniqueness
      };
      function checkFieldUniqueness(node) {
        var _node$fields;
        const typeName = node.name.value;
        if (!knownFieldNames[typeName]) {
          knownFieldNames[typeName] = /* @__PURE__ */ Object.create(null);
        }
        const fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
        const fieldNames = knownFieldNames[typeName];
        for (const fieldDef of fieldNodes) {
          const fieldName = fieldDef.name.value;
          if (hasField(existingTypeMap[typeName], fieldName)) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Field "${typeName}.${fieldName}" already exists in the schema. It cannot also be defined in this type extension.`,
                {
                  nodes: fieldDef.name
                }
              )
            );
          } else if (fieldNames[fieldName]) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Field "${typeName}.${fieldName}" can only be defined once.`,
                {
                  nodes: [fieldNames[fieldName], fieldDef.name]
                }
              )
            );
          } else {
            fieldNames[fieldName] = fieldDef.name;
          }
        }
        return false;
      }
    }
    function hasField(type, fieldName) {
      if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type) || (0, _definition.isInputObjectType)(type)) {
        return type.getFields()[fieldName] != null;
      }
      return false;
    }
  }
});

// node_modules/graphql/validation/rules/UniqueFragmentNamesRule.js
var require_UniqueFragmentNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueFragmentNamesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.UniqueFragmentNamesRule = UniqueFragmentNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueFragmentNamesRule(context2) {
      const knownFragmentNames = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition: () => false,
        FragmentDefinition(node) {
          const fragmentName = node.name.value;
          if (knownFragmentNames[fragmentName]) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `There can be only one fragment named "${fragmentName}".`,
                {
                  nodes: [knownFragmentNames[fragmentName], node.name]
                }
              )
            );
          } else {
            knownFragmentNames[fragmentName] = node.name;
          }
          return false;
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.js
var require_UniqueInputFieldNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.UniqueInputFieldNamesRule = UniqueInputFieldNamesRule;
    var _invariant = require_invariant();
    var _GraphQLError = require_GraphQLError();
    function UniqueInputFieldNamesRule(context2) {
      const knownNameStack = [];
      let knownNames = /* @__PURE__ */ Object.create(null);
      return {
        ObjectValue: {
          enter() {
            knownNameStack.push(knownNames);
            knownNames = /* @__PURE__ */ Object.create(null);
          },
          leave() {
            const prevKnownNames = knownNameStack.pop();
            prevKnownNames || (0, _invariant.invariant)(false);
            knownNames = prevKnownNames;
          }
        },
        ObjectField(node) {
          const fieldName = node.name.value;
          if (knownNames[fieldName]) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `There can be only one input field named "${fieldName}".`,
                {
                  nodes: [knownNames[fieldName], node.name]
                }
              )
            );
          } else {
            knownNames[fieldName] = node.name;
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/UniqueOperationNamesRule.js
var require_UniqueOperationNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueOperationNamesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.UniqueOperationNamesRule = UniqueOperationNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueOperationNamesRule(context2) {
      const knownOperationNames = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition(node) {
          const operationName = node.name;
          if (operationName) {
            if (knownOperationNames[operationName.value]) {
              context2.reportError(
                new _GraphQLError.GraphQLError(
                  `There can be only one operation named "${operationName.value}".`,
                  {
                    nodes: [
                      knownOperationNames[operationName.value],
                      operationName
                    ]
                  }
                )
              );
            } else {
              knownOperationNames[operationName.value] = operationName;
            }
          }
          return false;
        },
        FragmentDefinition: () => false
      };
    }
  }
});

// node_modules/graphql/validation/rules/UniqueOperationTypesRule.js
var require_UniqueOperationTypesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueOperationTypesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.UniqueOperationTypesRule = UniqueOperationTypesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueOperationTypesRule(context2) {
      const schema = context2.getSchema();
      const definedOperationTypes = /* @__PURE__ */ Object.create(null);
      const existingOperationTypes = schema ? {
        query: schema.getQueryType(),
        mutation: schema.getMutationType(),
        subscription: schema.getSubscriptionType()
      } : {};
      return {
        SchemaDefinition: checkOperationTypes,
        SchemaExtension: checkOperationTypes
      };
      function checkOperationTypes(node) {
        var _node$operationTypes;
        const operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
        for (const operationType of operationTypesNodes) {
          const operation = operationType.operation;
          const alreadyDefinedOperationType = definedOperationTypes[operation];
          if (existingOperationTypes[operation]) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Type for ${operation} already defined in the schema. It cannot be redefined.`,
                {
                  nodes: operationType
                }
              )
            );
          } else if (alreadyDefinedOperationType) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `There can be only one ${operation} type in schema.`,
                {
                  nodes: [alreadyDefinedOperationType, operationType]
                }
              )
            );
          } else {
            definedOperationTypes[operation] = operationType;
          }
        }
        return false;
      }
    }
  }
});

// node_modules/graphql/validation/rules/UniqueTypeNamesRule.js
var require_UniqueTypeNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueTypeNamesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.UniqueTypeNamesRule = UniqueTypeNamesRule;
    var _GraphQLError = require_GraphQLError();
    function UniqueTypeNamesRule(context2) {
      const knownTypeNames = /* @__PURE__ */ Object.create(null);
      const schema = context2.getSchema();
      return {
        ScalarTypeDefinition: checkTypeName,
        ObjectTypeDefinition: checkTypeName,
        InterfaceTypeDefinition: checkTypeName,
        UnionTypeDefinition: checkTypeName,
        EnumTypeDefinition: checkTypeName,
        InputObjectTypeDefinition: checkTypeName
      };
      function checkTypeName(node) {
        const typeName = node.name.value;
        if (schema !== null && schema !== void 0 && schema.getType(typeName)) {
          context2.reportError(
            new _GraphQLError.GraphQLError(
              `Type "${typeName}" already exists in the schema. It cannot also be defined in this type definition.`,
              {
                nodes: node.name
              }
            )
          );
          return;
        }
        if (knownTypeNames[typeName]) {
          context2.reportError(
            new _GraphQLError.GraphQLError(
              `There can be only one type named "${typeName}".`,
              {
                nodes: [knownTypeNames[typeName], node.name]
              }
            )
          );
        } else {
          knownTypeNames[typeName] = node.name;
        }
        return false;
      }
    }
  }
});

// node_modules/graphql/validation/rules/UniqueVariableNamesRule.js
var require_UniqueVariableNamesRule = __commonJS({
  "node_modules/graphql/validation/rules/UniqueVariableNamesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.UniqueVariableNamesRule = UniqueVariableNamesRule;
    var _groupBy = require_groupBy();
    var _GraphQLError = require_GraphQLError();
    function UniqueVariableNamesRule(context2) {
      return {
        OperationDefinition(operationNode) {
          var _operationNode$variab;
          const variableDefinitions = (_operationNode$variab = operationNode.variableDefinitions) !== null && _operationNode$variab !== void 0 ? _operationNode$variab : [];
          const seenVariableDefinitions = (0, _groupBy.groupBy)(
            variableDefinitions,
            (node) => node.variable.name.value
          );
          for (const [variableName, variableNodes] of seenVariableDefinitions) {
            if (variableNodes.length > 1) {
              context2.reportError(
                new _GraphQLError.GraphQLError(
                  `There can be only one variable named "$${variableName}".`,
                  {
                    nodes: variableNodes.map((node) => node.variable.name)
                  }
                )
              );
            }
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.js
var require_ValuesOfCorrectTypeRule = __commonJS({
  "node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule;
    var _didYouMean = require_didYouMean();
    var _inspect = require_inspect();
    var _keyMap = require_keyMap();
    var _suggestionList = require_suggestionList();
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _printer = require_printer();
    var _definition = require_definition();
    function ValuesOfCorrectTypeRule(context2) {
      let variableDefinitions = {};
      return {
        OperationDefinition: {
          enter() {
            variableDefinitions = {};
          }
        },
        VariableDefinition(definition) {
          variableDefinitions[definition.variable.name.value] = definition;
        },
        ListValue(node) {
          const type = (0, _definition.getNullableType)(
            context2.getParentInputType()
          );
          if (!(0, _definition.isListType)(type)) {
            isValidValueNode(context2, node);
            return false;
          }
        },
        ObjectValue(node) {
          const type = (0, _definition.getNamedType)(context2.getInputType());
          if (!(0, _definition.isInputObjectType)(type)) {
            isValidValueNode(context2, node);
            return false;
          }
          const fieldNodeMap = (0, _keyMap.keyMap)(
            node.fields,
            (field) => field.name.value
          );
          for (const fieldDef of Object.values(type.getFields())) {
            const fieldNode = fieldNodeMap[fieldDef.name];
            if (!fieldNode && (0, _definition.isRequiredInputField)(fieldDef)) {
              const typeStr = (0, _inspect.inspect)(fieldDef.type);
              context2.reportError(
                new _GraphQLError.GraphQLError(
                  `Field "${type.name}.${fieldDef.name}" of required type "${typeStr}" was not provided.`,
                  {
                    nodes: node
                  }
                )
              );
            }
          }
          if (type.isOneOf) {
            validateOneOfInputObject(
              context2,
              node,
              type,
              fieldNodeMap,
              variableDefinitions
            );
          }
        },
        ObjectField(node) {
          const parentType = (0, _definition.getNamedType)(
            context2.getParentInputType()
          );
          const fieldType = context2.getInputType();
          if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {
            const suggestions = (0, _suggestionList.suggestionList)(
              node.name.value,
              Object.keys(parentType.getFields())
            );
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Field "${node.name.value}" is not defined by type "${parentType.name}".` + (0, _didYouMean.didYouMean)(suggestions),
                {
                  nodes: node
                }
              )
            );
          }
        },
        NullValue(node) {
          const type = context2.getInputType();
          if ((0, _definition.isNonNullType)(type)) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Expected value of type "${(0, _inspect.inspect)(
                  type
                )}", found ${(0, _printer.print)(node)}.`,
                {
                  nodes: node
                }
              )
            );
          }
        },
        EnumValue: (node) => isValidValueNode(context2, node),
        IntValue: (node) => isValidValueNode(context2, node),
        FloatValue: (node) => isValidValueNode(context2, node),
        StringValue: (node) => isValidValueNode(context2, node),
        BooleanValue: (node) => isValidValueNode(context2, node)
      };
    }
    function isValidValueNode(context2, node) {
      const locationType = context2.getInputType();
      if (!locationType) {
        return;
      }
      const type = (0, _definition.getNamedType)(locationType);
      if (!(0, _definition.isLeafType)(type)) {
        const typeStr = (0, _inspect.inspect)(locationType);
        context2.reportError(
          new _GraphQLError.GraphQLError(
            `Expected value of type "${typeStr}", found ${(0, _printer.print)(
              node
            )}.`,
            {
              nodes: node
            }
          )
        );
        return;
      }
      try {
        const parseResult = type.parseLiteral(
          node,
          void 0
          /* variables */
        );
        if (parseResult === void 0) {
          const typeStr = (0, _inspect.inspect)(locationType);
          context2.reportError(
            new _GraphQLError.GraphQLError(
              `Expected value of type "${typeStr}", found ${(0, _printer.print)(
                node
              )}.`,
              {
                nodes: node
              }
            )
          );
        }
      } catch (error) {
        const typeStr = (0, _inspect.inspect)(locationType);
        if (error instanceof _GraphQLError.GraphQLError) {
          context2.reportError(error);
        } else {
          context2.reportError(
            new _GraphQLError.GraphQLError(
              `Expected value of type "${typeStr}", found ${(0, _printer.print)(
                node
              )}; ` + error.message,
              {
                nodes: node,
                originalError: error
              }
            )
          );
        }
      }
    }
    function validateOneOfInputObject(context2, node, type, fieldNodeMap, variableDefinitions) {
      var _fieldNodeMap$keys$;
      const keys = Object.keys(fieldNodeMap);
      const isNotExactlyOneField = keys.length !== 1;
      if (isNotExactlyOneField) {
        context2.reportError(
          new _GraphQLError.GraphQLError(
            `OneOf Input Object "${type.name}" must specify exactly one key.`,
            {
              nodes: [node]
            }
          )
        );
        return;
      }
      const value = (_fieldNodeMap$keys$ = fieldNodeMap[keys[0]]) === null || _fieldNodeMap$keys$ === void 0 ? void 0 : _fieldNodeMap$keys$.value;
      const isNullLiteral = !value || value.kind === _kinds.Kind.NULL;
      const isVariable = (value === null || value === void 0 ? void 0 : value.kind) === _kinds.Kind.VARIABLE;
      if (isNullLiteral) {
        context2.reportError(
          new _GraphQLError.GraphQLError(
            `Field "${type.name}.${keys[0]}" must be non-null.`,
            {
              nodes: [node]
            }
          )
        );
        return;
      }
      if (isVariable) {
        const variableName = value.name.value;
        const definition = variableDefinitions[variableName];
        const isNullableVariable = definition.type.kind !== _kinds.Kind.NON_NULL_TYPE;
        if (isNullableVariable) {
          context2.reportError(
            new _GraphQLError.GraphQLError(
              `Variable "${variableName}" must be non-nullable to be used for OneOf Input Object "${type.name}".`,
              {
                nodes: [node]
              }
            )
          );
        }
      }
    }
  }
});

// node_modules/graphql/validation/rules/VariablesAreInputTypesRule.js
var require_VariablesAreInputTypesRule = __commonJS({
  "node_modules/graphql/validation/rules/VariablesAreInputTypesRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.VariablesAreInputTypesRule = VariablesAreInputTypesRule;
    var _GraphQLError = require_GraphQLError();
    var _printer = require_printer();
    var _definition = require_definition();
    var _typeFromAST = require_typeFromAST();
    function VariablesAreInputTypesRule(context2) {
      return {
        VariableDefinition(node) {
          const type = (0, _typeFromAST.typeFromAST)(
            context2.getSchema(),
            node.type
          );
          if (type !== void 0 && !(0, _definition.isInputType)(type)) {
            const variableName = node.variable.name.value;
            const typeName = (0, _printer.print)(node.type);
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `Variable "$${variableName}" cannot be non-input type "${typeName}".`,
                {
                  nodes: node.type
                }
              )
            );
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.js
var require_VariablesInAllowedPositionRule = __commonJS({
  "node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.VariablesInAllowedPositionRule = VariablesInAllowedPositionRule;
    var _inspect = require_inspect();
    var _GraphQLError = require_GraphQLError();
    var _kinds = require_kinds();
    var _definition = require_definition();
    var _typeComparators = require_typeComparators();
    var _typeFromAST = require_typeFromAST();
    function VariablesInAllowedPositionRule(context2) {
      let varDefMap = /* @__PURE__ */ Object.create(null);
      return {
        OperationDefinition: {
          enter() {
            varDefMap = /* @__PURE__ */ Object.create(null);
          },
          leave(operation) {
            const usages = context2.getRecursiveVariableUsages(operation);
            for (const { node, type, defaultValue } of usages) {
              const varName = node.name.value;
              const varDef = varDefMap[varName];
              if (varDef && type) {
                const schema = context2.getSchema();
                const varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);
                if (varType && !allowedVariableUsage(
                  schema,
                  varType,
                  varDef.defaultValue,
                  type,
                  defaultValue
                )) {
                  const varTypeStr = (0, _inspect.inspect)(varType);
                  const typeStr = (0, _inspect.inspect)(type);
                  context2.reportError(
                    new _GraphQLError.GraphQLError(
                      `Variable "$${varName}" of type "${varTypeStr}" used in position expecting type "${typeStr}".`,
                      {
                        nodes: [varDef, node]
                      }
                    )
                  );
                }
              }
            }
          }
        },
        VariableDefinition(node) {
          varDefMap[node.variable.name.value] = node;
        }
      };
    }
    function allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {
      if ((0, _definition.isNonNullType)(locationType) && !(0, _definition.isNonNullType)(varType)) {
        const hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== _kinds.Kind.NULL;
        const hasLocationDefaultValue = locationDefaultValue !== void 0;
        if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {
          return false;
        }
        const nullableLocationType = locationType.ofType;
        return (0, _typeComparators.isTypeSubTypeOf)(
          schema,
          varType,
          nullableLocationType
        );
      }
      return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, locationType);
    }
  }
});

// node_modules/graphql/validation/specifiedRules.js
var require_specifiedRules = __commonJS({
  "node_modules/graphql/validation/specifiedRules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.specifiedSDLRules = exports2.specifiedRules = exports2.recommendedRules = void 0;
    var _ExecutableDefinitionsRule = require_ExecutableDefinitionsRule();
    var _FieldsOnCorrectTypeRule = require_FieldsOnCorrectTypeRule();
    var _FragmentsOnCompositeTypesRule = require_FragmentsOnCompositeTypesRule();
    var _KnownArgumentNamesRule = require_KnownArgumentNamesRule();
    var _KnownDirectivesRule = require_KnownDirectivesRule();
    var _KnownFragmentNamesRule = require_KnownFragmentNamesRule();
    var _KnownTypeNamesRule = require_KnownTypeNamesRule();
    var _LoneAnonymousOperationRule = require_LoneAnonymousOperationRule();
    var _LoneSchemaDefinitionRule = require_LoneSchemaDefinitionRule();
    var _MaxIntrospectionDepthRule = require_MaxIntrospectionDepthRule();
    var _NoFragmentCyclesRule = require_NoFragmentCyclesRule();
    var _NoUndefinedVariablesRule = require_NoUndefinedVariablesRule();
    var _NoUnusedFragmentsRule = require_NoUnusedFragmentsRule();
    var _NoUnusedVariablesRule = require_NoUnusedVariablesRule();
    var _OverlappingFieldsCanBeMergedRule = require_OverlappingFieldsCanBeMergedRule();
    var _PossibleFragmentSpreadsRule = require_PossibleFragmentSpreadsRule();
    var _PossibleTypeExtensionsRule = require_PossibleTypeExtensionsRule();
    var _ProvidedRequiredArgumentsRule = require_ProvidedRequiredArgumentsRule();
    var _ScalarLeafsRule = require_ScalarLeafsRule();
    var _SingleFieldSubscriptionsRule = require_SingleFieldSubscriptionsRule();
    var _UniqueArgumentDefinitionNamesRule = require_UniqueArgumentDefinitionNamesRule();
    var _UniqueArgumentNamesRule = require_UniqueArgumentNamesRule();
    var _UniqueDirectiveNamesRule = require_UniqueDirectiveNamesRule();
    var _UniqueDirectivesPerLocationRule = require_UniqueDirectivesPerLocationRule();
    var _UniqueEnumValueNamesRule = require_UniqueEnumValueNamesRule();
    var _UniqueFieldDefinitionNamesRule = require_UniqueFieldDefinitionNamesRule();
    var _UniqueFragmentNamesRule = require_UniqueFragmentNamesRule();
    var _UniqueInputFieldNamesRule = require_UniqueInputFieldNamesRule();
    var _UniqueOperationNamesRule = require_UniqueOperationNamesRule();
    var _UniqueOperationTypesRule = require_UniqueOperationTypesRule();
    var _UniqueTypeNamesRule = require_UniqueTypeNamesRule();
    var _UniqueVariableNamesRule = require_UniqueVariableNamesRule();
    var _ValuesOfCorrectTypeRule = require_ValuesOfCorrectTypeRule();
    var _VariablesAreInputTypesRule = require_VariablesAreInputTypesRule();
    var _VariablesInAllowedPositionRule = require_VariablesInAllowedPositionRule();
    var recommendedRules = Object.freeze([
      _MaxIntrospectionDepthRule.MaxIntrospectionDepthRule
    ]);
    exports2.recommendedRules = recommendedRules;
    var specifiedRules2 = Object.freeze([
      _ExecutableDefinitionsRule.ExecutableDefinitionsRule,
      _UniqueOperationNamesRule.UniqueOperationNamesRule,
      _LoneAnonymousOperationRule.LoneAnonymousOperationRule,
      _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule,
      _KnownTypeNamesRule.KnownTypeNamesRule,
      _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule,
      _VariablesAreInputTypesRule.VariablesAreInputTypesRule,
      _ScalarLeafsRule.ScalarLeafsRule,
      _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule,
      _UniqueFragmentNamesRule.UniqueFragmentNamesRule,
      _KnownFragmentNamesRule.KnownFragmentNamesRule,
      _NoUnusedFragmentsRule.NoUnusedFragmentsRule,
      _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule,
      _NoFragmentCyclesRule.NoFragmentCyclesRule,
      _UniqueVariableNamesRule.UniqueVariableNamesRule,
      _NoUndefinedVariablesRule.NoUndefinedVariablesRule,
      _NoUnusedVariablesRule.NoUnusedVariablesRule,
      _KnownDirectivesRule.KnownDirectivesRule,
      _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule,
      _KnownArgumentNamesRule.KnownArgumentNamesRule,
      _UniqueArgumentNamesRule.UniqueArgumentNamesRule,
      _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule,
      _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule,
      _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule,
      _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule,
      _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule,
      ...recommendedRules
    ]);
    exports2.specifiedRules = specifiedRules2;
    var specifiedSDLRules = Object.freeze([
      _LoneSchemaDefinitionRule.LoneSchemaDefinitionRule,
      _UniqueOperationTypesRule.UniqueOperationTypesRule,
      _UniqueTypeNamesRule.UniqueTypeNamesRule,
      _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule,
      _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule,
      _UniqueArgumentDefinitionNamesRule.UniqueArgumentDefinitionNamesRule,
      _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule,
      _KnownTypeNamesRule.KnownTypeNamesRule,
      _KnownDirectivesRule.KnownDirectivesRule,
      _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule,
      _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule,
      _KnownArgumentNamesRule.KnownArgumentNamesOnDirectivesRule,
      _UniqueArgumentNamesRule.UniqueArgumentNamesRule,
      _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule,
      _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsOnDirectivesRule
    ]);
    exports2.specifiedSDLRules = specifiedSDLRules;
  }
});

// node_modules/graphql/validation/ValidationContext.js
var require_ValidationContext = __commonJS({
  "node_modules/graphql/validation/ValidationContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.ValidationContext = exports2.SDLValidationContext = exports2.ASTValidationContext = void 0;
    var _kinds = require_kinds();
    var _visitor = require_visitor();
    var _TypeInfo = require_TypeInfo();
    var ASTValidationContext = class {
      constructor(ast, onError) {
        this._ast = ast;
        this._fragments = void 0;
        this._fragmentSpreads = /* @__PURE__ */ new Map();
        this._recursivelyReferencedFragments = /* @__PURE__ */ new Map();
        this._onError = onError;
      }
      get [Symbol.toStringTag]() {
        return "ASTValidationContext";
      }
      reportError(error) {
        this._onError(error);
      }
      getDocument() {
        return this._ast;
      }
      getFragment(name) {
        let fragments;
        if (this._fragments) {
          fragments = this._fragments;
        } else {
          fragments = /* @__PURE__ */ Object.create(null);
          for (const defNode of this.getDocument().definitions) {
            if (defNode.kind === _kinds.Kind.FRAGMENT_DEFINITION) {
              fragments[defNode.name.value] = defNode;
            }
          }
          this._fragments = fragments;
        }
        return fragments[name];
      }
      getFragmentSpreads(node) {
        let spreads = this._fragmentSpreads.get(node);
        if (!spreads) {
          spreads = [];
          const setsToVisit = [node];
          let set;
          while (set = setsToVisit.pop()) {
            for (const selection of set.selections) {
              if (selection.kind === _kinds.Kind.FRAGMENT_SPREAD) {
                spreads.push(selection);
              } else if (selection.selectionSet) {
                setsToVisit.push(selection.selectionSet);
              }
            }
          }
          this._fragmentSpreads.set(node, spreads);
        }
        return spreads;
      }
      getRecursivelyReferencedFragments(operation) {
        let fragments = this._recursivelyReferencedFragments.get(operation);
        if (!fragments) {
          fragments = [];
          const collectedNames = /* @__PURE__ */ Object.create(null);
          const nodesToVisit = [operation.selectionSet];
          let node;
          while (node = nodesToVisit.pop()) {
            for (const spread of this.getFragmentSpreads(node)) {
              const fragName = spread.name.value;
              if (collectedNames[fragName] !== true) {
                collectedNames[fragName] = true;
                const fragment = this.getFragment(fragName);
                if (fragment) {
                  fragments.push(fragment);
                  nodesToVisit.push(fragment.selectionSet);
                }
              }
            }
          }
          this._recursivelyReferencedFragments.set(operation, fragments);
        }
        return fragments;
      }
    };
    exports2.ASTValidationContext = ASTValidationContext;
    var SDLValidationContext = class extends ASTValidationContext {
      constructor(ast, schema, onError) {
        super(ast, onError);
        this._schema = schema;
      }
      get [Symbol.toStringTag]() {
        return "SDLValidationContext";
      }
      getSchema() {
        return this._schema;
      }
    };
    exports2.SDLValidationContext = SDLValidationContext;
    var ValidationContext = class extends ASTValidationContext {
      constructor(schema, ast, typeInfo, onError) {
        super(ast, onError);
        this._schema = schema;
        this._typeInfo = typeInfo;
        this._variableUsages = /* @__PURE__ */ new Map();
        this._recursiveVariableUsages = /* @__PURE__ */ new Map();
      }
      get [Symbol.toStringTag]() {
        return "ValidationContext";
      }
      getSchema() {
        return this._schema;
      }
      getVariableUsages(node) {
        let usages = this._variableUsages.get(node);
        if (!usages) {
          const newUsages = [];
          const typeInfo = new _TypeInfo.TypeInfo(this._schema);
          (0, _visitor.visit)(
            node,
            (0, _TypeInfo.visitWithTypeInfo)(typeInfo, {
              VariableDefinition: () => false,
              Variable(variable) {
                newUsages.push({
                  node: variable,
                  type: typeInfo.getInputType(),
                  defaultValue: typeInfo.getDefaultValue()
                });
              }
            })
          );
          usages = newUsages;
          this._variableUsages.set(node, usages);
        }
        return usages;
      }
      getRecursiveVariableUsages(operation) {
        let usages = this._recursiveVariableUsages.get(operation);
        if (!usages) {
          usages = this.getVariableUsages(operation);
          for (const frag of this.getRecursivelyReferencedFragments(operation)) {
            usages = usages.concat(this.getVariableUsages(frag));
          }
          this._recursiveVariableUsages.set(operation, usages);
        }
        return usages;
      }
      getType() {
        return this._typeInfo.getType();
      }
      getParentType() {
        return this._typeInfo.getParentType();
      }
      getInputType() {
        return this._typeInfo.getInputType();
      }
      getParentInputType() {
        return this._typeInfo.getParentInputType();
      }
      getFieldDef() {
        return this._typeInfo.getFieldDef();
      }
      getDirective() {
        return this._typeInfo.getDirective();
      }
      getArgument() {
        return this._typeInfo.getArgument();
      }
      getEnumValue() {
        return this._typeInfo.getEnumValue();
      }
    };
    exports2.ValidationContext = ValidationContext;
  }
});

// node_modules/graphql/validation/validate.js
var require_validate2 = __commonJS({
  "node_modules/graphql/validation/validate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.assertValidSDL = assertValidSDL;
    exports2.assertValidSDLExtension = assertValidSDLExtension;
    exports2.validate = validate4;
    exports2.validateSDL = validateSDL;
    var _devAssert = require_devAssert();
    var _GraphQLError = require_GraphQLError();
    var _visitor = require_visitor();
    var _validate = require_validate();
    var _TypeInfo = require_TypeInfo();
    var _specifiedRules = require_specifiedRules();
    var _ValidationContext = require_ValidationContext();
    function validate4(schema, documentAST, rules = _specifiedRules.specifiedRules, options, typeInfo = new _TypeInfo.TypeInfo(schema)) {
      var _options$maxErrors;
      const maxErrors = (_options$maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors) !== null && _options$maxErrors !== void 0 ? _options$maxErrors : 100;
      documentAST || (0, _devAssert.devAssert)(false, "Must provide document.");
      (0, _validate.assertValidSchema)(schema);
      const abortObj = Object.freeze({});
      const errors = [];
      const context2 = new _ValidationContext.ValidationContext(
        schema,
        documentAST,
        typeInfo,
        (error) => {
          if (errors.length >= maxErrors) {
            errors.push(
              new _GraphQLError.GraphQLError(
                "Too many validation errors, error limit reached. Validation aborted."
              )
            );
            throw abortObj;
          }
          errors.push(error);
        }
      );
      const visitor = (0, _visitor.visitInParallel)(
        rules.map((rule) => rule(context2))
      );
      try {
        (0, _visitor.visit)(
          documentAST,
          (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor)
        );
      } catch (e) {
        if (e !== abortObj) {
          throw e;
        }
      }
      return errors;
    }
    function validateSDL(documentAST, schemaToExtend, rules = _specifiedRules.specifiedSDLRules) {
      const errors = [];
      const context2 = new _ValidationContext.SDLValidationContext(
        documentAST,
        schemaToExtend,
        (error) => {
          errors.push(error);
        }
      );
      const visitors = rules.map((rule) => rule(context2));
      (0, _visitor.visit)(documentAST, (0, _visitor.visitInParallel)(visitors));
      return errors;
    }
    function assertValidSDL(documentAST) {
      const errors = validateSDL(documentAST);
      if (errors.length !== 0) {
        throw new Error(errors.map((error) => error.message).join("\n\n"));
      }
    }
    function assertValidSDLExtension(documentAST, schema) {
      const errors = validateSDL(documentAST, schema);
      if (errors.length !== 0) {
        throw new Error(errors.map((error) => error.message).join("\n\n"));
      }
    }
  }
});

// node_modules/graphql/jsutils/memoize3.js
var require_memoize3 = __commonJS({
  "node_modules/graphql/jsutils/memoize3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.memoize3 = memoize3;
    function memoize3(fn2) {
      let cache0;
      return function memoized(a1, a2, a3) {
        if (cache0 === void 0) {
          cache0 = /* @__PURE__ */ new WeakMap();
        }
        let cache1 = cache0.get(a1);
        if (cache1 === void 0) {
          cache1 = /* @__PURE__ */ new WeakMap();
          cache0.set(a1, cache1);
        }
        let cache2 = cache1.get(a2);
        if (cache2 === void 0) {
          cache2 = /* @__PURE__ */ new WeakMap();
          cache1.set(a2, cache2);
        }
        let fnResult = cache2.get(a3);
        if (fnResult === void 0) {
          fnResult = fn2(a1, a2, a3);
          cache2.set(a3, fnResult);
        }
        return fnResult;
      };
    }
  }
});

// node_modules/graphql/jsutils/promiseForObject.js
var require_promiseForObject = __commonJS({
  "node_modules/graphql/jsutils/promiseForObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.promiseForObject = promiseForObject;
    function promiseForObject(object) {
      return Promise.all(Object.values(object)).then((resolvedValues) => {
        const resolvedObject = /* @__PURE__ */ Object.create(null);
        for (const [i, key] of Object.keys(object).entries()) {
          resolvedObject[key] = resolvedValues[i];
        }
        return resolvedObject;
      });
    }
  }
});

// node_modules/graphql/jsutils/promiseReduce.js
var require_promiseReduce = __commonJS({
  "node_modules/graphql/jsutils/promiseReduce.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.promiseReduce = promiseReduce;
    var _isPromise = require_isPromise();
    function promiseReduce(values, callbackFn, initialValue) {
      let accumulator = initialValue;
      for (const value of values) {
        accumulator = (0, _isPromise.isPromise)(accumulator) ? accumulator.then((resolved) => callbackFn(resolved, value)) : callbackFn(accumulator, value);
      }
      return accumulator;
    }
  }
});

// node_modules/graphql/jsutils/toError.js
var require_toError = __commonJS({
  "node_modules/graphql/jsutils/toError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.toError = toError;
    var _inspect = require_inspect();
    function toError(thrownValue) {
      return thrownValue instanceof Error ? thrownValue : new NonErrorThrown(thrownValue);
    }
    var NonErrorThrown = class extends Error {
      constructor(thrownValue) {
        super("Unexpected error value: " + (0, _inspect.inspect)(thrownValue));
        this.name = "NonErrorThrown";
        this.thrownValue = thrownValue;
      }
    };
  }
});

// node_modules/graphql/error/locatedError.js
var require_locatedError = __commonJS({
  "node_modules/graphql/error/locatedError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.locatedError = locatedError;
    var _toError = require_toError();
    var _GraphQLError = require_GraphQLError();
    function locatedError(rawOriginalError, nodes, path2) {
      var _nodes;
      const originalError = (0, _toError.toError)(rawOriginalError);
      if (isLocatedGraphQLError(originalError)) {
        return originalError;
      }
      return new _GraphQLError.GraphQLError(originalError.message, {
        nodes: (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes,
        source: originalError.source,
        positions: originalError.positions,
        path: path2,
        originalError
      });
    }
    function isLocatedGraphQLError(error) {
      return Array.isArray(error.path);
    }
  }
});

// node_modules/graphql/execution/execute.js
var require_execute = __commonJS({
  "node_modules/graphql/execution/execute.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.assertValidExecutionArguments = assertValidExecutionArguments;
    exports2.buildExecutionContext = buildExecutionContext;
    exports2.buildResolveInfo = buildResolveInfo;
    exports2.defaultTypeResolver = exports2.defaultFieldResolver = void 0;
    exports2.execute = execute2;
    exports2.executeSync = executeSync;
    exports2.getFieldDef = getFieldDef;
    var _devAssert = require_devAssert();
    var _inspect = require_inspect();
    var _invariant = require_invariant();
    var _isIterableObject = require_isIterableObject();
    var _isObjectLike = require_isObjectLike();
    var _isPromise = require_isPromise();
    var _memoize = require_memoize3();
    var _Path = require_Path();
    var _promiseForObject = require_promiseForObject();
    var _promiseReduce = require_promiseReduce();
    var _GraphQLError = require_GraphQLError();
    var _locatedError = require_locatedError();
    var _ast = require_ast();
    var _kinds = require_kinds();
    var _definition = require_definition();
    var _introspection = require_introspection();
    var _validate = require_validate();
    var _collectFields = require_collectFields();
    var _values = require_values();
    var collectSubfields = (0, _memoize.memoize3)(
      (exeContext, returnType, fieldNodes) => (0, _collectFields.collectSubfields)(
        exeContext.schema,
        exeContext.fragments,
        exeContext.variableValues,
        returnType,
        fieldNodes
      )
    );
    function execute2(args) {
      arguments.length < 2 || (0, _devAssert.devAssert)(
        false,
        "graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead."
      );
      const { schema, document, variableValues, rootValue } = args;
      assertValidExecutionArguments(schema, document, variableValues);
      const exeContext = buildExecutionContext(args);
      if (!("schema" in exeContext)) {
        return {
          errors: exeContext
        };
      }
      try {
        const { operation } = exeContext;
        const result = executeOperation(exeContext, operation, rootValue);
        if ((0, _isPromise.isPromise)(result)) {
          return result.then(
            (data) => buildResponse(data, exeContext.errors),
            (error) => {
              exeContext.errors.push(error);
              return buildResponse(null, exeContext.errors);
            }
          );
        }
        return buildResponse(result, exeContext.errors);
      } catch (error) {
        exeContext.errors.push(error);
        return buildResponse(null, exeContext.errors);
      }
    }
    function executeSync(args) {
      const result = execute2(args);
      if ((0, _isPromise.isPromise)(result)) {
        throw new Error("GraphQL execution failed to complete synchronously.");
      }
      return result;
    }
    function buildResponse(data, errors) {
      return errors.length === 0 ? {
        data
      } : {
        errors,
        data
      };
    }
    function assertValidExecutionArguments(schema, document, rawVariableValues) {
      document || (0, _devAssert.devAssert)(false, "Must provide document.");
      (0, _validate.assertValidSchema)(schema);
      rawVariableValues == null || (0, _isObjectLike.isObjectLike)(rawVariableValues) || (0, _devAssert.devAssert)(
        false,
        "Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided."
      );
    }
    function buildExecutionContext(args) {
      var _definition$name, _operation$variableDe;
      const {
        schema,
        document,
        rootValue,
        contextValue,
        variableValues: rawVariableValues,
        operationName,
        fieldResolver,
        typeResolver,
        subscribeFieldResolver
      } = args;
      let operation;
      const fragments = /* @__PURE__ */ Object.create(null);
      for (const definition of document.definitions) {
        switch (definition.kind) {
          case _kinds.Kind.OPERATION_DEFINITION:
            if (operationName == null) {
              if (operation !== void 0) {
                return [
                  new _GraphQLError.GraphQLError(
                    "Must provide operation name if query contains multiple operations."
                  )
                ];
              }
              operation = definition;
            } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
              operation = definition;
            }
            break;
          case _kinds.Kind.FRAGMENT_DEFINITION:
            fragments[definition.name.value] = definition;
            break;
          default:
        }
      }
      if (!operation) {
        if (operationName != null) {
          return [
            new _GraphQLError.GraphQLError(
              `Unknown operation named "${operationName}".`
            )
          ];
        }
        return [new _GraphQLError.GraphQLError("Must provide an operation.")];
      }
      const variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];
      const coercedVariableValues = (0, _values.getVariableValues)(
        schema,
        variableDefinitions,
        rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {},
        {
          maxErrors: 50
        }
      );
      if (coercedVariableValues.errors) {
        return coercedVariableValues.errors;
      }
      return {
        schema,
        fragments,
        rootValue,
        contextValue,
        operation,
        variableValues: coercedVariableValues.coerced,
        fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver2,
        typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,
        subscribeFieldResolver: subscribeFieldResolver !== null && subscribeFieldResolver !== void 0 ? subscribeFieldResolver : defaultFieldResolver2,
        errors: []
      };
    }
    function executeOperation(exeContext, operation, rootValue) {
      const rootType = exeContext.schema.getRootType(operation.operation);
      if (rootType == null) {
        throw new _GraphQLError.GraphQLError(
          `Schema is not configured to execute ${operation.operation} operation.`,
          {
            nodes: operation
          }
        );
      }
      const rootFields = (0, _collectFields.collectFields)(
        exeContext.schema,
        exeContext.fragments,
        exeContext.variableValues,
        rootType,
        operation.selectionSet
      );
      const path2 = void 0;
      switch (operation.operation) {
        case _ast.OperationTypeNode.QUERY:
          return executeFields(exeContext, rootType, rootValue, path2, rootFields);
        case _ast.OperationTypeNode.MUTATION:
          return executeFieldsSerially(
            exeContext,
            rootType,
            rootValue,
            path2,
            rootFields
          );
        case _ast.OperationTypeNode.SUBSCRIPTION:
          return executeFields(exeContext, rootType, rootValue, path2, rootFields);
      }
    }
    function executeFieldsSerially(exeContext, parentType, sourceValue, path2, fields) {
      return (0, _promiseReduce.promiseReduce)(
        fields.entries(),
        (results, [responseName, fieldNodes]) => {
          const fieldPath = (0, _Path.addPath)(path2, responseName, parentType.name);
          const result = executeField(
            exeContext,
            parentType,
            sourceValue,
            fieldNodes,
            fieldPath
          );
          if (result === void 0) {
            return results;
          }
          if ((0, _isPromise.isPromise)(result)) {
            return result.then((resolvedResult) => {
              results[responseName] = resolvedResult;
              return results;
            });
          }
          results[responseName] = result;
          return results;
        },
        /* @__PURE__ */ Object.create(null)
      );
    }
    function executeFields(exeContext, parentType, sourceValue, path2, fields) {
      const results = /* @__PURE__ */ Object.create(null);
      let containsPromise = false;
      try {
        for (const [responseName, fieldNodes] of fields.entries()) {
          const fieldPath = (0, _Path.addPath)(path2, responseName, parentType.name);
          const result = executeField(
            exeContext,
            parentType,
            sourceValue,
            fieldNodes,
            fieldPath
          );
          if (result !== void 0) {
            results[responseName] = result;
            if ((0, _isPromise.isPromise)(result)) {
              containsPromise = true;
            }
          }
        }
      } catch (error) {
        if (containsPromise) {
          return (0, _promiseForObject.promiseForObject)(results).finally(() => {
            throw error;
          });
        }
        throw error;
      }
      if (!containsPromise) {
        return results;
      }
      return (0, _promiseForObject.promiseForObject)(results);
    }
    function executeField(exeContext, parentType, source, fieldNodes, path2) {
      var _fieldDef$resolve;
      const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);
      if (!fieldDef) {
        return;
      }
      const returnType = fieldDef.type;
      const resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;
      const info = buildResolveInfo(
        exeContext,
        fieldDef,
        fieldNodes,
        parentType,
        path2
      );
      try {
        const args = (0, _values.getArgumentValues)(
          fieldDef,
          fieldNodes[0],
          exeContext.variableValues
        );
        const contextValue = exeContext.contextValue;
        const result = resolveFn(source, args, contextValue, info);
        let completed;
        if ((0, _isPromise.isPromise)(result)) {
          completed = result.then(
            (resolved) => completeValue(exeContext, returnType, fieldNodes, info, path2, resolved)
          );
        } else {
          completed = completeValue(
            exeContext,
            returnType,
            fieldNodes,
            info,
            path2,
            result
          );
        }
        if ((0, _isPromise.isPromise)(completed)) {
          return completed.then(void 0, (rawError) => {
            const error = (0, _locatedError.locatedError)(
              rawError,
              fieldNodes,
              (0, _Path.pathToArray)(path2)
            );
            return handleFieldError(error, returnType, exeContext);
          });
        }
        return completed;
      } catch (rawError) {
        const error = (0, _locatedError.locatedError)(
          rawError,
          fieldNodes,
          (0, _Path.pathToArray)(path2)
        );
        return handleFieldError(error, returnType, exeContext);
      }
    }
    function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path2) {
      return {
        fieldName: fieldDef.name,
        fieldNodes,
        returnType: fieldDef.type,
        parentType,
        path: path2,
        schema: exeContext.schema,
        fragments: exeContext.fragments,
        rootValue: exeContext.rootValue,
        operation: exeContext.operation,
        variableValues: exeContext.variableValues
      };
    }
    function handleFieldError(error, returnType, exeContext) {
      if ((0, _definition.isNonNullType)(returnType)) {
        throw error;
      }
      exeContext.errors.push(error);
      return null;
    }
    function completeValue(exeContext, returnType, fieldNodes, info, path2, result) {
      if (result instanceof Error) {
        throw result;
      }
      if ((0, _definition.isNonNullType)(returnType)) {
        const completed = completeValue(
          exeContext,
          returnType.ofType,
          fieldNodes,
          info,
          path2,
          result
        );
        if (completed === null) {
          throw new Error(
            `Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`
          );
        }
        return completed;
      }
      if (result == null) {
        return null;
      }
      if ((0, _definition.isListType)(returnType)) {
        return completeListValue(
          exeContext,
          returnType,
          fieldNodes,
          info,
          path2,
          result
        );
      }
      if ((0, _definition.isLeafType)(returnType)) {
        return completeLeafValue(returnType, result);
      }
      if ((0, _definition.isAbstractType)(returnType)) {
        return completeAbstractValue(
          exeContext,
          returnType,
          fieldNodes,
          info,
          path2,
          result
        );
      }
      if ((0, _definition.isObjectType)(returnType)) {
        return completeObjectValue(
          exeContext,
          returnType,
          fieldNodes,
          info,
          path2,
          result
        );
      }
      (0, _invariant.invariant)(
        false,
        "Cannot complete value of unexpected output type: " + (0, _inspect.inspect)(returnType)
      );
    }
    function completeListValue(exeContext, returnType, fieldNodes, info, path2, result) {
      if (!(0, _isIterableObject.isIterableObject)(result)) {
        throw new _GraphQLError.GraphQLError(
          `Expected Iterable, but did not find one for field "${info.parentType.name}.${info.fieldName}".`
        );
      }
      const itemType = returnType.ofType;
      let containsPromise = false;
      const completedResults = Array.from(result, (item, index) => {
        const itemPath = (0, _Path.addPath)(path2, index, void 0);
        try {
          let completedItem;
          if ((0, _isPromise.isPromise)(item)) {
            completedItem = item.then(
              (resolved) => completeValue(
                exeContext,
                itemType,
                fieldNodes,
                info,
                itemPath,
                resolved
              )
            );
          } else {
            completedItem = completeValue(
              exeContext,
              itemType,
              fieldNodes,
              info,
              itemPath,
              item
            );
          }
          if ((0, _isPromise.isPromise)(completedItem)) {
            containsPromise = true;
            return completedItem.then(void 0, (rawError) => {
              const error = (0, _locatedError.locatedError)(
                rawError,
                fieldNodes,
                (0, _Path.pathToArray)(itemPath)
              );
              return handleFieldError(error, itemType, exeContext);
            });
          }
          return completedItem;
        } catch (rawError) {
          const error = (0, _locatedError.locatedError)(
            rawError,
            fieldNodes,
            (0, _Path.pathToArray)(itemPath)
          );
          return handleFieldError(error, itemType, exeContext);
        }
      });
      return containsPromise ? Promise.all(completedResults) : completedResults;
    }
    function completeLeafValue(returnType, result) {
      const serializedResult = returnType.serialize(result);
      if (serializedResult == null) {
        throw new Error(
          `Expected \`${(0, _inspect.inspect)(returnType)}.serialize(${(0, _inspect.inspect)(result)})\` to return non-nullable value, returned: ${(0, _inspect.inspect)(
            serializedResult
          )}`
        );
      }
      return serializedResult;
    }
    function completeAbstractValue(exeContext, returnType, fieldNodes, info, path2, result) {
      var _returnType$resolveTy;
      const resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;
      const contextValue = exeContext.contextValue;
      const runtimeType = resolveTypeFn(result, contextValue, info, returnType);
      if ((0, _isPromise.isPromise)(runtimeType)) {
        return runtimeType.then(
          (resolvedRuntimeType) => completeObjectValue(
            exeContext,
            ensureValidRuntimeType(
              resolvedRuntimeType,
              exeContext,
              returnType,
              fieldNodes,
              info,
              result
            ),
            fieldNodes,
            info,
            path2,
            result
          )
        );
      }
      return completeObjectValue(
        exeContext,
        ensureValidRuntimeType(
          runtimeType,
          exeContext,
          returnType,
          fieldNodes,
          info,
          result
        ),
        fieldNodes,
        info,
        path2,
        result
      );
    }
    function ensureValidRuntimeType(runtimeTypeName, exeContext, returnType, fieldNodes, info, result) {
      if (runtimeTypeName == null) {
        throw new _GraphQLError.GraphQLError(
          `Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${info.parentType.name}.${info.fieldName}". Either the "${returnType.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`,
          fieldNodes
        );
      }
      if ((0, _definition.isObjectType)(runtimeTypeName)) {
        throw new _GraphQLError.GraphQLError(
          "Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead."
        );
      }
      if (typeof runtimeTypeName !== "string") {
        throw new _GraphQLError.GraphQLError(
          `Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${info.parentType.name}.${info.fieldName}" with value ${(0, _inspect.inspect)(result)}, received "${(0, _inspect.inspect)(runtimeTypeName)}".`
        );
      }
      const runtimeType = exeContext.schema.getType(runtimeTypeName);
      if (runtimeType == null) {
        throw new _GraphQLError.GraphQLError(
          `Abstract type "${returnType.name}" was resolved to a type "${runtimeTypeName}" that does not exist inside the schema.`,
          {
            nodes: fieldNodes
          }
        );
      }
      if (!(0, _definition.isObjectType)(runtimeType)) {
        throw new _GraphQLError.GraphQLError(
          `Abstract type "${returnType.name}" was resolved to a non-object type "${runtimeTypeName}".`,
          {
            nodes: fieldNodes
          }
        );
      }
      if (!exeContext.schema.isSubType(returnType, runtimeType)) {
        throw new _GraphQLError.GraphQLError(
          `Runtime Object type "${runtimeType.name}" is not a possible type for "${returnType.name}".`,
          {
            nodes: fieldNodes
          }
        );
      }
      return runtimeType;
    }
    function completeObjectValue(exeContext, returnType, fieldNodes, info, path2, result) {
      const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);
      if (returnType.isTypeOf) {
        const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);
        if ((0, _isPromise.isPromise)(isTypeOf)) {
          return isTypeOf.then((resolvedIsTypeOf) => {
            if (!resolvedIsTypeOf) {
              throw invalidReturnTypeError(returnType, result, fieldNodes);
            }
            return executeFields(
              exeContext,
              returnType,
              result,
              path2,
              subFieldNodes
            );
          });
        }
        if (!isTypeOf) {
          throw invalidReturnTypeError(returnType, result, fieldNodes);
        }
      }
      return executeFields(exeContext, returnType, result, path2, subFieldNodes);
    }
    function invalidReturnTypeError(returnType, result, fieldNodes) {
      return new _GraphQLError.GraphQLError(
        `Expected value of type "${returnType.name}" but got: ${(0, _inspect.inspect)(result)}.`,
        {
          nodes: fieldNodes
        }
      );
    }
    var defaultTypeResolver = function(value, contextValue, info, abstractType) {
      if ((0, _isObjectLike.isObjectLike)(value) && typeof value.__typename === "string") {
        return value.__typename;
      }
      const possibleTypes = info.schema.getPossibleTypes(abstractType);
      const promisedIsTypeOfResults = [];
      for (let i = 0; i < possibleTypes.length; i++) {
        const type = possibleTypes[i];
        if (type.isTypeOf) {
          const isTypeOfResult = type.isTypeOf(value, contextValue, info);
          if ((0, _isPromise.isPromise)(isTypeOfResult)) {
            promisedIsTypeOfResults[i] = isTypeOfResult;
          } else if (isTypeOfResult) {
            return type.name;
          }
        }
      }
      if (promisedIsTypeOfResults.length) {
        return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {
          for (let i = 0; i < isTypeOfResults.length; i++) {
            if (isTypeOfResults[i]) {
              return possibleTypes[i].name;
            }
          }
        });
      }
    };
    exports2.defaultTypeResolver = defaultTypeResolver;
    var defaultFieldResolver2 = function(source, args, contextValue, info) {
      if ((0, _isObjectLike.isObjectLike)(source) || typeof source === "function") {
        const property = source[info.fieldName];
        if (typeof property === "function") {
          return source[info.fieldName](args, contextValue, info);
        }
        return property;
      }
    };
    exports2.defaultFieldResolver = defaultFieldResolver2;
    function getFieldDef(schema, parentType, fieldNode) {
      const fieldName = fieldNode.name.value;
      if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
        return _introspection.SchemaMetaFieldDef;
      } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
        return _introspection.TypeMetaFieldDef;
      } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {
        return _introspection.TypeNameMetaFieldDef;
      }
      return parentType.getFields()[fieldName];
    }
  }
});

// node_modules/graphql/graphql.js
var require_graphql = __commonJS({
  "node_modules/graphql/graphql.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.graphql = graphql;
    exports2.graphqlSync = graphqlSync;
    var _devAssert = require_devAssert();
    var _isPromise = require_isPromise();
    var _parser = require_parser();
    var _validate = require_validate();
    var _validate2 = require_validate2();
    var _execute = require_execute();
    function graphql(args) {
      return new Promise((resolve) => resolve(graphqlImpl(args)));
    }
    function graphqlSync(args) {
      const result = graphqlImpl(args);
      if ((0, _isPromise.isPromise)(result)) {
        throw new Error("GraphQL execution failed to complete synchronously.");
      }
      return result;
    }
    function graphqlImpl(args) {
      arguments.length < 2 || (0, _devAssert.devAssert)(
        false,
        "graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead."
      );
      const {
        schema,
        source,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver,
        typeResolver
      } = args;
      const schemaValidationErrors = (0, _validate.validateSchema)(schema);
      if (schemaValidationErrors.length > 0) {
        return {
          errors: schemaValidationErrors
        };
      }
      let document;
      try {
        document = (0, _parser.parse)(source);
      } catch (syntaxError) {
        return {
          errors: [syntaxError]
        };
      }
      const validationErrors = (0, _validate2.validate)(schema, document);
      if (validationErrors.length > 0) {
        return {
          errors: validationErrors
        };
      }
      return (0, _execute.execute)({
        schema,
        document,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver,
        typeResolver
      });
    }
  }
});

// node_modules/graphql/type/index.js
var require_type2 = __commonJS({
  "node_modules/graphql/type/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "DEFAULT_DEPRECATION_REASON", {
      enumerable: true,
      get: function() {
        return _directives.DEFAULT_DEPRECATION_REASON;
      }
    });
    Object.defineProperty(exports2, "GRAPHQL_MAX_INT", {
      enumerable: true,
      get: function() {
        return _scalars.GRAPHQL_MAX_INT;
      }
    });
    Object.defineProperty(exports2, "GRAPHQL_MIN_INT", {
      enumerable: true,
      get: function() {
        return _scalars.GRAPHQL_MIN_INT;
      }
    });
    Object.defineProperty(exports2, "GraphQLBoolean", {
      enumerable: true,
      get: function() {
        return _scalars.GraphQLBoolean;
      }
    });
    Object.defineProperty(exports2, "GraphQLDeprecatedDirective", {
      enumerable: true,
      get: function() {
        return _directives.GraphQLDeprecatedDirective;
      }
    });
    Object.defineProperty(exports2, "GraphQLDirective", {
      enumerable: true,
      get: function() {
        return _directives.GraphQLDirective;
      }
    });
    Object.defineProperty(exports2, "GraphQLEnumType", {
      enumerable: true,
      get: function() {
        return _definition.GraphQLEnumType;
      }
    });
    Object.defineProperty(exports2, "GraphQLFloat", {
      enumerable: true,
      get: function() {
        return _scalars.GraphQLFloat;
      }
    });
    Object.defineProperty(exports2, "GraphQLID", {
      enumerable: true,
      get: function() {
        return _scalars.GraphQLID;
      }
    });
    Object.defineProperty(exports2, "GraphQLIncludeDirective", {
      enumerable: true,
      get: function() {
        return _directives.GraphQLIncludeDirective;
      }
    });
    Object.defineProperty(exports2, "GraphQLInputObjectType", {
      enumerable: true,
      get: function() {
        return _definition.GraphQLInputObjectType;
      }
    });
    Object.defineProperty(exports2, "GraphQLInt", {
      enumerable: true,
      get: function() {
        return _scalars.GraphQLInt;
      }
    });
    Object.defineProperty(exports2, "GraphQLInterfaceType", {
      enumerable: true,
      get: function() {
        return _definition.GraphQLInterfaceType;
      }
    });
    Object.defineProperty(exports2, "GraphQLList", {
      enumerable: true,
      get: function() {
        return _definition.GraphQLList;
      }
    });
    Object.defineProperty(exports2, "GraphQLNonNull", {
      enumerable: true,
      get: function() {
        return _definition.GraphQLNonNull;
      }
    });
    Object.defineProperty(exports2, "GraphQLObjectType", {
      enumerable: true,
      get: function() {
        return _definition.GraphQLObjectType;
      }
    });
    Object.defineProperty(exports2, "GraphQLOneOfDirective", {
      enumerable: true,
      get: function() {
        return _directives.GraphQLOneOfDirective;
      }
    });
    Object.defineProperty(exports2, "GraphQLScalarType", {
      enumerable: true,
      get: function() {
        return _definition.GraphQLScalarType;
      }
    });
    Object.defineProperty(exports2, "GraphQLSchema", {
      enumerable: true,
      get: function() {
        return _schema.GraphQLSchema;
      }
    });
    Object.defineProperty(exports2, "GraphQLSkipDirective", {
      enumerable: true,
      get: function() {
        return _directives.GraphQLSkipDirective;
      }
    });
    Object.defineProperty(exports2, "GraphQLSpecifiedByDirective", {
      enumerable: true,
      get: function() {
        return _directives.GraphQLSpecifiedByDirective;
      }
    });
    Object.defineProperty(exports2, "GraphQLString", {
      enumerable: true,
      get: function() {
        return _scalars.GraphQLString;
      }
    });
    Object.defineProperty(exports2, "GraphQLUnionType", {
      enumerable: true,
      get: function() {
        return _definition.GraphQLUnionType;
      }
    });
    Object.defineProperty(exports2, "SchemaMetaFieldDef", {
      enumerable: true,
      get: function() {
        return _introspection.SchemaMetaFieldDef;
      }
    });
    Object.defineProperty(exports2, "TypeKind", {
      enumerable: true,
      get: function() {
        return _introspection.TypeKind;
      }
    });
    Object.defineProperty(exports2, "TypeMetaFieldDef", {
      enumerable: true,
      get: function() {
        return _introspection.TypeMetaFieldDef;
      }
    });
    Object.defineProperty(exports2, "TypeNameMetaFieldDef", {
      enumerable: true,
      get: function() {
        return _introspection.TypeNameMetaFieldDef;
      }
    });
    Object.defineProperty(exports2, "__Directive", {
      enumerable: true,
      get: function() {
        return _introspection.__Directive;
      }
    });
    Object.defineProperty(exports2, "__DirectiveLocation", {
      enumerable: true,
      get: function() {
        return _introspection.__DirectiveLocation;
      }
    });
    Object.defineProperty(exports2, "__EnumValue", {
      enumerable: true,
      get: function() {
        return _introspection.__EnumValue;
      }
    });
    Object.defineProperty(exports2, "__Field", {
      enumerable: true,
      get: function() {
        return _introspection.__Field;
      }
    });
    Object.defineProperty(exports2, "__InputValue", {
      enumerable: true,
      get: function() {
        return _introspection.__InputValue;
      }
    });
    Object.defineProperty(exports2, "__Schema", {
      enumerable: true,
      get: function() {
        return _introspection.__Schema;
      }
    });
    Object.defineProperty(exports2, "__Type", {
      enumerable: true,
      get: function() {
        return _introspection.__Type;
      }
    });
    Object.defineProperty(exports2, "__TypeKind", {
      enumerable: true,
      get: function() {
        return _introspection.__TypeKind;
      }
    });
    Object.defineProperty(exports2, "assertAbstractType", {
      enumerable: true,
      get: function() {
        return _definition.assertAbstractType;
      }
    });
    Object.defineProperty(exports2, "assertCompositeType", {
      enumerable: true,
      get: function() {
        return _definition.assertCompositeType;
      }
    });
    Object.defineProperty(exports2, "assertDirective", {
      enumerable: true,
      get: function() {
        return _directives.assertDirective;
      }
    });
    Object.defineProperty(exports2, "assertEnumType", {
      enumerable: true,
      get: function() {
        return _definition.assertEnumType;
      }
    });
    Object.defineProperty(exports2, "assertEnumValueName", {
      enumerable: true,
      get: function() {
        return _assertName.assertEnumValueName;
      }
    });
    Object.defineProperty(exports2, "assertInputObjectType", {
      enumerable: true,
      get: function() {
        return _definition.assertInputObjectType;
      }
    });
    Object.defineProperty(exports2, "assertInputType", {
      enumerable: true,
      get: function() {
        return _definition.assertInputType;
      }
    });
    Object.defineProperty(exports2, "assertInterfaceType", {
      enumerable: true,
      get: function() {
        return _definition.assertInterfaceType;
      }
    });
    Object.defineProperty(exports2, "assertLeafType", {
      enumerable: true,
      get: function() {
        return _definition.assertLeafType;
      }
    });
    Object.defineProperty(exports2, "assertListType", {
      enumerable: true,
      get: function() {
        return _definition.assertListType;
      }
    });
    Object.defineProperty(exports2, "assertName", {
      enumerable: true,
      get: function() {
        return _assertName.assertName;
      }
    });
    Object.defineProperty(exports2, "assertNamedType", {
      enumerable: true,
      get: function() {
        return _definition.assertNamedType;
      }
    });
    Object.defineProperty(exports2, "assertNonNullType", {
      enumerable: true,
      get: function() {
        return _definition.assertNonNullType;
      }
    });
    Object.defineProperty(exports2, "assertNullableType", {
      enumerable: true,
      get: function() {
        return _definition.assertNullableType;
      }
    });
    Object.defineProperty(exports2, "assertObjectType", {
      enumerable: true,
      get: function() {
        return _definition.assertObjectType;
      }
    });
    Object.defineProperty(exports2, "assertOutputType", {
      enumerable: true,
      get: function() {
        return _definition.assertOutputType;
      }
    });
    Object.defineProperty(exports2, "assertScalarType", {
      enumerable: true,
      get: function() {
        return _definition.assertScalarType;
      }
    });
    Object.defineProperty(exports2, "assertSchema", {
      enumerable: true,
      get: function() {
        return _schema.assertSchema;
      }
    });
    Object.defineProperty(exports2, "assertType", {
      enumerable: true,
      get: function() {
        return _definition.assertType;
      }
    });
    Object.defineProperty(exports2, "assertUnionType", {
      enumerable: true,
      get: function() {
        return _definition.assertUnionType;
      }
    });
    Object.defineProperty(exports2, "assertValidSchema", {
      enumerable: true,
      get: function() {
        return _validate.assertValidSchema;
      }
    });
    Object.defineProperty(exports2, "assertWrappingType", {
      enumerable: true,
      get: function() {
        return _definition.assertWrappingType;
      }
    });
    Object.defineProperty(exports2, "getNamedType", {
      enumerable: true,
      get: function() {
        return _definition.getNamedType;
      }
    });
    Object.defineProperty(exports2, "getNullableType", {
      enumerable: true,
      get: function() {
        return _definition.getNullableType;
      }
    });
    Object.defineProperty(exports2, "introspectionTypes", {
      enumerable: true,
      get: function() {
        return _introspection.introspectionTypes;
      }
    });
    Object.defineProperty(exports2, "isAbstractType", {
      enumerable: true,
      get: function() {
        return _definition.isAbstractType;
      }
    });
    Object.defineProperty(exports2, "isCompositeType", {
      enumerable: true,
      get: function() {
        return _definition.isCompositeType;
      }
    });
    Object.defineProperty(exports2, "isDirective", {
      enumerable: true,
      get: function() {
        return _directives.isDirective;
      }
    });
    Object.defineProperty(exports2, "isEnumType", {
      enumerable: true,
      get: function() {
        return _definition.isEnumType;
      }
    });
    Object.defineProperty(exports2, "isInputObjectType", {
      enumerable: true,
      get: function() {
        return _definition.isInputObjectType;
      }
    });
    Object.defineProperty(exports2, "isInputType", {
      enumerable: true,
      get: function() {
        return _definition.isInputType;
      }
    });
    Object.defineProperty(exports2, "isInterfaceType", {
      enumerable: true,
      get: function() {
        return _definition.isInterfaceType;
      }
    });
    Object.defineProperty(exports2, "isIntrospectionType", {
      enumerable: true,
      get: function() {
        return _introspection.isIntrospectionType;
      }
    });
    Object.defineProperty(exports2, "isLeafType", {
      enumerable: true,
      get: function() {
        return _definition.isLeafType;
      }
    });
    Object.defineProperty(exports2, "isListType", {
      enumerable: true,
      get: function() {
        return _definition.isListType;
      }
    });
    Object.defineProperty(exports2, "isNamedType", {
      enumerable: true,
      get: function() {
        return _definition.isNamedType;
      }
    });
    Object.defineProperty(exports2, "isNonNullType", {
      enumerable: true,
      get: function() {
        return _definition.isNonNullType;
      }
    });
    Object.defineProperty(exports2, "isNullableType", {
      enumerable: true,
      get: function() {
        return _definition.isNullableType;
      }
    });
    Object.defineProperty(exports2, "isObjectType", {
      enumerable: true,
      get: function() {
        return _definition.isObjectType;
      }
    });
    Object.defineProperty(exports2, "isOutputType", {
      enumerable: true,
      get: function() {
        return _definition.isOutputType;
      }
    });
    Object.defineProperty(exports2, "isRequiredArgument", {
      enumerable: true,
      get: function() {
        return _definition.isRequiredArgument;
      }
    });
    Object.defineProperty(exports2, "isRequiredInputField", {
      enumerable: true,
      get: function() {
        return _definition.isRequiredInputField;
      }
    });
    Object.defineProperty(exports2, "isScalarType", {
      enumerable: true,
      get: function() {
        return _definition.isScalarType;
      }
    });
    Object.defineProperty(exports2, "isSchema", {
      enumerable: true,
      get: function() {
        return _schema.isSchema;
      }
    });
    Object.defineProperty(exports2, "isSpecifiedDirective", {
      enumerable: true,
      get: function() {
        return _directives.isSpecifiedDirective;
      }
    });
    Object.defineProperty(exports2, "isSpecifiedScalarType", {
      enumerable: true,
      get: function() {
        return _scalars.isSpecifiedScalarType;
      }
    });
    Object.defineProperty(exports2, "isType", {
      enumerable: true,
      get: function() {
        return _definition.isType;
      }
    });
    Object.defineProperty(exports2, "isUnionType", {
      enumerable: true,
      get: function() {
        return _definition.isUnionType;
      }
    });
    Object.defineProperty(exports2, "isWrappingType", {
      enumerable: true,
      get: function() {
        return _definition.isWrappingType;
      }
    });
    Object.defineProperty(exports2, "resolveObjMapThunk", {
      enumerable: true,
      get: function() {
        return _definition.resolveObjMapThunk;
      }
    });
    Object.defineProperty(exports2, "resolveReadonlyArrayThunk", {
      enumerable: true,
      get: function() {
        return _definition.resolveReadonlyArrayThunk;
      }
    });
    Object.defineProperty(exports2, "specifiedDirectives", {
      enumerable: true,
      get: function() {
        return _directives.specifiedDirectives;
      }
    });
    Object.defineProperty(exports2, "specifiedScalarTypes", {
      enumerable: true,
      get: function() {
        return _scalars.specifiedScalarTypes;
      }
    });
    Object.defineProperty(exports2, "validateSchema", {
      enumerable: true,
      get: function() {
        return _validate.validateSchema;
      }
    });
    var _schema = require_schema();
    var _definition = require_definition();
    var _directives = require_directives();
    var _scalars = require_scalars();
    var _introspection = require_introspection();
    var _validate = require_validate();
    var _assertName = require_assertName();
  }
});

// node_modules/graphql/language/index.js
var require_language = __commonJS({
  "node_modules/graphql/language/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "BREAK", {
      enumerable: true,
      get: function() {
        return _visitor.BREAK;
      }
    });
    Object.defineProperty(exports2, "DirectiveLocation", {
      enumerable: true,
      get: function() {
        return _directiveLocation.DirectiveLocation;
      }
    });
    Object.defineProperty(exports2, "Kind", {
      enumerable: true,
      get: function() {
        return _kinds.Kind;
      }
    });
    Object.defineProperty(exports2, "Lexer", {
      enumerable: true,
      get: function() {
        return _lexer.Lexer;
      }
    });
    Object.defineProperty(exports2, "Location", {
      enumerable: true,
      get: function() {
        return _ast.Location;
      }
    });
    Object.defineProperty(exports2, "OperationTypeNode", {
      enumerable: true,
      get: function() {
        return _ast.OperationTypeNode;
      }
    });
    Object.defineProperty(exports2, "Source", {
      enumerable: true,
      get: function() {
        return _source.Source;
      }
    });
    Object.defineProperty(exports2, "Token", {
      enumerable: true,
      get: function() {
        return _ast.Token;
      }
    });
    Object.defineProperty(exports2, "TokenKind", {
      enumerable: true,
      get: function() {
        return _tokenKind.TokenKind;
      }
    });
    Object.defineProperty(exports2, "getEnterLeaveForKind", {
      enumerable: true,
      get: function() {
        return _visitor.getEnterLeaveForKind;
      }
    });
    Object.defineProperty(exports2, "getLocation", {
      enumerable: true,
      get: function() {
        return _location.getLocation;
      }
    });
    Object.defineProperty(exports2, "getVisitFn", {
      enumerable: true,
      get: function() {
        return _visitor.getVisitFn;
      }
    });
    Object.defineProperty(exports2, "isConstValueNode", {
      enumerable: true,
      get: function() {
        return _predicates.isConstValueNode;
      }
    });
    Object.defineProperty(exports2, "isDefinitionNode", {
      enumerable: true,
      get: function() {
        return _predicates.isDefinitionNode;
      }
    });
    Object.defineProperty(exports2, "isExecutableDefinitionNode", {
      enumerable: true,
      get: function() {
        return _predicates.isExecutableDefinitionNode;
      }
    });
    Object.defineProperty(exports2, "isSelectionNode", {
      enumerable: true,
      get: function() {
        return _predicates.isSelectionNode;
      }
    });
    Object.defineProperty(exports2, "isTypeDefinitionNode", {
      enumerable: true,
      get: function() {
        return _predicates.isTypeDefinitionNode;
      }
    });
    Object.defineProperty(exports2, "isTypeExtensionNode", {
      enumerable: true,
      get: function() {
        return _predicates.isTypeExtensionNode;
      }
    });
    Object.defineProperty(exports2, "isTypeNode", {
      enumerable: true,
      get: function() {
        return _predicates.isTypeNode;
      }
    });
    Object.defineProperty(exports2, "isTypeSystemDefinitionNode", {
      enumerable: true,
      get: function() {
        return _predicates.isTypeSystemDefinitionNode;
      }
    });
    Object.defineProperty(exports2, "isTypeSystemExtensionNode", {
      enumerable: true,
      get: function() {
        return _predicates.isTypeSystemExtensionNode;
      }
    });
    Object.defineProperty(exports2, "isValueNode", {
      enumerable: true,
      get: function() {
        return _predicates.isValueNode;
      }
    });
    Object.defineProperty(exports2, "parse", {
      enumerable: true,
      get: function() {
        return _parser.parse;
      }
    });
    Object.defineProperty(exports2, "parseConstValue", {
      enumerable: true,
      get: function() {
        return _parser.parseConstValue;
      }
    });
    Object.defineProperty(exports2, "parseType", {
      enumerable: true,
      get: function() {
        return _parser.parseType;
      }
    });
    Object.defineProperty(exports2, "parseValue", {
      enumerable: true,
      get: function() {
        return _parser.parseValue;
      }
    });
    Object.defineProperty(exports2, "print", {
      enumerable: true,
      get: function() {
        return _printer.print;
      }
    });
    Object.defineProperty(exports2, "printLocation", {
      enumerable: true,
      get: function() {
        return _printLocation.printLocation;
      }
    });
    Object.defineProperty(exports2, "printSourceLocation", {
      enumerable: true,
      get: function() {
        return _printLocation.printSourceLocation;
      }
    });
    Object.defineProperty(exports2, "visit", {
      enumerable: true,
      get: function() {
        return _visitor.visit;
      }
    });
    Object.defineProperty(exports2, "visitInParallel", {
      enumerable: true,
      get: function() {
        return _visitor.visitInParallel;
      }
    });
    var _source = require_source();
    var _location = require_location();
    var _printLocation = require_printLocation();
    var _kinds = require_kinds();
    var _tokenKind = require_tokenKind();
    var _lexer = require_lexer();
    var _parser = require_parser();
    var _printer = require_printer();
    var _visitor = require_visitor();
    var _ast = require_ast();
    var _predicates = require_predicates();
    var _directiveLocation = require_directiveLocation();
  }
});

// node_modules/graphql/jsutils/isAsyncIterable.js
var require_isAsyncIterable = __commonJS({
  "node_modules/graphql/jsutils/isAsyncIterable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.isAsyncIterable = isAsyncIterable;
    function isAsyncIterable(maybeAsyncIterable) {
      return typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0 ? void 0 : maybeAsyncIterable[Symbol.asyncIterator]) === "function";
    }
  }
});

// node_modules/graphql/execution/mapAsyncIterator.js
var require_mapAsyncIterator = __commonJS({
  "node_modules/graphql/execution/mapAsyncIterator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.mapAsyncIterator = mapAsyncIterator;
    function mapAsyncIterator(iterable, callback) {
      const iterator = iterable[Symbol.asyncIterator]();
      async function mapResult(result) {
        if (result.done) {
          return result;
        }
        try {
          return {
            value: await callback(result.value),
            done: false
          };
        } catch (error) {
          if (typeof iterator.return === "function") {
            try {
              await iterator.return();
            } catch (_e2) {
            }
          }
          throw error;
        }
      }
      return {
        async next() {
          return mapResult(await iterator.next());
        },
        async return() {
          return typeof iterator.return === "function" ? mapResult(await iterator.return()) : {
            value: void 0,
            done: true
          };
        },
        async throw(error) {
          if (typeof iterator.throw === "function") {
            return mapResult(await iterator.throw(error));
          }
          throw error;
        },
        [Symbol.asyncIterator]() {
          return this;
        }
      };
    }
  }
});

// node_modules/graphql/execution/subscribe.js
var require_subscribe = __commonJS({
  "node_modules/graphql/execution/subscribe.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.createSourceEventStream = createSourceEventStream;
    exports2.subscribe = subscribe;
    var _devAssert = require_devAssert();
    var _inspect = require_inspect();
    var _isAsyncIterable = require_isAsyncIterable();
    var _Path = require_Path();
    var _GraphQLError = require_GraphQLError();
    var _locatedError = require_locatedError();
    var _collectFields = require_collectFields();
    var _execute = require_execute();
    var _mapAsyncIterator = require_mapAsyncIterator();
    var _values = require_values();
    async function subscribe(args) {
      arguments.length < 2 || (0, _devAssert.devAssert)(
        false,
        "graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead."
      );
      const resultOrStream = await createSourceEventStream(args);
      if (!(0, _isAsyncIterable.isAsyncIterable)(resultOrStream)) {
        return resultOrStream;
      }
      const mapSourceToResponse = (payload) => (0, _execute.execute)({ ...args, rootValue: payload });
      return (0, _mapAsyncIterator.mapAsyncIterator)(
        resultOrStream,
        mapSourceToResponse
      );
    }
    function toNormalizedArgs(args) {
      const firstArg = args[0];
      if (firstArg && "document" in firstArg) {
        return firstArg;
      }
      return {
        schema: firstArg,
        // FIXME: when underlying TS bug fixed, see https://github.com/microsoft/TypeScript/issues/31613
        document: args[1],
        rootValue: args[2],
        contextValue: args[3],
        variableValues: args[4],
        operationName: args[5],
        subscribeFieldResolver: args[6]
      };
    }
    async function createSourceEventStream(...rawArgs) {
      const args = toNormalizedArgs(rawArgs);
      const { schema, document, variableValues } = args;
      (0, _execute.assertValidExecutionArguments)(schema, document, variableValues);
      const exeContext = (0, _execute.buildExecutionContext)(args);
      if (!("schema" in exeContext)) {
        return {
          errors: exeContext
        };
      }
      try {
        const eventStream = await executeSubscription(exeContext);
        if (!(0, _isAsyncIterable.isAsyncIterable)(eventStream)) {
          throw new Error(
            `Subscription field must return Async Iterable. Received: ${(0, _inspect.inspect)(eventStream)}.`
          );
        }
        return eventStream;
      } catch (error) {
        if (error instanceof _GraphQLError.GraphQLError) {
          return {
            errors: [error]
          };
        }
        throw error;
      }
    }
    async function executeSubscription(exeContext) {
      const { schema, fragments, operation, variableValues, rootValue } = exeContext;
      const rootType = schema.getSubscriptionType();
      if (rootType == null) {
        throw new _GraphQLError.GraphQLError(
          "Schema is not configured to execute subscription operation.",
          {
            nodes: operation
          }
        );
      }
      const rootFields = (0, _collectFields.collectFields)(
        schema,
        fragments,
        variableValues,
        rootType,
        operation.selectionSet
      );
      const [responseName, fieldNodes] = [...rootFields.entries()][0];
      const fieldDef = (0, _execute.getFieldDef)(schema, rootType, fieldNodes[0]);
      if (!fieldDef) {
        const fieldName = fieldNodes[0].name.value;
        throw new _GraphQLError.GraphQLError(
          `The subscription field "${fieldName}" is not defined.`,
          {
            nodes: fieldNodes
          }
        );
      }
      const path2 = (0, _Path.addPath)(void 0, responseName, rootType.name);
      const info = (0, _execute.buildResolveInfo)(
        exeContext,
        fieldDef,
        fieldNodes,
        rootType,
        path2
      );
      try {
        var _fieldDef$subscribe;
        const args = (0, _values.getArgumentValues)(
          fieldDef,
          fieldNodes[0],
          variableValues
        );
        const contextValue = exeContext.contextValue;
        const resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;
        const eventStream = await resolveFn(rootValue, args, contextValue, info);
        if (eventStream instanceof Error) {
          throw eventStream;
        }
        return eventStream;
      } catch (error) {
        throw (0, _locatedError.locatedError)(
          error,
          fieldNodes,
          (0, _Path.pathToArray)(path2)
        );
      }
    }
  }
});

// node_modules/graphql/execution/index.js
var require_execution = __commonJS({
  "node_modules/graphql/execution/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "createSourceEventStream", {
      enumerable: true,
      get: function() {
        return _subscribe.createSourceEventStream;
      }
    });
    Object.defineProperty(exports2, "defaultFieldResolver", {
      enumerable: true,
      get: function() {
        return _execute.defaultFieldResolver;
      }
    });
    Object.defineProperty(exports2, "defaultTypeResolver", {
      enumerable: true,
      get: function() {
        return _execute.defaultTypeResolver;
      }
    });
    Object.defineProperty(exports2, "execute", {
      enumerable: true,
      get: function() {
        return _execute.execute;
      }
    });
    Object.defineProperty(exports2, "executeSync", {
      enumerable: true,
      get: function() {
        return _execute.executeSync;
      }
    });
    Object.defineProperty(exports2, "getArgumentValues", {
      enumerable: true,
      get: function() {
        return _values.getArgumentValues;
      }
    });
    Object.defineProperty(exports2, "getDirectiveValues", {
      enumerable: true,
      get: function() {
        return _values.getDirectiveValues;
      }
    });
    Object.defineProperty(exports2, "getVariableValues", {
      enumerable: true,
      get: function() {
        return _values.getVariableValues;
      }
    });
    Object.defineProperty(exports2, "responsePathAsArray", {
      enumerable: true,
      get: function() {
        return _Path.pathToArray;
      }
    });
    Object.defineProperty(exports2, "subscribe", {
      enumerable: true,
      get: function() {
        return _subscribe.subscribe;
      }
    });
    var _Path = require_Path();
    var _execute = require_execute();
    var _subscribe = require_subscribe();
    var _values = require_values();
  }
});

// node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.js
var require_NoDeprecatedCustomRule = __commonJS({
  "node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.NoDeprecatedCustomRule = NoDeprecatedCustomRule;
    var _invariant = require_invariant();
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    function NoDeprecatedCustomRule(context2) {
      return {
        Field(node) {
          const fieldDef = context2.getFieldDef();
          const deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;
          if (fieldDef && deprecationReason != null) {
            const parentType = context2.getParentType();
            parentType != null || (0, _invariant.invariant)(false);
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`,
                {
                  nodes: node
                }
              )
            );
          }
        },
        Argument(node) {
          const argDef = context2.getArgument();
          const deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;
          if (argDef && deprecationReason != null) {
            const directiveDef = context2.getDirective();
            if (directiveDef != null) {
              context2.reportError(
                new _GraphQLError.GraphQLError(
                  `Directive "@${directiveDef.name}" argument "${argDef.name}" is deprecated. ${deprecationReason}`,
                  {
                    nodes: node
                  }
                )
              );
            } else {
              const parentType = context2.getParentType();
              const fieldDef = context2.getFieldDef();
              parentType != null && fieldDef != null || (0, _invariant.invariant)(false);
              context2.reportError(
                new _GraphQLError.GraphQLError(
                  `Field "${parentType.name}.${fieldDef.name}" argument "${argDef.name}" is deprecated. ${deprecationReason}`,
                  {
                    nodes: node
                  }
                )
              );
            }
          }
        },
        ObjectField(node) {
          const inputObjectDef = (0, _definition.getNamedType)(
            context2.getParentInputType()
          );
          if ((0, _definition.isInputObjectType)(inputObjectDef)) {
            const inputFieldDef = inputObjectDef.getFields()[node.name.value];
            const deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;
            if (deprecationReason != null) {
              context2.reportError(
                new _GraphQLError.GraphQLError(
                  `The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`,
                  {
                    nodes: node
                  }
                )
              );
            }
          }
        },
        EnumValue(node) {
          const enumValueDef = context2.getEnumValue();
          const deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;
          if (enumValueDef && deprecationReason != null) {
            const enumTypeDef = (0, _definition.getNamedType)(
              context2.getInputType()
            );
            enumTypeDef != null || (0, _invariant.invariant)(false);
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `The enum value "${enumTypeDef.name}.${enumValueDef.name}" is deprecated. ${deprecationReason}`,
                {
                  nodes: node
                }
              )
            );
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.js
var require_NoSchemaIntrospectionCustomRule = __commonJS({
  "node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.NoSchemaIntrospectionCustomRule = NoSchemaIntrospectionCustomRule;
    var _GraphQLError = require_GraphQLError();
    var _definition = require_definition();
    var _introspection = require_introspection();
    function NoSchemaIntrospectionCustomRule(context2) {
      return {
        Field(node) {
          const type = (0, _definition.getNamedType)(context2.getType());
          if (type && (0, _introspection.isIntrospectionType)(type)) {
            context2.reportError(
              new _GraphQLError.GraphQLError(
                `GraphQL introspection has been disabled, but the requested query contained the field "${node.name.value}".`,
                {
                  nodes: node
                }
              )
            );
          }
        }
      };
    }
  }
});

// node_modules/graphql/validation/index.js
var require_validation = __commonJS({
  "node_modules/graphql/validation/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "ExecutableDefinitionsRule", {
      enumerable: true,
      get: function() {
        return _ExecutableDefinitionsRule.ExecutableDefinitionsRule;
      }
    });
    Object.defineProperty(exports2, "FieldsOnCorrectTypeRule", {
      enumerable: true,
      get: function() {
        return _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule;
      }
    });
    Object.defineProperty(exports2, "FragmentsOnCompositeTypesRule", {
      enumerable: true,
      get: function() {
        return _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule;
      }
    });
    Object.defineProperty(exports2, "KnownArgumentNamesRule", {
      enumerable: true,
      get: function() {
        return _KnownArgumentNamesRule.KnownArgumentNamesRule;
      }
    });
    Object.defineProperty(exports2, "KnownDirectivesRule", {
      enumerable: true,
      get: function() {
        return _KnownDirectivesRule.KnownDirectivesRule;
      }
    });
    Object.defineProperty(exports2, "KnownFragmentNamesRule", {
      enumerable: true,
      get: function() {
        return _KnownFragmentNamesRule.KnownFragmentNamesRule;
      }
    });
    Object.defineProperty(exports2, "KnownTypeNamesRule", {
      enumerable: true,
      get: function() {
        return _KnownTypeNamesRule.KnownTypeNamesRule;
      }
    });
    Object.defineProperty(exports2, "LoneAnonymousOperationRule", {
      enumerable: true,
      get: function() {
        return _LoneAnonymousOperationRule.LoneAnonymousOperationRule;
      }
    });
    Object.defineProperty(exports2, "LoneSchemaDefinitionRule", {
      enumerable: true,
      get: function() {
        return _LoneSchemaDefinitionRule.LoneSchemaDefinitionRule;
      }
    });
    Object.defineProperty(exports2, "MaxIntrospectionDepthRule", {
      enumerable: true,
      get: function() {
        return _MaxIntrospectionDepthRule.MaxIntrospectionDepthRule;
      }
    });
    Object.defineProperty(exports2, "NoDeprecatedCustomRule", {
      enumerable: true,
      get: function() {
        return _NoDeprecatedCustomRule.NoDeprecatedCustomRule;
      }
    });
    Object.defineProperty(exports2, "NoFragmentCyclesRule", {
      enumerable: true,
      get: function() {
        return _NoFragmentCyclesRule.NoFragmentCyclesRule;
      }
    });
    Object.defineProperty(exports2, "NoSchemaIntrospectionCustomRule", {
      enumerable: true,
      get: function() {
        return _NoSchemaIntrospectionCustomRule.NoSchemaIntrospectionCustomRule;
      }
    });
    Object.defineProperty(exports2, "NoUndefinedVariablesRule", {
      enumerable: true,
      get: function() {
        return _NoUndefinedVariablesRule.NoUndefinedVariablesRule;
      }
    });
    Object.defineProperty(exports2, "NoUnusedFragmentsRule", {
      enumerable: true,
      get: function() {
        return _NoUnusedFragmentsRule.NoUnusedFragmentsRule;
      }
    });
    Object.defineProperty(exports2, "NoUnusedVariablesRule", {
      enumerable: true,
      get: function() {
        return _NoUnusedVariablesRule.NoUnusedVariablesRule;
      }
    });
    Object.defineProperty(exports2, "OverlappingFieldsCanBeMergedRule", {
      enumerable: true,
      get: function() {
        return _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule;
      }
    });
    Object.defineProperty(exports2, "PossibleFragmentSpreadsRule", {
      enumerable: true,
      get: function() {
        return _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule;
      }
    });
    Object.defineProperty(exports2, "PossibleTypeExtensionsRule", {
      enumerable: true,
      get: function() {
        return _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule;
      }
    });
    Object.defineProperty(exports2, "ProvidedRequiredArgumentsRule", {
      enumerable: true,
      get: function() {
        return _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule;
      }
    });
    Object.defineProperty(exports2, "ScalarLeafsRule", {
      enumerable: true,
      get: function() {
        return _ScalarLeafsRule.ScalarLeafsRule;
      }
    });
    Object.defineProperty(exports2, "SingleFieldSubscriptionsRule", {
      enumerable: true,
      get: function() {
        return _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule;
      }
    });
    Object.defineProperty(exports2, "UniqueArgumentDefinitionNamesRule", {
      enumerable: true,
      get: function() {
        return _UniqueArgumentDefinitionNamesRule.UniqueArgumentDefinitionNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueArgumentNamesRule", {
      enumerable: true,
      get: function() {
        return _UniqueArgumentNamesRule.UniqueArgumentNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueDirectiveNamesRule", {
      enumerable: true,
      get: function() {
        return _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueDirectivesPerLocationRule", {
      enumerable: true,
      get: function() {
        return _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule;
      }
    });
    Object.defineProperty(exports2, "UniqueEnumValueNamesRule", {
      enumerable: true,
      get: function() {
        return _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueFieldDefinitionNamesRule", {
      enumerable: true,
      get: function() {
        return _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueFragmentNamesRule", {
      enumerable: true,
      get: function() {
        return _UniqueFragmentNamesRule.UniqueFragmentNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueInputFieldNamesRule", {
      enumerable: true,
      get: function() {
        return _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueOperationNamesRule", {
      enumerable: true,
      get: function() {
        return _UniqueOperationNamesRule.UniqueOperationNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueOperationTypesRule", {
      enumerable: true,
      get: function() {
        return _UniqueOperationTypesRule.UniqueOperationTypesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueTypeNamesRule", {
      enumerable: true,
      get: function() {
        return _UniqueTypeNamesRule.UniqueTypeNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueVariableNamesRule", {
      enumerable: true,
      get: function() {
        return _UniqueVariableNamesRule.UniqueVariableNamesRule;
      }
    });
    Object.defineProperty(exports2, "ValidationContext", {
      enumerable: true,
      get: function() {
        return _ValidationContext.ValidationContext;
      }
    });
    Object.defineProperty(exports2, "ValuesOfCorrectTypeRule", {
      enumerable: true,
      get: function() {
        return _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule;
      }
    });
    Object.defineProperty(exports2, "VariablesAreInputTypesRule", {
      enumerable: true,
      get: function() {
        return _VariablesAreInputTypesRule.VariablesAreInputTypesRule;
      }
    });
    Object.defineProperty(exports2, "VariablesInAllowedPositionRule", {
      enumerable: true,
      get: function() {
        return _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule;
      }
    });
    Object.defineProperty(exports2, "recommendedRules", {
      enumerable: true,
      get: function() {
        return _specifiedRules.recommendedRules;
      }
    });
    Object.defineProperty(exports2, "specifiedRules", {
      enumerable: true,
      get: function() {
        return _specifiedRules.specifiedRules;
      }
    });
    Object.defineProperty(exports2, "validate", {
      enumerable: true,
      get: function() {
        return _validate.validate;
      }
    });
    var _validate = require_validate2();
    var _ValidationContext = require_ValidationContext();
    var _specifiedRules = require_specifiedRules();
    var _ExecutableDefinitionsRule = require_ExecutableDefinitionsRule();
    var _FieldsOnCorrectTypeRule = require_FieldsOnCorrectTypeRule();
    var _FragmentsOnCompositeTypesRule = require_FragmentsOnCompositeTypesRule();
    var _KnownArgumentNamesRule = require_KnownArgumentNamesRule();
    var _KnownDirectivesRule = require_KnownDirectivesRule();
    var _KnownFragmentNamesRule = require_KnownFragmentNamesRule();
    var _KnownTypeNamesRule = require_KnownTypeNamesRule();
    var _LoneAnonymousOperationRule = require_LoneAnonymousOperationRule();
    var _NoFragmentCyclesRule = require_NoFragmentCyclesRule();
    var _NoUndefinedVariablesRule = require_NoUndefinedVariablesRule();
    var _NoUnusedFragmentsRule = require_NoUnusedFragmentsRule();
    var _NoUnusedVariablesRule = require_NoUnusedVariablesRule();
    var _OverlappingFieldsCanBeMergedRule = require_OverlappingFieldsCanBeMergedRule();
    var _PossibleFragmentSpreadsRule = require_PossibleFragmentSpreadsRule();
    var _ProvidedRequiredArgumentsRule = require_ProvidedRequiredArgumentsRule();
    var _ScalarLeafsRule = require_ScalarLeafsRule();
    var _SingleFieldSubscriptionsRule = require_SingleFieldSubscriptionsRule();
    var _UniqueArgumentNamesRule = require_UniqueArgumentNamesRule();
    var _UniqueDirectivesPerLocationRule = require_UniqueDirectivesPerLocationRule();
    var _UniqueFragmentNamesRule = require_UniqueFragmentNamesRule();
    var _UniqueInputFieldNamesRule = require_UniqueInputFieldNamesRule();
    var _UniqueOperationNamesRule = require_UniqueOperationNamesRule();
    var _UniqueVariableNamesRule = require_UniqueVariableNamesRule();
    var _ValuesOfCorrectTypeRule = require_ValuesOfCorrectTypeRule();
    var _VariablesAreInputTypesRule = require_VariablesAreInputTypesRule();
    var _VariablesInAllowedPositionRule = require_VariablesInAllowedPositionRule();
    var _MaxIntrospectionDepthRule = require_MaxIntrospectionDepthRule();
    var _LoneSchemaDefinitionRule = require_LoneSchemaDefinitionRule();
    var _UniqueOperationTypesRule = require_UniqueOperationTypesRule();
    var _UniqueTypeNamesRule = require_UniqueTypeNamesRule();
    var _UniqueEnumValueNamesRule = require_UniqueEnumValueNamesRule();
    var _UniqueFieldDefinitionNamesRule = require_UniqueFieldDefinitionNamesRule();
    var _UniqueArgumentDefinitionNamesRule = require_UniqueArgumentDefinitionNamesRule();
    var _UniqueDirectiveNamesRule = require_UniqueDirectiveNamesRule();
    var _PossibleTypeExtensionsRule = require_PossibleTypeExtensionsRule();
    var _NoDeprecatedCustomRule = require_NoDeprecatedCustomRule();
    var _NoSchemaIntrospectionCustomRule = require_NoSchemaIntrospectionCustomRule();
  }
});

// node_modules/graphql/error/index.js
var require_error = __commonJS({
  "node_modules/graphql/error/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "GraphQLError", {
      enumerable: true,
      get: function() {
        return _GraphQLError.GraphQLError;
      }
    });
    Object.defineProperty(exports2, "formatError", {
      enumerable: true,
      get: function() {
        return _GraphQLError.formatError;
      }
    });
    Object.defineProperty(exports2, "locatedError", {
      enumerable: true,
      get: function() {
        return _locatedError.locatedError;
      }
    });
    Object.defineProperty(exports2, "printError", {
      enumerable: true,
      get: function() {
        return _GraphQLError.printError;
      }
    });
    Object.defineProperty(exports2, "syntaxError", {
      enumerable: true,
      get: function() {
        return _syntaxError.syntaxError;
      }
    });
    var _GraphQLError = require_GraphQLError();
    var _syntaxError = require_syntaxError();
    var _locatedError = require_locatedError();
  }
});

// node_modules/graphql/utilities/getIntrospectionQuery.js
var require_getIntrospectionQuery = __commonJS({
  "node_modules/graphql/utilities/getIntrospectionQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getIntrospectionQuery = getIntrospectionQuery;
    function getIntrospectionQuery(options) {
      const optionsWithDefault = {
        descriptions: true,
        specifiedByUrl: false,
        directiveIsRepeatable: false,
        schemaDescription: false,
        inputValueDeprecation: false,
        oneOf: false,
        ...options
      };
      const descriptions = optionsWithDefault.descriptions ? "description" : "";
      const specifiedByUrl = optionsWithDefault.specifiedByUrl ? "specifiedByURL" : "";
      const directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable ? "isRepeatable" : "";
      const schemaDescription = optionsWithDefault.schemaDescription ? descriptions : "";
      function inputDeprecation(str) {
        return optionsWithDefault.inputValueDeprecation ? str : "";
      }
      const oneOf = optionsWithDefault.oneOf ? "isOneOf" : "";
      return `
    query IntrospectionQuery {
      __schema {
        ${schemaDescription}
        queryType { name }
        mutationType { name }
        subscriptionType { name }
        types {
          ...FullType
        }
        directives {
          name
          ${descriptions}
          ${directiveIsRepeatable}
          locations
          args${inputDeprecation("(includeDeprecated: true)")} {
            ...InputValue
          }
        }
      }
    }

    fragment FullType on __Type {
      kind
      name
      ${descriptions}
      ${specifiedByUrl}
      ${oneOf}
      fields(includeDeprecated: true) {
        name
        ${descriptions}
        args${inputDeprecation("(includeDeprecated: true)")} {
          ...InputValue
        }
        type {
          ...TypeRef
        }
        isDeprecated
        deprecationReason
      }
      inputFields${inputDeprecation("(includeDeprecated: true)")} {
        ...InputValue
      }
      interfaces {
        ...TypeRef
      }
      enumValues(includeDeprecated: true) {
        name
        ${descriptions}
        isDeprecated
        deprecationReason
      }
      possibleTypes {
        ...TypeRef
      }
    }

    fragment InputValue on __InputValue {
      name
      ${descriptions}
      type { ...TypeRef }
      defaultValue
      ${inputDeprecation("isDeprecated")}
      ${inputDeprecation("deprecationReason")}
    }

    fragment TypeRef on __Type {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                  ofType {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  `;
    }
  }
});

// node_modules/graphql/utilities/getOperationAST.js
var require_getOperationAST = __commonJS({
  "node_modules/graphql/utilities/getOperationAST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getOperationAST = getOperationAST2;
    var _kinds = require_kinds();
    function getOperationAST2(documentAST, operationName) {
      let operation = null;
      for (const definition of documentAST.definitions) {
        if (definition.kind === _kinds.Kind.OPERATION_DEFINITION) {
          var _definition$name;
          if (operationName == null) {
            if (operation) {
              return null;
            }
            operation = definition;
          } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
            return definition;
          }
        }
      }
      return operation;
    }
  }
});

// node_modules/graphql/utilities/getOperationRootType.js
var require_getOperationRootType = __commonJS({
  "node_modules/graphql/utilities/getOperationRootType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.getOperationRootType = getOperationRootType;
    var _GraphQLError = require_GraphQLError();
    function getOperationRootType(schema, operation) {
      if (operation.operation === "query") {
        const queryType = schema.getQueryType();
        if (!queryType) {
          throw new _GraphQLError.GraphQLError(
            "Schema does not define the required query root type.",
            {
              nodes: operation
            }
          );
        }
        return queryType;
      }
      if (operation.operation === "mutation") {
        const mutationType = schema.getMutationType();
        if (!mutationType) {
          throw new _GraphQLError.GraphQLError(
            "Schema is not configured for mutations.",
            {
              nodes: operation
            }
          );
        }
        return mutationType;
      }
      if (operation.operation === "subscription") {
        const subscriptionType = schema.getSubscriptionType();
        if (!subscriptionType) {
          throw new _GraphQLError.GraphQLError(
            "Schema is not configured for subscriptions.",
            {
              nodes: operation
            }
          );
        }
        return subscriptionType;
      }
      throw new _GraphQLError.GraphQLError(
        "Can only have query, mutation and subscription operations.",
        {
          nodes: operation
        }
      );
    }
  }
});

// node_modules/graphql/utilities/introspectionFromSchema.js
var require_introspectionFromSchema = __commonJS({
  "node_modules/graphql/utilities/introspectionFromSchema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.introspectionFromSchema = introspectionFromSchema;
    var _invariant = require_invariant();
    var _parser = require_parser();
    var _execute = require_execute();
    var _getIntrospectionQuery = require_getIntrospectionQuery();
    function introspectionFromSchema(schema, options) {
      const optionsWithDefaults = {
        specifiedByUrl: true,
        directiveIsRepeatable: true,
        schemaDescription: true,
        inputValueDeprecation: true,
        oneOf: true,
        ...options
      };
      const document = (0, _parser.parse)(
        (0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults)
      );
      const result = (0, _execute.executeSync)({
        schema,
        document
      });
      !result.errors && result.data || (0, _invariant.invariant)(false);
      return result.data;
    }
  }
});

// node_modules/graphql/utilities/buildClientSchema.js
var require_buildClientSchema = __commonJS({
  "node_modules/graphql/utilities/buildClientSchema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.buildClientSchema = buildClientSchema;
    var _devAssert = require_devAssert();
    var _inspect = require_inspect();
    var _isObjectLike = require_isObjectLike();
    var _keyValMap = require_keyValMap();
    var _parser = require_parser();
    var _definition = require_definition();
    var _directives = require_directives();
    var _introspection = require_introspection();
    var _scalars = require_scalars();
    var _schema = require_schema();
    var _valueFromAST = require_valueFromAST();
    function buildClientSchema(introspection, options) {
      (0, _isObjectLike.isObjectLike)(introspection) && (0, _isObjectLike.isObjectLike)(introspection.__schema) || (0, _devAssert.devAssert)(
        false,
        `Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: ${(0, _inspect.inspect)(introspection)}.`
      );
      const schemaIntrospection = introspection.__schema;
      const typeMap = (0, _keyValMap.keyValMap)(
        schemaIntrospection.types,
        (typeIntrospection) => typeIntrospection.name,
        (typeIntrospection) => buildType(typeIntrospection)
      );
      for (const stdType of [
        ..._scalars.specifiedScalarTypes,
        ..._introspection.introspectionTypes
      ]) {
        if (typeMap[stdType.name]) {
          typeMap[stdType.name] = stdType;
        }
      }
      const queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;
      const mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;
      const subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null;
      const directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : [];
      return new _schema.GraphQLSchema({
        description: schemaIntrospection.description,
        query: queryType,
        mutation: mutationType,
        subscription: subscriptionType,
        types: Object.values(typeMap),
        directives,
        assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
      });
      function getType(typeRef) {
        if (typeRef.kind === _introspection.TypeKind.LIST) {
          const itemRef = typeRef.ofType;
          if (!itemRef) {
            throw new Error("Decorated type deeper than introspection query.");
          }
          return new _definition.GraphQLList(getType(itemRef));
        }
        if (typeRef.kind === _introspection.TypeKind.NON_NULL) {
          const nullableRef = typeRef.ofType;
          if (!nullableRef) {
            throw new Error("Decorated type deeper than introspection query.");
          }
          const nullableType = getType(nullableRef);
          return new _definition.GraphQLNonNull(
            (0, _definition.assertNullableType)(nullableType)
          );
        }
        return getNamedType6(typeRef);
      }
      function getNamedType6(typeRef) {
        const typeName = typeRef.name;
        if (!typeName) {
          throw new Error(
            `Unknown type reference: ${(0, _inspect.inspect)(typeRef)}.`
          );
        }
        const type = typeMap[typeName];
        if (!type) {
          throw new Error(
            `Invalid or incomplete schema, unknown type: ${typeName}. Ensure that a full introspection query is used in order to build a client schema.`
          );
        }
        return type;
      }
      function getObjectType(typeRef) {
        return (0, _definition.assertObjectType)(getNamedType6(typeRef));
      }
      function getInterfaceType(typeRef) {
        return (0, _definition.assertInterfaceType)(getNamedType6(typeRef));
      }
      function buildType(type) {
        if (type != null && type.name != null && type.kind != null) {
          switch (type.kind) {
            case _introspection.TypeKind.SCALAR:
              return buildScalarDef(type);
            case _introspection.TypeKind.OBJECT:
              return buildObjectDef(type);
            case _introspection.TypeKind.INTERFACE:
              return buildInterfaceDef(type);
            case _introspection.TypeKind.UNION:
              return buildUnionDef(type);
            case _introspection.TypeKind.ENUM:
              return buildEnumDef(type);
            case _introspection.TypeKind.INPUT_OBJECT:
              return buildInputObjectDef(type);
          }
        }
        const typeStr = (0, _inspect.inspect)(type);
        throw new Error(
          `Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${typeStr}.`
        );
      }
      function buildScalarDef(scalarIntrospection) {
        return new _definition.GraphQLScalarType({
          name: scalarIntrospection.name,
          description: scalarIntrospection.description,
          specifiedByURL: scalarIntrospection.specifiedByURL
        });
      }
      function buildImplementationsList(implementingIntrospection) {
        if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === _introspection.TypeKind.INTERFACE) {
          return [];
        }
        if (!implementingIntrospection.interfaces) {
          const implementingIntrospectionStr = (0, _inspect.inspect)(
            implementingIntrospection
          );
          throw new Error(
            `Introspection result missing interfaces: ${implementingIntrospectionStr}.`
          );
        }
        return implementingIntrospection.interfaces.map(getInterfaceType);
      }
      function buildObjectDef(objectIntrospection) {
        return new _definition.GraphQLObjectType({
          name: objectIntrospection.name,
          description: objectIntrospection.description,
          interfaces: () => buildImplementationsList(objectIntrospection),
          fields: () => buildFieldDefMap(objectIntrospection)
        });
      }
      function buildInterfaceDef(interfaceIntrospection) {
        return new _definition.GraphQLInterfaceType({
          name: interfaceIntrospection.name,
          description: interfaceIntrospection.description,
          interfaces: () => buildImplementationsList(interfaceIntrospection),
          fields: () => buildFieldDefMap(interfaceIntrospection)
        });
      }
      function buildUnionDef(unionIntrospection) {
        if (!unionIntrospection.possibleTypes) {
          const unionIntrospectionStr = (0, _inspect.inspect)(unionIntrospection);
          throw new Error(
            `Introspection result missing possibleTypes: ${unionIntrospectionStr}.`
          );
        }
        return new _definition.GraphQLUnionType({
          name: unionIntrospection.name,
          description: unionIntrospection.description,
          types: () => unionIntrospection.possibleTypes.map(getObjectType)
        });
      }
      function buildEnumDef(enumIntrospection) {
        if (!enumIntrospection.enumValues) {
          const enumIntrospectionStr = (0, _inspect.inspect)(enumIntrospection);
          throw new Error(
            `Introspection result missing enumValues: ${enumIntrospectionStr}.`
          );
        }
        return new _definition.GraphQLEnumType({
          name: enumIntrospection.name,
          description: enumIntrospection.description,
          values: (0, _keyValMap.keyValMap)(
            enumIntrospection.enumValues,
            (valueIntrospection) => valueIntrospection.name,
            (valueIntrospection) => ({
              description: valueIntrospection.description,
              deprecationReason: valueIntrospection.deprecationReason
            })
          )
        });
      }
      function buildInputObjectDef(inputObjectIntrospection) {
        if (!inputObjectIntrospection.inputFields) {
          const inputObjectIntrospectionStr = (0, _inspect.inspect)(
            inputObjectIntrospection
          );
          throw new Error(
            `Introspection result missing inputFields: ${inputObjectIntrospectionStr}.`
          );
        }
        return new _definition.GraphQLInputObjectType({
          name: inputObjectIntrospection.name,
          description: inputObjectIntrospection.description,
          fields: () => buildInputValueDefMap(inputObjectIntrospection.inputFields),
          isOneOf: inputObjectIntrospection.isOneOf
        });
      }
      function buildFieldDefMap(typeIntrospection) {
        if (!typeIntrospection.fields) {
          throw new Error(
            `Introspection result missing fields: ${(0, _inspect.inspect)(
              typeIntrospection
            )}.`
          );
        }
        return (0, _keyValMap.keyValMap)(
          typeIntrospection.fields,
          (fieldIntrospection) => fieldIntrospection.name,
          buildField
        );
      }
      function buildField(fieldIntrospection) {
        const type = getType(fieldIntrospection.type);
        if (!(0, _definition.isOutputType)(type)) {
          const typeStr = (0, _inspect.inspect)(type);
          throw new Error(
            `Introspection must provide output type for fields, but received: ${typeStr}.`
          );
        }
        if (!fieldIntrospection.args) {
          const fieldIntrospectionStr = (0, _inspect.inspect)(fieldIntrospection);
          throw new Error(
            `Introspection result missing field args: ${fieldIntrospectionStr}.`
          );
        }
        return {
          description: fieldIntrospection.description,
          deprecationReason: fieldIntrospection.deprecationReason,
          type,
          args: buildInputValueDefMap(fieldIntrospection.args)
        };
      }
      function buildInputValueDefMap(inputValueIntrospections) {
        return (0, _keyValMap.keyValMap)(
          inputValueIntrospections,
          (inputValue) => inputValue.name,
          buildInputValue
        );
      }
      function buildInputValue(inputValueIntrospection) {
        const type = getType(inputValueIntrospection.type);
        if (!(0, _definition.isInputType)(type)) {
          const typeStr = (0, _inspect.inspect)(type);
          throw new Error(
            `Introspection must provide input type for arguments, but received: ${typeStr}.`
          );
        }
        const defaultValue = inputValueIntrospection.defaultValue != null ? (0, _valueFromAST.valueFromAST)(
          (0, _parser.parseValue)(inputValueIntrospection.defaultValue),
          type
        ) : void 0;
        return {
          description: inputValueIntrospection.description,
          type,
          defaultValue,
          deprecationReason: inputValueIntrospection.deprecationReason
        };
      }
      function buildDirective(directiveIntrospection) {
        if (!directiveIntrospection.args) {
          const directiveIntrospectionStr = (0, _inspect.inspect)(
            directiveIntrospection
          );
          throw new Error(
            `Introspection result missing directive args: ${directiveIntrospectionStr}.`
          );
        }
        if (!directiveIntrospection.locations) {
          const directiveIntrospectionStr = (0, _inspect.inspect)(
            directiveIntrospection
          );
          throw new Error(
            `Introspection result missing directive locations: ${directiveIntrospectionStr}.`
          );
        }
        return new _directives.GraphQLDirective({
          name: directiveIntrospection.name,
          description: directiveIntrospection.description,
          isRepeatable: directiveIntrospection.isRepeatable,
          locations: directiveIntrospection.locations.slice(),
          args: buildInputValueDefMap(directiveIntrospection.args)
        });
      }
    }
  }
});

// node_modules/graphql/utilities/extendSchema.js
var require_extendSchema = __commonJS({
  "node_modules/graphql/utilities/extendSchema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.extendSchema = extendSchema;
    exports2.extendSchemaImpl = extendSchemaImpl;
    var _devAssert = require_devAssert();
    var _inspect = require_inspect();
    var _invariant = require_invariant();
    var _keyMap = require_keyMap();
    var _mapValue = require_mapValue();
    var _kinds = require_kinds();
    var _predicates = require_predicates();
    var _definition = require_definition();
    var _directives = require_directives();
    var _introspection = require_introspection();
    var _scalars = require_scalars();
    var _schema = require_schema();
    var _validate = require_validate2();
    var _values = require_values();
    var _valueFromAST = require_valueFromAST();
    function extendSchema(schema, documentAST, options) {
      (0, _schema.assertSchema)(schema);
      documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.devAssert)(false, "Must provide valid Document AST.");
      if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
        (0, _validate.assertValidSDLExtension)(documentAST, schema);
      }
      const schemaConfig = schema.toConfig();
      const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);
      return schemaConfig === extendedConfig ? schema : new _schema.GraphQLSchema(extendedConfig);
    }
    function extendSchemaImpl(schemaConfig, documentAST, options) {
      var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;
      const typeDefs = [];
      const typeExtensionsMap = /* @__PURE__ */ Object.create(null);
      const directiveDefs = [];
      let schemaDef;
      const schemaExtensions = [];
      for (const def of documentAST.definitions) {
        if (def.kind === _kinds.Kind.SCHEMA_DEFINITION) {
          schemaDef = def;
        } else if (def.kind === _kinds.Kind.SCHEMA_EXTENSION) {
          schemaExtensions.push(def);
        } else if ((0, _predicates.isTypeDefinitionNode)(def)) {
          typeDefs.push(def);
        } else if ((0, _predicates.isTypeExtensionNode)(def)) {
          const extendedTypeName = def.name.value;
          const existingTypeExtensions = typeExtensionsMap[extendedTypeName];
          typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];
        } else if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
          directiveDefs.push(def);
        }
      }
      if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {
        return schemaConfig;
      }
      const typeMap = /* @__PURE__ */ Object.create(null);
      for (const existingType of schemaConfig.types) {
        typeMap[existingType.name] = extendNamedType(existingType);
      }
      for (const typeNode of typeDefs) {
        var _stdTypeMap$name;
        const name = typeNode.name.value;
        typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);
      }
      const operationTypes = {
        // Get the extended root operation types.
        query: schemaConfig.query && replaceNamedType(schemaConfig.query),
        mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),
        subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),
        // Then, incorporate schema definition and all schema extensions.
        ...schemaDef && getOperationTypes([schemaDef]),
        ...getOperationTypes(schemaExtensions)
      };
      return {
        description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value,
        ...operationTypes,
        types: Object.values(typeMap),
        directives: [
          ...schemaConfig.directives.map(replaceDirective),
          ...directiveDefs.map(buildDirective)
        ],
        extensions: /* @__PURE__ */ Object.create(null),
        astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,
        extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),
        assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false
      };
      function replaceType(type) {
        if ((0, _definition.isListType)(type)) {
          return new _definition.GraphQLList(replaceType(type.ofType));
        }
        if ((0, _definition.isNonNullType)(type)) {
          return new _definition.GraphQLNonNull(replaceType(type.ofType));
        }
        return replaceNamedType(type);
      }
      function replaceNamedType(type) {
        return typeMap[type.name];
      }
      function replaceDirective(directive) {
        const config2 = directive.toConfig();
        return new _directives.GraphQLDirective({
          ...config2,
          args: (0, _mapValue.mapValue)(config2.args, extendArg)
        });
      }
      function extendNamedType(type) {
        if ((0, _introspection.isIntrospectionType)(type) || (0, _scalars.isSpecifiedScalarType)(type)) {
          return type;
        }
        if ((0, _definition.isScalarType)(type)) {
          return extendScalarType(type);
        }
        if ((0, _definition.isObjectType)(type)) {
          return extendObjectType(type);
        }
        if ((0, _definition.isInterfaceType)(type)) {
          return extendInterfaceType(type);
        }
        if ((0, _definition.isUnionType)(type)) {
          return extendUnionType(type);
        }
        if ((0, _definition.isEnumType)(type)) {
          return extendEnumType(type);
        }
        if ((0, _definition.isInputObjectType)(type)) {
          return extendInputObjectType(type);
        }
        (0, _invariant.invariant)(
          false,
          "Unexpected type: " + (0, _inspect.inspect)(type)
        );
      }
      function extendInputObjectType(type) {
        var _typeExtensionsMap$co;
        const config2 = type.toConfig();
        const extensions = (_typeExtensionsMap$co = typeExtensionsMap[config2.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];
        return new _definition.GraphQLInputObjectType({
          ...config2,
          fields: () => ({
            ...(0, _mapValue.mapValue)(config2.fields, (field) => ({
              ...field,
              type: replaceType(field.type)
            })),
            ...buildInputFieldMap(extensions)
          }),
          extensionASTNodes: config2.extensionASTNodes.concat(extensions)
        });
      }
      function extendEnumType(type) {
        var _typeExtensionsMap$ty;
        const config2 = type.toConfig();
        const extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];
        return new _definition.GraphQLEnumType({
          ...config2,
          values: { ...config2.values, ...buildEnumValueMap(extensions) },
          extensionASTNodes: config2.extensionASTNodes.concat(extensions)
        });
      }
      function extendScalarType(type) {
        var _typeExtensionsMap$co2;
        const config2 = type.toConfig();
        const extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config2.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];
        let specifiedByURL = config2.specifiedByURL;
        for (const extensionNode of extensions) {
          var _getSpecifiedByURL;
          specifiedByURL = (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null && _getSpecifiedByURL !== void 0 ? _getSpecifiedByURL : specifiedByURL;
        }
        return new _definition.GraphQLScalarType({
          ...config2,
          specifiedByURL,
          extensionASTNodes: config2.extensionASTNodes.concat(extensions)
        });
      }
      function extendObjectType(type) {
        var _typeExtensionsMap$co3;
        const config2 = type.toConfig();
        const extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config2.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];
        return new _definition.GraphQLObjectType({
          ...config2,
          interfaces: () => [
            ...type.getInterfaces().map(replaceNamedType),
            ...buildInterfaces(extensions)
          ],
          fields: () => ({
            ...(0, _mapValue.mapValue)(config2.fields, extendField),
            ...buildFieldMap(extensions)
          }),
          extensionASTNodes: config2.extensionASTNodes.concat(extensions)
        });
      }
      function extendInterfaceType(type) {
        var _typeExtensionsMap$co4;
        const config2 = type.toConfig();
        const extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config2.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];
        return new _definition.GraphQLInterfaceType({
          ...config2,
          interfaces: () => [
            ...type.getInterfaces().map(replaceNamedType),
            ...buildInterfaces(extensions)
          ],
          fields: () => ({
            ...(0, _mapValue.mapValue)(config2.fields, extendField),
            ...buildFieldMap(extensions)
          }),
          extensionASTNodes: config2.extensionASTNodes.concat(extensions)
        });
      }
      function extendUnionType(type) {
        var _typeExtensionsMap$co5;
        const config2 = type.toConfig();
        const extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config2.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];
        return new _definition.GraphQLUnionType({
          ...config2,
          types: () => [
            ...type.getTypes().map(replaceNamedType),
            ...buildUnionTypes(extensions)
          ],
          extensionASTNodes: config2.extensionASTNodes.concat(extensions)
        });
      }
      function extendField(field) {
        return {
          ...field,
          type: replaceType(field.type),
          args: field.args && (0, _mapValue.mapValue)(field.args, extendArg)
        };
      }
      function extendArg(arg) {
        return { ...arg, type: replaceType(arg.type) };
      }
      function getOperationTypes(nodes) {
        const opTypes = {};
        for (const node of nodes) {
          var _node$operationTypes;
          const operationTypesNodes = (
            /* c8 ignore next */
            (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : []
          );
          for (const operationType of operationTypesNodes) {
            opTypes[operationType.operation] = getNamedType6(operationType.type);
          }
        }
        return opTypes;
      }
      function getNamedType6(node) {
        var _stdTypeMap$name2;
        const name = node.name.value;
        const type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];
        if (type === void 0) {
          throw new Error(`Unknown type: "${name}".`);
        }
        return type;
      }
      function getWrappedType(node) {
        if (node.kind === _kinds.Kind.LIST_TYPE) {
          return new _definition.GraphQLList(getWrappedType(node.type));
        }
        if (node.kind === _kinds.Kind.NON_NULL_TYPE) {
          return new _definition.GraphQLNonNull(getWrappedType(node.type));
        }
        return getNamedType6(node);
      }
      function buildDirective(node) {
        var _node$description;
        return new _directives.GraphQLDirective({
          name: node.name.value,
          description: (_node$description = node.description) === null || _node$description === void 0 ? void 0 : _node$description.value,
          // @ts-expect-error
          locations: node.locations.map(({ value }) => value),
          isRepeatable: node.repeatable,
          args: buildArgumentMap(node.arguments),
          astNode: node
        });
      }
      function buildFieldMap(nodes) {
        const fieldConfigMap = /* @__PURE__ */ Object.create(null);
        for (const node of nodes) {
          var _node$fields;
          const nodeFields = (
            /* c8 ignore next */
            (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : []
          );
          for (const field of nodeFields) {
            var _field$description;
            fieldConfigMap[field.name.value] = {
              // Note: While this could make assertions to get the correctly typed
              // value, that would throw immediately while type system validation
              // with validateSchema() will produce more actionable results.
              type: getWrappedType(field.type),
              description: (_field$description = field.description) === null || _field$description === void 0 ? void 0 : _field$description.value,
              args: buildArgumentMap(field.arguments),
              deprecationReason: getDeprecationReason(field),
              astNode: field
            };
          }
        }
        return fieldConfigMap;
      }
      function buildArgumentMap(args) {
        const argsNodes = (
          /* c8 ignore next */
          args !== null && args !== void 0 ? args : []
        );
        const argConfigMap = /* @__PURE__ */ Object.create(null);
        for (const arg of argsNodes) {
          var _arg$description;
          const type = getWrappedType(arg.type);
          argConfigMap[arg.name.value] = {
            type,
            description: (_arg$description = arg.description) === null || _arg$description === void 0 ? void 0 : _arg$description.value,
            defaultValue: (0, _valueFromAST.valueFromAST)(arg.defaultValue, type),
            deprecationReason: getDeprecationReason(arg),
            astNode: arg
          };
        }
        return argConfigMap;
      }
      function buildInputFieldMap(nodes) {
        const inputFieldMap = /* @__PURE__ */ Object.create(null);
        for (const node of nodes) {
          var _node$fields2;
          const fieldsNodes = (
            /* c8 ignore next */
            (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : []
          );
          for (const field of fieldsNodes) {
            var _field$description2;
            const type = getWrappedType(field.type);
            inputFieldMap[field.name.value] = {
              type,
              description: (_field$description2 = field.description) === null || _field$description2 === void 0 ? void 0 : _field$description2.value,
              defaultValue: (0, _valueFromAST.valueFromAST)(
                field.defaultValue,
                type
              ),
              deprecationReason: getDeprecationReason(field),
              astNode: field
            };
          }
        }
        return inputFieldMap;
      }
      function buildEnumValueMap(nodes) {
        const enumValueMap = /* @__PURE__ */ Object.create(null);
        for (const node of nodes) {
          var _node$values;
          const valuesNodes = (
            /* c8 ignore next */
            (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : []
          );
          for (const value of valuesNodes) {
            var _value$description;
            enumValueMap[value.name.value] = {
              description: (_value$description = value.description) === null || _value$description === void 0 ? void 0 : _value$description.value,
              deprecationReason: getDeprecationReason(value),
              astNode: value
            };
          }
        }
        return enumValueMap;
      }
      function buildInterfaces(nodes) {
        return nodes.flatMap(
          // FIXME: https://github.com/graphql/graphql-js/issues/2203
          (node) => {
            var _node$interfaces$map, _node$interfaces;
            return (
              /* c8 ignore next */
              (_node$interfaces$map = (_node$interfaces = node.interfaces) === null || _node$interfaces === void 0 ? void 0 : _node$interfaces.map(getNamedType6)) !== null && _node$interfaces$map !== void 0 ? _node$interfaces$map : []
            );
          }
        );
      }
      function buildUnionTypes(nodes) {
        return nodes.flatMap(
          // FIXME: https://github.com/graphql/graphql-js/issues/2203
          (node) => {
            var _node$types$map, _node$types;
            return (
              /* c8 ignore next */
              (_node$types$map = (_node$types = node.types) === null || _node$types === void 0 ? void 0 : _node$types.map(getNamedType6)) !== null && _node$types$map !== void 0 ? _node$types$map : []
            );
          }
        );
      }
      function buildType(astNode) {
        var _typeExtensionsMap$na;
        const name = astNode.name.value;
        const extensionASTNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];
        switch (astNode.kind) {
          case _kinds.Kind.OBJECT_TYPE_DEFINITION: {
            var _astNode$description;
            const allNodes = [astNode, ...extensionASTNodes];
            return new _definition.GraphQLObjectType({
              name,
              description: (_astNode$description = astNode.description) === null || _astNode$description === void 0 ? void 0 : _astNode$description.value,
              interfaces: () => buildInterfaces(allNodes),
              fields: () => buildFieldMap(allNodes),
              astNode,
              extensionASTNodes
            });
          }
          case _kinds.Kind.INTERFACE_TYPE_DEFINITION: {
            var _astNode$description2;
            const allNodes = [astNode, ...extensionASTNodes];
            return new _definition.GraphQLInterfaceType({
              name,
              description: (_astNode$description2 = astNode.description) === null || _astNode$description2 === void 0 ? void 0 : _astNode$description2.value,
              interfaces: () => buildInterfaces(allNodes),
              fields: () => buildFieldMap(allNodes),
              astNode,
              extensionASTNodes
            });
          }
          case _kinds.Kind.ENUM_TYPE_DEFINITION: {
            var _astNode$description3;
            const allNodes = [astNode, ...extensionASTNodes];
            return new _definition.GraphQLEnumType({
              name,
              description: (_astNode$description3 = astNode.description) === null || _astNode$description3 === void 0 ? void 0 : _astNode$description3.value,
              values: buildEnumValueMap(allNodes),
              astNode,
              extensionASTNodes
            });
          }
          case _kinds.Kind.UNION_TYPE_DEFINITION: {
            var _astNode$description4;
            const allNodes = [astNode, ...extensionASTNodes];
            return new _definition.GraphQLUnionType({
              name,
              description: (_astNode$description4 = astNode.description) === null || _astNode$description4 === void 0 ? void 0 : _astNode$description4.value,
              types: () => buildUnionTypes(allNodes),
              astNode,
              extensionASTNodes
            });
          }
          case _kinds.Kind.SCALAR_TYPE_DEFINITION: {
            var _astNode$description5;
            return new _definition.GraphQLScalarType({
              name,
              description: (_astNode$description5 = astNode.description) === null || _astNode$description5 === void 0 ? void 0 : _astNode$description5.value,
              specifiedByURL: getSpecifiedByURL(astNode),
              astNode,
              extensionASTNodes
            });
          }
          case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION: {
            var _astNode$description6;
            const allNodes = [astNode, ...extensionASTNodes];
            return new _definition.GraphQLInputObjectType({
              name,
              description: (_astNode$description6 = astNode.description) === null || _astNode$description6 === void 0 ? void 0 : _astNode$description6.value,
              fields: () => buildInputFieldMap(allNodes),
              astNode,
              extensionASTNodes,
              isOneOf: isOneOf(astNode)
            });
          }
        }
      }
    }
    var stdTypeMap = (0, _keyMap.keyMap)(
      [..._scalars.specifiedScalarTypes, ..._introspection.introspectionTypes],
      (type) => type.name
    );
    function getDeprecationReason(node) {
      const deprecated = (0, _values.getDirectiveValues)(
        _directives.GraphQLDeprecatedDirective,
        node
      );
      return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;
    }
    function getSpecifiedByURL(node) {
      const specifiedBy = (0, _values.getDirectiveValues)(
        _directives.GraphQLSpecifiedByDirective,
        node
      );
      return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;
    }
    function isOneOf(node) {
      return Boolean(
        (0, _values.getDirectiveValues)(_directives.GraphQLOneOfDirective, node)
      );
    }
  }
});

// node_modules/graphql/utilities/buildASTSchema.js
var require_buildASTSchema = __commonJS({
  "node_modules/graphql/utilities/buildASTSchema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.buildASTSchema = buildASTSchema2;
    exports2.buildSchema = buildSchema3;
    var _devAssert = require_devAssert();
    var _kinds = require_kinds();
    var _parser = require_parser();
    var _directives = require_directives();
    var _schema = require_schema();
    var _validate = require_validate2();
    var _extendSchema = require_extendSchema();
    function buildASTSchema2(documentAST, options) {
      documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.devAssert)(false, "Must provide valid Document AST.");
      if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
        (0, _validate.assertValidSDL)(documentAST);
      }
      const emptySchemaConfig = {
        description: void 0,
        types: [],
        directives: [],
        extensions: /* @__PURE__ */ Object.create(null),
        extensionASTNodes: [],
        assumeValid: false
      };
      const config2 = (0, _extendSchema.extendSchemaImpl)(
        emptySchemaConfig,
        documentAST,
        options
      );
      if (config2.astNode == null) {
        for (const type of config2.types) {
          switch (type.name) {
            // Note: While this could make early assertions to get the correctly
            // typed values below, that would throw immediately while type system
            // validation with validateSchema() will produce more actionable results.
            case "Query":
              config2.query = type;
              break;
            case "Mutation":
              config2.mutation = type;
              break;
            case "Subscription":
              config2.subscription = type;
              break;
          }
        }
      }
      const directives = [
        ...config2.directives,
        // If specified directives were not explicitly declared, add them.
        ..._directives.specifiedDirectives.filter(
          (stdDirective) => config2.directives.every(
            (directive) => directive.name !== stdDirective.name
          )
        )
      ];
      return new _schema.GraphQLSchema({ ...config2, directives });
    }
    function buildSchema3(source, options) {
      const document = (0, _parser.parse)(source, {
        noLocation: options === null || options === void 0 ? void 0 : options.noLocation,
        allowLegacyFragmentVariables: options === null || options === void 0 ? void 0 : options.allowLegacyFragmentVariables
      });
      return buildASTSchema2(document, {
        assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,
        assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
      });
    }
  }
});

// node_modules/graphql/utilities/lexicographicSortSchema.js
var require_lexicographicSortSchema = __commonJS({
  "node_modules/graphql/utilities/lexicographicSortSchema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.lexicographicSortSchema = lexicographicSortSchema;
    var _inspect = require_inspect();
    var _invariant = require_invariant();
    var _keyValMap = require_keyValMap();
    var _naturalCompare = require_naturalCompare();
    var _definition = require_definition();
    var _directives = require_directives();
    var _introspection = require_introspection();
    var _schema = require_schema();
    function lexicographicSortSchema(schema) {
      const schemaConfig = schema.toConfig();
      const typeMap = (0, _keyValMap.keyValMap)(
        sortByName(schemaConfig.types),
        (type) => type.name,
        sortNamedType
      );
      return new _schema.GraphQLSchema({
        ...schemaConfig,
        types: Object.values(typeMap),
        directives: sortByName(schemaConfig.directives).map(sortDirective),
        query: replaceMaybeType(schemaConfig.query),
        mutation: replaceMaybeType(schemaConfig.mutation),
        subscription: replaceMaybeType(schemaConfig.subscription)
      });
      function replaceType(type) {
        if ((0, _definition.isListType)(type)) {
          return new _definition.GraphQLList(replaceType(type.ofType));
        } else if ((0, _definition.isNonNullType)(type)) {
          return new _definition.GraphQLNonNull(replaceType(type.ofType));
        }
        return replaceNamedType(type);
      }
      function replaceNamedType(type) {
        return typeMap[type.name];
      }
      function replaceMaybeType(maybeType) {
        return maybeType && replaceNamedType(maybeType);
      }
      function sortDirective(directive) {
        const config2 = directive.toConfig();
        return new _directives.GraphQLDirective({
          ...config2,
          locations: sortBy(config2.locations, (x2) => x2),
          args: sortArgs(config2.args)
        });
      }
      function sortArgs(args) {
        return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));
      }
      function sortFields(fieldsMap) {
        return sortObjMap(fieldsMap, (field) => ({
          ...field,
          type: replaceType(field.type),
          args: field.args && sortArgs(field.args)
        }));
      }
      function sortInputFields(fieldsMap) {
        return sortObjMap(fieldsMap, (field) => ({
          ...field,
          type: replaceType(field.type)
        }));
      }
      function sortTypes(array) {
        return sortByName(array).map(replaceNamedType);
      }
      function sortNamedType(type) {
        if ((0, _definition.isScalarType)(type) || (0, _introspection.isIntrospectionType)(type)) {
          return type;
        }
        if ((0, _definition.isObjectType)(type)) {
          const config2 = type.toConfig();
          return new _definition.GraphQLObjectType({
            ...config2,
            interfaces: () => sortTypes(config2.interfaces),
            fields: () => sortFields(config2.fields)
          });
        }
        if ((0, _definition.isInterfaceType)(type)) {
          const config2 = type.toConfig();
          return new _definition.GraphQLInterfaceType({
            ...config2,
            interfaces: () => sortTypes(config2.interfaces),
            fields: () => sortFields(config2.fields)
          });
        }
        if ((0, _definition.isUnionType)(type)) {
          const config2 = type.toConfig();
          return new _definition.GraphQLUnionType({
            ...config2,
            types: () => sortTypes(config2.types)
          });
        }
        if ((0, _definition.isEnumType)(type)) {
          const config2 = type.toConfig();
          return new _definition.GraphQLEnumType({
            ...config2,
            values: sortObjMap(config2.values, (value) => value)
          });
        }
        if ((0, _definition.isInputObjectType)(type)) {
          const config2 = type.toConfig();
          return new _definition.GraphQLInputObjectType({
            ...config2,
            fields: () => sortInputFields(config2.fields)
          });
        }
        (0, _invariant.invariant)(
          false,
          "Unexpected type: " + (0, _inspect.inspect)(type)
        );
      }
    }
    function sortObjMap(map, sortValueFn) {
      const sortedMap = /* @__PURE__ */ Object.create(null);
      for (const key of Object.keys(map).sort(_naturalCompare.naturalCompare)) {
        sortedMap[key] = sortValueFn(map[key]);
      }
      return sortedMap;
    }
    function sortByName(array) {
      return sortBy(array, (obj) => obj.name);
    }
    function sortBy(array, mapToKey) {
      return array.slice().sort((obj1, obj2) => {
        const key1 = mapToKey(obj1);
        const key2 = mapToKey(obj2);
        return (0, _naturalCompare.naturalCompare)(key1, key2);
      });
    }
  }
});

// node_modules/graphql/utilities/printSchema.js
var require_printSchema = __commonJS({
  "node_modules/graphql/utilities/printSchema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.printIntrospectionSchema = printIntrospectionSchema;
    exports2.printSchema = printSchema4;
    exports2.printType = printType;
    var _inspect = require_inspect();
    var _invariant = require_invariant();
    var _blockString = require_blockString();
    var _kinds = require_kinds();
    var _printer = require_printer();
    var _definition = require_definition();
    var _directives = require_directives();
    var _introspection = require_introspection();
    var _scalars = require_scalars();
    var _astFromValue = require_astFromValue();
    function printSchema4(schema) {
      return printFilteredSchema(
        schema,
        (n) => !(0, _directives.isSpecifiedDirective)(n),
        isDefinedType
      );
    }
    function printIntrospectionSchema(schema) {
      return printFilteredSchema(
        schema,
        _directives.isSpecifiedDirective,
        _introspection.isIntrospectionType
      );
    }
    function isDefinedType(type) {
      return !(0, _scalars.isSpecifiedScalarType)(type) && !(0, _introspection.isIntrospectionType)(type);
    }
    function printFilteredSchema(schema, directiveFilter, typeFilter) {
      const directives = schema.getDirectives().filter(directiveFilter);
      const types = Object.values(schema.getTypeMap()).filter(typeFilter);
      return [
        printSchemaDefinition(schema),
        ...directives.map((directive) => printDirective(directive)),
        ...types.map((type) => printType(type))
      ].filter(Boolean).join("\n\n");
    }
    function printSchemaDefinition(schema) {
      if (schema.description == null && isSchemaOfCommonNames(schema)) {
        return;
      }
      const operationTypes = [];
      const queryType = schema.getQueryType();
      if (queryType) {
        operationTypes.push(`  query: ${queryType.name}`);
      }
      const mutationType = schema.getMutationType();
      if (mutationType) {
        operationTypes.push(`  mutation: ${mutationType.name}`);
      }
      const subscriptionType = schema.getSubscriptionType();
      if (subscriptionType) {
        operationTypes.push(`  subscription: ${subscriptionType.name}`);
      }
      return printDescription(schema) + `schema {
${operationTypes.join("\n")}
}`;
    }
    function isSchemaOfCommonNames(schema) {
      const queryType = schema.getQueryType();
      if (queryType && queryType.name !== "Query") {
        return false;
      }
      const mutationType = schema.getMutationType();
      if (mutationType && mutationType.name !== "Mutation") {
        return false;
      }
      const subscriptionType = schema.getSubscriptionType();
      if (subscriptionType && subscriptionType.name !== "Subscription") {
        return false;
      }
      return true;
    }
    function printType(type) {
      if ((0, _definition.isScalarType)(type)) {
        return printScalar(type);
      }
      if ((0, _definition.isObjectType)(type)) {
        return printObject(type);
      }
      if ((0, _definition.isInterfaceType)(type)) {
        return printInterface(type);
      }
      if ((0, _definition.isUnionType)(type)) {
        return printUnion(type);
      }
      if ((0, _definition.isEnumType)(type)) {
        return printEnum(type);
      }
      if ((0, _definition.isInputObjectType)(type)) {
        return printInputObject(type);
      }
      (0, _invariant.invariant)(
        false,
        "Unexpected type: " + (0, _inspect.inspect)(type)
      );
    }
    function printScalar(type) {
      return printDescription(type) + `scalar ${type.name}` + printSpecifiedByURL(type);
    }
    function printImplementedInterfaces(type) {
      const interfaces = type.getInterfaces();
      return interfaces.length ? " implements " + interfaces.map((i) => i.name).join(" & ") : "";
    }
    function printObject(type) {
      return printDescription(type) + `type ${type.name}` + printImplementedInterfaces(type) + printFields(type);
    }
    function printInterface(type) {
      return printDescription(type) + `interface ${type.name}` + printImplementedInterfaces(type) + printFields(type);
    }
    function printUnion(type) {
      const types = type.getTypes();
      const possibleTypes = types.length ? " = " + types.join(" | ") : "";
      return printDescription(type) + "union " + type.name + possibleTypes;
    }
    function printEnum(type) {
      const values = type.getValues().map(
        (value, i) => printDescription(value, "  ", !i) + "  " + value.name + printDeprecated(value.deprecationReason)
      );
      return printDescription(type) + `enum ${type.name}` + printBlock(values);
    }
    function printInputObject(type) {
      const fields = Object.values(type.getFields()).map(
        (f, i) => printDescription(f, "  ", !i) + "  " + printInputValue(f)
      );
      return printDescription(type) + `input ${type.name}` + (type.isOneOf ? " @oneOf" : "") + printBlock(fields);
    }
    function printFields(type) {
      const fields = Object.values(type.getFields()).map(
        (f, i) => printDescription(f, "  ", !i) + "  " + f.name + printArgs(f.args, "  ") + ": " + String(f.type) + printDeprecated(f.deprecationReason)
      );
      return printBlock(fields);
    }
    function printBlock(items) {
      return items.length !== 0 ? " {\n" + items.join("\n") + "\n}" : "";
    }
    function printArgs(args, indentation = "") {
      if (args.length === 0) {
        return "";
      }
      if (args.every((arg) => !arg.description)) {
        return "(" + args.map(printInputValue).join(", ") + ")";
      }
      return "(\n" + args.map(
        (arg, i) => printDescription(arg, "  " + indentation, !i) + "  " + indentation + printInputValue(arg)
      ).join("\n") + "\n" + indentation + ")";
    }
    function printInputValue(arg) {
      const defaultAST = (0, _astFromValue.astFromValue)(
        arg.defaultValue,
        arg.type
      );
      let argDecl = arg.name + ": " + String(arg.type);
      if (defaultAST) {
        argDecl += ` = ${(0, _printer.print)(defaultAST)}`;
      }
      return argDecl + printDeprecated(arg.deprecationReason);
    }
    function printDirective(directive) {
      return printDescription(directive) + "directive @" + directive.name + printArgs(directive.args) + (directive.isRepeatable ? " repeatable" : "") + " on " + directive.locations.join(" | ");
    }
    function printDeprecated(reason) {
      if (reason == null) {
        return "";
      }
      if (reason !== _directives.DEFAULT_DEPRECATION_REASON) {
        const astValue = (0, _printer.print)({
          kind: _kinds.Kind.STRING,
          value: reason
        });
        return ` @deprecated(reason: ${astValue})`;
      }
      return " @deprecated";
    }
    function printSpecifiedByURL(scalar) {
      if (scalar.specifiedByURL == null) {
        return "";
      }
      const astValue = (0, _printer.print)({
        kind: _kinds.Kind.STRING,
        value: scalar.specifiedByURL
      });
      return ` @specifiedBy(url: ${astValue})`;
    }
    function printDescription(def, indentation = "", firstInBlock = true) {
      const { description } = def;
      if (description == null) {
        return "";
      }
      const blockString = (0, _printer.print)({
        kind: _kinds.Kind.STRING,
        value: description,
        block: (0, _blockString.isPrintableAsBlockString)(description)
      });
      const prefix = indentation && !firstInBlock ? "\n" + indentation : indentation;
      return prefix + blockString.replace(/\n/g, "\n" + indentation) + "\n";
    }
  }
});

// node_modules/graphql/utilities/concatAST.js
var require_concatAST = __commonJS({
  "node_modules/graphql/utilities/concatAST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.concatAST = concatAST;
    var _kinds = require_kinds();
    function concatAST(documents) {
      const definitions = [];
      for (const doc of documents) {
        definitions.push(...doc.definitions);
      }
      return {
        kind: _kinds.Kind.DOCUMENT,
        definitions
      };
    }
  }
});

// node_modules/graphql/utilities/separateOperations.js
var require_separateOperations = __commonJS({
  "node_modules/graphql/utilities/separateOperations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.separateOperations = separateOperations;
    var _kinds = require_kinds();
    var _visitor = require_visitor();
    function separateOperations(documentAST) {
      const operations = [];
      const depGraph = /* @__PURE__ */ Object.create(null);
      for (const definitionNode of documentAST.definitions) {
        switch (definitionNode.kind) {
          case _kinds.Kind.OPERATION_DEFINITION:
            operations.push(definitionNode);
            break;
          case _kinds.Kind.FRAGMENT_DEFINITION:
            depGraph[definitionNode.name.value] = collectDependencies(
              definitionNode.selectionSet
            );
            break;
          default:
        }
      }
      const separatedDocumentASTs = /* @__PURE__ */ Object.create(null);
      for (const operation of operations) {
        const dependencies = /* @__PURE__ */ new Set();
        for (const fragmentName of collectDependencies(operation.selectionSet)) {
          collectTransitiveDependencies(dependencies, depGraph, fragmentName);
        }
        const operationName = operation.name ? operation.name.value : "";
        separatedDocumentASTs[operationName] = {
          kind: _kinds.Kind.DOCUMENT,
          definitions: documentAST.definitions.filter(
            (node) => node === operation || node.kind === _kinds.Kind.FRAGMENT_DEFINITION && dependencies.has(node.name.value)
          )
        };
      }
      return separatedDocumentASTs;
    }
    function collectTransitiveDependencies(collected, depGraph, fromName) {
      if (!collected.has(fromName)) {
        collected.add(fromName);
        const immediateDeps = depGraph[fromName];
        if (immediateDeps !== void 0) {
          for (const toName of immediateDeps) {
            collectTransitiveDependencies(collected, depGraph, toName);
          }
        }
      }
    }
    function collectDependencies(selectionSet) {
      const dependencies = [];
      (0, _visitor.visit)(selectionSet, {
        FragmentSpread(node) {
          dependencies.push(node.name.value);
        }
      });
      return dependencies;
    }
  }
});

// node_modules/graphql/utilities/stripIgnoredCharacters.js
var require_stripIgnoredCharacters = __commonJS({
  "node_modules/graphql/utilities/stripIgnoredCharacters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.stripIgnoredCharacters = stripIgnoredCharacters;
    var _blockString = require_blockString();
    var _lexer = require_lexer();
    var _source = require_source();
    var _tokenKind = require_tokenKind();
    function stripIgnoredCharacters(source) {
      const sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
      const body = sourceObj.body;
      const lexer = new _lexer.Lexer(sourceObj);
      let strippedBody = "";
      let wasLastAddedTokenNonPunctuator = false;
      while (lexer.advance().kind !== _tokenKind.TokenKind.EOF) {
        const currentToken = lexer.token;
        const tokenKind = currentToken.kind;
        const isNonPunctuator = !(0, _lexer.isPunctuatorTokenKind)(
          currentToken.kind
        );
        if (wasLastAddedTokenNonPunctuator) {
          if (isNonPunctuator || currentToken.kind === _tokenKind.TokenKind.SPREAD) {
            strippedBody += " ";
          }
        }
        const tokenBody = body.slice(currentToken.start, currentToken.end);
        if (tokenKind === _tokenKind.TokenKind.BLOCK_STRING) {
          strippedBody += (0, _blockString.printBlockString)(currentToken.value, {
            minimize: true
          });
        } else {
          strippedBody += tokenBody;
        }
        wasLastAddedTokenNonPunctuator = isNonPunctuator;
      }
      return strippedBody;
    }
  }
});

// node_modules/graphql/utilities/assertValidName.js
var require_assertValidName = __commonJS({
  "node_modules/graphql/utilities/assertValidName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.assertValidName = assertValidName;
    exports2.isValidNameError = isValidNameError;
    var _devAssert = require_devAssert();
    var _GraphQLError = require_GraphQLError();
    var _assertName = require_assertName();
    function assertValidName(name) {
      const error = isValidNameError(name);
      if (error) {
        throw error;
      }
      return name;
    }
    function isValidNameError(name) {
      typeof name === "string" || (0, _devAssert.devAssert)(false, "Expected name to be a string.");
      if (name.startsWith("__")) {
        return new _GraphQLError.GraphQLError(
          `Name "${name}" must not begin with "__", which is reserved by GraphQL introspection.`
        );
      }
      try {
        (0, _assertName.assertName)(name);
      } catch (error) {
        return error;
      }
    }
  }
});

// node_modules/graphql/utilities/findBreakingChanges.js
var require_findBreakingChanges = __commonJS({
  "node_modules/graphql/utilities/findBreakingChanges.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.DangerousChangeType = exports2.BreakingChangeType = void 0;
    exports2.findBreakingChanges = findBreakingChanges;
    exports2.findDangerousChanges = findDangerousChanges;
    var _inspect = require_inspect();
    var _invariant = require_invariant();
    var _keyMap = require_keyMap();
    var _printer = require_printer();
    var _definition = require_definition();
    var _scalars = require_scalars();
    var _astFromValue = require_astFromValue();
    var _sortValueNode = require_sortValueNode();
    var BreakingChangeType;
    exports2.BreakingChangeType = BreakingChangeType;
    (function(BreakingChangeType2) {
      BreakingChangeType2["TYPE_REMOVED"] = "TYPE_REMOVED";
      BreakingChangeType2["TYPE_CHANGED_KIND"] = "TYPE_CHANGED_KIND";
      BreakingChangeType2["TYPE_REMOVED_FROM_UNION"] = "TYPE_REMOVED_FROM_UNION";
      BreakingChangeType2["VALUE_REMOVED_FROM_ENUM"] = "VALUE_REMOVED_FROM_ENUM";
      BreakingChangeType2["REQUIRED_INPUT_FIELD_ADDED"] = "REQUIRED_INPUT_FIELD_ADDED";
      BreakingChangeType2["IMPLEMENTED_INTERFACE_REMOVED"] = "IMPLEMENTED_INTERFACE_REMOVED";
      BreakingChangeType2["FIELD_REMOVED"] = "FIELD_REMOVED";
      BreakingChangeType2["FIELD_CHANGED_KIND"] = "FIELD_CHANGED_KIND";
      BreakingChangeType2["REQUIRED_ARG_ADDED"] = "REQUIRED_ARG_ADDED";
      BreakingChangeType2["ARG_REMOVED"] = "ARG_REMOVED";
      BreakingChangeType2["ARG_CHANGED_KIND"] = "ARG_CHANGED_KIND";
      BreakingChangeType2["DIRECTIVE_REMOVED"] = "DIRECTIVE_REMOVED";
      BreakingChangeType2["DIRECTIVE_ARG_REMOVED"] = "DIRECTIVE_ARG_REMOVED";
      BreakingChangeType2["REQUIRED_DIRECTIVE_ARG_ADDED"] = "REQUIRED_DIRECTIVE_ARG_ADDED";
      BreakingChangeType2["DIRECTIVE_REPEATABLE_REMOVED"] = "DIRECTIVE_REPEATABLE_REMOVED";
      BreakingChangeType2["DIRECTIVE_LOCATION_REMOVED"] = "DIRECTIVE_LOCATION_REMOVED";
    })(
      BreakingChangeType || (exports2.BreakingChangeType = BreakingChangeType = {})
    );
    var DangerousChangeType;
    exports2.DangerousChangeType = DangerousChangeType;
    (function(DangerousChangeType2) {
      DangerousChangeType2["VALUE_ADDED_TO_ENUM"] = "VALUE_ADDED_TO_ENUM";
      DangerousChangeType2["TYPE_ADDED_TO_UNION"] = "TYPE_ADDED_TO_UNION";
      DangerousChangeType2["OPTIONAL_INPUT_FIELD_ADDED"] = "OPTIONAL_INPUT_FIELD_ADDED";
      DangerousChangeType2["OPTIONAL_ARG_ADDED"] = "OPTIONAL_ARG_ADDED";
      DangerousChangeType2["IMPLEMENTED_INTERFACE_ADDED"] = "IMPLEMENTED_INTERFACE_ADDED";
      DangerousChangeType2["ARG_DEFAULT_VALUE_CHANGE"] = "ARG_DEFAULT_VALUE_CHANGE";
    })(
      DangerousChangeType || (exports2.DangerousChangeType = DangerousChangeType = {})
    );
    function findBreakingChanges(oldSchema, newSchema) {
      return findSchemaChanges(oldSchema, newSchema).filter(
        (change) => change.type in BreakingChangeType
      );
    }
    function findDangerousChanges(oldSchema, newSchema) {
      return findSchemaChanges(oldSchema, newSchema).filter(
        (change) => change.type in DangerousChangeType
      );
    }
    function findSchemaChanges(oldSchema, newSchema) {
      return [
        ...findTypeChanges(oldSchema, newSchema),
        ...findDirectiveChanges(oldSchema, newSchema)
      ];
    }
    function findDirectiveChanges(oldSchema, newSchema) {
      const schemaChanges = [];
      const directivesDiff = diff(
        oldSchema.getDirectives(),
        newSchema.getDirectives()
      );
      for (const oldDirective of directivesDiff.removed) {
        schemaChanges.push({
          type: BreakingChangeType.DIRECTIVE_REMOVED,
          description: `${oldDirective.name} was removed.`
        });
      }
      for (const [oldDirective, newDirective] of directivesDiff.persisted) {
        const argsDiff = diff(oldDirective.args, newDirective.args);
        for (const newArg of argsDiff.added) {
          if ((0, _definition.isRequiredArgument)(newArg)) {
            schemaChanges.push({
              type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,
              description: `A required arg ${newArg.name} on directive ${oldDirective.name} was added.`
            });
          }
        }
        for (const oldArg of argsDiff.removed) {
          schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
            description: `${oldArg.name} was removed from ${oldDirective.name}.`
          });
        }
        if (oldDirective.isRepeatable && !newDirective.isRepeatable) {
          schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,
            description: `Repeatable flag was removed from ${oldDirective.name}.`
          });
        }
        for (const location of oldDirective.locations) {
          if (!newDirective.locations.includes(location)) {
            schemaChanges.push({
              type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
              description: `${location} was removed from ${oldDirective.name}.`
            });
          }
        }
      }
      return schemaChanges;
    }
    function findTypeChanges(oldSchema, newSchema) {
      const schemaChanges = [];
      const typesDiff = diff(
        Object.values(oldSchema.getTypeMap()),
        Object.values(newSchema.getTypeMap())
      );
      for (const oldType of typesDiff.removed) {
        schemaChanges.push({
          type: BreakingChangeType.TYPE_REMOVED,
          description: (0, _scalars.isSpecifiedScalarType)(oldType) ? `Standard scalar ${oldType.name} was removed because it is not referenced anymore.` : `${oldType.name} was removed.`
        });
      }
      for (const [oldType, newType] of typesDiff.persisted) {
        if ((0, _definition.isEnumType)(oldType) && (0, _definition.isEnumType)(newType)) {
          schemaChanges.push(...findEnumTypeChanges(oldType, newType));
        } else if ((0, _definition.isUnionType)(oldType) && (0, _definition.isUnionType)(newType)) {
          schemaChanges.push(...findUnionTypeChanges(oldType, newType));
        } else if ((0, _definition.isInputObjectType)(oldType) && (0, _definition.isInputObjectType)(newType)) {
          schemaChanges.push(...findInputObjectTypeChanges(oldType, newType));
        } else if ((0, _definition.isObjectType)(oldType) && (0, _definition.isObjectType)(newType)) {
          schemaChanges.push(
            ...findFieldChanges(oldType, newType),
            ...findImplementedInterfacesChanges(oldType, newType)
          );
        } else if ((0, _definition.isInterfaceType)(oldType) && (0, _definition.isInterfaceType)(newType)) {
          schemaChanges.push(
            ...findFieldChanges(oldType, newType),
            ...findImplementedInterfacesChanges(oldType, newType)
          );
        } else if (oldType.constructor !== newType.constructor) {
          schemaChanges.push({
            type: BreakingChangeType.TYPE_CHANGED_KIND,
            description: `${oldType.name} changed from ${typeKindName(oldType)} to ${typeKindName(newType)}.`
          });
        }
      }
      return schemaChanges;
    }
    function findInputObjectTypeChanges(oldType, newType) {
      const schemaChanges = [];
      const fieldsDiff = diff(
        Object.values(oldType.getFields()),
        Object.values(newType.getFields())
      );
      for (const newField of fieldsDiff.added) {
        if ((0, _definition.isRequiredInputField)(newField)) {
          schemaChanges.push({
            type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,
            description: `A required field ${newField.name} on input type ${oldType.name} was added.`
          });
        } else {
          schemaChanges.push({
            type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,
            description: `An optional field ${newField.name} on input type ${oldType.name} was added.`
          });
        }
      }
      for (const oldField of fieldsDiff.removed) {
        schemaChanges.push({
          type: BreakingChangeType.FIELD_REMOVED,
          description: `${oldType.name}.${oldField.name} was removed.`
        });
      }
      for (const [oldField, newField] of fieldsDiff.persisted) {
        const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(
          oldField.type,
          newField.type
        );
        if (!isSafe) {
          schemaChanges.push({
            type: BreakingChangeType.FIELD_CHANGED_KIND,
            description: `${oldType.name}.${oldField.name} changed type from ${String(oldField.type)} to ${String(newField.type)}.`
          });
        }
      }
      return schemaChanges;
    }
    function findUnionTypeChanges(oldType, newType) {
      const schemaChanges = [];
      const possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());
      for (const newPossibleType of possibleTypesDiff.added) {
        schemaChanges.push({
          type: DangerousChangeType.TYPE_ADDED_TO_UNION,
          description: `${newPossibleType.name} was added to union type ${oldType.name}.`
        });
      }
      for (const oldPossibleType of possibleTypesDiff.removed) {
        schemaChanges.push({
          type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
          description: `${oldPossibleType.name} was removed from union type ${oldType.name}.`
        });
      }
      return schemaChanges;
    }
    function findEnumTypeChanges(oldType, newType) {
      const schemaChanges = [];
      const valuesDiff = diff(oldType.getValues(), newType.getValues());
      for (const newValue of valuesDiff.added) {
        schemaChanges.push({
          type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
          description: `${newValue.name} was added to enum type ${oldType.name}.`
        });
      }
      for (const oldValue of valuesDiff.removed) {
        schemaChanges.push({
          type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
          description: `${oldValue.name} was removed from enum type ${oldType.name}.`
        });
      }
      return schemaChanges;
    }
    function findImplementedInterfacesChanges(oldType, newType) {
      const schemaChanges = [];
      const interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());
      for (const newInterface of interfacesDiff.added) {
        schemaChanges.push({
          type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,
          description: `${newInterface.name} added to interfaces implemented by ${oldType.name}.`
        });
      }
      for (const oldInterface of interfacesDiff.removed) {
        schemaChanges.push({
          type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,
          description: `${oldType.name} no longer implements interface ${oldInterface.name}.`
        });
      }
      return schemaChanges;
    }
    function findFieldChanges(oldType, newType) {
      const schemaChanges = [];
      const fieldsDiff = diff(
        Object.values(oldType.getFields()),
        Object.values(newType.getFields())
      );
      for (const oldField of fieldsDiff.removed) {
        schemaChanges.push({
          type: BreakingChangeType.FIELD_REMOVED,
          description: `${oldType.name}.${oldField.name} was removed.`
        });
      }
      for (const [oldField, newField] of fieldsDiff.persisted) {
        schemaChanges.push(...findArgChanges(oldType, oldField, newField));
        const isSafe = isChangeSafeForObjectOrInterfaceField(
          oldField.type,
          newField.type
        );
        if (!isSafe) {
          schemaChanges.push({
            type: BreakingChangeType.FIELD_CHANGED_KIND,
            description: `${oldType.name}.${oldField.name} changed type from ${String(oldField.type)} to ${String(newField.type)}.`
          });
        }
      }
      return schemaChanges;
    }
    function findArgChanges(oldType, oldField, newField) {
      const schemaChanges = [];
      const argsDiff = diff(oldField.args, newField.args);
      for (const oldArg of argsDiff.removed) {
        schemaChanges.push({
          type: BreakingChangeType.ARG_REMOVED,
          description: `${oldType.name}.${oldField.name} arg ${oldArg.name} was removed.`
        });
      }
      for (const [oldArg, newArg] of argsDiff.persisted) {
        const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(
          oldArg.type,
          newArg.type
        );
        if (!isSafe) {
          schemaChanges.push({
            type: BreakingChangeType.ARG_CHANGED_KIND,
            description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed type from ${String(oldArg.type)} to ${String(newArg.type)}.`
          });
        } else if (oldArg.defaultValue !== void 0) {
          if (newArg.defaultValue === void 0) {
            schemaChanges.push({
              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
              description: `${oldType.name}.${oldField.name} arg ${oldArg.name} defaultValue was removed.`
            });
          } else {
            const oldValueStr = stringifyValue(oldArg.defaultValue, oldArg.type);
            const newValueStr = stringifyValue(newArg.defaultValue, newArg.type);
            if (oldValueStr !== newValueStr) {
              schemaChanges.push({
                type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
                description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`
              });
            }
          }
        }
      }
      for (const newArg of argsDiff.added) {
        if ((0, _definition.isRequiredArgument)(newArg)) {
          schemaChanges.push({
            type: BreakingChangeType.REQUIRED_ARG_ADDED,
            description: `A required arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`
          });
        } else {
          schemaChanges.push({
            type: DangerousChangeType.OPTIONAL_ARG_ADDED,
            description: `An optional arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`
          });
        }
      }
      return schemaChanges;
    }
    function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
      if ((0, _definition.isListType)(oldType)) {
        return (
          // if they're both lists, make sure the underlying types are compatible
          (0, _definition.isListType)(newType) && isChangeSafeForObjectOrInterfaceField(
            oldType.ofType,
            newType.ofType
          ) || // moving from nullable to non-null of the same underlying type is safe
          (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
        );
      }
      if ((0, _definition.isNonNullType)(oldType)) {
        return (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);
      }
      return (
        // if they're both named types, see if their names are equivalent
        (0, _definition.isNamedType)(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe
        (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
      );
    }
    function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
      if ((0, _definition.isListType)(oldType)) {
        return (0, _definition.isListType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);
      }
      if ((0, _definition.isNonNullType)(oldType)) {
        return (
          // if they're both non-null, make sure the underlying types are
          // compatible
          (0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(
            oldType.ofType,
            newType.ofType
          ) || // moving from non-null to nullable of the same underlying type is safe
          !(0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)
        );
      }
      return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;
    }
    function typeKindName(type) {
      if ((0, _definition.isScalarType)(type)) {
        return "a Scalar type";
      }
      if ((0, _definition.isObjectType)(type)) {
        return "an Object type";
      }
      if ((0, _definition.isInterfaceType)(type)) {
        return "an Interface type";
      }
      if ((0, _definition.isUnionType)(type)) {
        return "a Union type";
      }
      if ((0, _definition.isEnumType)(type)) {
        return "an Enum type";
      }
      if ((0, _definition.isInputObjectType)(type)) {
        return "an Input type";
      }
      (0, _invariant.invariant)(
        false,
        "Unexpected type: " + (0, _inspect.inspect)(type)
      );
    }
    function stringifyValue(value, type) {
      const ast = (0, _astFromValue.astFromValue)(value, type);
      ast != null || (0, _invariant.invariant)(false);
      return (0, _printer.print)((0, _sortValueNode.sortValueNode)(ast));
    }
    function diff(oldArray, newArray) {
      const added = [];
      const removed = [];
      const persisted = [];
      const oldMap = (0, _keyMap.keyMap)(oldArray, ({ name }) => name);
      const newMap = (0, _keyMap.keyMap)(newArray, ({ name }) => name);
      for (const oldItem of oldArray) {
        const newItem = newMap[oldItem.name];
        if (newItem === void 0) {
          removed.push(oldItem);
        } else {
          persisted.push([oldItem, newItem]);
        }
      }
      for (const newItem of newArray) {
        if (oldMap[newItem.name] === void 0) {
          added.push(newItem);
        }
      }
      return {
        added,
        persisted,
        removed
      };
    }
  }
});

// node_modules/graphql/utilities/index.js
var require_utilities = __commonJS({
  "node_modules/graphql/utilities/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "BreakingChangeType", {
      enumerable: true,
      get: function() {
        return _findBreakingChanges.BreakingChangeType;
      }
    });
    Object.defineProperty(exports2, "DangerousChangeType", {
      enumerable: true,
      get: function() {
        return _findBreakingChanges.DangerousChangeType;
      }
    });
    Object.defineProperty(exports2, "TypeInfo", {
      enumerable: true,
      get: function() {
        return _TypeInfo.TypeInfo;
      }
    });
    Object.defineProperty(exports2, "assertValidName", {
      enumerable: true,
      get: function() {
        return _assertValidName.assertValidName;
      }
    });
    Object.defineProperty(exports2, "astFromValue", {
      enumerable: true,
      get: function() {
        return _astFromValue.astFromValue;
      }
    });
    Object.defineProperty(exports2, "buildASTSchema", {
      enumerable: true,
      get: function() {
        return _buildASTSchema.buildASTSchema;
      }
    });
    Object.defineProperty(exports2, "buildClientSchema", {
      enumerable: true,
      get: function() {
        return _buildClientSchema.buildClientSchema;
      }
    });
    Object.defineProperty(exports2, "buildSchema", {
      enumerable: true,
      get: function() {
        return _buildASTSchema.buildSchema;
      }
    });
    Object.defineProperty(exports2, "coerceInputValue", {
      enumerable: true,
      get: function() {
        return _coerceInputValue.coerceInputValue;
      }
    });
    Object.defineProperty(exports2, "concatAST", {
      enumerable: true,
      get: function() {
        return _concatAST.concatAST;
      }
    });
    Object.defineProperty(exports2, "doTypesOverlap", {
      enumerable: true,
      get: function() {
        return _typeComparators.doTypesOverlap;
      }
    });
    Object.defineProperty(exports2, "extendSchema", {
      enumerable: true,
      get: function() {
        return _extendSchema.extendSchema;
      }
    });
    Object.defineProperty(exports2, "findBreakingChanges", {
      enumerable: true,
      get: function() {
        return _findBreakingChanges.findBreakingChanges;
      }
    });
    Object.defineProperty(exports2, "findDangerousChanges", {
      enumerable: true,
      get: function() {
        return _findBreakingChanges.findDangerousChanges;
      }
    });
    Object.defineProperty(exports2, "getIntrospectionQuery", {
      enumerable: true,
      get: function() {
        return _getIntrospectionQuery.getIntrospectionQuery;
      }
    });
    Object.defineProperty(exports2, "getOperationAST", {
      enumerable: true,
      get: function() {
        return _getOperationAST.getOperationAST;
      }
    });
    Object.defineProperty(exports2, "getOperationRootType", {
      enumerable: true,
      get: function() {
        return _getOperationRootType.getOperationRootType;
      }
    });
    Object.defineProperty(exports2, "introspectionFromSchema", {
      enumerable: true,
      get: function() {
        return _introspectionFromSchema.introspectionFromSchema;
      }
    });
    Object.defineProperty(exports2, "isEqualType", {
      enumerable: true,
      get: function() {
        return _typeComparators.isEqualType;
      }
    });
    Object.defineProperty(exports2, "isTypeSubTypeOf", {
      enumerable: true,
      get: function() {
        return _typeComparators.isTypeSubTypeOf;
      }
    });
    Object.defineProperty(exports2, "isValidNameError", {
      enumerable: true,
      get: function() {
        return _assertValidName.isValidNameError;
      }
    });
    Object.defineProperty(exports2, "lexicographicSortSchema", {
      enumerable: true,
      get: function() {
        return _lexicographicSortSchema.lexicographicSortSchema;
      }
    });
    Object.defineProperty(exports2, "printIntrospectionSchema", {
      enumerable: true,
      get: function() {
        return _printSchema.printIntrospectionSchema;
      }
    });
    Object.defineProperty(exports2, "printSchema", {
      enumerable: true,
      get: function() {
        return _printSchema.printSchema;
      }
    });
    Object.defineProperty(exports2, "printType", {
      enumerable: true,
      get: function() {
        return _printSchema.printType;
      }
    });
    Object.defineProperty(exports2, "separateOperations", {
      enumerable: true,
      get: function() {
        return _separateOperations.separateOperations;
      }
    });
    Object.defineProperty(exports2, "stripIgnoredCharacters", {
      enumerable: true,
      get: function() {
        return _stripIgnoredCharacters.stripIgnoredCharacters;
      }
    });
    Object.defineProperty(exports2, "typeFromAST", {
      enumerable: true,
      get: function() {
        return _typeFromAST.typeFromAST;
      }
    });
    Object.defineProperty(exports2, "valueFromAST", {
      enumerable: true,
      get: function() {
        return _valueFromAST.valueFromAST;
      }
    });
    Object.defineProperty(exports2, "valueFromASTUntyped", {
      enumerable: true,
      get: function() {
        return _valueFromASTUntyped.valueFromASTUntyped;
      }
    });
    Object.defineProperty(exports2, "visitWithTypeInfo", {
      enumerable: true,
      get: function() {
        return _TypeInfo.visitWithTypeInfo;
      }
    });
    var _getIntrospectionQuery = require_getIntrospectionQuery();
    var _getOperationAST = require_getOperationAST();
    var _getOperationRootType = require_getOperationRootType();
    var _introspectionFromSchema = require_introspectionFromSchema();
    var _buildClientSchema = require_buildClientSchema();
    var _buildASTSchema = require_buildASTSchema();
    var _extendSchema = require_extendSchema();
    var _lexicographicSortSchema = require_lexicographicSortSchema();
    var _printSchema = require_printSchema();
    var _typeFromAST = require_typeFromAST();
    var _valueFromAST = require_valueFromAST();
    var _valueFromASTUntyped = require_valueFromASTUntyped();
    var _astFromValue = require_astFromValue();
    var _TypeInfo = require_TypeInfo();
    var _coerceInputValue = require_coerceInputValue();
    var _concatAST = require_concatAST();
    var _separateOperations = require_separateOperations();
    var _stripIgnoredCharacters = require_stripIgnoredCharacters();
    var _typeComparators = require_typeComparators();
    var _assertValidName = require_assertValidName();
    var _findBreakingChanges = require_findBreakingChanges();
  }
});

// node_modules/graphql/index.js
var require_graphql2 = __commonJS({
  "node_modules/graphql/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "BREAK", {
      enumerable: true,
      get: function() {
        return _index2.BREAK;
      }
    });
    Object.defineProperty(exports2, "BreakingChangeType", {
      enumerable: true,
      get: function() {
        return _index6.BreakingChangeType;
      }
    });
    Object.defineProperty(exports2, "DEFAULT_DEPRECATION_REASON", {
      enumerable: true,
      get: function() {
        return _index.DEFAULT_DEPRECATION_REASON;
      }
    });
    Object.defineProperty(exports2, "DangerousChangeType", {
      enumerable: true,
      get: function() {
        return _index6.DangerousChangeType;
      }
    });
    Object.defineProperty(exports2, "DirectiveLocation", {
      enumerable: true,
      get: function() {
        return _index2.DirectiveLocation;
      }
    });
    Object.defineProperty(exports2, "ExecutableDefinitionsRule", {
      enumerable: true,
      get: function() {
        return _index4.ExecutableDefinitionsRule;
      }
    });
    Object.defineProperty(exports2, "FieldsOnCorrectTypeRule", {
      enumerable: true,
      get: function() {
        return _index4.FieldsOnCorrectTypeRule;
      }
    });
    Object.defineProperty(exports2, "FragmentsOnCompositeTypesRule", {
      enumerable: true,
      get: function() {
        return _index4.FragmentsOnCompositeTypesRule;
      }
    });
    Object.defineProperty(exports2, "GRAPHQL_MAX_INT", {
      enumerable: true,
      get: function() {
        return _index.GRAPHQL_MAX_INT;
      }
    });
    Object.defineProperty(exports2, "GRAPHQL_MIN_INT", {
      enumerable: true,
      get: function() {
        return _index.GRAPHQL_MIN_INT;
      }
    });
    Object.defineProperty(exports2, "GraphQLBoolean", {
      enumerable: true,
      get: function() {
        return _index.GraphQLBoolean;
      }
    });
    Object.defineProperty(exports2, "GraphQLDeprecatedDirective", {
      enumerable: true,
      get: function() {
        return _index.GraphQLDeprecatedDirective;
      }
    });
    Object.defineProperty(exports2, "GraphQLDirective", {
      enumerable: true,
      get: function() {
        return _index.GraphQLDirective;
      }
    });
    Object.defineProperty(exports2, "GraphQLEnumType", {
      enumerable: true,
      get: function() {
        return _index.GraphQLEnumType;
      }
    });
    Object.defineProperty(exports2, "GraphQLError", {
      enumerable: true,
      get: function() {
        return _index5.GraphQLError;
      }
    });
    Object.defineProperty(exports2, "GraphQLFloat", {
      enumerable: true,
      get: function() {
        return _index.GraphQLFloat;
      }
    });
    Object.defineProperty(exports2, "GraphQLID", {
      enumerable: true,
      get: function() {
        return _index.GraphQLID;
      }
    });
    Object.defineProperty(exports2, "GraphQLIncludeDirective", {
      enumerable: true,
      get: function() {
        return _index.GraphQLIncludeDirective;
      }
    });
    Object.defineProperty(exports2, "GraphQLInputObjectType", {
      enumerable: true,
      get: function() {
        return _index.GraphQLInputObjectType;
      }
    });
    Object.defineProperty(exports2, "GraphQLInt", {
      enumerable: true,
      get: function() {
        return _index.GraphQLInt;
      }
    });
    Object.defineProperty(exports2, "GraphQLInterfaceType", {
      enumerable: true,
      get: function() {
        return _index.GraphQLInterfaceType;
      }
    });
    Object.defineProperty(exports2, "GraphQLList", {
      enumerable: true,
      get: function() {
        return _index.GraphQLList;
      }
    });
    Object.defineProperty(exports2, "GraphQLNonNull", {
      enumerable: true,
      get: function() {
        return _index.GraphQLNonNull;
      }
    });
    Object.defineProperty(exports2, "GraphQLObjectType", {
      enumerable: true,
      get: function() {
        return _index.GraphQLObjectType;
      }
    });
    Object.defineProperty(exports2, "GraphQLOneOfDirective", {
      enumerable: true,
      get: function() {
        return _index.GraphQLOneOfDirective;
      }
    });
    Object.defineProperty(exports2, "GraphQLScalarType", {
      enumerable: true,
      get: function() {
        return _index.GraphQLScalarType;
      }
    });
    Object.defineProperty(exports2, "GraphQLSchema", {
      enumerable: true,
      get: function() {
        return _index.GraphQLSchema;
      }
    });
    Object.defineProperty(exports2, "GraphQLSkipDirective", {
      enumerable: true,
      get: function() {
        return _index.GraphQLSkipDirective;
      }
    });
    Object.defineProperty(exports2, "GraphQLSpecifiedByDirective", {
      enumerable: true,
      get: function() {
        return _index.GraphQLSpecifiedByDirective;
      }
    });
    Object.defineProperty(exports2, "GraphQLString", {
      enumerable: true,
      get: function() {
        return _index.GraphQLString;
      }
    });
    Object.defineProperty(exports2, "GraphQLUnionType", {
      enumerable: true,
      get: function() {
        return _index.GraphQLUnionType;
      }
    });
    Object.defineProperty(exports2, "Kind", {
      enumerable: true,
      get: function() {
        return _index2.Kind;
      }
    });
    Object.defineProperty(exports2, "KnownArgumentNamesRule", {
      enumerable: true,
      get: function() {
        return _index4.KnownArgumentNamesRule;
      }
    });
    Object.defineProperty(exports2, "KnownDirectivesRule", {
      enumerable: true,
      get: function() {
        return _index4.KnownDirectivesRule;
      }
    });
    Object.defineProperty(exports2, "KnownFragmentNamesRule", {
      enumerable: true,
      get: function() {
        return _index4.KnownFragmentNamesRule;
      }
    });
    Object.defineProperty(exports2, "KnownTypeNamesRule", {
      enumerable: true,
      get: function() {
        return _index4.KnownTypeNamesRule;
      }
    });
    Object.defineProperty(exports2, "Lexer", {
      enumerable: true,
      get: function() {
        return _index2.Lexer;
      }
    });
    Object.defineProperty(exports2, "Location", {
      enumerable: true,
      get: function() {
        return _index2.Location;
      }
    });
    Object.defineProperty(exports2, "LoneAnonymousOperationRule", {
      enumerable: true,
      get: function() {
        return _index4.LoneAnonymousOperationRule;
      }
    });
    Object.defineProperty(exports2, "LoneSchemaDefinitionRule", {
      enumerable: true,
      get: function() {
        return _index4.LoneSchemaDefinitionRule;
      }
    });
    Object.defineProperty(exports2, "MaxIntrospectionDepthRule", {
      enumerable: true,
      get: function() {
        return _index4.MaxIntrospectionDepthRule;
      }
    });
    Object.defineProperty(exports2, "NoDeprecatedCustomRule", {
      enumerable: true,
      get: function() {
        return _index4.NoDeprecatedCustomRule;
      }
    });
    Object.defineProperty(exports2, "NoFragmentCyclesRule", {
      enumerable: true,
      get: function() {
        return _index4.NoFragmentCyclesRule;
      }
    });
    Object.defineProperty(exports2, "NoSchemaIntrospectionCustomRule", {
      enumerable: true,
      get: function() {
        return _index4.NoSchemaIntrospectionCustomRule;
      }
    });
    Object.defineProperty(exports2, "NoUndefinedVariablesRule", {
      enumerable: true,
      get: function() {
        return _index4.NoUndefinedVariablesRule;
      }
    });
    Object.defineProperty(exports2, "NoUnusedFragmentsRule", {
      enumerable: true,
      get: function() {
        return _index4.NoUnusedFragmentsRule;
      }
    });
    Object.defineProperty(exports2, "NoUnusedVariablesRule", {
      enumerable: true,
      get: function() {
        return _index4.NoUnusedVariablesRule;
      }
    });
    Object.defineProperty(exports2, "OperationTypeNode", {
      enumerable: true,
      get: function() {
        return _index2.OperationTypeNode;
      }
    });
    Object.defineProperty(exports2, "OverlappingFieldsCanBeMergedRule", {
      enumerable: true,
      get: function() {
        return _index4.OverlappingFieldsCanBeMergedRule;
      }
    });
    Object.defineProperty(exports2, "PossibleFragmentSpreadsRule", {
      enumerable: true,
      get: function() {
        return _index4.PossibleFragmentSpreadsRule;
      }
    });
    Object.defineProperty(exports2, "PossibleTypeExtensionsRule", {
      enumerable: true,
      get: function() {
        return _index4.PossibleTypeExtensionsRule;
      }
    });
    Object.defineProperty(exports2, "ProvidedRequiredArgumentsRule", {
      enumerable: true,
      get: function() {
        return _index4.ProvidedRequiredArgumentsRule;
      }
    });
    Object.defineProperty(exports2, "ScalarLeafsRule", {
      enumerable: true,
      get: function() {
        return _index4.ScalarLeafsRule;
      }
    });
    Object.defineProperty(exports2, "SchemaMetaFieldDef", {
      enumerable: true,
      get: function() {
        return _index.SchemaMetaFieldDef;
      }
    });
    Object.defineProperty(exports2, "SingleFieldSubscriptionsRule", {
      enumerable: true,
      get: function() {
        return _index4.SingleFieldSubscriptionsRule;
      }
    });
    Object.defineProperty(exports2, "Source", {
      enumerable: true,
      get: function() {
        return _index2.Source;
      }
    });
    Object.defineProperty(exports2, "Token", {
      enumerable: true,
      get: function() {
        return _index2.Token;
      }
    });
    Object.defineProperty(exports2, "TokenKind", {
      enumerable: true,
      get: function() {
        return _index2.TokenKind;
      }
    });
    Object.defineProperty(exports2, "TypeInfo", {
      enumerable: true,
      get: function() {
        return _index6.TypeInfo;
      }
    });
    Object.defineProperty(exports2, "TypeKind", {
      enumerable: true,
      get: function() {
        return _index.TypeKind;
      }
    });
    Object.defineProperty(exports2, "TypeMetaFieldDef", {
      enumerable: true,
      get: function() {
        return _index.TypeMetaFieldDef;
      }
    });
    Object.defineProperty(exports2, "TypeNameMetaFieldDef", {
      enumerable: true,
      get: function() {
        return _index.TypeNameMetaFieldDef;
      }
    });
    Object.defineProperty(exports2, "UniqueArgumentDefinitionNamesRule", {
      enumerable: true,
      get: function() {
        return _index4.UniqueArgumentDefinitionNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueArgumentNamesRule", {
      enumerable: true,
      get: function() {
        return _index4.UniqueArgumentNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueDirectiveNamesRule", {
      enumerable: true,
      get: function() {
        return _index4.UniqueDirectiveNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueDirectivesPerLocationRule", {
      enumerable: true,
      get: function() {
        return _index4.UniqueDirectivesPerLocationRule;
      }
    });
    Object.defineProperty(exports2, "UniqueEnumValueNamesRule", {
      enumerable: true,
      get: function() {
        return _index4.UniqueEnumValueNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueFieldDefinitionNamesRule", {
      enumerable: true,
      get: function() {
        return _index4.UniqueFieldDefinitionNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueFragmentNamesRule", {
      enumerable: true,
      get: function() {
        return _index4.UniqueFragmentNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueInputFieldNamesRule", {
      enumerable: true,
      get: function() {
        return _index4.UniqueInputFieldNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueOperationNamesRule", {
      enumerable: true,
      get: function() {
        return _index4.UniqueOperationNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueOperationTypesRule", {
      enumerable: true,
      get: function() {
        return _index4.UniqueOperationTypesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueTypeNamesRule", {
      enumerable: true,
      get: function() {
        return _index4.UniqueTypeNamesRule;
      }
    });
    Object.defineProperty(exports2, "UniqueVariableNamesRule", {
      enumerable: true,
      get: function() {
        return _index4.UniqueVariableNamesRule;
      }
    });
    Object.defineProperty(exports2, "ValidationContext", {
      enumerable: true,
      get: function() {
        return _index4.ValidationContext;
      }
    });
    Object.defineProperty(exports2, "ValuesOfCorrectTypeRule", {
      enumerable: true,
      get: function() {
        return _index4.ValuesOfCorrectTypeRule;
      }
    });
    Object.defineProperty(exports2, "VariablesAreInputTypesRule", {
      enumerable: true,
      get: function() {
        return _index4.VariablesAreInputTypesRule;
      }
    });
    Object.defineProperty(exports2, "VariablesInAllowedPositionRule", {
      enumerable: true,
      get: function() {
        return _index4.VariablesInAllowedPositionRule;
      }
    });
    Object.defineProperty(exports2, "__Directive", {
      enumerable: true,
      get: function() {
        return _index.__Directive;
      }
    });
    Object.defineProperty(exports2, "__DirectiveLocation", {
      enumerable: true,
      get: function() {
        return _index.__DirectiveLocation;
      }
    });
    Object.defineProperty(exports2, "__EnumValue", {
      enumerable: true,
      get: function() {
        return _index.__EnumValue;
      }
    });
    Object.defineProperty(exports2, "__Field", {
      enumerable: true,
      get: function() {
        return _index.__Field;
      }
    });
    Object.defineProperty(exports2, "__InputValue", {
      enumerable: true,
      get: function() {
        return _index.__InputValue;
      }
    });
    Object.defineProperty(exports2, "__Schema", {
      enumerable: true,
      get: function() {
        return _index.__Schema;
      }
    });
    Object.defineProperty(exports2, "__Type", {
      enumerable: true,
      get: function() {
        return _index.__Type;
      }
    });
    Object.defineProperty(exports2, "__TypeKind", {
      enumerable: true,
      get: function() {
        return _index.__TypeKind;
      }
    });
    Object.defineProperty(exports2, "assertAbstractType", {
      enumerable: true,
      get: function() {
        return _index.assertAbstractType;
      }
    });
    Object.defineProperty(exports2, "assertCompositeType", {
      enumerable: true,
      get: function() {
        return _index.assertCompositeType;
      }
    });
    Object.defineProperty(exports2, "assertDirective", {
      enumerable: true,
      get: function() {
        return _index.assertDirective;
      }
    });
    Object.defineProperty(exports2, "assertEnumType", {
      enumerable: true,
      get: function() {
        return _index.assertEnumType;
      }
    });
    Object.defineProperty(exports2, "assertEnumValueName", {
      enumerable: true,
      get: function() {
        return _index.assertEnumValueName;
      }
    });
    Object.defineProperty(exports2, "assertInputObjectType", {
      enumerable: true,
      get: function() {
        return _index.assertInputObjectType;
      }
    });
    Object.defineProperty(exports2, "assertInputType", {
      enumerable: true,
      get: function() {
        return _index.assertInputType;
      }
    });
    Object.defineProperty(exports2, "assertInterfaceType", {
      enumerable: true,
      get: function() {
        return _index.assertInterfaceType;
      }
    });
    Object.defineProperty(exports2, "assertLeafType", {
      enumerable: true,
      get: function() {
        return _index.assertLeafType;
      }
    });
    Object.defineProperty(exports2, "assertListType", {
      enumerable: true,
      get: function() {
        return _index.assertListType;
      }
    });
    Object.defineProperty(exports2, "assertName", {
      enumerable: true,
      get: function() {
        return _index.assertName;
      }
    });
    Object.defineProperty(exports2, "assertNamedType", {
      enumerable: true,
      get: function() {
        return _index.assertNamedType;
      }
    });
    Object.defineProperty(exports2, "assertNonNullType", {
      enumerable: true,
      get: function() {
        return _index.assertNonNullType;
      }
    });
    Object.defineProperty(exports2, "assertNullableType", {
      enumerable: true,
      get: function() {
        return _index.assertNullableType;
      }
    });
    Object.defineProperty(exports2, "assertObjectType", {
      enumerable: true,
      get: function() {
        return _index.assertObjectType;
      }
    });
    Object.defineProperty(exports2, "assertOutputType", {
      enumerable: true,
      get: function() {
        return _index.assertOutputType;
      }
    });
    Object.defineProperty(exports2, "assertScalarType", {
      enumerable: true,
      get: function() {
        return _index.assertScalarType;
      }
    });
    Object.defineProperty(exports2, "assertSchema", {
      enumerable: true,
      get: function() {
        return _index.assertSchema;
      }
    });
    Object.defineProperty(exports2, "assertType", {
      enumerable: true,
      get: function() {
        return _index.assertType;
      }
    });
    Object.defineProperty(exports2, "assertUnionType", {
      enumerable: true,
      get: function() {
        return _index.assertUnionType;
      }
    });
    Object.defineProperty(exports2, "assertValidName", {
      enumerable: true,
      get: function() {
        return _index6.assertValidName;
      }
    });
    Object.defineProperty(exports2, "assertValidSchema", {
      enumerable: true,
      get: function() {
        return _index.assertValidSchema;
      }
    });
    Object.defineProperty(exports2, "assertWrappingType", {
      enumerable: true,
      get: function() {
        return _index.assertWrappingType;
      }
    });
    Object.defineProperty(exports2, "astFromValue", {
      enumerable: true,
      get: function() {
        return _index6.astFromValue;
      }
    });
    Object.defineProperty(exports2, "buildASTSchema", {
      enumerable: true,
      get: function() {
        return _index6.buildASTSchema;
      }
    });
    Object.defineProperty(exports2, "buildClientSchema", {
      enumerable: true,
      get: function() {
        return _index6.buildClientSchema;
      }
    });
    Object.defineProperty(exports2, "buildSchema", {
      enumerable: true,
      get: function() {
        return _index6.buildSchema;
      }
    });
    Object.defineProperty(exports2, "coerceInputValue", {
      enumerable: true,
      get: function() {
        return _index6.coerceInputValue;
      }
    });
    Object.defineProperty(exports2, "concatAST", {
      enumerable: true,
      get: function() {
        return _index6.concatAST;
      }
    });
    Object.defineProperty(exports2, "createSourceEventStream", {
      enumerable: true,
      get: function() {
        return _index3.createSourceEventStream;
      }
    });
    Object.defineProperty(exports2, "defaultFieldResolver", {
      enumerable: true,
      get: function() {
        return _index3.defaultFieldResolver;
      }
    });
    Object.defineProperty(exports2, "defaultTypeResolver", {
      enumerable: true,
      get: function() {
        return _index3.defaultTypeResolver;
      }
    });
    Object.defineProperty(exports2, "doTypesOverlap", {
      enumerable: true,
      get: function() {
        return _index6.doTypesOverlap;
      }
    });
    Object.defineProperty(exports2, "execute", {
      enumerable: true,
      get: function() {
        return _index3.execute;
      }
    });
    Object.defineProperty(exports2, "executeSync", {
      enumerable: true,
      get: function() {
        return _index3.executeSync;
      }
    });
    Object.defineProperty(exports2, "extendSchema", {
      enumerable: true,
      get: function() {
        return _index6.extendSchema;
      }
    });
    Object.defineProperty(exports2, "findBreakingChanges", {
      enumerable: true,
      get: function() {
        return _index6.findBreakingChanges;
      }
    });
    Object.defineProperty(exports2, "findDangerousChanges", {
      enumerable: true,
      get: function() {
        return _index6.findDangerousChanges;
      }
    });
    Object.defineProperty(exports2, "formatError", {
      enumerable: true,
      get: function() {
        return _index5.formatError;
      }
    });
    Object.defineProperty(exports2, "getArgumentValues", {
      enumerable: true,
      get: function() {
        return _index3.getArgumentValues;
      }
    });
    Object.defineProperty(exports2, "getDirectiveValues", {
      enumerable: true,
      get: function() {
        return _index3.getDirectiveValues;
      }
    });
    Object.defineProperty(exports2, "getEnterLeaveForKind", {
      enumerable: true,
      get: function() {
        return _index2.getEnterLeaveForKind;
      }
    });
    Object.defineProperty(exports2, "getIntrospectionQuery", {
      enumerable: true,
      get: function() {
        return _index6.getIntrospectionQuery;
      }
    });
    Object.defineProperty(exports2, "getLocation", {
      enumerable: true,
      get: function() {
        return _index2.getLocation;
      }
    });
    Object.defineProperty(exports2, "getNamedType", {
      enumerable: true,
      get: function() {
        return _index.getNamedType;
      }
    });
    Object.defineProperty(exports2, "getNullableType", {
      enumerable: true,
      get: function() {
        return _index.getNullableType;
      }
    });
    Object.defineProperty(exports2, "getOperationAST", {
      enumerable: true,
      get: function() {
        return _index6.getOperationAST;
      }
    });
    Object.defineProperty(exports2, "getOperationRootType", {
      enumerable: true,
      get: function() {
        return _index6.getOperationRootType;
      }
    });
    Object.defineProperty(exports2, "getVariableValues", {
      enumerable: true,
      get: function() {
        return _index3.getVariableValues;
      }
    });
    Object.defineProperty(exports2, "getVisitFn", {
      enumerable: true,
      get: function() {
        return _index2.getVisitFn;
      }
    });
    Object.defineProperty(exports2, "graphql", {
      enumerable: true,
      get: function() {
        return _graphql.graphql;
      }
    });
    Object.defineProperty(exports2, "graphqlSync", {
      enumerable: true,
      get: function() {
        return _graphql.graphqlSync;
      }
    });
    Object.defineProperty(exports2, "introspectionFromSchema", {
      enumerable: true,
      get: function() {
        return _index6.introspectionFromSchema;
      }
    });
    Object.defineProperty(exports2, "introspectionTypes", {
      enumerable: true,
      get: function() {
        return _index.introspectionTypes;
      }
    });
    Object.defineProperty(exports2, "isAbstractType", {
      enumerable: true,
      get: function() {
        return _index.isAbstractType;
      }
    });
    Object.defineProperty(exports2, "isCompositeType", {
      enumerable: true,
      get: function() {
        return _index.isCompositeType;
      }
    });
    Object.defineProperty(exports2, "isConstValueNode", {
      enumerable: true,
      get: function() {
        return _index2.isConstValueNode;
      }
    });
    Object.defineProperty(exports2, "isDefinitionNode", {
      enumerable: true,
      get: function() {
        return _index2.isDefinitionNode;
      }
    });
    Object.defineProperty(exports2, "isDirective", {
      enumerable: true,
      get: function() {
        return _index.isDirective;
      }
    });
    Object.defineProperty(exports2, "isEnumType", {
      enumerable: true,
      get: function() {
        return _index.isEnumType;
      }
    });
    Object.defineProperty(exports2, "isEqualType", {
      enumerable: true,
      get: function() {
        return _index6.isEqualType;
      }
    });
    Object.defineProperty(exports2, "isExecutableDefinitionNode", {
      enumerable: true,
      get: function() {
        return _index2.isExecutableDefinitionNode;
      }
    });
    Object.defineProperty(exports2, "isInputObjectType", {
      enumerable: true,
      get: function() {
        return _index.isInputObjectType;
      }
    });
    Object.defineProperty(exports2, "isInputType", {
      enumerable: true,
      get: function() {
        return _index.isInputType;
      }
    });
    Object.defineProperty(exports2, "isInterfaceType", {
      enumerable: true,
      get: function() {
        return _index.isInterfaceType;
      }
    });
    Object.defineProperty(exports2, "isIntrospectionType", {
      enumerable: true,
      get: function() {
        return _index.isIntrospectionType;
      }
    });
    Object.defineProperty(exports2, "isLeafType", {
      enumerable: true,
      get: function() {
        return _index.isLeafType;
      }
    });
    Object.defineProperty(exports2, "isListType", {
      enumerable: true,
      get: function() {
        return _index.isListType;
      }
    });
    Object.defineProperty(exports2, "isNamedType", {
      enumerable: true,
      get: function() {
        return _index.isNamedType;
      }
    });
    Object.defineProperty(exports2, "isNonNullType", {
      enumerable: true,
      get: function() {
        return _index.isNonNullType;
      }
    });
    Object.defineProperty(exports2, "isNullableType", {
      enumerable: true,
      get: function() {
        return _index.isNullableType;
      }
    });
    Object.defineProperty(exports2, "isObjectType", {
      enumerable: true,
      get: function() {
        return _index.isObjectType;
      }
    });
    Object.defineProperty(exports2, "isOutputType", {
      enumerable: true,
      get: function() {
        return _index.isOutputType;
      }
    });
    Object.defineProperty(exports2, "isRequiredArgument", {
      enumerable: true,
      get: function() {
        return _index.isRequiredArgument;
      }
    });
    Object.defineProperty(exports2, "isRequiredInputField", {
      enumerable: true,
      get: function() {
        return _index.isRequiredInputField;
      }
    });
    Object.defineProperty(exports2, "isScalarType", {
      enumerable: true,
      get: function() {
        return _index.isScalarType;
      }
    });
    Object.defineProperty(exports2, "isSchema", {
      enumerable: true,
      get: function() {
        return _index.isSchema;
      }
    });
    Object.defineProperty(exports2, "isSelectionNode", {
      enumerable: true,
      get: function() {
        return _index2.isSelectionNode;
      }
    });
    Object.defineProperty(exports2, "isSpecifiedDirective", {
      enumerable: true,
      get: function() {
        return _index.isSpecifiedDirective;
      }
    });
    Object.defineProperty(exports2, "isSpecifiedScalarType", {
      enumerable: true,
      get: function() {
        return _index.isSpecifiedScalarType;
      }
    });
    Object.defineProperty(exports2, "isType", {
      enumerable: true,
      get: function() {
        return _index.isType;
      }
    });
    Object.defineProperty(exports2, "isTypeDefinitionNode", {
      enumerable: true,
      get: function() {
        return _index2.isTypeDefinitionNode;
      }
    });
    Object.defineProperty(exports2, "isTypeExtensionNode", {
      enumerable: true,
      get: function() {
        return _index2.isTypeExtensionNode;
      }
    });
    Object.defineProperty(exports2, "isTypeNode", {
      enumerable: true,
      get: function() {
        return _index2.isTypeNode;
      }
    });
    Object.defineProperty(exports2, "isTypeSubTypeOf", {
      enumerable: true,
      get: function() {
        return _index6.isTypeSubTypeOf;
      }
    });
    Object.defineProperty(exports2, "isTypeSystemDefinitionNode", {
      enumerable: true,
      get: function() {
        return _index2.isTypeSystemDefinitionNode;
      }
    });
    Object.defineProperty(exports2, "isTypeSystemExtensionNode", {
      enumerable: true,
      get: function() {
        return _index2.isTypeSystemExtensionNode;
      }
    });
    Object.defineProperty(exports2, "isUnionType", {
      enumerable: true,
      get: function() {
        return _index.isUnionType;
      }
    });
    Object.defineProperty(exports2, "isValidNameError", {
      enumerable: true,
      get: function() {
        return _index6.isValidNameError;
      }
    });
    Object.defineProperty(exports2, "isValueNode", {
      enumerable: true,
      get: function() {
        return _index2.isValueNode;
      }
    });
    Object.defineProperty(exports2, "isWrappingType", {
      enumerable: true,
      get: function() {
        return _index.isWrappingType;
      }
    });
    Object.defineProperty(exports2, "lexicographicSortSchema", {
      enumerable: true,
      get: function() {
        return _index6.lexicographicSortSchema;
      }
    });
    Object.defineProperty(exports2, "locatedError", {
      enumerable: true,
      get: function() {
        return _index5.locatedError;
      }
    });
    Object.defineProperty(exports2, "parse", {
      enumerable: true,
      get: function() {
        return _index2.parse;
      }
    });
    Object.defineProperty(exports2, "parseConstValue", {
      enumerable: true,
      get: function() {
        return _index2.parseConstValue;
      }
    });
    Object.defineProperty(exports2, "parseType", {
      enumerable: true,
      get: function() {
        return _index2.parseType;
      }
    });
    Object.defineProperty(exports2, "parseValue", {
      enumerable: true,
      get: function() {
        return _index2.parseValue;
      }
    });
    Object.defineProperty(exports2, "print", {
      enumerable: true,
      get: function() {
        return _index2.print;
      }
    });
    Object.defineProperty(exports2, "printError", {
      enumerable: true,
      get: function() {
        return _index5.printError;
      }
    });
    Object.defineProperty(exports2, "printIntrospectionSchema", {
      enumerable: true,
      get: function() {
        return _index6.printIntrospectionSchema;
      }
    });
    Object.defineProperty(exports2, "printLocation", {
      enumerable: true,
      get: function() {
        return _index2.printLocation;
      }
    });
    Object.defineProperty(exports2, "printSchema", {
      enumerable: true,
      get: function() {
        return _index6.printSchema;
      }
    });
    Object.defineProperty(exports2, "printSourceLocation", {
      enumerable: true,
      get: function() {
        return _index2.printSourceLocation;
      }
    });
    Object.defineProperty(exports2, "printType", {
      enumerable: true,
      get: function() {
        return _index6.printType;
      }
    });
    Object.defineProperty(exports2, "recommendedRules", {
      enumerable: true,
      get: function() {
        return _index4.recommendedRules;
      }
    });
    Object.defineProperty(exports2, "resolveObjMapThunk", {
      enumerable: true,
      get: function() {
        return _index.resolveObjMapThunk;
      }
    });
    Object.defineProperty(exports2, "resolveReadonlyArrayThunk", {
      enumerable: true,
      get: function() {
        return _index.resolveReadonlyArrayThunk;
      }
    });
    Object.defineProperty(exports2, "responsePathAsArray", {
      enumerable: true,
      get: function() {
        return _index3.responsePathAsArray;
      }
    });
    Object.defineProperty(exports2, "separateOperations", {
      enumerable: true,
      get: function() {
        return _index6.separateOperations;
      }
    });
    Object.defineProperty(exports2, "specifiedDirectives", {
      enumerable: true,
      get: function() {
        return _index.specifiedDirectives;
      }
    });
    Object.defineProperty(exports2, "specifiedRules", {
      enumerable: true,
      get: function() {
        return _index4.specifiedRules;
      }
    });
    Object.defineProperty(exports2, "specifiedScalarTypes", {
      enumerable: true,
      get: function() {
        return _index.specifiedScalarTypes;
      }
    });
    Object.defineProperty(exports2, "stripIgnoredCharacters", {
      enumerable: true,
      get: function() {
        return _index6.stripIgnoredCharacters;
      }
    });
    Object.defineProperty(exports2, "subscribe", {
      enumerable: true,
      get: function() {
        return _index3.subscribe;
      }
    });
    Object.defineProperty(exports2, "syntaxError", {
      enumerable: true,
      get: function() {
        return _index5.syntaxError;
      }
    });
    Object.defineProperty(exports2, "typeFromAST", {
      enumerable: true,
      get: function() {
        return _index6.typeFromAST;
      }
    });
    Object.defineProperty(exports2, "validate", {
      enumerable: true,
      get: function() {
        return _index4.validate;
      }
    });
    Object.defineProperty(exports2, "validateSchema", {
      enumerable: true,
      get: function() {
        return _index.validateSchema;
      }
    });
    Object.defineProperty(exports2, "valueFromAST", {
      enumerable: true,
      get: function() {
        return _index6.valueFromAST;
      }
    });
    Object.defineProperty(exports2, "valueFromASTUntyped", {
      enumerable: true,
      get: function() {
        return _index6.valueFromASTUntyped;
      }
    });
    Object.defineProperty(exports2, "version", {
      enumerable: true,
      get: function() {
        return _version.version;
      }
    });
    Object.defineProperty(exports2, "versionInfo", {
      enumerable: true,
      get: function() {
        return _version.versionInfo;
      }
    });
    Object.defineProperty(exports2, "visit", {
      enumerable: true,
      get: function() {
        return _index2.visit;
      }
    });
    Object.defineProperty(exports2, "visitInParallel", {
      enumerable: true,
      get: function() {
        return _index2.visitInParallel;
      }
    });
    Object.defineProperty(exports2, "visitWithTypeInfo", {
      enumerable: true,
      get: function() {
        return _index6.visitWithTypeInfo;
      }
    });
    var _version = require_version();
    var _graphql = require_graphql();
    var _index = require_type2();
    var _index2 = require_language();
    var _index3 = require_execution();
    var _index4 = require_validation();
    var _index5 = require_error();
    var _index6 = require_utilities();
  }
});

// node_modules/loglevel/lib/loglevel.js
var require_loglevel = __commonJS({
  "node_modules/loglevel/lib/loglevel.js"(exports2, module2) {
    (function(root, definition) {
      "use strict";
      if (typeof define === "function" && define.amd) {
        define(definition);
      } else if (typeof module2 === "object" && module2.exports) {
        module2.exports = definition();
      } else {
        root.log = definition();
      }
    })(exports2, function() {
      "use strict";
      var noop = function() {
      };
      var undefinedType = "undefined";
      var isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\/|MSIE /.test(window.navigator.userAgent);
      var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
      ];
      var _loggersByName = {};
      var defaultLogger2 = null;
      function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === "function") {
          return method.bind(obj);
        } else {
          try {
            return Function.prototype.bind.call(method, obj);
          } catch (e) {
            return function() {
              return Function.prototype.apply.apply(method, [obj, arguments]);
            };
          }
        }
      }
      function traceForIE() {
        if (console.log) {
          if (console.log.apply) {
            console.log.apply(console, arguments);
          } else {
            Function.prototype.apply.apply(console.log, [console, arguments]);
          }
        }
        if (console.trace) console.trace();
      }
      function realMethod(methodName) {
        if (methodName === "debug") {
          methodName = "log";
        }
        if (typeof console === undefinedType) {
          return false;
        } else if (methodName === "trace" && isIE) {
          return traceForIE;
        } else if (console[methodName] !== void 0) {
          return bindMethod(console, methodName);
        } else if (console.log !== void 0) {
          return bindMethod(console, "log");
        } else {
          return noop;
        }
      }
      function replaceLoggingMethods() {
        var level = this.getLevel();
        for (var i = 0; i < logMethods.length; i++) {
          var methodName = logMethods[i];
          this[methodName] = i < level ? noop : this.methodFactory(methodName, level, this.name);
        }
        this.log = this.debug;
        if (typeof console === undefinedType && level < this.levels.SILENT) {
          return "No console available for logging";
        }
      }
      function enableLoggingWhenConsoleArrives(methodName) {
        return function() {
          if (typeof console !== undefinedType) {
            replaceLoggingMethods.call(this);
            this[methodName].apply(this, arguments);
          }
        };
      }
      function defaultMethodFactory(methodName, _level, _loggerName) {
        return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);
      }
      function Logger(name, factory) {
        var self2 = this;
        var inheritedLevel;
        var defaultLevel;
        var userLevel;
        var storageKey = "loglevel";
        if (typeof name === "string") {
          storageKey += ":" + name;
        } else if (typeof name === "symbol") {
          storageKey = void 0;
        }
        function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || "silent").toUpperCase();
          if (typeof window === undefinedType || !storageKey) return;
          try {
            window.localStorage[storageKey] = levelName;
            return;
          } catch (ignore) {
          }
          try {
            window.document.cookie = encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {
          }
        }
        function getPersistedLevel() {
          var storedLevel;
          if (typeof window === undefinedType || !storageKey) return;
          try {
            storedLevel = window.localStorage[storageKey];
          } catch (ignore) {
          }
          if (typeof storedLevel === undefinedType) {
            try {
              var cookie = window.document.cookie;
              var cookieName = encodeURIComponent(storageKey);
              var location = cookie.indexOf(cookieName + "=");
              if (location !== -1) {
                storedLevel = /^([^;]+)/.exec(
                  cookie.slice(location + cookieName.length + 1)
                )[1];
              }
            } catch (ignore) {
            }
          }
          if (self2.levels[storedLevel] === void 0) {
            storedLevel = void 0;
          }
          return storedLevel;
        }
        function clearPersistedLevel() {
          if (typeof window === undefinedType || !storageKey) return;
          try {
            window.localStorage.removeItem(storageKey);
          } catch (ignore) {
          }
          try {
            window.document.cookie = encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
          } catch (ignore) {
          }
        }
        function normalizeLevel(input) {
          var level = input;
          if (typeof level === "string" && self2.levels[level.toUpperCase()] !== void 0) {
            level = self2.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self2.levels.SILENT) {
            return level;
          } else {
            throw new TypeError("log.setLevel() called with invalid level: " + input);
          }
        }
        self2.name = name;
        self2.levels = {
          "TRACE": 0,
          "DEBUG": 1,
          "INFO": 2,
          "WARN": 3,
          "ERROR": 4,
          "SILENT": 5
        };
        self2.methodFactory = factory || defaultMethodFactory;
        self2.getLevel = function() {
          if (userLevel != null) {
            return userLevel;
          } else if (defaultLevel != null) {
            return defaultLevel;
          } else {
            return inheritedLevel;
          }
        };
        self2.setLevel = function(level, persist) {
          userLevel = normalizeLevel(level);
          if (persist !== false) {
            persistLevelIfPossible(userLevel);
          }
          return replaceLoggingMethods.call(self2);
        };
        self2.setDefaultLevel = function(level) {
          defaultLevel = normalizeLevel(level);
          if (!getPersistedLevel()) {
            self2.setLevel(level, false);
          }
        };
        self2.resetLevel = function() {
          userLevel = null;
          clearPersistedLevel();
          replaceLoggingMethods.call(self2);
        };
        self2.enableAll = function(persist) {
          self2.setLevel(self2.levels.TRACE, persist);
        };
        self2.disableAll = function(persist) {
          self2.setLevel(self2.levels.SILENT, persist);
        };
        self2.rebuild = function() {
          if (defaultLogger2 !== self2) {
            inheritedLevel = normalizeLevel(defaultLogger2.getLevel());
          }
          replaceLoggingMethods.call(self2);
          if (defaultLogger2 === self2) {
            for (var childName in _loggersByName) {
              _loggersByName[childName].rebuild();
            }
          }
        };
        inheritedLevel = normalizeLevel(
          defaultLogger2 ? defaultLogger2.getLevel() : "WARN"
        );
        var initialLevel = getPersistedLevel();
        if (initialLevel != null) {
          userLevel = normalizeLevel(initialLevel);
        }
        replaceLoggingMethods.call(self2);
      }
      defaultLogger2 = new Logger();
      defaultLogger2.getLogger = function getLogger(name) {
        if (typeof name !== "symbol" && typeof name !== "string" || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }
        var logger = _loggersByName[name];
        if (!logger) {
          logger = _loggersByName[name] = new Logger(
            name,
            defaultLogger2.methodFactory
          );
        }
        return logger;
      };
      var _log = typeof window !== undefinedType ? window.log : void 0;
      defaultLogger2.noConflict = function() {
        if (typeof window !== undefinedType && window.log === defaultLogger2) {
          window.log = _log;
        }
        return defaultLogger2;
      };
      defaultLogger2.getLoggers = function getLoggers() {
        return _loggersByName;
      };
      defaultLogger2["default"] = defaultLogger2;
      return defaultLogger2;
    });
  }
});

// node_modules/negotiator/lib/charset.js
var require_charset = __commonJS({
  "node_modules/negotiator/lib/charset.js"(exports2, module2) {
    "use strict";
    module2.exports = preferredCharsets;
    module2.exports.preferredCharsets = preferredCharsets;
    var simpleCharsetRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
    function parseAcceptCharset(accept) {
      var accepts = accept.split(",");
      for (var i = 0, j2 = 0; i < accepts.length; i++) {
        var charset = parseCharset(accepts[i].trim(), i);
        if (charset) {
          accepts[j2++] = charset;
        }
      }
      accepts.length = j2;
      return accepts;
    }
    function parseCharset(str, i) {
      var match = simpleCharsetRegExp.exec(str);
      if (!match) return null;
      var charset = match[1];
      var q2 = 1;
      if (match[2]) {
        var params = match[2].split(";");
        for (var j2 = 0; j2 < params.length; j2++) {
          var p = params[j2].trim().split("=");
          if (p[0] === "q") {
            q2 = parseFloat(p[1]);
            break;
          }
        }
      }
      return {
        charset,
        q: q2,
        i
      };
    }
    function getCharsetPriority(charset, accepted, index) {
      var priority = { o: -1, q: 0, s: 0 };
      for (var i = 0; i < accepted.length; i++) {
        var spec = specify(charset, accepted[i], index);
        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
          priority = spec;
        }
      }
      return priority;
    }
    function specify(charset, spec, index) {
      var s = 0;
      if (spec.charset.toLowerCase() === charset.toLowerCase()) {
        s |= 1;
      } else if (spec.charset !== "*") {
        return null;
      }
      return {
        i: index,
        o: spec.i,
        q: spec.q,
        s
      };
    }
    function preferredCharsets(accept, provided) {
      var accepts = parseAcceptCharset(accept === void 0 ? "*" : accept || "");
      if (!provided) {
        return accepts.filter(isQuality).sort(compareSpecs).map(getFullCharset);
      }
      var priorities = provided.map(function getPriority(type, index) {
        return getCharsetPriority(type, accepts, index);
      });
      return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
        return provided[priorities.indexOf(priority)];
      });
    }
    function compareSpecs(a, b2) {
      return b2.q - a.q || b2.s - a.s || a.o - b2.o || a.i - b2.i || 0;
    }
    function getFullCharset(spec) {
      return spec.charset;
    }
    function isQuality(spec) {
      return spec.q > 0;
    }
  }
});

// node_modules/negotiator/lib/encoding.js
var require_encoding = __commonJS({
  "node_modules/negotiator/lib/encoding.js"(exports2, module2) {
    "use strict";
    module2.exports = preferredEncodings;
    module2.exports.preferredEncodings = preferredEncodings;
    var simpleEncodingRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
    function parseAcceptEncoding(accept) {
      var accepts = accept.split(",");
      var hasIdentity = false;
      var minQuality = 1;
      for (var i = 0, j2 = 0; i < accepts.length; i++) {
        var encoding = parseEncoding(accepts[i].trim(), i);
        if (encoding) {
          accepts[j2++] = encoding;
          hasIdentity = hasIdentity || specify("identity", encoding);
          minQuality = Math.min(minQuality, encoding.q || 1);
        }
      }
      if (!hasIdentity) {
        accepts[j2++] = {
          encoding: "identity",
          q: minQuality,
          i
        };
      }
      accepts.length = j2;
      return accepts;
    }
    function parseEncoding(str, i) {
      var match = simpleEncodingRegExp.exec(str);
      if (!match) return null;
      var encoding = match[1];
      var q2 = 1;
      if (match[2]) {
        var params = match[2].split(";");
        for (var j2 = 0; j2 < params.length; j2++) {
          var p = params[j2].trim().split("=");
          if (p[0] === "q") {
            q2 = parseFloat(p[1]);
            break;
          }
        }
      }
      return {
        encoding,
        q: q2,
        i
      };
    }
    function getEncodingPriority(encoding, accepted, index) {
      var priority = { o: -1, q: 0, s: 0 };
      for (var i = 0; i < accepted.length; i++) {
        var spec = specify(encoding, accepted[i], index);
        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
          priority = spec;
        }
      }
      return priority;
    }
    function specify(encoding, spec, index) {
      var s = 0;
      if (spec.encoding.toLowerCase() === encoding.toLowerCase()) {
        s |= 1;
      } else if (spec.encoding !== "*") {
        return null;
      }
      return {
        i: index,
        o: spec.i,
        q: spec.q,
        s
      };
    }
    function preferredEncodings(accept, provided) {
      var accepts = parseAcceptEncoding(accept || "");
      if (!provided) {
        return accepts.filter(isQuality).sort(compareSpecs).map(getFullEncoding);
      }
      var priorities = provided.map(function getPriority(type, index) {
        return getEncodingPriority(type, accepts, index);
      });
      return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {
        return provided[priorities.indexOf(priority)];
      });
    }
    function compareSpecs(a, b2) {
      return b2.q - a.q || b2.s - a.s || a.o - b2.o || a.i - b2.i || 0;
    }
    function getFullEncoding(spec) {
      return spec.encoding;
    }
    function isQuality(spec) {
      return spec.q > 0;
    }
  }
});

// node_modules/negotiator/lib/language.js
var require_language2 = __commonJS({
  "node_modules/negotiator/lib/language.js"(exports2, module2) {
    "use strict";
    module2.exports = preferredLanguages;
    module2.exports.preferredLanguages = preferredLanguages;
    var simpleLanguageRegExp = /^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;
    function parseAcceptLanguage(accept) {
      var accepts = accept.split(",");
      for (var i = 0, j2 = 0; i < accepts.length; i++) {
        var language = parseLanguage(accepts[i].trim(), i);
        if (language) {
          accepts[j2++] = language;
        }
      }
      accepts.length = j2;
      return accepts;
    }
    function parseLanguage(str, i) {
      var match = simpleLanguageRegExp.exec(str);
      if (!match) return null;
      var prefix = match[1];
      var suffix = match[2];
      var full = prefix;
      if (suffix) full += "-" + suffix;
      var q2 = 1;
      if (match[3]) {
        var params = match[3].split(";");
        for (var j2 = 0; j2 < params.length; j2++) {
          var p = params[j2].split("=");
          if (p[0] === "q") q2 = parseFloat(p[1]);
        }
      }
      return {
        prefix,
        suffix,
        q: q2,
        i,
        full
      };
    }
    function getLanguagePriority(language, accepted, index) {
      var priority = { o: -1, q: 0, s: 0 };
      for (var i = 0; i < accepted.length; i++) {
        var spec = specify(language, accepted[i], index);
        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
          priority = spec;
        }
      }
      return priority;
    }
    function specify(language, spec, index) {
      var p = parseLanguage(language);
      if (!p) return null;
      var s = 0;
      if (spec.full.toLowerCase() === p.full.toLowerCase()) {
        s |= 4;
      } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
        s |= 2;
      } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
        s |= 1;
      } else if (spec.full !== "*") {
        return null;
      }
      return {
        i: index,
        o: spec.i,
        q: spec.q,
        s
      };
    }
    function preferredLanguages(accept, provided) {
      var accepts = parseAcceptLanguage(accept === void 0 ? "*" : accept || "");
      if (!provided) {
        return accepts.filter(isQuality).sort(compareSpecs).map(getFullLanguage);
      }
      var priorities = provided.map(function getPriority(type, index) {
        return getLanguagePriority(type, accepts, index);
      });
      return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {
        return provided[priorities.indexOf(priority)];
      });
    }
    function compareSpecs(a, b2) {
      return b2.q - a.q || b2.s - a.s || a.o - b2.o || a.i - b2.i || 0;
    }
    function getFullLanguage(spec) {
      return spec.full;
    }
    function isQuality(spec) {
      return spec.q > 0;
    }
  }
});

// node_modules/negotiator/lib/mediaType.js
var require_mediaType = __commonJS({
  "node_modules/negotiator/lib/mediaType.js"(exports2, module2) {
    "use strict";
    module2.exports = preferredMediaTypes;
    module2.exports.preferredMediaTypes = preferredMediaTypes;
    var simpleMediaTypeRegExp = /^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;
    function parseAccept(accept) {
      var accepts = splitMediaTypes(accept);
      for (var i = 0, j2 = 0; i < accepts.length; i++) {
        var mediaType = parseMediaType(accepts[i].trim(), i);
        if (mediaType) {
          accepts[j2++] = mediaType;
        }
      }
      accepts.length = j2;
      return accepts;
    }
    function parseMediaType(str, i) {
      var match = simpleMediaTypeRegExp.exec(str);
      if (!match) return null;
      var params = /* @__PURE__ */ Object.create(null);
      var q2 = 1;
      var subtype = match[2];
      var type = match[1];
      if (match[3]) {
        var kvps = splitParameters(match[3]).map(splitKeyValuePair);
        for (var j2 = 0; j2 < kvps.length; j2++) {
          var pair = kvps[j2];
          var key = pair[0].toLowerCase();
          var val = pair[1];
          var value = val && val[0] === '"' && val[val.length - 1] === '"' ? val.substr(1, val.length - 2) : val;
          if (key === "q") {
            q2 = parseFloat(value);
            break;
          }
          params[key] = value;
        }
      }
      return {
        type,
        subtype,
        params,
        q: q2,
        i
      };
    }
    function getMediaTypePriority(type, accepted, index) {
      var priority = { o: -1, q: 0, s: 0 };
      for (var i = 0; i < accepted.length; i++) {
        var spec = specify(type, accepted[i], index);
        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
          priority = spec;
        }
      }
      return priority;
    }
    function specify(type, spec, index) {
      var p = parseMediaType(type);
      var s = 0;
      if (!p) {
        return null;
      }
      if (spec.type.toLowerCase() == p.type.toLowerCase()) {
        s |= 4;
      } else if (spec.type != "*") {
        return null;
      }
      if (spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
        s |= 2;
      } else if (spec.subtype != "*") {
        return null;
      }
      var keys = Object.keys(spec.params);
      if (keys.length > 0) {
        if (keys.every(function(k2) {
          return spec.params[k2] == "*" || (spec.params[k2] || "").toLowerCase() == (p.params[k2] || "").toLowerCase();
        })) {
          s |= 1;
        } else {
          return null;
        }
      }
      return {
        i: index,
        o: spec.i,
        q: spec.q,
        s
      };
    }
    function preferredMediaTypes(accept, provided) {
      var accepts = parseAccept(accept === void 0 ? "*/*" : accept || "");
      if (!provided) {
        return accepts.filter(isQuality).sort(compareSpecs).map(getFullType);
      }
      var priorities = provided.map(function getPriority(type, index) {
        return getMediaTypePriority(type, accepts, index);
      });
      return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {
        return provided[priorities.indexOf(priority)];
      });
    }
    function compareSpecs(a, b2) {
      return b2.q - a.q || b2.s - a.s || a.o - b2.o || a.i - b2.i || 0;
    }
    function getFullType(spec) {
      return spec.type + "/" + spec.subtype;
    }
    function isQuality(spec) {
      return spec.q > 0;
    }
    function quoteCount(string) {
      var count = 0;
      var index = 0;
      while ((index = string.indexOf('"', index)) !== -1) {
        count++;
        index++;
      }
      return count;
    }
    function splitKeyValuePair(str) {
      var index = str.indexOf("=");
      var key;
      var val;
      if (index === -1) {
        key = str;
      } else {
        key = str.substr(0, index);
        val = str.substr(index + 1);
      }
      return [key, val];
    }
    function splitMediaTypes(accept) {
      var accepts = accept.split(",");
      for (var i = 1, j2 = 0; i < accepts.length; i++) {
        if (quoteCount(accepts[j2]) % 2 == 0) {
          accepts[++j2] = accepts[i];
        } else {
          accepts[j2] += "," + accepts[i];
        }
      }
      accepts.length = j2 + 1;
      return accepts;
    }
    function splitParameters(str) {
      var parameters = str.split(";");
      for (var i = 1, j2 = 0; i < parameters.length; i++) {
        if (quoteCount(parameters[j2]) % 2 == 0) {
          parameters[++j2] = parameters[i];
        } else {
          parameters[j2] += ";" + parameters[i];
        }
      }
      parameters.length = j2 + 1;
      for (var i = 0; i < parameters.length; i++) {
        parameters[i] = parameters[i].trim();
      }
      return parameters;
    }
  }
});

// node_modules/negotiator/index.js
var require_negotiator = __commonJS({
  "node_modules/negotiator/index.js"(exports2, module2) {
    "use strict";
    var preferredCharsets = require_charset();
    var preferredEncodings = require_encoding();
    var preferredLanguages = require_language2();
    var preferredMediaTypes = require_mediaType();
    module2.exports = Negotiator3;
    module2.exports.Negotiator = Negotiator3;
    function Negotiator3(request) {
      if (!(this instanceof Negotiator3)) {
        return new Negotiator3(request);
      }
      this.request = request;
    }
    Negotiator3.prototype.charset = function charset(available) {
      var set = this.charsets(available);
      return set && set[0];
    };
    Negotiator3.prototype.charsets = function charsets(available) {
      return preferredCharsets(this.request.headers["accept-charset"], available);
    };
    Negotiator3.prototype.encoding = function encoding(available) {
      var set = this.encodings(available);
      return set && set[0];
    };
    Negotiator3.prototype.encodings = function encodings(available) {
      return preferredEncodings(this.request.headers["accept-encoding"], available);
    };
    Negotiator3.prototype.language = function language(available) {
      var set = this.languages(available);
      return set && set[0];
    };
    Negotiator3.prototype.languages = function languages(available) {
      return preferredLanguages(this.request.headers["accept-language"], available);
    };
    Negotiator3.prototype.mediaType = function mediaType(available) {
      var set = this.mediaTypes(available);
      return set && set[0];
    };
    Negotiator3.prototype.mediaTypes = function mediaTypes(available) {
      return preferredMediaTypes(this.request.headers.accept, available);
    };
    Negotiator3.prototype.preferredCharset = Negotiator3.prototype.charset;
    Negotiator3.prototype.preferredCharsets = Negotiator3.prototype.charsets;
    Negotiator3.prototype.preferredEncoding = Negotiator3.prototype.encoding;
    Negotiator3.prototype.preferredEncodings = Negotiator3.prototype.encodings;
    Negotiator3.prototype.preferredLanguage = Negotiator3.prototype.language;
    Negotiator3.prototype.preferredLanguages = Negotiator3.prototype.languages;
    Negotiator3.prototype.preferredMediaType = Negotiator3.prototype.mediaType;
    Negotiator3.prototype.preferredMediaTypes = Negotiator3.prototype.mediaTypes;
  }
});

// node_modules/@apollo/server/dist/esm/cachePolicy.js
function newCachePolicy() {
  return {
    maxAge: void 0,
    scope: void 0,
    restrict(hint) {
      if (hint.maxAge !== void 0 && (this.maxAge === void 0 || hint.maxAge < this.maxAge)) {
        this.maxAge = hint.maxAge;
      }
      if (hint.scope !== void 0 && this.scope !== "PRIVATE") {
        this.scope = hint.scope;
      }
    },
    replace(hint) {
      if (hint.maxAge !== void 0) {
        this.maxAge = hint.maxAge;
      }
      if (hint.scope !== void 0) {
        this.scope = hint.scope;
      }
    },
    policyIfCacheable() {
      if (this.maxAge === void 0 || this.maxAge === 0) {
        return null;
      }
      return { maxAge: this.maxAge, scope: this.scope ?? "PUBLIC" };
    }
  };
}
var init_cachePolicy = __esm({
  "node_modules/@apollo/server/dist/esm/cachePolicy.js"() {
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports2, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/inherits/inherits.js
var require_inherits2 = __commonJS({
  "node_modules/inherits/inherits.js"(exports2, module2) {
    try {
      util = require("util");
      if (typeof util.inherits !== "function") throw "";
      module2.exports = util.inherits;
    } catch (e) {
      module2.exports = require_inherits_browser();
    }
    var util;
  }
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/safe-buffer/index.js"(exports2, module2) {
    var buffer = require("buffer");
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/sha.js/hash.js
var require_hash = __commonJS({
  "node_modules/sha.js/hash.js"(exports2, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    function Hash(blockSize, finalSize) {
      this._block = Buffer2.alloc(blockSize);
      this._finalSize = finalSize;
      this._blockSize = blockSize;
      this._len = 0;
    }
    Hash.prototype.update = function(data, enc) {
      if (typeof data === "string") {
        enc = enc || "utf8";
        data = Buffer2.from(data, enc);
      }
      var block2 = this._block;
      var blockSize = this._blockSize;
      var length = data.length;
      var accum = this._len;
      for (var offset = 0; offset < length; ) {
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for (var i = 0; i < remainder; i++) {
          block2[assigned + i] = data[offset + i];
        }
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) {
          this._update(block2);
        }
      }
      this._len += length;
      return this;
    };
    Hash.prototype.digest = function(enc) {
      var rem = this._len % this._blockSize;
      this._block[rem] = 128;
      this._block.fill(0, rem + 1);
      if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
      }
      var bits = this._len * 8;
      if (bits <= 4294967295) {
        this._block.writeUInt32BE(bits, this._blockSize - 4);
      } else {
        var lowBits = (bits & 4294967295) >>> 0;
        var highBits = (bits - lowBits) / 4294967296;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
      }
      this._update(this._block);
      var hash = this._hash();
      return enc ? hash.toString(enc) : hash;
    };
    Hash.prototype._update = function() {
      throw new Error("_update must be implemented by subclass");
    };
    module2.exports = Hash;
  }
});

// node_modules/sha.js/sha.js
var require_sha = __commonJS({
  "node_modules/sha.js/sha.js"(exports2, module2) {
    var inherits = require_inherits2();
    var Hash = require_hash();
    var Buffer2 = require_safe_buffer().Buffer;
    var K = [
      1518500249,
      1859775393,
      2400959708 | 0,
      3395469782 | 0
    ];
    var W2 = new Array(80);
    function Sha() {
      this.init();
      this._w = W2;
      Hash.call(this, 64, 56);
    }
    inherits(Sha, Hash);
    Sha.prototype.init = function() {
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
      return this;
    };
    function rotl5(num) {
      return num << 5 | num >>> 27;
    }
    function rotl30(num) {
      return num << 30 | num >>> 2;
    }
    function ft2(s, b2, c, d) {
      if (s === 0) return b2 & c | ~b2 & d;
      if (s === 2) return b2 & c | b2 & d | c & d;
      return b2 ^ c ^ d;
    }
    Sha.prototype._update = function(M2) {
      var W3 = this._w;
      var a = this._a | 0;
      var b2 = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      for (var i = 0; i < 16; ++i) W3[i] = M2.readInt32BE(i * 4);
      for (; i < 80; ++i) W3[i] = W3[i - 3] ^ W3[i - 8] ^ W3[i - 14] ^ W3[i - 16];
      for (var j2 = 0; j2 < 80; ++j2) {
        var s = ~~(j2 / 20);
        var t = rotl5(a) + ft2(s, b2, c, d) + e + W3[j2] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b2);
        b2 = a;
        a = t;
      }
      this._a = a + this._a | 0;
      this._b = b2 + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
    };
    Sha.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(20);
      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);
      return H;
    };
    module2.exports = Sha;
  }
});

// node_modules/sha.js/sha1.js
var require_sha1 = __commonJS({
  "node_modules/sha.js/sha1.js"(exports2, module2) {
    var inherits = require_inherits2();
    var Hash = require_hash();
    var Buffer2 = require_safe_buffer().Buffer;
    var K = [
      1518500249,
      1859775393,
      2400959708 | 0,
      3395469782 | 0
    ];
    var W2 = new Array(80);
    function Sha1() {
      this.init();
      this._w = W2;
      Hash.call(this, 64, 56);
    }
    inherits(Sha1, Hash);
    Sha1.prototype.init = function() {
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
      return this;
    };
    function rotl1(num) {
      return num << 1 | num >>> 31;
    }
    function rotl5(num) {
      return num << 5 | num >>> 27;
    }
    function rotl30(num) {
      return num << 30 | num >>> 2;
    }
    function ft2(s, b2, c, d) {
      if (s === 0) return b2 & c | ~b2 & d;
      if (s === 2) return b2 & c | b2 & d | c & d;
      return b2 ^ c ^ d;
    }
    Sha1.prototype._update = function(M2) {
      var W3 = this._w;
      var a = this._a | 0;
      var b2 = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      for (var i = 0; i < 16; ++i) W3[i] = M2.readInt32BE(i * 4);
      for (; i < 80; ++i) W3[i] = rotl1(W3[i - 3] ^ W3[i - 8] ^ W3[i - 14] ^ W3[i - 16]);
      for (var j2 = 0; j2 < 80; ++j2) {
        var s = ~~(j2 / 20);
        var t = rotl5(a) + ft2(s, b2, c, d) + e + W3[j2] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b2);
        b2 = a;
        a = t;
      }
      this._a = a + this._a | 0;
      this._b = b2 + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
    };
    Sha1.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(20);
      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);
      return H;
    };
    module2.exports = Sha1;
  }
});

// node_modules/sha.js/sha256.js
var require_sha256 = __commonJS({
  "node_modules/sha.js/sha256.js"(exports2, module2) {
    var inherits = require_inherits2();
    var Hash = require_hash();
    var Buffer2 = require_safe_buffer().Buffer;
    var K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    var W2 = new Array(64);
    function Sha256() {
      this.init();
      this._w = W2;
      Hash.call(this, 64, 56);
    }
    inherits(Sha256, Hash);
    Sha256.prototype.init = function() {
      this._a = 1779033703;
      this._b = 3144134277;
      this._c = 1013904242;
      this._d = 2773480762;
      this._e = 1359893119;
      this._f = 2600822924;
      this._g = 528734635;
      this._h = 1541459225;
      return this;
    };
    function ch(x2, y2, z2) {
      return z2 ^ x2 & (y2 ^ z2);
    }
    function maj(x2, y2, z2) {
      return x2 & y2 | z2 & (x2 | y2);
    }
    function sigma0(x2) {
      return (x2 >>> 2 | x2 << 30) ^ (x2 >>> 13 | x2 << 19) ^ (x2 >>> 22 | x2 << 10);
    }
    function sigma1(x2) {
      return (x2 >>> 6 | x2 << 26) ^ (x2 >>> 11 | x2 << 21) ^ (x2 >>> 25 | x2 << 7);
    }
    function gamma0(x2) {
      return (x2 >>> 7 | x2 << 25) ^ (x2 >>> 18 | x2 << 14) ^ x2 >>> 3;
    }
    function gamma1(x2) {
      return (x2 >>> 17 | x2 << 15) ^ (x2 >>> 19 | x2 << 13) ^ x2 >>> 10;
    }
    Sha256.prototype._update = function(M2) {
      var W3 = this._w;
      var a = this._a | 0;
      var b2 = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      var f = this._f | 0;
      var g = this._g | 0;
      var h = this._h | 0;
      for (var i = 0; i < 16; ++i) W3[i] = M2.readInt32BE(i * 4);
      for (; i < 64; ++i) W3[i] = gamma1(W3[i - 2]) + W3[i - 7] + gamma0(W3[i - 15]) + W3[i - 16] | 0;
      for (var j2 = 0; j2 < 64; ++j2) {
        var T1 = h + sigma1(e) + ch(e, f, g) + K[j2] + W3[j2] | 0;
        var T2 = sigma0(a) + maj(a, b2, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b2;
        b2 = a;
        a = T1 + T2 | 0;
      }
      this._a = a + this._a | 0;
      this._b = b2 + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
      this._f = f + this._f | 0;
      this._g = g + this._g | 0;
      this._h = h + this._h | 0;
    };
    Sha256.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(32);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      H.writeInt32BE(this._h, 28);
      return H;
    };
    module2.exports = Sha256;
  }
});

// node_modules/sha.js/sha224.js
var require_sha224 = __commonJS({
  "node_modules/sha.js/sha224.js"(exports2, module2) {
    var inherits = require_inherits2();
    var Sha256 = require_sha256();
    var Hash = require_hash();
    var Buffer2 = require_safe_buffer().Buffer;
    var W2 = new Array(64);
    function Sha224() {
      this.init();
      this._w = W2;
      Hash.call(this, 64, 56);
    }
    inherits(Sha224, Sha256);
    Sha224.prototype.init = function() {
      this._a = 3238371032;
      this._b = 914150663;
      this._c = 812702999;
      this._d = 4144912697;
      this._e = 4290775857;
      this._f = 1750603025;
      this._g = 1694076839;
      this._h = 3204075428;
      return this;
    };
    Sha224.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(28);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      return H;
    };
    module2.exports = Sha224;
  }
});

// node_modules/sha.js/sha512.js
var require_sha512 = __commonJS({
  "node_modules/sha.js/sha512.js"(exports2, module2) {
    var inherits = require_inherits2();
    var Hash = require_hash();
    var Buffer2 = require_safe_buffer().Buffer;
    var K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    var W2 = new Array(160);
    function Sha512() {
      this.init();
      this._w = W2;
      Hash.call(this, 128, 112);
    }
    inherits(Sha512, Hash);
    Sha512.prototype.init = function() {
      this._ah = 1779033703;
      this._bh = 3144134277;
      this._ch = 1013904242;
      this._dh = 2773480762;
      this._eh = 1359893119;
      this._fh = 2600822924;
      this._gh = 528734635;
      this._hh = 1541459225;
      this._al = 4089235720;
      this._bl = 2227873595;
      this._cl = 4271175723;
      this._dl = 1595750129;
      this._el = 2917565137;
      this._fl = 725511199;
      this._gl = 4215389547;
      this._hl = 327033209;
      return this;
    };
    function Ch(x2, y2, z2) {
      return z2 ^ x2 & (y2 ^ z2);
    }
    function maj(x2, y2, z2) {
      return x2 & y2 | z2 & (x2 | y2);
    }
    function sigma0(x2, xl2) {
      return (x2 >>> 28 | xl2 << 4) ^ (xl2 >>> 2 | x2 << 30) ^ (xl2 >>> 7 | x2 << 25);
    }
    function sigma1(x2, xl2) {
      return (x2 >>> 14 | xl2 << 18) ^ (x2 >>> 18 | xl2 << 14) ^ (xl2 >>> 9 | x2 << 23);
    }
    function Gamma0(x2, xl2) {
      return (x2 >>> 1 | xl2 << 31) ^ (x2 >>> 8 | xl2 << 24) ^ x2 >>> 7;
    }
    function Gamma0l(x2, xl2) {
      return (x2 >>> 1 | xl2 << 31) ^ (x2 >>> 8 | xl2 << 24) ^ (x2 >>> 7 | xl2 << 25);
    }
    function Gamma1(x2, xl2) {
      return (x2 >>> 19 | xl2 << 13) ^ (xl2 >>> 29 | x2 << 3) ^ x2 >>> 6;
    }
    function Gamma1l(x2, xl2) {
      return (x2 >>> 19 | xl2 << 13) ^ (xl2 >>> 29 | x2 << 3) ^ (x2 >>> 6 | xl2 << 26);
    }
    function getCarry(a, b2) {
      return a >>> 0 < b2 >>> 0 ? 1 : 0;
    }
    Sha512.prototype._update = function(M2) {
      var W3 = this._w;
      var ah = this._ah | 0;
      var bh = this._bh | 0;
      var ch = this._ch | 0;
      var dh = this._dh | 0;
      var eh = this._eh | 0;
      var fh = this._fh | 0;
      var gh = this._gh | 0;
      var hh = this._hh | 0;
      var al2 = this._al | 0;
      var bl2 = this._bl | 0;
      var cl2 = this._cl | 0;
      var dl2 = this._dl | 0;
      var el2 = this._el | 0;
      var fl2 = this._fl | 0;
      var gl2 = this._gl | 0;
      var hl2 = this._hl | 0;
      for (var i = 0; i < 32; i += 2) {
        W3[i] = M2.readInt32BE(i * 4);
        W3[i + 1] = M2.readInt32BE(i * 4 + 4);
      }
      for (; i < 160; i += 2) {
        var xh = W3[i - 15 * 2];
        var xl2 = W3[i - 15 * 2 + 1];
        var gamma0 = Gamma0(xh, xl2);
        var gamma0l = Gamma0l(xl2, xh);
        xh = W3[i - 2 * 2];
        xl2 = W3[i - 2 * 2 + 1];
        var gamma1 = Gamma1(xh, xl2);
        var gamma1l = Gamma1l(xl2, xh);
        var Wi7h = W3[i - 7 * 2];
        var Wi7l = W3[i - 7 * 2 + 1];
        var Wi16h = W3[i - 16 * 2];
        var Wi16l = W3[i - 16 * 2 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W3[i] = Wih;
        W3[i + 1] = Wil;
      }
      for (var j2 = 0; j2 < 160; j2 += 2) {
        Wih = W3[j2];
        Wil = W3[j2 + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al2, bl2, cl2);
        var sigma0h = sigma0(ah, al2);
        var sigma0l = sigma0(al2, ah);
        var sigma1h = sigma1(eh, el2);
        var sigma1l = sigma1(el2, eh);
        var Kih = K[j2];
        var Kil = K[j2 + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el2, fl2, gl2);
        var t1l = hl2 + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl2) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl2 = gl2;
        gh = fh;
        gl2 = fl2;
        fh = eh;
        fl2 = el2;
        el2 = dl2 + t1l | 0;
        eh = dh + t1h + getCarry(el2, dl2) | 0;
        dh = ch;
        dl2 = cl2;
        ch = bh;
        cl2 = bl2;
        bh = ah;
        bl2 = al2;
        al2 = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al2, t1l) | 0;
      }
      this._al = this._al + al2 | 0;
      this._bl = this._bl + bl2 | 0;
      this._cl = this._cl + cl2 | 0;
      this._dl = this._dl + dl2 | 0;
      this._el = this._el + el2 | 0;
      this._fl = this._fl + fl2 | 0;
      this._gl = this._gl + gl2 | 0;
      this._hl = this._hl + hl2 | 0;
      this._ah = this._ah + ah + getCarry(this._al, al2) | 0;
      this._bh = this._bh + bh + getCarry(this._bl, bl2) | 0;
      this._ch = this._ch + ch + getCarry(this._cl, cl2) | 0;
      this._dh = this._dh + dh + getCarry(this._dl, dl2) | 0;
      this._eh = this._eh + eh + getCarry(this._el, el2) | 0;
      this._fh = this._fh + fh + getCarry(this._fl, fl2) | 0;
      this._gh = this._gh + gh + getCarry(this._gl, gl2) | 0;
      this._hh = this._hh + hh + getCarry(this._hl, hl2) | 0;
    };
    Sha512.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(64);
      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }
      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      writeInt64BE(this._gh, this._gl, 48);
      writeInt64BE(this._hh, this._hl, 56);
      return H;
    };
    module2.exports = Sha512;
  }
});

// node_modules/sha.js/sha384.js
var require_sha384 = __commonJS({
  "node_modules/sha.js/sha384.js"(exports2, module2) {
    var inherits = require_inherits2();
    var SHA512 = require_sha512();
    var Hash = require_hash();
    var Buffer2 = require_safe_buffer().Buffer;
    var W2 = new Array(160);
    function Sha384() {
      this.init();
      this._w = W2;
      Hash.call(this, 128, 112);
    }
    inherits(Sha384, SHA512);
    Sha384.prototype.init = function() {
      this._ah = 3418070365;
      this._bh = 1654270250;
      this._ch = 2438529370;
      this._dh = 355462360;
      this._eh = 1731405415;
      this._fh = 2394180231;
      this._gh = 3675008525;
      this._hh = 1203062813;
      this._al = 3238371032;
      this._bl = 914150663;
      this._cl = 812702999;
      this._dl = 4144912697;
      this._el = 4290775857;
      this._fl = 1750603025;
      this._gl = 1694076839;
      this._hl = 3204075428;
      return this;
    };
    Sha384.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(48);
      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }
      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      return H;
    };
    module2.exports = Sha384;
  }
});

// node_modules/sha.js/index.js
var require_sha2 = __commonJS({
  "node_modules/sha.js/index.js"(exports2, module2) {
    var exports2 = module2.exports = function SHA(algorithm) {
      algorithm = algorithm.toLowerCase();
      var Algorithm = exports2[algorithm];
      if (!Algorithm) throw new Error(algorithm + " is not supported (we accept pull requests)");
      return new Algorithm();
    };
    exports2.sha = require_sha();
    exports2.sha1 = require_sha1();
    exports2.sha224 = require_sha224();
    exports2.sha256 = require_sha256();
    exports2.sha384 = require_sha384();
    exports2.sha512 = require_sha512();
  }
});

// node_modules/@apollo/utils.createhash/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/@apollo/utils.createhash/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createHash = void 0;
    var utils_isnodelike_1 = require_dist();
    function createHash5(kind) {
      if (utils_isnodelike_1.isNodeLike) {
        return require("crypto").createHash(kind);
      }
      return require_sha2()(kind);
    }
    exports2.createHash = createHash5;
  }
});

// node_modules/@apollo/server/dist/esm/internalPlugin.js
function internalPlugin(p) {
  return p;
}
function pluginIsInternal(plugin) {
  return "__internal_plugin_id__" in plugin;
}
var init_internalPlugin = __esm({
  "node_modules/@apollo/server/dist/esm/internalPlugin.js"() {
  }
});

// node_modules/whatwg-mimetype/lib/utils.js
var require_utils3 = __commonJS({
  "node_modules/whatwg-mimetype/lib/utils.js"(exports2) {
    "use strict";
    exports2.removeLeadingAndTrailingHTTPWhitespace = (string) => {
      return string.replace(/^[ \t\n\r]+/u, "").replace(/[ \t\n\r]+$/u, "");
    };
    exports2.removeTrailingHTTPWhitespace = (string) => {
      return string.replace(/[ \t\n\r]+$/u, "");
    };
    exports2.isHTTPWhitespaceChar = (char) => {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    };
    exports2.solelyContainsHTTPTokenCodePoints = (string) => {
      return /^[-!#$%&'*+.^_`|~A-Za-z0-9]*$/u.test(string);
    };
    exports2.soleyContainsHTTPQuotedStringTokenCodePoints = (string) => {
      return /^[\t\u0020-\u007E\u0080-\u00FF]*$/u.test(string);
    };
    exports2.asciiLowercase = (string) => {
      return string.replace(/[A-Z]/ug, (l) => l.toLowerCase());
    };
    exports2.collectAnHTTPQuotedString = (input, position) => {
      let value = "";
      position++;
      while (true) {
        while (position < input.length && input[position] !== '"' && input[position] !== "\\") {
          value += input[position];
          ++position;
        }
        if (position >= input.length) {
          break;
        }
        const quoteOrBackslash = input[position];
        ++position;
        if (quoteOrBackslash === "\\") {
          if (position >= input.length) {
            value += "\\";
            break;
          }
          value += input[position];
          ++position;
        } else {
          break;
        }
      }
      return [value, position];
    };
  }
});

// node_modules/whatwg-mimetype/lib/mime-type-parameters.js
var require_mime_type_parameters = __commonJS({
  "node_modules/whatwg-mimetype/lib/mime-type-parameters.js"(exports2, module2) {
    "use strict";
    var {
      asciiLowercase,
      solelyContainsHTTPTokenCodePoints,
      soleyContainsHTTPQuotedStringTokenCodePoints
    } = require_utils3();
    module2.exports = class MIMETypeParameters {
      constructor(map) {
        this._map = map;
      }
      get size() {
        return this._map.size;
      }
      get(name) {
        name = asciiLowercase(String(name));
        return this._map.get(name);
      }
      has(name) {
        name = asciiLowercase(String(name));
        return this._map.has(name);
      }
      set(name, value) {
        name = asciiLowercase(String(name));
        value = String(value);
        if (!solelyContainsHTTPTokenCodePoints(name)) {
          throw new Error(`Invalid MIME type parameter name "${name}": only HTTP token code points are valid.`);
        }
        if (!soleyContainsHTTPQuotedStringTokenCodePoints(value)) {
          throw new Error(`Invalid MIME type parameter value "${value}": only HTTP quoted-string token code points are valid.`);
        }
        return this._map.set(name, value);
      }
      clear() {
        this._map.clear();
      }
      delete(name) {
        name = asciiLowercase(String(name));
        return this._map.delete(name);
      }
      forEach(callbackFn, thisArg) {
        this._map.forEach(callbackFn, thisArg);
      }
      keys() {
        return this._map.keys();
      }
      values() {
        return this._map.values();
      }
      entries() {
        return this._map.entries();
      }
      [Symbol.iterator]() {
        return this._map[Symbol.iterator]();
      }
    };
  }
});

// node_modules/whatwg-mimetype/lib/parser.js
var require_parser2 = __commonJS({
  "node_modules/whatwg-mimetype/lib/parser.js"(exports2, module2) {
    "use strict";
    var {
      removeLeadingAndTrailingHTTPWhitespace,
      removeTrailingHTTPWhitespace,
      isHTTPWhitespaceChar,
      solelyContainsHTTPTokenCodePoints,
      soleyContainsHTTPQuotedStringTokenCodePoints,
      asciiLowercase,
      collectAnHTTPQuotedString
    } = require_utils3();
    module2.exports = (input) => {
      input = removeLeadingAndTrailingHTTPWhitespace(input);
      let position = 0;
      let type = "";
      while (position < input.length && input[position] !== "/") {
        type += input[position];
        ++position;
      }
      if (type.length === 0 || !solelyContainsHTTPTokenCodePoints(type)) {
        return null;
      }
      if (position >= input.length) {
        return null;
      }
      ++position;
      let subtype = "";
      while (position < input.length && input[position] !== ";") {
        subtype += input[position];
        ++position;
      }
      subtype = removeTrailingHTTPWhitespace(subtype);
      if (subtype.length === 0 || !solelyContainsHTTPTokenCodePoints(subtype)) {
        return null;
      }
      const mimeType = {
        type: asciiLowercase(type),
        subtype: asciiLowercase(subtype),
        parameters: /* @__PURE__ */ new Map()
      };
      while (position < input.length) {
        ++position;
        while (isHTTPWhitespaceChar(input[position])) {
          ++position;
        }
        let parameterName = "";
        while (position < input.length && input[position] !== ";" && input[position] !== "=") {
          parameterName += input[position];
          ++position;
        }
        parameterName = asciiLowercase(parameterName);
        if (position < input.length) {
          if (input[position] === ";") {
            continue;
          }
          ++position;
        }
        let parameterValue = null;
        if (input[position] === '"') {
          [parameterValue, position] = collectAnHTTPQuotedString(input, position);
          while (position < input.length && input[position] !== ";") {
            ++position;
          }
        } else {
          parameterValue = "";
          while (position < input.length && input[position] !== ";") {
            parameterValue += input[position];
            ++position;
          }
          parameterValue = removeTrailingHTTPWhitespace(parameterValue);
          if (parameterValue === "") {
            continue;
          }
        }
        if (parameterName.length > 0 && solelyContainsHTTPTokenCodePoints(parameterName) && soleyContainsHTTPQuotedStringTokenCodePoints(parameterValue) && !mimeType.parameters.has(parameterName)) {
          mimeType.parameters.set(parameterName, parameterValue);
        }
      }
      return mimeType;
    };
  }
});

// node_modules/whatwg-mimetype/lib/serializer.js
var require_serializer = __commonJS({
  "node_modules/whatwg-mimetype/lib/serializer.js"(exports2, module2) {
    "use strict";
    var { solelyContainsHTTPTokenCodePoints } = require_utils3();
    module2.exports = (mimeType) => {
      let serialization = `${mimeType.type}/${mimeType.subtype}`;
      if (mimeType.parameters.size === 0) {
        return serialization;
      }
      for (let [name, value] of mimeType.parameters) {
        serialization += ";";
        serialization += name;
        serialization += "=";
        if (!solelyContainsHTTPTokenCodePoints(value) || value.length === 0) {
          value = value.replace(/(["\\])/ug, "\\$1");
          value = `"${value}"`;
        }
        serialization += value;
      }
      return serialization;
    };
  }
});

// node_modules/whatwg-mimetype/lib/mime-type.js
var require_mime_type = __commonJS({
  "node_modules/whatwg-mimetype/lib/mime-type.js"(exports2, module2) {
    "use strict";
    var MIMETypeParameters = require_mime_type_parameters();
    var parse4 = require_parser2();
    var serialize = require_serializer();
    var {
      asciiLowercase,
      solelyContainsHTTPTokenCodePoints
    } = require_utils3();
    module2.exports = class MIMEType {
      constructor(string) {
        string = String(string);
        const result = parse4(string);
        if (result === null) {
          throw new Error(`Could not parse MIME type string "${string}"`);
        }
        this._type = result.type;
        this._subtype = result.subtype;
        this._parameters = new MIMETypeParameters(result.parameters);
      }
      static parse(string) {
        try {
          return new this(string);
        } catch (e) {
          return null;
        }
      }
      get essence() {
        return `${this.type}/${this.subtype}`;
      }
      get type() {
        return this._type;
      }
      set type(value) {
        value = asciiLowercase(String(value));
        if (value.length === 0) {
          throw new Error("Invalid type: must be a non-empty string");
        }
        if (!solelyContainsHTTPTokenCodePoints(value)) {
          throw new Error(`Invalid type ${value}: must contain only HTTP token code points`);
        }
        this._type = value;
      }
      get subtype() {
        return this._subtype;
      }
      set subtype(value) {
        value = asciiLowercase(String(value));
        if (value.length === 0) {
          throw new Error("Invalid subtype: must be a non-empty string");
        }
        if (!solelyContainsHTTPTokenCodePoints(value)) {
          throw new Error(`Invalid subtype ${value}: must contain only HTTP token code points`);
        }
        this._subtype = value;
      }
      get parameters() {
        return this._parameters;
      }
      toString() {
        return serialize(this);
      }
      isJavaScript({ prohibitParameters = false } = {}) {
        switch (this._type) {
          case "text": {
            switch (this._subtype) {
              case "ecmascript":
              case "javascript":
              case "javascript1.0":
              case "javascript1.1":
              case "javascript1.2":
              case "javascript1.3":
              case "javascript1.4":
              case "javascript1.5":
              case "jscript":
              case "livescript":
              case "x-ecmascript":
              case "x-javascript": {
                return !prohibitParameters || this._parameters.size === 0;
              }
              default: {
                return false;
              }
            }
          }
          case "application": {
            switch (this._subtype) {
              case "ecmascript":
              case "javascript":
              case "x-ecmascript":
              case "x-javascript": {
                return !prohibitParameters || this._parameters.size === 0;
              }
              default: {
                return false;
              }
            }
          }
          default: {
            return false;
          }
        }
      }
      isXML() {
        return this._subtype === "xml" && (this._type === "text" || this._type === "application") || this._subtype.endsWith("+xml");
      }
      isHTML() {
        return this._subtype === "html" && this._type === "text";
      }
    };
  }
});

// node_modules/@apollo/server/dist/esm/utils/UnreachableCaseError.js
var UnreachableCaseError;
var init_UnreachableCaseError = __esm({
  "node_modules/@apollo/server/dist/esm/utils/UnreachableCaseError.js"() {
    UnreachableCaseError = class extends Error {
      constructor(val) {
        super(`Unreachable case: ${val}`);
      }
    };
  }
});

// node_modules/@apollo/server/dist/esm/utils/computeCoreSchemaHash.js
function computeCoreSchemaHash(schema) {
  return (0, import_utils18.createHash)("sha256").update(schema).digest("hex");
}
var import_utils18;
var init_computeCoreSchemaHash = __esm({
  "node_modules/@apollo/server/dist/esm/utils/computeCoreSchemaHash.js"() {
    import_utils18 = __toESM(require_dist3(), 1);
  }
});

// node_modules/@apollo/server/node_modules/lru-cache/index.mjs
var perf, hasAbortController, AC, hasAbortSignal, hasACAbortSignal, AS, warned, deprecatedOption, deprecatedMethod, deprecatedProperty, emitWarning, shouldWarn, warn, isPosInt, getUintArray, ZeroArray, Stack, LRUCache, lru_cache_default;
var init_lru_cache = __esm({
  "node_modules/@apollo/server/node_modules/lru-cache/index.mjs"() {
    perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
    hasAbortController = typeof AbortController === "function";
    AC = hasAbortController ? AbortController : class AbortController2 {
      constructor() {
        this.signal = new AS();
      }
      abort(reason = new Error("This operation was aborted")) {
        this.signal.reason = this.signal.reason || reason;
        this.signal.aborted = true;
        this.signal.dispatchEvent({
          type: "abort",
          target: this.signal
        });
      }
    };
    hasAbortSignal = typeof AbortSignal === "function";
    hasACAbortSignal = typeof AC.AbortSignal === "function";
    AS = hasAbortSignal ? AbortSignal : hasACAbortSignal ? AC.AbortController : class AbortSignal2 {
      constructor() {
        this.reason = void 0;
        this.aborted = false;
        this._listeners = [];
      }
      dispatchEvent(e) {
        if (e.type === "abort") {
          this.aborted = true;
          this.onabort(e);
          this._listeners.forEach((f) => f(e), this);
        }
      }
      onabort() {
      }
      addEventListener(ev, fn2) {
        if (ev === "abort") {
          this._listeners.push(fn2);
        }
      }
      removeEventListener(ev, fn2) {
        if (ev === "abort") {
          this._listeners = this._listeners.filter((f) => f !== fn2);
        }
      }
    };
    warned = /* @__PURE__ */ new Set();
    deprecatedOption = (opt, instead) => {
      const code = `LRU_CACHE_OPTION_${opt}`;
      if (shouldWarn(code)) {
        warn(code, `${opt} option`, `options.${instead}`, LRUCache);
      }
    };
    deprecatedMethod = (method, instead) => {
      const code = `LRU_CACHE_METHOD_${method}`;
      if (shouldWarn(code)) {
        const { prototype } = LRUCache;
        const { get } = Object.getOwnPropertyDescriptor(prototype, method);
        warn(code, `${method} method`, `cache.${instead}()`, get);
      }
    };
    deprecatedProperty = (field, instead) => {
      const code = `LRU_CACHE_PROPERTY_${field}`;
      if (shouldWarn(code)) {
        const { prototype } = LRUCache;
        const { get } = Object.getOwnPropertyDescriptor(prototype, field);
        warn(code, `${field} property`, `cache.${instead}`, get);
      }
    };
    emitWarning = (...a) => {
      typeof process === "object" && process && typeof process.emitWarning === "function" ? process.emitWarning(...a) : console.error(...a);
    };
    shouldWarn = (code) => !warned.has(code);
    warn = (code, what, instead, fn2) => {
      warned.add(code);
      const msg = `The ${what} is deprecated. Please use ${instead} instead.`;
      emitWarning(msg, "DeprecationWarning", code, fn2);
    };
    isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);
    getUintArray = (max) => !isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
    ZeroArray = class extends Array {
      constructor(size) {
        super(size);
        this.fill(0);
      }
    };
    Stack = class {
      constructor(max) {
        if (max === 0) {
          return [];
        }
        const UintArray = getUintArray(max);
        this.heap = new UintArray(max);
        this.length = 0;
      }
      push(n) {
        this.heap[this.length++] = n;
      }
      pop() {
        return this.heap[--this.length];
      }
    };
    LRUCache = class _LRUCache {
      constructor(options = {}) {
        const {
          max = 0,
          ttl,
          ttlResolution = 1,
          ttlAutopurge,
          updateAgeOnGet,
          updateAgeOnHas,
          allowStale,
          dispose,
          disposeAfter,
          noDisposeOnSet,
          noUpdateTTL,
          maxSize = 0,
          maxEntrySize = 0,
          sizeCalculation,
          fetchMethod,
          fetchContext,
          noDeleteOnFetchRejection,
          noDeleteOnStaleGet,
          allowStaleOnFetchRejection,
          allowStaleOnFetchAbort,
          ignoreFetchAbort
        } = options;
        const { length, maxAge, stale } = options instanceof _LRUCache ? {} : options;
        if (max !== 0 && !isPosInt(max)) {
          throw new TypeError("max option must be a nonnegative integer");
        }
        const UintArray = max ? getUintArray(max) : Array;
        if (!UintArray) {
          throw new Error("invalid max value: " + max);
        }
        this.max = max;
        this.maxSize = maxSize;
        this.maxEntrySize = maxEntrySize || this.maxSize;
        this.sizeCalculation = sizeCalculation || length;
        if (this.sizeCalculation) {
          if (!this.maxSize && !this.maxEntrySize) {
            throw new TypeError(
              "cannot set sizeCalculation without setting maxSize or maxEntrySize"
            );
          }
          if (typeof this.sizeCalculation !== "function") {
            throw new TypeError("sizeCalculation set to non-function");
          }
        }
        this.fetchMethod = fetchMethod || null;
        if (this.fetchMethod && typeof this.fetchMethod !== "function") {
          throw new TypeError(
            "fetchMethod must be a function if specified"
          );
        }
        this.fetchContext = fetchContext;
        if (!this.fetchMethod && fetchContext !== void 0) {
          throw new TypeError(
            "cannot set fetchContext without fetchMethod"
          );
        }
        this.keyMap = /* @__PURE__ */ new Map();
        this.keyList = new Array(max).fill(null);
        this.valList = new Array(max).fill(null);
        this.next = new UintArray(max);
        this.prev = new UintArray(max);
        this.head = 0;
        this.tail = 0;
        this.free = new Stack(max);
        this.initialFill = 1;
        this.size = 0;
        if (typeof dispose === "function") {
          this.dispose = dispose;
        }
        if (typeof disposeAfter === "function") {
          this.disposeAfter = disposeAfter;
          this.disposed = [];
        } else {
          this.disposeAfter = null;
          this.disposed = null;
        }
        this.noDisposeOnSet = !!noDisposeOnSet;
        this.noUpdateTTL = !!noUpdateTTL;
        this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
        this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
        this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
        this.ignoreFetchAbort = !!ignoreFetchAbort;
        if (this.maxEntrySize !== 0) {
          if (this.maxSize !== 0) {
            if (!isPosInt(this.maxSize)) {
              throw new TypeError(
                "maxSize must be a positive integer if specified"
              );
            }
          }
          if (!isPosInt(this.maxEntrySize)) {
            throw new TypeError(
              "maxEntrySize must be a positive integer if specified"
            );
          }
          this.initializeSizeTracking();
        }
        this.allowStale = !!allowStale || !!stale;
        this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
        this.updateAgeOnGet = !!updateAgeOnGet;
        this.updateAgeOnHas = !!updateAgeOnHas;
        this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
        this.ttlAutopurge = !!ttlAutopurge;
        this.ttl = ttl || maxAge || 0;
        if (this.ttl) {
          if (!isPosInt(this.ttl)) {
            throw new TypeError(
              "ttl must be a positive integer if specified"
            );
          }
          this.initializeTTLTracking();
        }
        if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {
          throw new TypeError(
            "At least one of max, maxSize, or ttl is required"
          );
        }
        if (!this.ttlAutopurge && !this.max && !this.maxSize) {
          const code = "LRU_CACHE_UNBOUNDED";
          if (shouldWarn(code)) {
            warned.add(code);
            const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
            emitWarning(msg, "UnboundedCacheWarning", code, _LRUCache);
          }
        }
        if (stale) {
          deprecatedOption("stale", "allowStale");
        }
        if (maxAge) {
          deprecatedOption("maxAge", "ttl");
        }
        if (length) {
          deprecatedOption("length", "sizeCalculation");
        }
      }
      getRemainingTTL(key) {
        return this.has(key, { updateAgeOnHas: false }) ? Infinity : 0;
      }
      initializeTTLTracking() {
        this.ttls = new ZeroArray(this.max);
        this.starts = new ZeroArray(this.max);
        this.setItemTTL = (index, ttl, start = perf.now()) => {
          this.starts[index] = ttl !== 0 ? start : 0;
          this.ttls[index] = ttl;
          if (ttl !== 0 && this.ttlAutopurge) {
            const t = setTimeout(() => {
              if (this.isStale(index)) {
                this.delete(this.keyList[index]);
              }
            }, ttl + 1);
            if (t.unref) {
              t.unref();
            }
          }
        };
        this.updateItemAge = (index) => {
          this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0;
        };
        this.statusTTL = (status, index) => {
          if (status) {
            status.ttl = this.ttls[index];
            status.start = this.starts[index];
            status.now = cachedNow || getNow();
            status.remainingTTL = status.now + status.ttl - status.start;
          }
        };
        let cachedNow = 0;
        const getNow = () => {
          const n = perf.now();
          if (this.ttlResolution > 0) {
            cachedNow = n;
            const t = setTimeout(
              () => cachedNow = 0,
              this.ttlResolution
            );
            if (t.unref) {
              t.unref();
            }
          }
          return n;
        };
        this.getRemainingTTL = (key) => {
          const index = this.keyMap.get(key);
          if (index === void 0) {
            return 0;
          }
          return this.ttls[index] === 0 || this.starts[index] === 0 ? Infinity : this.starts[index] + this.ttls[index] - (cachedNow || getNow());
        };
        this.isStale = (index) => {
          return this.ttls[index] !== 0 && this.starts[index] !== 0 && (cachedNow || getNow()) - this.starts[index] > this.ttls[index];
        };
      }
      updateItemAge(_index) {
      }
      statusTTL(_status, _index) {
      }
      setItemTTL(_index, _ttl, _start) {
      }
      isStale(_index) {
        return false;
      }
      initializeSizeTracking() {
        this.calculatedSize = 0;
        this.sizes = new ZeroArray(this.max);
        this.removeItemSize = (index) => {
          this.calculatedSize -= this.sizes[index];
          this.sizes[index] = 0;
        };
        this.requireSize = (k2, v, size, sizeCalculation) => {
          if (this.isBackgroundFetch(v)) {
            return 0;
          }
          if (!isPosInt(size)) {
            if (sizeCalculation) {
              if (typeof sizeCalculation !== "function") {
                throw new TypeError("sizeCalculation must be a function");
              }
              size = sizeCalculation(v, k2);
              if (!isPosInt(size)) {
                throw new TypeError(
                  "sizeCalculation return invalid (expect positive integer)"
                );
              }
            } else {
              throw new TypeError(
                "invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set."
              );
            }
          }
          return size;
        };
        this.addItemSize = (index, size, status) => {
          this.sizes[index] = size;
          if (this.maxSize) {
            const maxSize = this.maxSize - this.sizes[index];
            while (this.calculatedSize > maxSize) {
              this.evict(true);
            }
          }
          this.calculatedSize += this.sizes[index];
          if (status) {
            status.entrySize = size;
            status.totalCalculatedSize = this.calculatedSize;
          }
        };
      }
      removeItemSize(_index) {
      }
      addItemSize(_index, _size) {
      }
      requireSize(_k, _v, size, sizeCalculation) {
        if (size || sizeCalculation) {
          throw new TypeError(
            "cannot set size without setting maxSize or maxEntrySize on cache"
          );
        }
      }
      *indexes({ allowStale = this.allowStale } = {}) {
        if (this.size) {
          for (let i = this.tail; true; ) {
            if (!this.isValidIndex(i)) {
              break;
            }
            if (allowStale || !this.isStale(i)) {
              yield i;
            }
            if (i === this.head) {
              break;
            } else {
              i = this.prev[i];
            }
          }
        }
      }
      *rindexes({ allowStale = this.allowStale } = {}) {
        if (this.size) {
          for (let i = this.head; true; ) {
            if (!this.isValidIndex(i)) {
              break;
            }
            if (allowStale || !this.isStale(i)) {
              yield i;
            }
            if (i === this.tail) {
              break;
            } else {
              i = this.next[i];
            }
          }
        }
      }
      isValidIndex(index) {
        return index !== void 0 && this.keyMap.get(this.keyList[index]) === index;
      }
      *entries() {
        for (const i of this.indexes()) {
          if (this.valList[i] !== void 0 && this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
            yield [this.keyList[i], this.valList[i]];
          }
        }
      }
      *rentries() {
        for (const i of this.rindexes()) {
          if (this.valList[i] !== void 0 && this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
            yield [this.keyList[i], this.valList[i]];
          }
        }
      }
      *keys() {
        for (const i of this.indexes()) {
          if (this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
            yield this.keyList[i];
          }
        }
      }
      *rkeys() {
        for (const i of this.rindexes()) {
          if (this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
            yield this.keyList[i];
          }
        }
      }
      *values() {
        for (const i of this.indexes()) {
          if (this.valList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
            yield this.valList[i];
          }
        }
      }
      *rvalues() {
        for (const i of this.rindexes()) {
          if (this.valList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
            yield this.valList[i];
          }
        }
      }
      [Symbol.iterator]() {
        return this.entries();
      }
      find(fn2, getOptions) {
        for (const i of this.indexes()) {
          const v = this.valList[i];
          const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0) continue;
          if (fn2(value, this.keyList[i], this)) {
            return this.get(this.keyList[i], getOptions);
          }
        }
      }
      forEach(fn2, thisp = this) {
        for (const i of this.indexes()) {
          const v = this.valList[i];
          const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0) continue;
          fn2.call(thisp, value, this.keyList[i], this);
        }
      }
      rforEach(fn2, thisp = this) {
        for (const i of this.rindexes()) {
          const v = this.valList[i];
          const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0) continue;
          fn2.call(thisp, value, this.keyList[i], this);
        }
      }
      get prune() {
        deprecatedMethod("prune", "purgeStale");
        return this.purgeStale;
      }
      purgeStale() {
        let deleted = false;
        for (const i of this.rindexes({ allowStale: true })) {
          if (this.isStale(i)) {
            this.delete(this.keyList[i]);
            deleted = true;
          }
        }
        return deleted;
      }
      dump() {
        const arr = [];
        for (const i of this.indexes({ allowStale: true })) {
          const key = this.keyList[i];
          const v = this.valList[i];
          const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0) continue;
          const entry = { value };
          if (this.ttls) {
            entry.ttl = this.ttls[i];
            const age = perf.now() - this.starts[i];
            entry.start = Math.floor(Date.now() - age);
          }
          if (this.sizes) {
            entry.size = this.sizes[i];
          }
          arr.unshift([key, entry]);
        }
        return arr;
      }
      load(arr) {
        this.clear();
        for (const [key, entry] of arr) {
          if (entry.start) {
            const age = Date.now() - entry.start;
            entry.start = perf.now() - age;
          }
          this.set(key, entry.value, entry);
        }
      }
      dispose(_v, _k, _reason) {
      }
      set(k2, v, {
        ttl = this.ttl,
        start,
        noDisposeOnSet = this.noDisposeOnSet,
        size = 0,
        sizeCalculation = this.sizeCalculation,
        noUpdateTTL = this.noUpdateTTL,
        status
      } = {}) {
        size = this.requireSize(k2, v, size, sizeCalculation);
        if (this.maxEntrySize && size > this.maxEntrySize) {
          if (status) {
            status.set = "miss";
            status.maxEntrySizeExceeded = true;
          }
          this.delete(k2);
          return this;
        }
        let index = this.size === 0 ? void 0 : this.keyMap.get(k2);
        if (index === void 0) {
          index = this.newIndex();
          this.keyList[index] = k2;
          this.valList[index] = v;
          this.keyMap.set(k2, index);
          this.next[this.tail] = index;
          this.prev[index] = this.tail;
          this.tail = index;
          this.size++;
          this.addItemSize(index, size, status);
          if (status) {
            status.set = "add";
          }
          noUpdateTTL = false;
        } else {
          this.moveToTail(index);
          const oldVal = this.valList[index];
          if (v !== oldVal) {
            if (this.isBackgroundFetch(oldVal)) {
              oldVal.__abortController.abort(new Error("replaced"));
            } else {
              if (!noDisposeOnSet) {
                this.dispose(oldVal, k2, "set");
                if (this.disposeAfter) {
                  this.disposed.push([oldVal, k2, "set"]);
                }
              }
            }
            this.removeItemSize(index);
            this.valList[index] = v;
            this.addItemSize(index, size, status);
            if (status) {
              status.set = "replace";
              const oldValue = oldVal && this.isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
              if (oldValue !== void 0) status.oldValue = oldValue;
            }
          } else if (status) {
            status.set = "update";
          }
        }
        if (ttl !== 0 && this.ttl === 0 && !this.ttls) {
          this.initializeTTLTracking();
        }
        if (!noUpdateTTL) {
          this.setItemTTL(index, ttl, start);
        }
        this.statusTTL(status, index);
        if (this.disposeAfter) {
          while (this.disposed.length) {
            this.disposeAfter(...this.disposed.shift());
          }
        }
        return this;
      }
      newIndex() {
        if (this.size === 0) {
          return this.tail;
        }
        if (this.size === this.max && this.max !== 0) {
          return this.evict(false);
        }
        if (this.free.length !== 0) {
          return this.free.pop();
        }
        return this.initialFill++;
      }
      pop() {
        if (this.size) {
          const val = this.valList[this.head];
          this.evict(true);
          return val;
        }
      }
      evict(free) {
        const head = this.head;
        const k2 = this.keyList[head];
        const v = this.valList[head];
        if (this.isBackgroundFetch(v)) {
          v.__abortController.abort(new Error("evicted"));
        } else {
          this.dispose(v, k2, "evict");
          if (this.disposeAfter) {
            this.disposed.push([v, k2, "evict"]);
          }
        }
        this.removeItemSize(head);
        if (free) {
          this.keyList[head] = null;
          this.valList[head] = null;
          this.free.push(head);
        }
        this.head = this.next[head];
        this.keyMap.delete(k2);
        this.size--;
        return head;
      }
      has(k2, { updateAgeOnHas = this.updateAgeOnHas, status } = {}) {
        const index = this.keyMap.get(k2);
        if (index !== void 0) {
          if (!this.isStale(index)) {
            if (updateAgeOnHas) {
              this.updateItemAge(index);
            }
            if (status) status.has = "hit";
            this.statusTTL(status, index);
            return true;
          } else if (status) {
            status.has = "stale";
            this.statusTTL(status, index);
          }
        } else if (status) {
          status.has = "miss";
        }
        return false;
      }
      // like get(), but without any LRU updating or TTL expiration
      peek(k2, { allowStale = this.allowStale } = {}) {
        const index = this.keyMap.get(k2);
        if (index !== void 0 && (allowStale || !this.isStale(index))) {
          const v = this.valList[index];
          return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
        }
      }
      backgroundFetch(k2, index, options, context2) {
        const v = index === void 0 ? void 0 : this.valList[index];
        if (this.isBackgroundFetch(v)) {
          return v;
        }
        const ac2 = new AC();
        if (options.signal) {
          options.signal.addEventListener(
            "abort",
            () => ac2.abort(options.signal.reason)
          );
        }
        const fetchOpts = {
          signal: ac2.signal,
          options,
          context: context2
        };
        const cb = (v2, updateCache = false) => {
          const { aborted } = ac2.signal;
          const ignoreAbort = options.ignoreFetchAbort && v2 !== void 0;
          if (options.status) {
            if (aborted && !updateCache) {
              options.status.fetchAborted = true;
              options.status.fetchError = ac2.signal.reason;
              if (ignoreAbort) options.status.fetchAbortIgnored = true;
            } else {
              options.status.fetchResolved = true;
            }
          }
          if (aborted && !ignoreAbort && !updateCache) {
            return fetchFail(ac2.signal.reason);
          }
          if (this.valList[index] === p) {
            if (v2 === void 0) {
              if (p.__staleWhileFetching) {
                this.valList[index] = p.__staleWhileFetching;
              } else {
                this.delete(k2);
              }
            } else {
              if (options.status) options.status.fetchUpdated = true;
              this.set(k2, v2, fetchOpts.options);
            }
          }
          return v2;
        };
        const eb = (er2) => {
          if (options.status) {
            options.status.fetchRejected = true;
            options.status.fetchError = er2;
          }
          return fetchFail(er2);
        };
        const fetchFail = (er2) => {
          const { aborted } = ac2.signal;
          const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
          const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
          const noDelete = allowStale || options.noDeleteOnFetchRejection;
          if (this.valList[index] === p) {
            const del = !noDelete || p.__staleWhileFetching === void 0;
            if (del) {
              this.delete(k2);
            } else if (!allowStaleAborted) {
              this.valList[index] = p.__staleWhileFetching;
            }
          }
          if (allowStale) {
            if (options.status && p.__staleWhileFetching !== void 0) {
              options.status.returnedStale = true;
            }
            return p.__staleWhileFetching;
          } else if (p.__returned === p) {
            throw er2;
          }
        };
        const pcall = (res, rej) => {
          this.fetchMethod(k2, v, fetchOpts).then((v2) => res(v2), rej);
          ac2.signal.addEventListener("abort", () => {
            if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
              res();
              if (options.allowStaleOnFetchAbort) {
                res = (v2) => cb(v2, true);
              }
            }
          });
        };
        if (options.status) options.status.fetchDispatched = true;
        const p = new Promise(pcall).then(cb, eb);
        p.__abortController = ac2;
        p.__staleWhileFetching = v;
        p.__returned = null;
        if (index === void 0) {
          this.set(k2, p, { ...fetchOpts.options, status: void 0 });
          index = this.keyMap.get(k2);
        } else {
          this.valList[index] = p;
        }
        return p;
      }
      isBackgroundFetch(p) {
        return p && typeof p === "object" && typeof p.then === "function" && Object.prototype.hasOwnProperty.call(
          p,
          "__staleWhileFetching"
        ) && Object.prototype.hasOwnProperty.call(p, "__returned") && (p.__returned === p || p.__returned === null);
      }
      // this takes the union of get() and set() opts, because it does both
      async fetch(k2, {
        // get options
        allowStale = this.allowStale,
        updateAgeOnGet = this.updateAgeOnGet,
        noDeleteOnStaleGet = this.noDeleteOnStaleGet,
        // set options
        ttl = this.ttl,
        noDisposeOnSet = this.noDisposeOnSet,
        size = 0,
        sizeCalculation = this.sizeCalculation,
        noUpdateTTL = this.noUpdateTTL,
        // fetch exclusive options
        noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
        allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
        ignoreFetchAbort = this.ignoreFetchAbort,
        allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
        fetchContext = this.fetchContext,
        forceRefresh = false,
        status,
        signal
      } = {}) {
        if (!this.fetchMethod) {
          if (status) status.fetch = "get";
          return this.get(k2, {
            allowStale,
            updateAgeOnGet,
            noDeleteOnStaleGet,
            status
          });
        }
        const options = {
          allowStale,
          updateAgeOnGet,
          noDeleteOnStaleGet,
          ttl,
          noDisposeOnSet,
          size,
          sizeCalculation,
          noUpdateTTL,
          noDeleteOnFetchRejection,
          allowStaleOnFetchRejection,
          allowStaleOnFetchAbort,
          ignoreFetchAbort,
          status,
          signal
        };
        let index = this.keyMap.get(k2);
        if (index === void 0) {
          if (status) status.fetch = "miss";
          const p = this.backgroundFetch(k2, index, options, fetchContext);
          return p.__returned = p;
        } else {
          const v = this.valList[index];
          if (this.isBackgroundFetch(v)) {
            const stale = allowStale && v.__staleWhileFetching !== void 0;
            if (status) {
              status.fetch = "inflight";
              if (stale) status.returnedStale = true;
            }
            return stale ? v.__staleWhileFetching : v.__returned = v;
          }
          const isStale = this.isStale(index);
          if (!forceRefresh && !isStale) {
            if (status) status.fetch = "hit";
            this.moveToTail(index);
            if (updateAgeOnGet) {
              this.updateItemAge(index);
            }
            this.statusTTL(status, index);
            return v;
          }
          const p = this.backgroundFetch(k2, index, options, fetchContext);
          const hasStale = p.__staleWhileFetching !== void 0;
          const staleVal = hasStale && allowStale;
          if (status) {
            status.fetch = hasStale && isStale ? "stale" : "refresh";
            if (staleVal && isStale) status.returnedStale = true;
          }
          return staleVal ? p.__staleWhileFetching : p.__returned = p;
        }
      }
      get(k2, {
        allowStale = this.allowStale,
        updateAgeOnGet = this.updateAgeOnGet,
        noDeleteOnStaleGet = this.noDeleteOnStaleGet,
        status
      } = {}) {
        const index = this.keyMap.get(k2);
        if (index !== void 0) {
          const value = this.valList[index];
          const fetching = this.isBackgroundFetch(value);
          this.statusTTL(status, index);
          if (this.isStale(index)) {
            if (status) status.get = "stale";
            if (!fetching) {
              if (!noDeleteOnStaleGet) {
                this.delete(k2);
              }
              if (status) status.returnedStale = allowStale;
              return allowStale ? value : void 0;
            } else {
              if (status) {
                status.returnedStale = allowStale && value.__staleWhileFetching !== void 0;
              }
              return allowStale ? value.__staleWhileFetching : void 0;
            }
          } else {
            if (status) status.get = "hit";
            if (fetching) {
              return value.__staleWhileFetching;
            }
            this.moveToTail(index);
            if (updateAgeOnGet) {
              this.updateItemAge(index);
            }
            return value;
          }
        } else if (status) {
          status.get = "miss";
        }
      }
      connect(p, n) {
        this.prev[n] = p;
        this.next[p] = n;
      }
      moveToTail(index) {
        if (index !== this.tail) {
          if (index === this.head) {
            this.head = this.next[index];
          } else {
            this.connect(this.prev[index], this.next[index]);
          }
          this.connect(this.tail, index);
          this.tail = index;
        }
      }
      get del() {
        deprecatedMethod("del", "delete");
        return this.delete;
      }
      delete(k2) {
        let deleted = false;
        if (this.size !== 0) {
          const index = this.keyMap.get(k2);
          if (index !== void 0) {
            deleted = true;
            if (this.size === 1) {
              this.clear();
            } else {
              this.removeItemSize(index);
              const v = this.valList[index];
              if (this.isBackgroundFetch(v)) {
                v.__abortController.abort(new Error("deleted"));
              } else {
                this.dispose(v, k2, "delete");
                if (this.disposeAfter) {
                  this.disposed.push([v, k2, "delete"]);
                }
              }
              this.keyMap.delete(k2);
              this.keyList[index] = null;
              this.valList[index] = null;
              if (index === this.tail) {
                this.tail = this.prev[index];
              } else if (index === this.head) {
                this.head = this.next[index];
              } else {
                this.next[this.prev[index]] = this.next[index];
                this.prev[this.next[index]] = this.prev[index];
              }
              this.size--;
              this.free.push(index);
            }
          }
        }
        if (this.disposed) {
          while (this.disposed.length) {
            this.disposeAfter(...this.disposed.shift());
          }
        }
        return deleted;
      }
      clear() {
        for (const index of this.rindexes({ allowStale: true })) {
          const v = this.valList[index];
          if (this.isBackgroundFetch(v)) {
            v.__abortController.abort(new Error("deleted"));
          } else {
            const k2 = this.keyList[index];
            this.dispose(v, k2, "delete");
            if (this.disposeAfter) {
              this.disposed.push([v, k2, "delete"]);
            }
          }
        }
        this.keyMap.clear();
        this.valList.fill(null);
        this.keyList.fill(null);
        if (this.ttls) {
          this.ttls.fill(0);
          this.starts.fill(0);
        }
        if (this.sizes) {
          this.sizes.fill(0);
        }
        this.head = 0;
        this.tail = 0;
        this.initialFill = 1;
        this.free.length = 0;
        this.calculatedSize = 0;
        this.size = 0;
        if (this.disposed) {
          while (this.disposed.length) {
            this.disposeAfter(...this.disposed.shift());
          }
        }
      }
      get reset() {
        deprecatedMethod("reset", "clear");
        return this.clear;
      }
      get length() {
        deprecatedProperty("length", "size");
        return this.size;
      }
      static get AbortController() {
        return AC;
      }
      static get AbortSignal() {
        return AS;
      }
    };
    lru_cache_default = LRUCache;
  }
});

// node_modules/@apollo/server/dist/esm/plugin/cacheControl/index.js
var cacheControl_exports = {};
__export(cacheControl_exports, {
  ApolloServerPluginCacheControl: () => ApolloServerPluginCacheControl
});
function ApolloServerPluginCacheControl(options = /* @__PURE__ */ Object.create(null)) {
  let typeAnnotationCache;
  let fieldAnnotationCache;
  return internalPlugin({
    __internal_plugin_id__: "CacheControl",
    __is_disabled_plugin__: false,
    async serverWillStart({ schema }) {
      typeAnnotationCache = new lru_cache_default({
        max: Object.values(schema.getTypeMap()).filter(import_graphql35.isCompositeType).length
      });
      fieldAnnotationCache = new lru_cache_default({
        max: Object.values(schema.getTypeMap()).filter(import_graphql35.isObjectType).flatMap((t) => Object.values(t.getFields())).length + Object.values(schema.getTypeMap()).filter(import_graphql35.isInterfaceType).flatMap((t) => Object.values(t.getFields())).length
      });
      return void 0;
    },
    async requestDidStart(requestContext) {
      function memoizedCacheAnnotationFromType(t) {
        const existing = typeAnnotationCache.get(t);
        if (existing) {
          return existing;
        }
        const annotation = cacheAnnotationFromType(t);
        typeAnnotationCache.set(t, annotation);
        return annotation;
      }
      function memoizedCacheAnnotationFromField(field) {
        const existing = fieldAnnotationCache.get(field);
        if (existing) {
          return existing;
        }
        const annotation = cacheAnnotationFromField(field);
        fieldAnnotationCache.set(field, annotation);
        return annotation;
      }
      const defaultMaxAge = options.defaultMaxAge ?? 0;
      const calculateHttpHeaders = options.calculateHttpHeaders ?? true;
      const { __testing__cacheHints } = options;
      return {
        async executionDidStart() {
          if (isRestricted(requestContext.overallCachePolicy)) {
            const fakeFieldPolicy = newCachePolicy();
            return {
              willResolveField({ info }) {
                info.cacheControl = {
                  setCacheHint: (dynamicHint) => {
                    fakeFieldPolicy.replace(dynamicHint);
                  },
                  cacheHint: fakeFieldPolicy,
                  cacheHintFromType: memoizedCacheAnnotationFromType
                };
              }
            };
          }
          return {
            willResolveField({ info }) {
              const fieldPolicy = newCachePolicy();
              let inheritMaxAge = false;
              const targetType = (0, import_graphql35.getNamedType)(info.returnType);
              if ((0, import_graphql35.isCompositeType)(targetType)) {
                const typeAnnotation = memoizedCacheAnnotationFromType(targetType);
                fieldPolicy.replace(typeAnnotation);
                inheritMaxAge = !!typeAnnotation.inheritMaxAge;
              }
              const fieldAnnotation = memoizedCacheAnnotationFromField(info.parentType.getFields()[info.fieldName]);
              if (fieldAnnotation.inheritMaxAge && fieldPolicy.maxAge === void 0) {
                inheritMaxAge = true;
                if (fieldAnnotation.scope) {
                  fieldPolicy.replace({ scope: fieldAnnotation.scope });
                }
              } else {
                fieldPolicy.replace(fieldAnnotation);
              }
              info.cacheControl = {
                setCacheHint: (dynamicHint) => {
                  fieldPolicy.replace(dynamicHint);
                },
                cacheHint: fieldPolicy,
                cacheHintFromType: memoizedCacheAnnotationFromType
              };
              return () => {
                if (fieldPolicy.maxAge === void 0 && ((0, import_graphql35.isCompositeType)(targetType) && !inheritMaxAge || !info.path.prev)) {
                  fieldPolicy.restrict({ maxAge: defaultMaxAge });
                }
                if (__testing__cacheHints && isRestricted(fieldPolicy)) {
                  const path2 = (0, import_graphql35.responsePathAsArray)(info.path).join(".");
                  if (__testing__cacheHints.has(path2)) {
                    throw Error("shouldn't happen: addHint should only be called once per path");
                  }
                  __testing__cacheHints.set(path2, {
                    maxAge: fieldPolicy.maxAge,
                    scope: fieldPolicy.scope
                  });
                }
                requestContext.overallCachePolicy.restrict(fieldPolicy);
              };
            }
          };
        },
        async willSendResponse(requestContext2) {
          if (!calculateHttpHeaders) {
            return;
          }
          const { response, overallCachePolicy } = requestContext2;
          const existingCacheControlHeader = parseExistingCacheControlHeader(response.http.headers.get("cache-control"));
          if (existingCacheControlHeader.kind === "unparsable") {
            return;
          }
          const cachePolicy = newCachePolicy();
          cachePolicy.replace(overallCachePolicy);
          if (existingCacheControlHeader.kind === "parsable-and-cacheable") {
            cachePolicy.restrict(existingCacheControlHeader.hint);
          }
          const policyIfCacheable = cachePolicy.policyIfCacheable();
          if (policyIfCacheable && existingCacheControlHeader.kind !== "uncacheable" && response.body.kind === "single" && !response.body.singleResult.errors) {
            response.http.headers.set("cache-control", `max-age=${policyIfCacheable.maxAge}, ${policyIfCacheable.scope.toLowerCase()}`);
          } else if (calculateHttpHeaders !== "if-cacheable") {
            response.http.headers.set("cache-control", CACHE_CONTROL_HEADER_UNCACHEABLE);
          }
        }
      };
    }
  });
}
function parseExistingCacheControlHeader(header) {
  if (!header) {
    return { kind: "no-header" };
  }
  if (header === CACHE_CONTROL_HEADER_UNCACHEABLE) {
    return { kind: "uncacheable" };
  }
  const match = CACHE_CONTROL_HEADER_CACHEABLE_REGEXP.exec(header);
  if (!match) {
    return { kind: "unparsable" };
  }
  return {
    kind: "parsable-and-cacheable",
    hint: {
      maxAge: +match[1],
      scope: match[2] === "public" ? "PUBLIC" : "PRIVATE"
    }
  };
}
function cacheAnnotationFromDirectives(directives) {
  if (!directives)
    return void 0;
  const cacheControlDirective = directives.find((directive) => directive.name.value === "cacheControl");
  if (!cacheControlDirective)
    return void 0;
  if (!cacheControlDirective.arguments)
    return void 0;
  const maxAgeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === "maxAge");
  const scopeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === "scope");
  const inheritMaxAgeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === "inheritMaxAge");
  const scopeString = scopeArgument?.value?.kind === "EnumValue" ? scopeArgument.value.value : void 0;
  const scope = scopeString === "PUBLIC" || scopeString === "PRIVATE" ? scopeString : void 0;
  if (inheritMaxAgeArgument?.value?.kind === "BooleanValue" && inheritMaxAgeArgument.value.value) {
    return { inheritMaxAge: true, scope };
  }
  return {
    maxAge: maxAgeArgument?.value?.kind === "IntValue" ? parseInt(maxAgeArgument.value.value) : void 0,
    scope
  };
}
function cacheAnnotationFromType(t) {
  if (t.astNode) {
    const hint = cacheAnnotationFromDirectives(t.astNode.directives);
    if (hint) {
      return hint;
    }
  }
  if (t.extensionASTNodes) {
    for (const node of t.extensionASTNodes) {
      const hint = cacheAnnotationFromDirectives(node.directives);
      if (hint) {
        return hint;
      }
    }
  }
  return {};
}
function cacheAnnotationFromField(field) {
  if (field.astNode) {
    const hint = cacheAnnotationFromDirectives(field.astNode.directives);
    if (hint) {
      return hint;
    }
  }
  return {};
}
function isRestricted(hint) {
  return hint.maxAge !== void 0 || hint.scope !== void 0;
}
var import_graphql35, CACHE_CONTROL_HEADER_CACHEABLE_REGEXP, CACHE_CONTROL_HEADER_UNCACHEABLE;
var init_cacheControl = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/cacheControl/index.js"() {
    import_graphql35 = __toESM(require_graphql2(), 1);
    init_cachePolicy();
    init_internalPlugin();
    init_lru_cache();
    CACHE_CONTROL_HEADER_CACHEABLE_REGEXP = /^max-age=(\d+), (public|private)$/;
    CACHE_CONTROL_HEADER_UNCACHEABLE = "no-store";
  }
});

// node_modules/@protobufjs/aspromise/index.js
var require_aspromise = __commonJS({
  "node_modules/@protobufjs/aspromise/index.js"(exports2, module2) {
    "use strict";
    module2.exports = asPromise;
    function asPromise(fn2, ctx) {
      var params = new Array(arguments.length - 1), offset = 0, index = 2, pending = true;
      while (index < arguments.length)
        params[offset++] = arguments[index++];
      return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err) {
          if (pending) {
            pending = false;
            if (err)
              reject(err);
            else {
              var params2 = new Array(arguments.length - 1), offset2 = 0;
              while (offset2 < params2.length)
                params2[offset2++] = arguments[offset2];
              resolve.apply(null, params2);
            }
          }
        };
        try {
          fn2.apply(ctx || null, params);
        } catch (err) {
          if (pending) {
            pending = false;
            reject(err);
          }
        }
      });
    }
  }
});

// node_modules/@protobufjs/base64/index.js
var require_base64 = __commonJS({
  "node_modules/@protobufjs/base64/index.js"(exports2) {
    "use strict";
    var base64 = exports2;
    base64.length = function length(string) {
      var p = string.length;
      if (!p)
        return 0;
      var n = 0;
      while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
      return Math.ceil(string.length * 3) / 4 - n;
    };
    var b64 = new Array(64);
    var s64 = new Array(123);
    for (i = 0; i < 64; )
      s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
    var i;
    base64.encode = function encode(buffer, start, end) {
      var parts = null, chunk = [];
      var i2 = 0, j2 = 0, t;
      while (start < end) {
        var b2 = buffer[start++];
        switch (j2) {
          case 0:
            chunk[i2++] = b64[b2 >> 2];
            t = (b2 & 3) << 4;
            j2 = 1;
            break;
          case 1:
            chunk[i2++] = b64[t | b2 >> 4];
            t = (b2 & 15) << 2;
            j2 = 2;
            break;
          case 2:
            chunk[i2++] = b64[t | b2 >> 6];
            chunk[i2++] = b64[b2 & 63];
            j2 = 0;
            break;
        }
        if (i2 > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i2 = 0;
        }
      }
      if (j2) {
        chunk[i2++] = b64[t];
        chunk[i2++] = 61;
        if (j2 === 1)
          chunk[i2++] = 61;
      }
      if (parts) {
        if (i2)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i2)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i2));
    };
    var invalidEncoding = "invalid encoding";
    base64.decode = function decode(string, buffer, offset) {
      var start = offset;
      var j2 = 0, t;
      for (var i2 = 0; i2 < string.length; ) {
        var c = string.charCodeAt(i2++);
        if (c === 61 && j2 > 1)
          break;
        if ((c = s64[c]) === void 0)
          throw Error(invalidEncoding);
        switch (j2) {
          case 0:
            t = c;
            j2 = 1;
            break;
          case 1:
            buffer[offset++] = t << 2 | (c & 48) >> 4;
            t = c;
            j2 = 2;
            break;
          case 2:
            buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
            t = c;
            j2 = 3;
            break;
          case 3:
            buffer[offset++] = (t & 3) << 6 | c;
            j2 = 0;
            break;
        }
      }
      if (j2 === 1)
        throw Error(invalidEncoding);
      return offset - start;
    };
    base64.test = function test(string) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
    };
  }
});

// node_modules/@protobufjs/eventemitter/index.js
var require_eventemitter = __commonJS({
  "node_modules/@protobufjs/eventemitter/index.js"(exports2, module2) {
    "use strict";
    module2.exports = EventEmitter;
    function EventEmitter() {
      this._listeners = {};
    }
    EventEmitter.prototype.on = function on2(evt, fn2, ctx) {
      (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn: fn2,
        ctx: ctx || this
      });
      return this;
    };
    EventEmitter.prototype.off = function off(evt, fn2) {
      if (evt === void 0)
        this._listeners = {};
      else {
        if (fn2 === void 0)
          this._listeners[evt] = [];
        else {
          var listeners = this._listeners[evt];
          for (var i = 0; i < listeners.length; )
            if (listeners[i].fn === fn2)
              listeners.splice(i, 1);
            else
              ++i;
        }
      }
      return this;
    };
    EventEmitter.prototype.emit = function emit(evt) {
      var listeners = this._listeners[evt];
      if (listeners) {
        var args = [], i = 1;
        for (; i < arguments.length; )
          args.push(arguments[i++]);
        for (i = 0; i < listeners.length; )
          listeners[i].fn.apply(listeners[i++].ctx, args);
      }
      return this;
    };
  }
});

// node_modules/@protobufjs/float/index.js
var require_float = __commonJS({
  "node_modules/@protobufjs/float/index.js"(exports2, module2) {
    "use strict";
    module2.exports = factory(factory);
    function factory(exports3) {
      if (typeof Float32Array !== "undefined") (function() {
        var f32 = new Float32Array([-0]), f8b = new Uint8Array(f32.buffer), le2 = f8b[3] === 128;
        function writeFloat_f32_cpy(val, buf, pos) {
          f32[0] = val;
          buf[pos] = f8b[0];
          buf[pos + 1] = f8b[1];
          buf[pos + 2] = f8b[2];
          buf[pos + 3] = f8b[3];
        }
        function writeFloat_f32_rev(val, buf, pos) {
          f32[0] = val;
          buf[pos] = f8b[3];
          buf[pos + 1] = f8b[2];
          buf[pos + 2] = f8b[1];
          buf[pos + 3] = f8b[0];
        }
        exports3.writeFloatLE = le2 ? writeFloat_f32_cpy : writeFloat_f32_rev;
        exports3.writeFloatBE = le2 ? writeFloat_f32_rev : writeFloat_f32_cpy;
        function readFloat_f32_cpy(buf, pos) {
          f8b[0] = buf[pos];
          f8b[1] = buf[pos + 1];
          f8b[2] = buf[pos + 2];
          f8b[3] = buf[pos + 3];
          return f32[0];
        }
        function readFloat_f32_rev(buf, pos) {
          f8b[3] = buf[pos];
          f8b[2] = buf[pos + 1];
          f8b[1] = buf[pos + 2];
          f8b[0] = buf[pos + 3];
          return f32[0];
        }
        exports3.readFloatLE = le2 ? readFloat_f32_cpy : readFloat_f32_rev;
        exports3.readFloatBE = le2 ? readFloat_f32_rev : readFloat_f32_cpy;
      })();
      else (function() {
        function writeFloat_ieee754(writeUint, val, buf, pos) {
          var sign = val < 0 ? 1 : 0;
          if (sign)
            val = -val;
          if (val === 0)
            writeUint(1 / val > 0 ? (
              /* positive */
              0
            ) : (
              /* negative 0 */
              2147483648
            ), buf, pos);
          else if (isNaN(val))
            writeUint(2143289344, buf, pos);
          else if (val > 34028234663852886e22)
            writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
          else if (val < 11754943508222875e-54)
            writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos);
          else {
            var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
            writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
          }
        }
        exports3.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports3.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
        function readFloat_ieee754(readUint, buf, pos) {
          var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
          return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }
        exports3.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports3.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
      })();
      if (typeof Float64Array !== "undefined") (function() {
        var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le2 = f8b[7] === 128;
        function writeDouble_f64_cpy(val, buf, pos) {
          f64[0] = val;
          buf[pos] = f8b[0];
          buf[pos + 1] = f8b[1];
          buf[pos + 2] = f8b[2];
          buf[pos + 3] = f8b[3];
          buf[pos + 4] = f8b[4];
          buf[pos + 5] = f8b[5];
          buf[pos + 6] = f8b[6];
          buf[pos + 7] = f8b[7];
        }
        function writeDouble_f64_rev(val, buf, pos) {
          f64[0] = val;
          buf[pos] = f8b[7];
          buf[pos + 1] = f8b[6];
          buf[pos + 2] = f8b[5];
          buf[pos + 3] = f8b[4];
          buf[pos + 4] = f8b[3];
          buf[pos + 5] = f8b[2];
          buf[pos + 6] = f8b[1];
          buf[pos + 7] = f8b[0];
        }
        exports3.writeDoubleLE = le2 ? writeDouble_f64_cpy : writeDouble_f64_rev;
        exports3.writeDoubleBE = le2 ? writeDouble_f64_rev : writeDouble_f64_cpy;
        function readDouble_f64_cpy(buf, pos) {
          f8b[0] = buf[pos];
          f8b[1] = buf[pos + 1];
          f8b[2] = buf[pos + 2];
          f8b[3] = buf[pos + 3];
          f8b[4] = buf[pos + 4];
          f8b[5] = buf[pos + 5];
          f8b[6] = buf[pos + 6];
          f8b[7] = buf[pos + 7];
          return f64[0];
        }
        function readDouble_f64_rev(buf, pos) {
          f8b[7] = buf[pos];
          f8b[6] = buf[pos + 1];
          f8b[5] = buf[pos + 2];
          f8b[4] = buf[pos + 3];
          f8b[3] = buf[pos + 4];
          f8b[2] = buf[pos + 5];
          f8b[1] = buf[pos + 6];
          f8b[0] = buf[pos + 7];
          return f64[0];
        }
        exports3.readDoubleLE = le2 ? readDouble_f64_cpy : readDouble_f64_rev;
        exports3.readDoubleBE = le2 ? readDouble_f64_rev : readDouble_f64_cpy;
      })();
      else (function() {
        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
          var sign = val < 0 ? 1 : 0;
          if (sign)
            val = -val;
          if (val === 0) {
            writeUint(0, buf, pos + off0);
            writeUint(1 / val > 0 ? (
              /* positive */
              0
            ) : (
              /* negative 0 */
              2147483648
            ), buf, pos + off1);
          } else if (isNaN(val)) {
            writeUint(0, buf, pos + off0);
            writeUint(2146959360, buf, pos + off1);
          } else if (val > 17976931348623157e292) {
            writeUint(0, buf, pos + off0);
            writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
          } else {
            var mantissa;
            if (val < 22250738585072014e-324) {
              mantissa = val / 5e-324;
              writeUint(mantissa >>> 0, buf, pos + off0);
              writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
            } else {
              var exponent = Math.floor(Math.log(val) / Math.LN2);
              if (exponent === 1024)
                exponent = 1023;
              mantissa = val * Math.pow(2, -exponent);
              writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
              writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
            }
          }
        }
        exports3.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports3.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
          var lo2 = readUint(buf, pos + off0), hi2 = readUint(buf, pos + off1);
          var sign = (hi2 >> 31) * 2 + 1, exponent = hi2 >>> 20 & 2047, mantissa = 4294967296 * (hi2 & 1048575) + lo2;
          return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }
        exports3.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports3.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
      })();
      return exports3;
    }
    function writeUintLE(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    function writeUintBE(val, buf, pos) {
      buf[pos] = val >>> 24;
      buf[pos + 1] = val >>> 16 & 255;
      buf[pos + 2] = val >>> 8 & 255;
      buf[pos + 3] = val & 255;
    }
    function readUintLE(buf, pos) {
      return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
    }
    function readUintBE(buf, pos) {
      return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
    }
  }
});

// node_modules/@protobufjs/inquire/index.js
var require_inquire = __commonJS({
  "node_modules/@protobufjs/inquire/index.js"(exports, module) {
    "use strict";
    module.exports = inquire;
    function inquire(moduleName) {
      try {
        var mod = eval("quire".replace(/^/, "re"))(moduleName);
        if (mod && (mod.length || Object.keys(mod).length))
          return mod;
      } catch (e) {
      }
      return null;
    }
  }
});

// node_modules/@protobufjs/utf8/index.js
var require_utf8 = __commonJS({
  "node_modules/@protobufjs/utf8/index.js"(exports2) {
    "use strict";
    var utf8 = exports2;
    utf8.length = function utf8_length(string) {
      var len = 0, c = 0;
      for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
          len += 1;
        else if (c < 2048)
          len += 2;
        else if ((c & 64512) === 55296 && (string.charCodeAt(i + 1) & 64512) === 56320) {
          ++i;
          len += 4;
        } else
          len += 3;
      }
      return len;
    };
    utf8.read = function utf8_read(buffer, start, end) {
      var len = end - start;
      if (len < 1)
        return "";
      var parts = null, chunk = [], i = 0, t;
      while (start < end) {
        t = buffer[start++];
        if (t < 128)
          chunk[i++] = t;
        else if (t > 191 && t < 224)
          chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
          t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 65536;
          chunk[i++] = 55296 + (t >> 10);
          chunk[i++] = 56320 + (t & 1023);
        } else
          chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i = 0;
        }
      }
      if (parts) {
        if (i)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i));
    };
    utf8.write = function utf8_write(string, buffer, offset) {
      var start = offset, c1, c2;
      for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
          buffer[offset++] = c1;
        } else if (c1 < 2048) {
          buffer[offset++] = c1 >> 6 | 192;
          buffer[offset++] = c1 & 63 | 128;
        } else if ((c1 & 64512) === 55296 && ((c2 = string.charCodeAt(i + 1)) & 64512) === 56320) {
          c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
          ++i;
          buffer[offset++] = c1 >> 18 | 240;
          buffer[offset++] = c1 >> 12 & 63 | 128;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        } else {
          buffer[offset++] = c1 >> 12 | 224;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        }
      }
      return offset - start;
    };
  }
});

// node_modules/@protobufjs/pool/index.js
var require_pool = __commonJS({
  "node_modules/@protobufjs/pool/index.js"(exports2, module2) {
    "use strict";
    module2.exports = pool;
    function pool(alloc, slice, size) {
      var SIZE = size || 8192;
      var MAX = SIZE >>> 1;
      var slab = null;
      var offset = SIZE;
      return function pool_alloc(size2) {
        if (size2 < 1 || size2 > MAX)
          return alloc(size2);
        if (offset + size2 > SIZE) {
          slab = alloc(SIZE);
          offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size2);
        if (offset & 7)
          offset = (offset | 7) + 1;
        return buf;
      };
    }
  }
});

// node_modules/@apollo/protobufjs/src/util/longbits.js
var require_longbits = __commonJS({
  "node_modules/@apollo/protobufjs/src/util/longbits.js"(exports2, module2) {
    "use strict";
    module2.exports = LongBits;
    var util = require_minimal();
    function LongBits(lo2, hi2) {
      this.lo = lo2 >>> 0;
      this.hi = hi2 >>> 0;
    }
    var zero = LongBits.zero = new LongBits(0, 0);
    zero.toNumber = function() {
      return 0;
    };
    zero.zzEncode = zero.zzDecode = function() {
      return this;
    };
    zero.length = function() {
      return 1;
    };
    var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
    LongBits.fromNumber = function fromNumber(value) {
      if (value === 0)
        return zero;
      var sign = value < 0;
      if (sign)
        value = -value;
      var lo2 = value >>> 0, hi2 = (value - lo2) / 4294967296 >>> 0;
      if (sign) {
        hi2 = ~hi2 >>> 0;
        lo2 = ~lo2 >>> 0;
        if (++lo2 > 4294967295) {
          lo2 = 0;
          if (++hi2 > 4294967295)
            hi2 = 0;
        }
      }
      return new LongBits(lo2, hi2);
    };
    LongBits.from = function from(value) {
      if (typeof value === "number")
        return LongBits.fromNumber(value);
      if (util.isString(value)) {
        if (util.Long)
          value = util.Long.fromString(value);
        else
          return LongBits.fromNumber(parseInt(value, 10));
      }
      return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
    };
    LongBits.prototype.toNumber = function toNumber(unsigned) {
      if (!unsigned && this.hi >>> 31) {
        var lo2 = ~this.lo + 1 >>> 0, hi2 = ~this.hi >>> 0;
        if (!lo2)
          hi2 = hi2 + 1 >>> 0;
        return -(lo2 + hi2 * 4294967296);
      }
      return this.lo + this.hi * 4294967296;
    };
    LongBits.prototype.toLong = function toLong(unsigned) {
      return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
    };
    var charCodeAt = String.prototype.charCodeAt;
    LongBits.fromHash = function fromHash(hash) {
      if (hash === zeroHash)
        return zero;
      return new LongBits(
        (charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0,
        (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0
      );
    };
    LongBits.prototype.toHash = function toHash() {
      return String.fromCharCode(
        this.lo & 255,
        this.lo >>> 8 & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24,
        this.hi & 255,
        this.hi >>> 8 & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
      );
    };
    LongBits.prototype.zzEncode = function zzEncode() {
      var mask = this.hi >> 31;
      this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
      this.lo = (this.lo << 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.zzDecode = function zzDecode() {
      var mask = -(this.lo & 1);
      this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
      this.hi = (this.hi >>> 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.length = function length() {
      var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
      return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
    };
  }
});

// node_modules/@apollo/protobufjs/src/util/minimal.js
var require_minimal = __commonJS({
  "node_modules/@apollo/protobufjs/src/util/minimal.js"(exports2) {
    "use strict";
    var util = exports2;
    util.asPromise = require_aspromise();
    util.base64 = require_base64();
    util.EventEmitter = require_eventemitter();
    util.float = require_float();
    util.inquire = require_inquire();
    util.utf8 = require_utf8();
    util.pool = require_pool();
    util.LongBits = require_longbits();
    util.global = typeof window !== "undefined" && window || typeof global !== "undefined" && global || typeof self !== "undefined" && self || exports2;
    util.emptyArray = Object.freeze ? Object.freeze([]) : (
      /* istanbul ignore next */
      []
    );
    util.emptyObject = Object.freeze ? Object.freeze({}) : (
      /* istanbul ignore next */
      {}
    );
    util.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);
    util.isInteger = Number.isInteger || /* istanbul ignore next */
    function isInteger(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    util.isString = function isString2(value) {
      return typeof value === "string" || value instanceof String;
    };
    util.isObject = function isObject2(value) {
      return value && typeof value === "object";
    };
    util.isset = /**
     * Checks if a property on a message is considered to be present.
     * @param {Object} obj Plain object or message instance
     * @param {string} prop Property name
     * @returns {boolean} `true` if considered to be present, otherwise `false`
     */
    util.isSet = function isSet(obj, prop) {
      var value = obj[prop];
      if (value != null && obj.hasOwnProperty(prop))
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
      return false;
    };
    util.Buffer = function() {
      try {
        var Buffer2 = util.inquire("buffer").Buffer;
        return Buffer2.prototype.utf8Write ? Buffer2 : (
          /* istanbul ignore next */
          null
        );
      } catch (e) {
        return null;
      }
    }();
    util._Buffer_from = null;
    util._Buffer_allocUnsafe = null;
    util.newBuffer = function newBuffer(sizeOrArray) {
      return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
    };
    util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    util.Long = typeof process === "undefined" || process.env.ENABLE_LONG ? (
      /* istanbul ignore next */
      util.global.dcodeIO && /* istanbul ignore next */
      util.global.dcodeIO.Long || /* istanbul ignore next */
      util.global.Long || util.inquire("long")
    ) : void 0;
    util.key2Re = /^true|false|0|1$/;
    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
    util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
    util.longToHash = function longToHash(value) {
      return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
    };
    util.longFromHash = function longFromHash(hash, unsigned) {
      var bits = util.LongBits.fromHash(hash);
      if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
      return bits.toNumber(Boolean(unsigned));
    };
    function merge(dst, src, ifNotSet) {
      for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === void 0 || !ifNotSet)
          dst[keys[i]] = src[keys[i]];
      return dst;
    }
    util.merge = merge;
    util.lcFirst = function lcFirst(str) {
      return str.charAt(0).toLowerCase() + str.substring(1);
    };
    function newError(name) {
      function CustomError(message, properties) {
        if (!(this instanceof CustomError))
          return new CustomError(message, properties);
        Object.defineProperty(this, "message", { get: function() {
          return message;
        } });
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, CustomError);
        else
          Object.defineProperty(this, "stack", { value: new Error().stack || "" });
        if (properties)
          merge(this, properties);
      }
      (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
      Object.defineProperty(CustomError.prototype, "name", { get: function() {
        return name;
      } });
      CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
      };
      return CustomError;
    }
    util.newError = newError;
    util.ProtocolError = newError("ProtocolError");
    util.oneOfGetter = function getOneOf(fieldNames) {
      var fieldMap = {};
      for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;
      return function() {
        for (var keys = Object.keys(this), i2 = keys.length - 1; i2 > -1; --i2)
          if (fieldMap[keys[i2]] === 1 && this[keys[i2]] !== void 0 && this[keys[i2]] !== null)
            return keys[i2];
      };
    };
    util.oneOfSetter = function setOneOf(fieldNames) {
      return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
          if (fieldNames[i] !== name)
            delete this[fieldNames[i]];
      };
    };
    util.toJSONOptions = {
      longs: String,
      enums: String,
      bytes: String,
      json: true
    };
    util._configure = function() {
      var Buffer2 = util.Buffer;
      if (!Buffer2) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
      }
      util._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || /* istanbul ignore next */
      function Buffer_from(value, encoding) {
        return new Buffer2(value, encoding);
      };
      util._Buffer_allocUnsafe = Buffer2.allocUnsafe || /* istanbul ignore next */
      function Buffer_allocUnsafe(size) {
        return new Buffer2(size);
      };
    };
  }
});

// node_modules/@apollo/protobufjs/src/writer.js
var require_writer = __commonJS({
  "node_modules/@apollo/protobufjs/src/writer.js"(exports2, module2) {
    "use strict";
    module2.exports = Writer;
    var util = require_minimal();
    var BufferWriter;
    var LongBits = util.LongBits;
    var base64 = util.base64;
    var utf8 = util.utf8;
    function Op2(fn2, len, val) {
      this.fn = fn2;
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    function noop() {
    }
    function State(writer) {
      this.head = writer.head;
      this.tail = writer.tail;
      this.len = writer.len;
      this.next = writer.states;
    }
    function Writer() {
      this.len = 0;
      this.head = new Op2(noop, 0, 0);
      this.tail = this.head;
      this.states = null;
    }
    Writer.create = util.Buffer ? function create_buffer_setup() {
      return (Writer.create = function create_buffer() {
        return new BufferWriter();
      })();
    } : function create_array() {
      return new Writer();
    };
    Writer.alloc = function alloc(size) {
      return new util.Array(size);
    };
    if (util.Array !== Array)
      Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
    Writer.prototype._push = function push(fn2, len, val) {
      this.tail = this.tail.next = new Op2(fn2, len, val);
      this.len += len;
      return this;
    };
    function writeByte(val, buf, pos) {
      buf[pos] = val & 255;
    }
    function writeVarint32(val, buf, pos) {
      while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
      }
      buf[pos] = val;
    }
    function VarintOp(len, val) {
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    VarintOp.prototype = Object.create(Op2.prototype);
    VarintOp.prototype.fn = writeVarint32;
    Writer.prototype.uint32 = function write_uint32(value) {
      this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5,
        value
      )).len;
      return this;
    };
    Writer.prototype.int32 = function write_int32(value) {
      return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
    };
    Writer.prototype.sint32 = function write_sint32(value) {
      return this.uint32((value << 1 ^ value >> 31) >>> 0);
    };
    function writeVarint64(val, buf, pos) {
      while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
      }
      while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
      }
      buf[pos++] = val.lo;
    }
    Writer.prototype.uint64 = function write_uint64(value) {
      var bits = LongBits.from(value);
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.int64 = Writer.prototype.uint64;
    Writer.prototype.sint64 = function write_sint64(value) {
      var bits = LongBits.from(value).zzEncode();
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.bool = function write_bool(value) {
      return this._push(writeByte, 1, value ? 1 : 0);
    };
    function writeFixed32(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    Writer.prototype.fixed32 = function write_fixed32(value) {
      return this._push(writeFixed32, 4, value >>> 0);
    };
    Writer.prototype.sfixed32 = Writer.prototype.fixed32;
    Writer.prototype.fixed64 = function write_fixed64(value) {
      var bits = LongBits.from(value);
      return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
    };
    Writer.prototype.sfixed64 = Writer.prototype.fixed64;
    Writer.prototype.float = function write_float(value) {
      return this._push(util.float.writeFloatLE, 4, value);
    };
    Writer.prototype.double = function write_double(value) {
      return this._push(util.float.writeDoubleLE, 8, value);
    };
    var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
      buf.set(val, pos);
    } : function writeBytes_for(val, buf, pos) {
      for (var i = 0; i < val.length; ++i)
        buf[pos + i] = val[i];
    };
    Writer.prototype.bytes = function write_bytes(value) {
      var len = value.length >>> 0;
      if (!len)
        return this._push(writeByte, 1, 0);
      if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
      }
      return this.uint32(len)._push(writeBytes, len, value);
    };
    Writer.prototype.string = function write_string(value) {
      var len = utf8.length(value);
      return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
    };
    Writer.prototype.fork = function fork() {
      this.states = new State(this);
      this.head = this.tail = new Op2(noop, 0, 0);
      this.len = 0;
      return this;
    };
    Writer.prototype.reset = function reset() {
      if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
      } else {
        this.head = this.tail = new Op2(noop, 0, 0);
        this.len = 0;
      }
      return this;
    };
    Writer.prototype.ldelim = function ldelim() {
      var head = this.head, tail = this.tail, len = this.len;
      this.reset().uint32(len);
      if (len) {
        this.tail.next = head.next;
        this.tail = tail;
        this.len += len;
      }
      return this;
    };
    Writer.prototype.finish = function finish() {
      var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
      while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
      }
      return buf;
    };
    Writer._configure = function(BufferWriter_) {
      BufferWriter = BufferWriter_;
    };
  }
});

// node_modules/@apollo/protobufjs/src/writer_buffer.js
var require_writer_buffer = __commonJS({
  "node_modules/@apollo/protobufjs/src/writer_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferWriter;
    var Writer = require_writer();
    (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
    var util = require_minimal();
    var Buffer2 = util.Buffer;
    function BufferWriter() {
      Writer.call(this);
    }
    BufferWriter.alloc = function alloc_buffer(size) {
      return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);
    };
    var writeBytesBuffer = Buffer2 && Buffer2.prototype instanceof Uint8Array && Buffer2.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
      buf.set(val, pos);
    } : function writeBytesBuffer_copy(val, buf, pos) {
      if (val.copy)
        val.copy(buf, pos, 0, val.length);
      else for (var i = 0; i < val.length; )
        buf[pos++] = val[i++];
    };
    BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
      if (util.isString(value))
        value = util._Buffer_from(value, "base64");
      var len = value.length >>> 0;
      this.uint32(len);
      if (len)
        this._push(writeBytesBuffer, len, value);
      return this;
    };
    function writeStringBuffer(val, buf, pos) {
      if (val.length < 40)
        util.utf8.write(val, buf, pos);
      else
        buf.utf8Write(val, pos);
    }
    BufferWriter.prototype.string = function write_string_buffer(value) {
      var len = Buffer2.byteLength(value);
      this.uint32(len);
      if (len)
        this._push(writeStringBuffer, len, value);
      return this;
    };
  }
});

// node_modules/@apollo/protobufjs/src/reader.js
var require_reader = __commonJS({
  "node_modules/@apollo/protobufjs/src/reader.js"(exports2, module2) {
    "use strict";
    module2.exports = Reader;
    var util = require_minimal();
    var BufferReader;
    var LongBits = util.LongBits;
    var utf8 = util.utf8;
    function indexOutOfRange(reader, writeLength) {
      return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
    }
    function Reader(buffer) {
      this.buf = buffer;
      this.pos = 0;
      this.len = buffer.length;
    }
    var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
      if (buffer instanceof Uint8Array || Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    } : function create_array2(buffer) {
      if (Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    };
    Reader.create = util.Buffer ? function create_buffer_setup(buffer) {
      return (Reader.create = function create_buffer(buffer2) {
        return util.Buffer.isBuffer(buffer2) ? new BufferReader(buffer2) : create_array(buffer2);
      })(buffer);
    } : create_array;
    Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */
    util.Array.prototype.slice;
    Reader.prototype.uint32 = /* @__PURE__ */ function read_uint32_setup() {
      var value = 4294967295;
      return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        if ((this.pos += 5) > this.len) {
          this.pos = this.len;
          throw indexOutOfRange(this, 10);
        }
        return value;
      };
    }();
    Reader.prototype.int32 = function read_int32() {
      return this.uint32() | 0;
    };
    Reader.prototype.sint32 = function read_sint32() {
      var value = this.uint32();
      return value >>> 1 ^ -(value & 1) | 0;
    };
    function readLongVarint() {
      var bits = new LongBits(0, 0);
      var i = 0;
      if (this.len - this.pos > 4) {
        for (; i < 4; ++i) {
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128)
          return bits;
        i = 0;
      } else {
        for (; i < 3; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
      }
      if (this.len - this.pos > 4) {
        for (; i < 5; ++i) {
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      } else {
        for (; i < 5; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      }
      throw Error("invalid varint encoding");
    }
    Reader.prototype.bool = function read_bool() {
      return this.uint32() !== 0;
    };
    function readFixed32_end(buf, end) {
      return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
    }
    Reader.prototype.fixed32 = function read_fixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4);
    };
    Reader.prototype.sfixed32 = function read_sfixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4) | 0;
    };
    function readFixed64() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);
      return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
    }
    Reader.prototype.float = function read_float() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readFloatLE(this.buf, this.pos);
      this.pos += 4;
      return value;
    };
    Reader.prototype.double = function read_double() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readDoubleLE(this.buf, this.pos);
      this.pos += 8;
      return value;
    };
    Reader.prototype.bytes = function read_bytes() {
      var length = this.uint32(), start = this.pos, end = this.pos + length;
      if (end > this.len)
        throw indexOutOfRange(this, length);
      this.pos += length;
      if (Array.isArray(this.buf))
        return this.buf.slice(start, end);
      return start === end ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
    };
    Reader.prototype.string = function read_string() {
      var bytes = this.bytes();
      return utf8.read(bytes, 0, bytes.length);
    };
    Reader.prototype.skip = function skip2(length) {
      if (typeof length === "number") {
        if (this.pos + length > this.len)
          throw indexOutOfRange(this, length);
        this.pos += length;
      } else {
        do {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
      }
      return this;
    };
    Reader.prototype.skipType = function(wireType) {
      switch (wireType) {
        case 0:
          this.skip();
          break;
        case 1:
          this.skip(8);
          break;
        case 2:
          this.skip(this.uint32());
          break;
        case 3:
          while ((wireType = this.uint32() & 7) !== 4) {
            this.skipType(wireType);
          }
          break;
        case 5:
          this.skip(4);
          break;
        /* istanbul ignore next */
        default:
          throw Error("invalid wire type " + wireType + " at offset " + this.pos);
      }
      return this;
    };
    Reader._configure = function(BufferReader_) {
      BufferReader = BufferReader_;
      var fn2 = util.Long ? "toLong" : (
        /* istanbul ignore next */
        "toNumber"
      );
      util.merge(Reader.prototype, {
        int64: function read_int64() {
          return readLongVarint.call(this)[fn2](false);
        },
        uint64: function read_uint64() {
          return readLongVarint.call(this)[fn2](true);
        },
        sint64: function read_sint64() {
          return readLongVarint.call(this).zzDecode()[fn2](false);
        },
        fixed64: function read_fixed64() {
          return readFixed64.call(this)[fn2](true);
        },
        sfixed64: function read_sfixed64() {
          return readFixed64.call(this)[fn2](false);
        }
      });
    };
  }
});

// node_modules/@apollo/protobufjs/src/reader_buffer.js
var require_reader_buffer = __commonJS({
  "node_modules/@apollo/protobufjs/src/reader_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferReader;
    var Reader = require_reader();
    (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
    var util = require_minimal();
    function BufferReader(buffer) {
      Reader.call(this, buffer);
    }
    if (util.Buffer)
      BufferReader.prototype._slice = util.Buffer.prototype.slice;
    BufferReader.prototype.string = function read_string_buffer() {
      var len = this.uint32();
      return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));
    };
  }
});

// node_modules/@apollo/protobufjs/src/rpc/service.js
var require_service = __commonJS({
  "node_modules/@apollo/protobufjs/src/rpc/service.js"(exports2, module2) {
    "use strict";
    module2.exports = Service;
    var util = require_minimal();
    (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
    function Service(rpcImpl, requestDelimited, responseDelimited) {
      if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");
      util.EventEmitter.call(this);
      this.rpcImpl = rpcImpl;
      this.requestDelimited = Boolean(requestDelimited);
      this.responseDelimited = Boolean(responseDelimited);
    }
    Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
      if (!request)
        throw TypeError("request must be specified");
      var self2 = this;
      if (!callback)
        return util.asPromise(rpcCall, self2, method, requestCtor, responseCtor, request);
      if (!self2.rpcImpl) {
        setTimeout(function() {
          callback(Error("already ended"));
        }, 0);
        return void 0;
      }
      try {
        return self2.rpcImpl(
          method,
          requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
          function rpcCallback(err, response) {
            if (err) {
              self2.emit("error", err, method);
              return callback(err);
            }
            if (response === null) {
              self2.end(
                /* endedByRPC */
                true
              );
              return void 0;
            }
            if (!(response instanceof responseCtor)) {
              try {
                response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
              } catch (err2) {
                self2.emit("error", err2, method);
                return callback(err2);
              }
            }
            self2.emit("data", response, method);
            return callback(null, response);
          }
        );
      } catch (err) {
        self2.emit("error", err, method);
        setTimeout(function() {
          callback(err);
        }, 0);
        return void 0;
      }
    };
    Service.prototype.end = function end(endedByRPC) {
      if (this.rpcImpl) {
        if (!endedByRPC)
          this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
      }
      return this;
    };
  }
});

// node_modules/@apollo/protobufjs/src/rpc.js
var require_rpc = __commonJS({
  "node_modules/@apollo/protobufjs/src/rpc.js"(exports2) {
    "use strict";
    var rpc = exports2;
    rpc.Service = require_service();
  }
});

// node_modules/@apollo/protobufjs/src/roots.js
var require_roots = __commonJS({
  "node_modules/@apollo/protobufjs/src/roots.js"(exports2, module2) {
    "use strict";
    module2.exports = {};
  }
});

// node_modules/@apollo/protobufjs/src/index-minimal.js
var require_index_minimal = __commonJS({
  "node_modules/@apollo/protobufjs/src/index-minimal.js"(exports2) {
    "use strict";
    var protobuf = exports2;
    protobuf.build = "minimal";
    protobuf.Writer = require_writer();
    protobuf.BufferWriter = require_writer_buffer();
    protobuf.Reader = require_reader();
    protobuf.BufferReader = require_reader_buffer();
    protobuf.util = require_minimal();
    protobuf.rpc = require_rpc();
    protobuf.roots = require_roots();
    protobuf.configure = configure;
    function configure() {
      protobuf.Reader._configure(protobuf.BufferReader);
      protobuf.util._configure();
    }
    protobuf.Writer._configure(protobuf.BufferWriter);
    configure();
  }
});

// node_modules/@apollo/protobufjs/minimal.js
var require_minimal2 = __commonJS({
  "node_modules/@apollo/protobufjs/minimal.js"(exports2, module2) {
    "use strict";
    module2.exports = require_index_minimal();
  }
});

// node_modules/@apollo/usage-reporting-protobuf/generated/esm/protobuf.js
var import_minimal, $Reader, $Writer, $util, $root, Trace, ReportHeader, PathErrorStats, QueryLatencyStats, StatsContext, ContextualizedQueryLatencyStats, ContextualizedTypeStats, FieldStat, TypeStat, ReferencedFieldsForType, Report, ContextualizedStats, TracesAndStats, google;
var init_protobuf = __esm({
  "node_modules/@apollo/usage-reporting-protobuf/generated/esm/protobuf.js"() {
    import_minimal = __toESM(require_minimal2(), 1);
    $Reader = import_minimal.default.Reader;
    $Writer = import_minimal.default.Writer;
    $util = import_minimal.default.util;
    $root = import_minimal.default.roots["default"] || (import_minimal.default.roots["default"] = {});
    Trace = $root.Trace = (() => {
      function Trace2(properties) {
        if (properties) {
          for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      Trace2.prototype.startTime = null;
      Trace2.prototype.endTime = null;
      Trace2.prototype.durationNs = 0;
      Trace2.prototype.root = null;
      Trace2.prototype.isIncomplete = false;
      Trace2.prototype.signature = "";
      Trace2.prototype.unexecutedOperationBody = "";
      Trace2.prototype.unexecutedOperationName = "";
      Trace2.prototype.details = null;
      Trace2.prototype.clientName = "";
      Trace2.prototype.clientVersion = "";
      Trace2.prototype.http = null;
      Trace2.prototype.cachePolicy = null;
      Trace2.prototype.queryPlan = null;
      Trace2.prototype.fullQueryCacheHit = false;
      Trace2.prototype.persistedQueryHit = false;
      Trace2.prototype.persistedQueryRegister = false;
      Trace2.prototype.registeredOperation = false;
      Trace2.prototype.forbiddenOperation = false;
      Trace2.prototype.fieldExecutionWeight = 0;
      Trace2.create = function create(properties) {
        return new Trace2(properties);
      };
      Trace2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer.create();
        if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
          $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(
            /* id 3, wireType 2 =*/
            26
          ).fork()).ldelim();
        if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
          $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(
            /* id 4, wireType 2 =*/
            34
          ).fork()).ldelim();
        if (message.details != null && Object.hasOwnProperty.call(message, "details"))
          $root.Trace.Details.encode(message.details, writer.uint32(
            /* id 6, wireType 2 =*/
            50
          ).fork()).ldelim();
        if (message.clientName != null && Object.hasOwnProperty.call(message, "clientName"))
          writer.uint32(
            /* id 7, wireType 2 =*/
            58
          ).string(message.clientName);
        if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
          writer.uint32(
            /* id 8, wireType 2 =*/
            66
          ).string(message.clientVersion);
        if (message.http != null && Object.hasOwnProperty.call(message, "http"))
          $root.Trace.HTTP.encode(message.http, writer.uint32(
            /* id 10, wireType 2 =*/
            82
          ).fork()).ldelim();
        if (message.durationNs != null && Object.hasOwnProperty.call(message, "durationNs"))
          writer.uint32(
            /* id 11, wireType 0 =*/
            88
          ).uint64(message.durationNs);
        if (message.root != null && Object.hasOwnProperty.call(message, "root"))
          $root.Trace.Node.encode(message.root, writer.uint32(
            /* id 14, wireType 2 =*/
            114
          ).fork()).ldelim();
        if (message.cachePolicy != null && Object.hasOwnProperty.call(message, "cachePolicy"))
          $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(
            /* id 18, wireType 2 =*/
            146
          ).fork()).ldelim();
        if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
          writer.uint32(
            /* id 19, wireType 2 =*/
            154
          ).string(message.signature);
        if (message.fullQueryCacheHit != null && Object.hasOwnProperty.call(message, "fullQueryCacheHit"))
          writer.uint32(
            /* id 20, wireType 0 =*/
            160
          ).bool(message.fullQueryCacheHit);
        if (message.persistedQueryHit != null && Object.hasOwnProperty.call(message, "persistedQueryHit"))
          writer.uint32(
            /* id 21, wireType 0 =*/
            168
          ).bool(message.persistedQueryHit);
        if (message.persistedQueryRegister != null && Object.hasOwnProperty.call(message, "persistedQueryRegister"))
          writer.uint32(
            /* id 22, wireType 0 =*/
            176
          ).bool(message.persistedQueryRegister);
        if (message.registeredOperation != null && Object.hasOwnProperty.call(message, "registeredOperation"))
          writer.uint32(
            /* id 24, wireType 0 =*/
            192
          ).bool(message.registeredOperation);
        if (message.forbiddenOperation != null && Object.hasOwnProperty.call(message, "forbiddenOperation"))
          writer.uint32(
            /* id 25, wireType 0 =*/
            200
          ).bool(message.forbiddenOperation);
        if (message.queryPlan != null && Object.hasOwnProperty.call(message, "queryPlan"))
          $root.Trace.QueryPlanNode.encode(message.queryPlan, writer.uint32(
            /* id 26, wireType 2 =*/
            210
          ).fork()).ldelim();
        if (message.unexecutedOperationBody != null && Object.hasOwnProperty.call(message, "unexecutedOperationBody"))
          writer.uint32(
            /* id 27, wireType 2 =*/
            218
          ).string(message.unexecutedOperationBody);
        if (message.unexecutedOperationName != null && Object.hasOwnProperty.call(message, "unexecutedOperationName"))
          writer.uint32(
            /* id 28, wireType 2 =*/
            226
          ).string(message.unexecutedOperationName);
        if (message.fieldExecutionWeight != null && Object.hasOwnProperty.call(message, "fieldExecutionWeight"))
          writer.uint32(
            /* id 31, wireType 1 =*/
            249
          ).double(message.fieldExecutionWeight);
        if (message.isIncomplete != null && Object.hasOwnProperty.call(message, "isIncomplete"))
          writer.uint32(
            /* id 33, wireType 0 =*/
            264
          ).bool(message.isIncomplete);
        return writer;
      };
      Trace2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      Trace2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
          reader = $Reader.create(reader);
        let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace();
        while (reader.pos < end) {
          let tag = reader.uint32();
          switch (tag >>> 3) {
            case 4:
              message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
              break;
            case 3:
              message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
              break;
            case 11:
              message.durationNs = reader.uint64();
              break;
            case 14:
              message.root = $root.Trace.Node.decode(reader, reader.uint32());
              break;
            case 33:
              message.isIncomplete = reader.bool();
              break;
            case 19:
              message.signature = reader.string();
              break;
            case 27:
              message.unexecutedOperationBody = reader.string();
              break;
            case 28:
              message.unexecutedOperationName = reader.string();
              break;
            case 6:
              message.details = $root.Trace.Details.decode(reader, reader.uint32());
              break;
            case 7:
              message.clientName = reader.string();
              break;
            case 8:
              message.clientVersion = reader.string();
              break;
            case 10:
              message.http = $root.Trace.HTTP.decode(reader, reader.uint32());
              break;
            case 18:
              message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());
              break;
            case 26:
              message.queryPlan = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());
              break;
            case 20:
              message.fullQueryCacheHit = reader.bool();
              break;
            case 21:
              message.persistedQueryHit = reader.bool();
              break;
            case 22:
              message.persistedQueryRegister = reader.bool();
              break;
            case 24:
              message.registeredOperation = reader.bool();
              break;
            case 25:
              message.forbiddenOperation = reader.bool();
              break;
            case 31:
              message.fieldExecutionWeight = reader.double();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      Trace2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
          reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
      };
      Trace2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.startTime != null && message.hasOwnProperty("startTime")) {
          let error = $root.google.protobuf.Timestamp.verify(message.startTime);
          if (error)
            return "startTime." + error;
        }
        if (message.endTime != null && message.hasOwnProperty("endTime")) {
          let error = $root.google.protobuf.Timestamp.verify(message.endTime);
          if (error)
            return "endTime." + error;
        }
        if (message.durationNs != null && message.hasOwnProperty("durationNs")) {
          if (!$util.isInteger(message.durationNs) && !(message.durationNs && $util.isInteger(message.durationNs.low) && $util.isInteger(message.durationNs.high)))
            return "durationNs: integer|Long expected";
        }
        if (message.root != null && message.hasOwnProperty("root")) {
          let error = $root.Trace.Node.verify(message.root);
          if (error)
            return "root." + error;
        }
        if (message.isIncomplete != null && message.hasOwnProperty("isIncomplete")) {
          if (typeof message.isIncomplete !== "boolean")
            return "isIncomplete: boolean expected";
        }
        if (message.signature != null && message.hasOwnProperty("signature")) {
          if (!$util.isString(message.signature))
            return "signature: string expected";
        }
        if (message.unexecutedOperationBody != null && message.hasOwnProperty("unexecutedOperationBody")) {
          if (!$util.isString(message.unexecutedOperationBody))
            return "unexecutedOperationBody: string expected";
        }
        if (message.unexecutedOperationName != null && message.hasOwnProperty("unexecutedOperationName")) {
          if (!$util.isString(message.unexecutedOperationName))
            return "unexecutedOperationName: string expected";
        }
        if (message.details != null && message.hasOwnProperty("details")) {
          let error = $root.Trace.Details.verify(message.details);
          if (error)
            return "details." + error;
        }
        if (message.clientName != null && message.hasOwnProperty("clientName")) {
          if (!$util.isString(message.clientName))
            return "clientName: string expected";
        }
        if (message.clientVersion != null && message.hasOwnProperty("clientVersion")) {
          if (!$util.isString(message.clientVersion))
            return "clientVersion: string expected";
        }
        if (message.http != null && message.hasOwnProperty("http")) {
          let error = $root.Trace.HTTP.verify(message.http);
          if (error)
            return "http." + error;
        }
        if (message.cachePolicy != null && message.hasOwnProperty("cachePolicy")) {
          let error = $root.Trace.CachePolicy.verify(message.cachePolicy);
          if (error)
            return "cachePolicy." + error;
        }
        if (message.queryPlan != null && message.hasOwnProperty("queryPlan")) {
          let error = $root.Trace.QueryPlanNode.verify(message.queryPlan);
          if (error)
            return "queryPlan." + error;
        }
        if (message.fullQueryCacheHit != null && message.hasOwnProperty("fullQueryCacheHit")) {
          if (typeof message.fullQueryCacheHit !== "boolean")
            return "fullQueryCacheHit: boolean expected";
        }
        if (message.persistedQueryHit != null && message.hasOwnProperty("persistedQueryHit")) {
          if (typeof message.persistedQueryHit !== "boolean")
            return "persistedQueryHit: boolean expected";
        }
        if (message.persistedQueryRegister != null && message.hasOwnProperty("persistedQueryRegister")) {
          if (typeof message.persistedQueryRegister !== "boolean")
            return "persistedQueryRegister: boolean expected";
        }
        if (message.registeredOperation != null && message.hasOwnProperty("registeredOperation")) {
          if (typeof message.registeredOperation !== "boolean")
            return "registeredOperation: boolean expected";
        }
        if (message.forbiddenOperation != null && message.hasOwnProperty("forbiddenOperation")) {
          if (typeof message.forbiddenOperation !== "boolean")
            return "forbiddenOperation: boolean expected";
        }
        if (message.fieldExecutionWeight != null && message.hasOwnProperty("fieldExecutionWeight")) {
          if (typeof message.fieldExecutionWeight !== "number")
            return "fieldExecutionWeight: number expected";
        }
        return null;
      };
      Trace2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        let object = {};
        if (options.defaults) {
          object.endTime = null;
          object.startTime = null;
          object.details = null;
          object.clientName = "";
          object.clientVersion = "";
          object.http = null;
          object.durationNs = 0;
          object.root = null;
          object.cachePolicy = null;
          object.signature = "";
          object.fullQueryCacheHit = false;
          object.persistedQueryHit = false;
          object.persistedQueryRegister = false;
          object.registeredOperation = false;
          object.forbiddenOperation = false;
          object.queryPlan = null;
          object.unexecutedOperationBody = "";
          object.unexecutedOperationName = "";
          object.fieldExecutionWeight = 0;
          object.isIncomplete = false;
        }
        if (message.endTime != null && message.hasOwnProperty("endTime"))
          object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
        if (message.startTime != null && message.hasOwnProperty("startTime"))
          object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
        if (message.details != null && message.hasOwnProperty("details"))
          object.details = $root.Trace.Details.toObject(message.details, options);
        if (message.clientName != null && message.hasOwnProperty("clientName"))
          object.clientName = message.clientName;
        if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
          object.clientVersion = message.clientVersion;
        if (message.http != null && message.hasOwnProperty("http"))
          object.http = $root.Trace.HTTP.toObject(message.http, options);
        if (message.durationNs != null && message.hasOwnProperty("durationNs"))
          if (typeof message.durationNs === "number")
            object.durationNs = options.longs === String ? String(message.durationNs) : message.durationNs;
          else
            object.durationNs = options.longs === String ? $util.Long.prototype.toString.call(message.durationNs) : options.longs === Number ? new $util.LongBits(message.durationNs.low >>> 0, message.durationNs.high >>> 0).toNumber(true) : message.durationNs;
        if (message.root != null && message.hasOwnProperty("root"))
          object.root = $root.Trace.Node.toObject(message.root, options);
        if (message.cachePolicy != null && message.hasOwnProperty("cachePolicy"))
          object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);
        if (message.signature != null && message.hasOwnProperty("signature"))
          object.signature = message.signature;
        if (message.fullQueryCacheHit != null && message.hasOwnProperty("fullQueryCacheHit"))
          object.fullQueryCacheHit = message.fullQueryCacheHit;
        if (message.persistedQueryHit != null && message.hasOwnProperty("persistedQueryHit"))
          object.persistedQueryHit = message.persistedQueryHit;
        if (message.persistedQueryRegister != null && message.hasOwnProperty("persistedQueryRegister"))
          object.persistedQueryRegister = message.persistedQueryRegister;
        if (message.registeredOperation != null && message.hasOwnProperty("registeredOperation"))
          object.registeredOperation = message.registeredOperation;
        if (message.forbiddenOperation != null && message.hasOwnProperty("forbiddenOperation"))
          object.forbiddenOperation = message.forbiddenOperation;
        if (message.queryPlan != null && message.hasOwnProperty("queryPlan"))
          object.queryPlan = $root.Trace.QueryPlanNode.toObject(message.queryPlan, options);
        if (message.unexecutedOperationBody != null && message.hasOwnProperty("unexecutedOperationBody"))
          object.unexecutedOperationBody = message.unexecutedOperationBody;
        if (message.unexecutedOperationName != null && message.hasOwnProperty("unexecutedOperationName"))
          object.unexecutedOperationName = message.unexecutedOperationName;
        if (message.fieldExecutionWeight != null && message.hasOwnProperty("fieldExecutionWeight"))
          object.fieldExecutionWeight = options.json && !isFinite(message.fieldExecutionWeight) ? String(message.fieldExecutionWeight) : message.fieldExecutionWeight;
        if (message.isIncomplete != null && message.hasOwnProperty("isIncomplete"))
          object.isIncomplete = message.isIncomplete;
        return object;
      };
      Trace2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
      };
      Trace2.CachePolicy = function() {
        function CachePolicy(properties) {
          if (properties) {
            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        CachePolicy.prototype.scope = 0;
        CachePolicy.prototype.maxAgeNs = 0;
        CachePolicy.create = function create(properties) {
          return new CachePolicy(properties);
        };
        CachePolicy.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer.create();
          if (message.scope != null && Object.hasOwnProperty.call(message, "scope"))
            writer.uint32(
              /* id 1, wireType 0 =*/
              8
            ).int32(message.scope);
          if (message.maxAgeNs != null && Object.hasOwnProperty.call(message, "maxAgeNs"))
            writer.uint32(
              /* id 2, wireType 0 =*/
              16
            ).int64(message.maxAgeNs);
          return writer;
        };
        CachePolicy.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        CachePolicy.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
          let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.CachePolicy();
          while (reader.pos < end) {
            let tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.scope = reader.int32();
                break;
              case 2:
                message.maxAgeNs = reader.int64();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        CachePolicy.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        CachePolicy.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          if (message.scope != null && message.hasOwnProperty("scope"))
            switch (message.scope) {
              default:
                return "scope: enum value expected";
              case 0:
              case 1:
              case 2:
                break;
            }
          if (message.maxAgeNs != null && message.hasOwnProperty("maxAgeNs")) {
            if (!$util.isInteger(message.maxAgeNs) && !(message.maxAgeNs && $util.isInteger(message.maxAgeNs.low) && $util.isInteger(message.maxAgeNs.high)))
              return "maxAgeNs: integer|Long expected";
          }
          return null;
        };
        CachePolicy.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          let object = {};
          if (options.defaults) {
            object.scope = options.enums === String ? "UNKNOWN" : 0;
            object.maxAgeNs = 0;
          }
          if (message.scope != null && message.hasOwnProperty("scope"))
            object.scope = options.enums === String ? $root.Trace.CachePolicy.Scope[message.scope] : message.scope;
          if (message.maxAgeNs != null && message.hasOwnProperty("maxAgeNs"))
            if (typeof message.maxAgeNs === "number")
              object.maxAgeNs = options.longs === String ? String(message.maxAgeNs) : message.maxAgeNs;
            else
              object.maxAgeNs = options.longs === String ? $util.Long.prototype.toString.call(message.maxAgeNs) : options.longs === Number ? new $util.LongBits(message.maxAgeNs.low >>> 0, message.maxAgeNs.high >>> 0).toNumber() : message.maxAgeNs;
          return object;
        };
        CachePolicy.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
        };
        CachePolicy.Scope = function() {
          const valuesById = {}, values = Object.create(valuesById);
          values[valuesById[0] = "UNKNOWN"] = 0;
          values[valuesById[1] = "PUBLIC"] = 1;
          values[valuesById[2] = "PRIVATE"] = 2;
          return values;
        }();
        return CachePolicy;
      }();
      Trace2.Details = function() {
        function Details(properties) {
          this.variablesJson = {};
          if (properties) {
            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        Details.prototype.variablesJson = $util.emptyObject;
        Details.prototype.operationName = "";
        Details.create = function create(properties) {
          return new Details(properties);
        };
        Details.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer.create();
          if (message.operationName != null && Object.hasOwnProperty.call(message, "operationName"))
            writer.uint32(
              /* id 3, wireType 2 =*/
              26
            ).string(message.operationName);
          if (message.variablesJson != null && Object.hasOwnProperty.call(message, "variablesJson"))
            for (let keys = Object.keys(message.variablesJson), i = 0; i < keys.length; ++i)
              writer.uint32(
                /* id 4, wireType 2 =*/
                34
              ).fork().uint32(
                /* id 1, wireType 2 =*/
                10
              ).string(keys[i]).uint32(
                /* id 2, wireType 2 =*/
                18
              ).string(message.variablesJson[keys[i]]).ldelim();
          return writer;
        };
        Details.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Details.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
          let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.Details(), key;
          while (reader.pos < end) {
            let tag = reader.uint32();
            switch (tag >>> 3) {
              case 4:
                reader.skip().pos++;
                if (message.variablesJson === $util.emptyObject)
                  message.variablesJson = {};
                key = reader.string();
                reader.pos++;
                message.variablesJson[key] = reader.string();
                break;
              case 3:
                message.operationName = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Details.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        Details.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          if (message.variablesJson != null && message.hasOwnProperty("variablesJson")) {
            if (!$util.isObject(message.variablesJson))
              return "variablesJson: object expected";
            let key = Object.keys(message.variablesJson);
            for (let i = 0; i < key.length; ++i)
              if (!$util.isString(message.variablesJson[key[i]]))
                return "variablesJson: string{k:string} expected";
          }
          if (message.operationName != null && message.hasOwnProperty("operationName")) {
            if (!$util.isString(message.operationName))
              return "operationName: string expected";
          }
          return null;
        };
        Details.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          let object = {};
          if (options.objects || options.defaults)
            object.variablesJson = {};
          if (options.defaults)
            object.operationName = "";
          if (message.operationName != null && message.hasOwnProperty("operationName"))
            object.operationName = message.operationName;
          let keys2;
          if (message.variablesJson && (keys2 = Object.keys(message.variablesJson)).length) {
            object.variablesJson = {};
            for (let j2 = 0; j2 < keys2.length; ++j2)
              object.variablesJson[keys2[j2]] = message.variablesJson[keys2[j2]];
          }
          return object;
        };
        Details.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
        };
        return Details;
      }();
      Trace2.Error = function() {
        function Error2(properties) {
          this.location = [];
          if (properties) {
            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        Error2.prototype.message = "";
        Error2.prototype.location = $util.emptyArray;
        Error2.prototype.timeNs = 0;
        Error2.prototype.json = "";
        Error2.create = function create(properties) {
          return new Error2(properties);
        };
        Error2.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer.create();
          if (message.message != null && Object.hasOwnProperty.call(message, "message"))
            writer.uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(message.message);
          if (message.location != null && message.location.length)
            for (let i = 0; i < message.location.length; ++i)
              $root.Trace.Location.encode(message.location[i], writer.uint32(
                /* id 2, wireType 2 =*/
                18
              ).fork()).ldelim();
          if (message.timeNs != null && Object.hasOwnProperty.call(message, "timeNs"))
            writer.uint32(
              /* id 3, wireType 0 =*/
              24
            ).uint64(message.timeNs);
          if (message.json != null && Object.hasOwnProperty.call(message, "json"))
            writer.uint32(
              /* id 4, wireType 2 =*/
              34
            ).string(message.json);
          return writer;
        };
        Error2.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Error2.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
          let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.Error();
          while (reader.pos < end) {
            let tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.message = reader.string();
                break;
              case 2:
                if (!(message.location && message.location.length))
                  message.location = [];
                message.location.push($root.Trace.Location.decode(reader, reader.uint32()));
                break;
              case 3:
                message.timeNs = reader.uint64();
                break;
              case 4:
                message.json = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Error2.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        Error2.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          if (message.message != null && message.hasOwnProperty("message")) {
            if (!$util.isString(message.message))
              return "message: string expected";
          }
          if (message.location != null && message.hasOwnProperty("location")) {
            if (!Array.isArray(message.location))
              return "location: array expected";
            for (let i = 0; i < message.location.length; ++i) {
              let error = $root.Trace.Location.verify(message.location[i]);
              if (error)
                return "location." + error;
            }
          }
          if (message.timeNs != null && message.hasOwnProperty("timeNs")) {
            if (!$util.isInteger(message.timeNs) && !(message.timeNs && $util.isInteger(message.timeNs.low) && $util.isInteger(message.timeNs.high)))
              return "timeNs: integer|Long expected";
          }
          if (message.json != null && message.hasOwnProperty("json")) {
            if (!$util.isString(message.json))
              return "json: string expected";
          }
          return null;
        };
        Error2.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          let object = {};
          if (options.arrays || options.defaults)
            object.location = [];
          if (options.defaults) {
            object.message = "";
            object.timeNs = 0;
            object.json = "";
          }
          if (message.message != null && message.hasOwnProperty("message"))
            object.message = message.message;
          if (message.location && message.location.length) {
            object.location = [];
            for (let j2 = 0; j2 < message.location.length; ++j2)
              object.location[j2] = $root.Trace.Location.toObject(message.location[j2], options);
          }
          if (message.timeNs != null && message.hasOwnProperty("timeNs"))
            if (typeof message.timeNs === "number")
              object.timeNs = options.longs === String ? String(message.timeNs) : message.timeNs;
            else
              object.timeNs = options.longs === String ? $util.Long.prototype.toString.call(message.timeNs) : options.longs === Number ? new $util.LongBits(message.timeNs.low >>> 0, message.timeNs.high >>> 0).toNumber(true) : message.timeNs;
          if (message.json != null && message.hasOwnProperty("json"))
            object.json = message.json;
          return object;
        };
        Error2.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
        };
        return Error2;
      }();
      Trace2.HTTP = function() {
        function HTTP(properties) {
          this.requestHeaders = {};
          this.responseHeaders = {};
          if (properties) {
            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        HTTP.prototype.method = 0;
        HTTP.prototype.requestHeaders = $util.emptyObject;
        HTTP.prototype.responseHeaders = $util.emptyObject;
        HTTP.prototype.statusCode = 0;
        HTTP.create = function create(properties) {
          return new HTTP(properties);
        };
        HTTP.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer.create();
          if (message.method != null && Object.hasOwnProperty.call(message, "method"))
            writer.uint32(
              /* id 1, wireType 0 =*/
              8
            ).int32(message.method);
          if (message.requestHeaders != null && Object.hasOwnProperty.call(message, "requestHeaders"))
            for (let keys = Object.keys(message.requestHeaders), i = 0; i < keys.length; ++i) {
              writer.uint32(
                /* id 4, wireType 2 =*/
                34
              ).fork().uint32(
                /* id 1, wireType 2 =*/
                10
              ).string(keys[i]);
              $root.Trace.HTTP.Values.encode(message.requestHeaders[keys[i]], writer.uint32(
                /* id 2, wireType 2 =*/
                18
              ).fork()).ldelim().ldelim();
            }
          if (message.responseHeaders != null && Object.hasOwnProperty.call(message, "responseHeaders"))
            for (let keys = Object.keys(message.responseHeaders), i = 0; i < keys.length; ++i) {
              writer.uint32(
                /* id 5, wireType 2 =*/
                42
              ).fork().uint32(
                /* id 1, wireType 2 =*/
                10
              ).string(keys[i]);
              $root.Trace.HTTP.Values.encode(message.responseHeaders[keys[i]], writer.uint32(
                /* id 2, wireType 2 =*/
                18
              ).fork()).ldelim().ldelim();
            }
          if (message.statusCode != null && Object.hasOwnProperty.call(message, "statusCode"))
            writer.uint32(
              /* id 6, wireType 0 =*/
              48
            ).uint32(message.statusCode);
          return writer;
        };
        HTTP.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        HTTP.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
          let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.HTTP(), key;
          while (reader.pos < end) {
            let tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.method = reader.int32();
                break;
              case 4:
                reader.skip().pos++;
                if (message.requestHeaders === $util.emptyObject)
                  message.requestHeaders = {};
                key = reader.string();
                reader.pos++;
                message.requestHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());
                break;
              case 5:
                reader.skip().pos++;
                if (message.responseHeaders === $util.emptyObject)
                  message.responseHeaders = {};
                key = reader.string();
                reader.pos++;
                message.responseHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());
                break;
              case 6:
                message.statusCode = reader.uint32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        HTTP.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        HTTP.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          if (message.method != null && message.hasOwnProperty("method"))
            switch (message.method) {
              default:
                return "method: enum value expected";
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
                break;
            }
          if (message.requestHeaders != null && message.hasOwnProperty("requestHeaders")) {
            if (!$util.isObject(message.requestHeaders))
              return "requestHeaders: object expected";
            let key = Object.keys(message.requestHeaders);
            for (let i = 0; i < key.length; ++i) {
              let error = $root.Trace.HTTP.Values.verify(message.requestHeaders[key[i]]);
              if (error)
                return "requestHeaders." + error;
            }
          }
          if (message.responseHeaders != null && message.hasOwnProperty("responseHeaders")) {
            if (!$util.isObject(message.responseHeaders))
              return "responseHeaders: object expected";
            let key = Object.keys(message.responseHeaders);
            for (let i = 0; i < key.length; ++i) {
              let error = $root.Trace.HTTP.Values.verify(message.responseHeaders[key[i]]);
              if (error)
                return "responseHeaders." + error;
            }
          }
          if (message.statusCode != null && message.hasOwnProperty("statusCode")) {
            if (!$util.isInteger(message.statusCode))
              return "statusCode: integer expected";
          }
          return null;
        };
        HTTP.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          let object = {};
          if (options.objects || options.defaults) {
            object.requestHeaders = {};
            object.responseHeaders = {};
          }
          if (options.defaults) {
            object.method = options.enums === String ? "UNKNOWN" : 0;
            object.statusCode = 0;
          }
          if (message.method != null && message.hasOwnProperty("method"))
            object.method = options.enums === String ? $root.Trace.HTTP.Method[message.method] : message.method;
          let keys2;
          if (message.requestHeaders && (keys2 = Object.keys(message.requestHeaders)).length) {
            object.requestHeaders = {};
            for (let j2 = 0; j2 < keys2.length; ++j2)
              object.requestHeaders[keys2[j2]] = $root.Trace.HTTP.Values.toObject(message.requestHeaders[keys2[j2]], options);
          }
          if (message.responseHeaders && (keys2 = Object.keys(message.responseHeaders)).length) {
            object.responseHeaders = {};
            for (let j2 = 0; j2 < keys2.length; ++j2)
              object.responseHeaders[keys2[j2]] = $root.Trace.HTTP.Values.toObject(message.responseHeaders[keys2[j2]], options);
          }
          if (message.statusCode != null && message.hasOwnProperty("statusCode"))
            object.statusCode = message.statusCode;
          return object;
        };
        HTTP.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
        };
        HTTP.Values = function() {
          function Values(properties) {
            this.value = [];
            if (properties) {
              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          Values.prototype.value = $util.emptyArray;
          Values.create = function create(properties) {
            return new Values(properties);
          };
          Values.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.value != null && message.value.length)
              for (let i = 0; i < message.value.length; ++i)
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.value[i]);
            return writer;
          };
          Values.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          Values.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.HTTP.Values();
            while (reader.pos < end) {
              let tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  if (!(message.value && message.value.length))
                    message.value = [];
                  message.value.push(reader.string());
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          Values.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          Values.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.value != null && message.hasOwnProperty("value")) {
              if (!Array.isArray(message.value))
                return "value: array expected";
              for (let i = 0; i < message.value.length; ++i)
                if (!$util.isString(message.value[i]))
                  return "value: string[] expected";
            }
            return null;
          };
          Values.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            let object = {};
            if (options.arrays || options.defaults)
              object.value = [];
            if (message.value && message.value.length) {
              object.value = [];
              for (let j2 = 0; j2 < message.value.length; ++j2)
                object.value[j2] = message.value[j2];
            }
            return object;
          };
          Values.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
          };
          return Values;
        }();
        HTTP.Method = function() {
          const valuesById = {}, values = Object.create(valuesById);
          values[valuesById[0] = "UNKNOWN"] = 0;
          values[valuesById[1] = "OPTIONS"] = 1;
          values[valuesById[2] = "GET"] = 2;
          values[valuesById[3] = "HEAD"] = 3;
          values[valuesById[4] = "POST"] = 4;
          values[valuesById[5] = "PUT"] = 5;
          values[valuesById[6] = "DELETE"] = 6;
          values[valuesById[7] = "TRACE"] = 7;
          values[valuesById[8] = "CONNECT"] = 8;
          values[valuesById[9] = "PATCH"] = 9;
          return values;
        }();
        return HTTP;
      }();
      Trace2.Location = function() {
        function Location(properties) {
          if (properties) {
            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        Location.prototype.line = 0;
        Location.prototype.column = 0;
        Location.create = function create(properties) {
          return new Location(properties);
        };
        Location.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer.create();
          if (message.line != null && Object.hasOwnProperty.call(message, "line"))
            writer.uint32(
              /* id 1, wireType 0 =*/
              8
            ).uint32(message.line);
          if (message.column != null && Object.hasOwnProperty.call(message, "column"))
            writer.uint32(
              /* id 2, wireType 0 =*/
              16
            ).uint32(message.column);
          return writer;
        };
        Location.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Location.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
          let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.Location();
          while (reader.pos < end) {
            let tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.line = reader.uint32();
                break;
              case 2:
                message.column = reader.uint32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Location.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        Location.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          if (message.line != null && message.hasOwnProperty("line")) {
            if (!$util.isInteger(message.line))
              return "line: integer expected";
          }
          if (message.column != null && message.hasOwnProperty("column")) {
            if (!$util.isInteger(message.column))
              return "column: integer expected";
          }
          return null;
        };
        Location.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          let object = {};
          if (options.defaults) {
            object.line = 0;
            object.column = 0;
          }
          if (message.line != null && message.hasOwnProperty("line"))
            object.line = message.line;
          if (message.column != null && message.hasOwnProperty("column"))
            object.column = message.column;
          return object;
        };
        Location.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
        };
        return Location;
      }();
      Trace2.Node = function() {
        function Node(properties) {
          this.error = [];
          this.child = [];
          if (properties) {
            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        Node.prototype.responseName = "";
        Node.prototype.index = 0;
        Node.prototype.originalFieldName = "";
        Node.prototype.type = "";
        Node.prototype.parentType = "";
        Node.prototype.cachePolicy = null;
        Node.prototype.startTime = 0;
        Node.prototype.endTime = 0;
        Node.prototype.error = $util.emptyArray;
        Node.prototype.child = $util.emptyArray;
        let $oneOfFields;
        Object.defineProperty(Node.prototype, "id", {
          get: $util.oneOfGetter($oneOfFields = ["responseName", "index"]),
          set: $util.oneOfSetter($oneOfFields)
        });
        Node.create = function create(properties) {
          return new Node(properties);
        };
        Node.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer.create();
          if (message.responseName != null && Object.hasOwnProperty.call(message, "responseName"))
            writer.uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(message.responseName);
          if (message.index != null && Object.hasOwnProperty.call(message, "index"))
            writer.uint32(
              /* id 2, wireType 0 =*/
              16
            ).uint32(message.index);
          if (message.type != null && Object.hasOwnProperty.call(message, "type"))
            writer.uint32(
              /* id 3, wireType 2 =*/
              26
            ).string(message.type);
          if (message.cachePolicy != null && Object.hasOwnProperty.call(message, "cachePolicy"))
            $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(
              /* id 5, wireType 2 =*/
              42
            ).fork()).ldelim();
          if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
            writer.uint32(
              /* id 8, wireType 0 =*/
              64
            ).uint64(message.startTime);
          if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
            writer.uint32(
              /* id 9, wireType 0 =*/
              72
            ).uint64(message.endTime);
          if (message.error != null && message.error.length)
            for (let i = 0; i < message.error.length; ++i)
              $root.Trace.Error.encode(message.error[i], writer.uint32(
                /* id 11, wireType 2 =*/
                90
              ).fork()).ldelim();
          if (message.child != null && message.child.length)
            for (let i = 0; i < message.child.length; ++i)
              $root.Trace.Node.encode(message.child[i], writer.uint32(
                /* id 12, wireType 2 =*/
                98
              ).fork()).ldelim();
          if (message.parentType != null && Object.hasOwnProperty.call(message, "parentType"))
            writer.uint32(
              /* id 13, wireType 2 =*/
              106
            ).string(message.parentType);
          if (message.originalFieldName != null && Object.hasOwnProperty.call(message, "originalFieldName"))
            writer.uint32(
              /* id 14, wireType 2 =*/
              114
            ).string(message.originalFieldName);
          return writer;
        };
        Node.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Node.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
          let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.Node();
          while (reader.pos < end) {
            let tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.responseName = reader.string();
                break;
              case 2:
                message.index = reader.uint32();
                break;
              case 14:
                message.originalFieldName = reader.string();
                break;
              case 3:
                message.type = reader.string();
                break;
              case 13:
                message.parentType = reader.string();
                break;
              case 5:
                message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());
                break;
              case 8:
                message.startTime = reader.uint64();
                break;
              case 9:
                message.endTime = reader.uint64();
                break;
              case 11:
                if (!(message.error && message.error.length))
                  message.error = [];
                message.error.push($root.Trace.Error.decode(reader, reader.uint32()));
                break;
              case 12:
                if (!(message.child && message.child.length))
                  message.child = [];
                message.child.push($root.Trace.Node.decode(reader, reader.uint32()));
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Node.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        Node.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          let properties = {};
          if (message.responseName != null && message.hasOwnProperty("responseName")) {
            properties.id = 1;
            if (!$util.isString(message.responseName))
              return "responseName: string expected";
          }
          if (message.index != null && message.hasOwnProperty("index")) {
            if (properties.id === 1)
              return "id: multiple values";
            properties.id = 1;
            if (!$util.isInteger(message.index))
              return "index: integer expected";
          }
          if (message.originalFieldName != null && message.hasOwnProperty("originalFieldName")) {
            if (!$util.isString(message.originalFieldName))
              return "originalFieldName: string expected";
          }
          if (message.type != null && message.hasOwnProperty("type")) {
            if (!$util.isString(message.type))
              return "type: string expected";
          }
          if (message.parentType != null && message.hasOwnProperty("parentType")) {
            if (!$util.isString(message.parentType))
              return "parentType: string expected";
          }
          if (message.cachePolicy != null && message.hasOwnProperty("cachePolicy")) {
            let error = $root.Trace.CachePolicy.verify(message.cachePolicy);
            if (error)
              return "cachePolicy." + error;
          }
          if (message.startTime != null && message.hasOwnProperty("startTime")) {
            if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))
              return "startTime: integer|Long expected";
          }
          if (message.endTime != null && message.hasOwnProperty("endTime")) {
            if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))
              return "endTime: integer|Long expected";
          }
          if (message.error != null && message.hasOwnProperty("error")) {
            if (!Array.isArray(message.error))
              return "error: array expected";
            for (let i = 0; i < message.error.length; ++i) {
              let error = $root.Trace.Error.verify(message.error[i]);
              if (error)
                return "error." + error;
            }
          }
          if (message.child != null && message.hasOwnProperty("child")) {
            if (!Array.isArray(message.child))
              return "child: array expected";
            for (let i = 0; i < message.child.length; ++i) {
              let error = $root.Trace.Node.verify(message.child[i]);
              if (error)
                return "child." + error;
            }
          }
          return null;
        };
        Node.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          let object = {};
          if (options.arrays || options.defaults) {
            object.error = [];
            object.child = [];
          }
          if (options.defaults) {
            object.type = "";
            object.cachePolicy = null;
            object.startTime = 0;
            object.endTime = 0;
            object.parentType = "";
            object.originalFieldName = "";
          }
          if (message.responseName != null && message.hasOwnProperty("responseName")) {
            object.responseName = message.responseName;
            if (options.oneofs)
              object.id = "responseName";
          }
          if (message.index != null && message.hasOwnProperty("index")) {
            object.index = message.index;
            if (options.oneofs)
              object.id = "index";
          }
          if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
          if (message.cachePolicy != null && message.hasOwnProperty("cachePolicy"))
            object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);
          if (message.startTime != null && message.hasOwnProperty("startTime"))
            if (typeof message.startTime === "number")
              object.startTime = options.longs === String ? String(message.startTime) : message.startTime;
            else
              object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber(true) : message.startTime;
          if (message.endTime != null && message.hasOwnProperty("endTime"))
            if (typeof message.endTime === "number")
              object.endTime = options.longs === String ? String(message.endTime) : message.endTime;
            else
              object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber(true) : message.endTime;
          if (message.error && message.error.length) {
            object.error = [];
            for (let j2 = 0; j2 < message.error.length; ++j2)
              object.error[j2] = $root.Trace.Error.toObject(message.error[j2], options);
          }
          if (message.child && message.child.length) {
            object.child = [];
            for (let j2 = 0; j2 < message.child.length; ++j2)
              object.child[j2] = $root.Trace.Node.toObject(message.child[j2], options);
          }
          if (message.parentType != null && message.hasOwnProperty("parentType"))
            object.parentType = message.parentType;
          if (message.originalFieldName != null && message.hasOwnProperty("originalFieldName"))
            object.originalFieldName = message.originalFieldName;
          return object;
        };
        Node.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
        };
        return Node;
      }();
      Trace2.QueryPlanNode = function() {
        function QueryPlanNode(properties) {
          if (properties) {
            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        QueryPlanNode.prototype.sequence = null;
        QueryPlanNode.prototype.parallel = null;
        QueryPlanNode.prototype.fetch = null;
        QueryPlanNode.prototype.flatten = null;
        QueryPlanNode.prototype.defer = null;
        QueryPlanNode.prototype.condition = null;
        let $oneOfFields;
        Object.defineProperty(QueryPlanNode.prototype, "node", {
          get: $util.oneOfGetter($oneOfFields = ["sequence", "parallel", "fetch", "flatten", "defer", "condition"]),
          set: $util.oneOfSetter($oneOfFields)
        });
        QueryPlanNode.create = function create(properties) {
          return new QueryPlanNode(properties);
        };
        QueryPlanNode.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer.create();
          if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
            $root.Trace.QueryPlanNode.SequenceNode.encode(message.sequence, writer.uint32(
              /* id 1, wireType 2 =*/
              10
            ).fork()).ldelim();
          if (message.parallel != null && Object.hasOwnProperty.call(message, "parallel"))
            $root.Trace.QueryPlanNode.ParallelNode.encode(message.parallel, writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim();
          if (message.fetch != null && Object.hasOwnProperty.call(message, "fetch"))
            $root.Trace.QueryPlanNode.FetchNode.encode(message.fetch, writer.uint32(
              /* id 3, wireType 2 =*/
              26
            ).fork()).ldelim();
          if (message.flatten != null && Object.hasOwnProperty.call(message, "flatten"))
            $root.Trace.QueryPlanNode.FlattenNode.encode(message.flatten, writer.uint32(
              /* id 4, wireType 2 =*/
              34
            ).fork()).ldelim();
          if (message.defer != null && Object.hasOwnProperty.call(message, "defer"))
            $root.Trace.QueryPlanNode.DeferNode.encode(message.defer, writer.uint32(
              /* id 5, wireType 2 =*/
              42
            ).fork()).ldelim();
          if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
            $root.Trace.QueryPlanNode.ConditionNode.encode(message.condition, writer.uint32(
              /* id 6, wireType 2 =*/
              50
            ).fork()).ldelim();
          return writer;
        };
        QueryPlanNode.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        QueryPlanNode.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
          let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode();
          while (reader.pos < end) {
            let tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.sequence = $root.Trace.QueryPlanNode.SequenceNode.decode(reader, reader.uint32());
                break;
              case 2:
                message.parallel = $root.Trace.QueryPlanNode.ParallelNode.decode(reader, reader.uint32());
                break;
              case 3:
                message.fetch = $root.Trace.QueryPlanNode.FetchNode.decode(reader, reader.uint32());
                break;
              case 4:
                message.flatten = $root.Trace.QueryPlanNode.FlattenNode.decode(reader, reader.uint32());
                break;
              case 5:
                message.defer = $root.Trace.QueryPlanNode.DeferNode.decode(reader, reader.uint32());
                break;
              case 6:
                message.condition = $root.Trace.QueryPlanNode.ConditionNode.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        QueryPlanNode.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        QueryPlanNode.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          let properties = {};
          if (message.sequence != null && message.hasOwnProperty("sequence")) {
            properties.node = 1;
            {
              let error = $root.Trace.QueryPlanNode.SequenceNode.verify(message.sequence);
              if (error)
                return "sequence." + error;
            }
          }
          if (message.parallel != null && message.hasOwnProperty("parallel")) {
            if (properties.node === 1)
              return "node: multiple values";
            properties.node = 1;
            {
              let error = $root.Trace.QueryPlanNode.ParallelNode.verify(message.parallel);
              if (error)
                return "parallel." + error;
            }
          }
          if (message.fetch != null && message.hasOwnProperty("fetch")) {
            if (properties.node === 1)
              return "node: multiple values";
            properties.node = 1;
            {
              let error = $root.Trace.QueryPlanNode.FetchNode.verify(message.fetch);
              if (error)
                return "fetch." + error;
            }
          }
          if (message.flatten != null && message.hasOwnProperty("flatten")) {
            if (properties.node === 1)
              return "node: multiple values";
            properties.node = 1;
            {
              let error = $root.Trace.QueryPlanNode.FlattenNode.verify(message.flatten);
              if (error)
                return "flatten." + error;
            }
          }
          if (message.defer != null && message.hasOwnProperty("defer")) {
            if (properties.node === 1)
              return "node: multiple values";
            properties.node = 1;
            {
              let error = $root.Trace.QueryPlanNode.DeferNode.verify(message.defer);
              if (error)
                return "defer." + error;
            }
          }
          if (message.condition != null && message.hasOwnProperty("condition")) {
            if (properties.node === 1)
              return "node: multiple values";
            properties.node = 1;
            {
              let error = $root.Trace.QueryPlanNode.ConditionNode.verify(message.condition);
              if (error)
                return "condition." + error;
            }
          }
          return null;
        };
        QueryPlanNode.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          let object = {};
          if (message.sequence != null && message.hasOwnProperty("sequence")) {
            object.sequence = $root.Trace.QueryPlanNode.SequenceNode.toObject(message.sequence, options);
            if (options.oneofs)
              object.node = "sequence";
          }
          if (message.parallel != null && message.hasOwnProperty("parallel")) {
            object.parallel = $root.Trace.QueryPlanNode.ParallelNode.toObject(message.parallel, options);
            if (options.oneofs)
              object.node = "parallel";
          }
          if (message.fetch != null && message.hasOwnProperty("fetch")) {
            object.fetch = $root.Trace.QueryPlanNode.FetchNode.toObject(message.fetch, options);
            if (options.oneofs)
              object.node = "fetch";
          }
          if (message.flatten != null && message.hasOwnProperty("flatten")) {
            object.flatten = $root.Trace.QueryPlanNode.FlattenNode.toObject(message.flatten, options);
            if (options.oneofs)
              object.node = "flatten";
          }
          if (message.defer != null && message.hasOwnProperty("defer")) {
            object.defer = $root.Trace.QueryPlanNode.DeferNode.toObject(message.defer, options);
            if (options.oneofs)
              object.node = "defer";
          }
          if (message.condition != null && message.hasOwnProperty("condition")) {
            object.condition = $root.Trace.QueryPlanNode.ConditionNode.toObject(message.condition, options);
            if (options.oneofs)
              object.node = "condition";
          }
          return object;
        };
        QueryPlanNode.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
        };
        QueryPlanNode.SequenceNode = function() {
          function SequenceNode(properties) {
            this.nodes = [];
            if (properties) {
              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          SequenceNode.prototype.nodes = $util.emptyArray;
          SequenceNode.create = function create(properties) {
            return new SequenceNode(properties);
          };
          SequenceNode.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.nodes != null && message.nodes.length)
              for (let i = 0; i < message.nodes.length; ++i)
                $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
            return writer;
          };
          SequenceNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          SequenceNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.SequenceNode();
            while (reader.pos < end) {
              let tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  if (!(message.nodes && message.nodes.length))
                    message.nodes = [];
                  message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          SequenceNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          SequenceNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.nodes != null && message.hasOwnProperty("nodes")) {
              if (!Array.isArray(message.nodes))
                return "nodes: array expected";
              for (let i = 0; i < message.nodes.length; ++i) {
                let error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);
                if (error)
                  return "nodes." + error;
              }
            }
            return null;
          };
          SequenceNode.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            let object = {};
            if (options.arrays || options.defaults)
              object.nodes = [];
            if (message.nodes && message.nodes.length) {
              object.nodes = [];
              for (let j2 = 0; j2 < message.nodes.length; ++j2)
                object.nodes[j2] = $root.Trace.QueryPlanNode.toObject(message.nodes[j2], options);
            }
            return object;
          };
          SequenceNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
          };
          return SequenceNode;
        }();
        QueryPlanNode.ParallelNode = function() {
          function ParallelNode(properties) {
            this.nodes = [];
            if (properties) {
              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          ParallelNode.prototype.nodes = $util.emptyArray;
          ParallelNode.create = function create(properties) {
            return new ParallelNode(properties);
          };
          ParallelNode.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.nodes != null && message.nodes.length)
              for (let i = 0; i < message.nodes.length; ++i)
                $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
            return writer;
          };
          ParallelNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          ParallelNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ParallelNode();
            while (reader.pos < end) {
              let tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  if (!(message.nodes && message.nodes.length))
                    message.nodes = [];
                  message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          ParallelNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          ParallelNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.nodes != null && message.hasOwnProperty("nodes")) {
              if (!Array.isArray(message.nodes))
                return "nodes: array expected";
              for (let i = 0; i < message.nodes.length; ++i) {
                let error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);
                if (error)
                  return "nodes." + error;
              }
            }
            return null;
          };
          ParallelNode.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            let object = {};
            if (options.arrays || options.defaults)
              object.nodes = [];
            if (message.nodes && message.nodes.length) {
              object.nodes = [];
              for (let j2 = 0; j2 < message.nodes.length; ++j2)
                object.nodes[j2] = $root.Trace.QueryPlanNode.toObject(message.nodes[j2], options);
            }
            return object;
          };
          ParallelNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
          };
          return ParallelNode;
        }();
        QueryPlanNode.FetchNode = function() {
          function FetchNode(properties) {
            if (properties) {
              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          FetchNode.prototype.serviceName = "";
          FetchNode.prototype.traceParsingFailed = false;
          FetchNode.prototype.trace = null;
          FetchNode.prototype.sentTimeOffset = 0;
          FetchNode.prototype.sentTime = null;
          FetchNode.prototype.receivedTime = null;
          FetchNode.create = function create(properties) {
            return new FetchNode(properties);
          };
          FetchNode.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
              writer.uint32(
                /* id 1, wireType 2 =*/
                10
              ).string(message.serviceName);
            if (message.traceParsingFailed != null && Object.hasOwnProperty.call(message, "traceParsingFailed"))
              writer.uint32(
                /* id 2, wireType 0 =*/
                16
              ).bool(message.traceParsingFailed);
            if (message.trace != null && Object.hasOwnProperty.call(message, "trace"))
              $root.Trace.encode(message.trace, writer.uint32(
                /* id 3, wireType 2 =*/
                26
              ).fork()).ldelim();
            if (message.sentTimeOffset != null && Object.hasOwnProperty.call(message, "sentTimeOffset"))
              writer.uint32(
                /* id 4, wireType 0 =*/
                32
              ).uint64(message.sentTimeOffset);
            if (message.sentTime != null && Object.hasOwnProperty.call(message, "sentTime"))
              $root.google.protobuf.Timestamp.encode(message.sentTime, writer.uint32(
                /* id 5, wireType 2 =*/
                42
              ).fork()).ldelim();
            if (message.receivedTime != null && Object.hasOwnProperty.call(message, "receivedTime"))
              $root.google.protobuf.Timestamp.encode(message.receivedTime, writer.uint32(
                /* id 6, wireType 2 =*/
                50
              ).fork()).ldelim();
            return writer;
          };
          FetchNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          FetchNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FetchNode();
            while (reader.pos < end) {
              let tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.serviceName = reader.string();
                  break;
                case 2:
                  message.traceParsingFailed = reader.bool();
                  break;
                case 3:
                  message.trace = $root.Trace.decode(reader, reader.uint32());
                  break;
                case 4:
                  message.sentTimeOffset = reader.uint64();
                  break;
                case 5:
                  message.sentTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                  break;
                case 6:
                  message.receivedTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          FetchNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          FetchNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.serviceName != null && message.hasOwnProperty("serviceName")) {
              if (!$util.isString(message.serviceName))
                return "serviceName: string expected";
            }
            if (message.traceParsingFailed != null && message.hasOwnProperty("traceParsingFailed")) {
              if (typeof message.traceParsingFailed !== "boolean")
                return "traceParsingFailed: boolean expected";
            }
            if (message.trace != null && message.hasOwnProperty("trace")) {
              let error = $root.Trace.verify(message.trace);
              if (error)
                return "trace." + error;
            }
            if (message.sentTimeOffset != null && message.hasOwnProperty("sentTimeOffset")) {
              if (!$util.isInteger(message.sentTimeOffset) && !(message.sentTimeOffset && $util.isInteger(message.sentTimeOffset.low) && $util.isInteger(message.sentTimeOffset.high)))
                return "sentTimeOffset: integer|Long expected";
            }
            if (message.sentTime != null && message.hasOwnProperty("sentTime")) {
              let error = $root.google.protobuf.Timestamp.verify(message.sentTime);
              if (error)
                return "sentTime." + error;
            }
            if (message.receivedTime != null && message.hasOwnProperty("receivedTime")) {
              let error = $root.google.protobuf.Timestamp.verify(message.receivedTime);
              if (error)
                return "receivedTime." + error;
            }
            return null;
          };
          FetchNode.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            let object = {};
            if (options.defaults) {
              object.serviceName = "";
              object.traceParsingFailed = false;
              object.trace = null;
              object.sentTimeOffset = 0;
              object.sentTime = null;
              object.receivedTime = null;
            }
            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
              object.serviceName = message.serviceName;
            if (message.traceParsingFailed != null && message.hasOwnProperty("traceParsingFailed"))
              object.traceParsingFailed = message.traceParsingFailed;
            if (message.trace != null && message.hasOwnProperty("trace"))
              object.trace = $root.Trace.toObject(message.trace, options);
            if (message.sentTimeOffset != null && message.hasOwnProperty("sentTimeOffset"))
              if (typeof message.sentTimeOffset === "number")
                object.sentTimeOffset = options.longs === String ? String(message.sentTimeOffset) : message.sentTimeOffset;
              else
                object.sentTimeOffset = options.longs === String ? $util.Long.prototype.toString.call(message.sentTimeOffset) : options.longs === Number ? new $util.LongBits(message.sentTimeOffset.low >>> 0, message.sentTimeOffset.high >>> 0).toNumber(true) : message.sentTimeOffset;
            if (message.sentTime != null && message.hasOwnProperty("sentTime"))
              object.sentTime = $root.google.protobuf.Timestamp.toObject(message.sentTime, options);
            if (message.receivedTime != null && message.hasOwnProperty("receivedTime"))
              object.receivedTime = $root.google.protobuf.Timestamp.toObject(message.receivedTime, options);
            return object;
          };
          FetchNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
          };
          return FetchNode;
        }();
        QueryPlanNode.FlattenNode = function() {
          function FlattenNode(properties) {
            this.responsePath = [];
            if (properties) {
              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          FlattenNode.prototype.responsePath = $util.emptyArray;
          FlattenNode.prototype.node = null;
          FlattenNode.create = function create(properties) {
            return new FlattenNode(properties);
          };
          FlattenNode.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.responsePath != null && message.responsePath.length)
              for (let i = 0; i < message.responsePath.length; ++i)
                $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.responsePath[i], writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
            if (message.node != null && Object.hasOwnProperty.call(message, "node"))
              $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(
                /* id 2, wireType 2 =*/
                18
              ).fork()).ldelim();
            return writer;
          };
          FlattenNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          FlattenNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FlattenNode();
            while (reader.pos < end) {
              let tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  if (!(message.responsePath && message.responsePath.length))
                    message.responsePath = [];
                  message.responsePath.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));
                  break;
                case 2:
                  message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          FlattenNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          FlattenNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.responsePath != null && message.hasOwnProperty("responsePath")) {
              if (!Array.isArray(message.responsePath))
                return "responsePath: array expected";
              for (let i = 0; i < message.responsePath.length; ++i) {
                let error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.responsePath[i]);
                if (error)
                  return "responsePath." + error;
              }
            }
            if (message.node != null && message.hasOwnProperty("node")) {
              let error = $root.Trace.QueryPlanNode.verify(message.node);
              if (error)
                return "node." + error;
            }
            return null;
          };
          FlattenNode.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            let object = {};
            if (options.arrays || options.defaults)
              object.responsePath = [];
            if (options.defaults)
              object.node = null;
            if (message.responsePath && message.responsePath.length) {
              object.responsePath = [];
              for (let j2 = 0; j2 < message.responsePath.length; ++j2)
                object.responsePath[j2] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.responsePath[j2], options);
            }
            if (message.node != null && message.hasOwnProperty("node"))
              object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);
            return object;
          };
          FlattenNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
          };
          return FlattenNode;
        }();
        QueryPlanNode.DeferNode = function() {
          function DeferNode(properties) {
            this.deferred = [];
            if (properties) {
              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          DeferNode.prototype.primary = null;
          DeferNode.prototype.deferred = $util.emptyArray;
          DeferNode.create = function create(properties) {
            return new DeferNode(properties);
          };
          DeferNode.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.primary != null && Object.hasOwnProperty.call(message, "primary"))
              $root.Trace.QueryPlanNode.DeferNodePrimary.encode(message.primary, writer.uint32(
                /* id 1, wireType 2 =*/
                10
              ).fork()).ldelim();
            if (message.deferred != null && message.deferred.length)
              for (let i = 0; i < message.deferred.length; ++i)
                $root.Trace.QueryPlanNode.DeferredNode.encode(message.deferred[i], writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).fork()).ldelim();
            return writer;
          };
          DeferNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          DeferNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferNode();
            while (reader.pos < end) {
              let tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.primary = $root.Trace.QueryPlanNode.DeferNodePrimary.decode(reader, reader.uint32());
                  break;
                case 2:
                  if (!(message.deferred && message.deferred.length))
                    message.deferred = [];
                  message.deferred.push($root.Trace.QueryPlanNode.DeferredNode.decode(reader, reader.uint32()));
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          DeferNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          DeferNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.primary != null && message.hasOwnProperty("primary")) {
              let error = $root.Trace.QueryPlanNode.DeferNodePrimary.verify(message.primary);
              if (error)
                return "primary." + error;
            }
            if (message.deferred != null && message.hasOwnProperty("deferred")) {
              if (!Array.isArray(message.deferred))
                return "deferred: array expected";
              for (let i = 0; i < message.deferred.length; ++i) {
                let error = $root.Trace.QueryPlanNode.DeferredNode.verify(message.deferred[i]);
                if (error)
                  return "deferred." + error;
              }
            }
            return null;
          };
          DeferNode.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            let object = {};
            if (options.arrays || options.defaults)
              object.deferred = [];
            if (options.defaults)
              object.primary = null;
            if (message.primary != null && message.hasOwnProperty("primary"))
              object.primary = $root.Trace.QueryPlanNode.DeferNodePrimary.toObject(message.primary, options);
            if (message.deferred && message.deferred.length) {
              object.deferred = [];
              for (let j2 = 0; j2 < message.deferred.length; ++j2)
                object.deferred[j2] = $root.Trace.QueryPlanNode.DeferredNode.toObject(message.deferred[j2], options);
            }
            return object;
          };
          DeferNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
          };
          return DeferNode;
        }();
        QueryPlanNode.ConditionNode = function() {
          function ConditionNode(properties) {
            if (properties) {
              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          ConditionNode.prototype.condition = "";
          ConditionNode.prototype.ifClause = null;
          ConditionNode.prototype.elseClause = null;
          ConditionNode.create = function create(properties) {
            return new ConditionNode(properties);
          };
          ConditionNode.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
              writer.uint32(
                /* id 1, wireType 2 =*/
                10
              ).string(message.condition);
            if (message.ifClause != null && Object.hasOwnProperty.call(message, "ifClause"))
              $root.Trace.QueryPlanNode.encode(message.ifClause, writer.uint32(
                /* id 2, wireType 2 =*/
                18
              ).fork()).ldelim();
            if (message.elseClause != null && Object.hasOwnProperty.call(message, "elseClause"))
              $root.Trace.QueryPlanNode.encode(message.elseClause, writer.uint32(
                /* id 3, wireType 2 =*/
                26
              ).fork()).ldelim();
            return writer;
          };
          ConditionNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          ConditionNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ConditionNode();
            while (reader.pos < end) {
              let tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.condition = reader.string();
                  break;
                case 2:
                  message.ifClause = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());
                  break;
                case 3:
                  message.elseClause = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          ConditionNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          ConditionNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.condition != null && message.hasOwnProperty("condition")) {
              if (!$util.isString(message.condition))
                return "condition: string expected";
            }
            if (message.ifClause != null && message.hasOwnProperty("ifClause")) {
              let error = $root.Trace.QueryPlanNode.verify(message.ifClause);
              if (error)
                return "ifClause." + error;
            }
            if (message.elseClause != null && message.hasOwnProperty("elseClause")) {
              let error = $root.Trace.QueryPlanNode.verify(message.elseClause);
              if (error)
                return "elseClause." + error;
            }
            return null;
          };
          ConditionNode.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            let object = {};
            if (options.defaults) {
              object.condition = "";
              object.ifClause = null;
              object.elseClause = null;
            }
            if (message.condition != null && message.hasOwnProperty("condition"))
              object.condition = message.condition;
            if (message.ifClause != null && message.hasOwnProperty("ifClause"))
              object.ifClause = $root.Trace.QueryPlanNode.toObject(message.ifClause, options);
            if (message.elseClause != null && message.hasOwnProperty("elseClause"))
              object.elseClause = $root.Trace.QueryPlanNode.toObject(message.elseClause, options);
            return object;
          };
          ConditionNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
          };
          return ConditionNode;
        }();
        QueryPlanNode.DeferNodePrimary = function() {
          function DeferNodePrimary(properties) {
            if (properties) {
              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          DeferNodePrimary.prototype.node = null;
          DeferNodePrimary.create = function create(properties) {
            return new DeferNodePrimary(properties);
          };
          DeferNodePrimary.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.node != null && Object.hasOwnProperty.call(message, "node"))
              $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(
                /* id 1, wireType 2 =*/
                10
              ).fork()).ldelim();
            return writer;
          };
          DeferNodePrimary.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          DeferNodePrimary.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferNodePrimary();
            while (reader.pos < end) {
              let tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          DeferNodePrimary.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          DeferNodePrimary.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.node != null && message.hasOwnProperty("node")) {
              let error = $root.Trace.QueryPlanNode.verify(message.node);
              if (error)
                return "node." + error;
            }
            return null;
          };
          DeferNodePrimary.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            let object = {};
            if (options.defaults)
              object.node = null;
            if (message.node != null && message.hasOwnProperty("node"))
              object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);
            return object;
          };
          DeferNodePrimary.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
          };
          return DeferNodePrimary;
        }();
        QueryPlanNode.DeferredNode = function() {
          function DeferredNode(properties) {
            this.depends = [];
            this.path = [];
            if (properties) {
              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          DeferredNode.prototype.depends = $util.emptyArray;
          DeferredNode.prototype.label = "";
          DeferredNode.prototype.path = $util.emptyArray;
          DeferredNode.prototype.node = null;
          DeferredNode.create = function create(properties) {
            return new DeferredNode(properties);
          };
          DeferredNode.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.depends != null && message.depends.length)
              for (let i = 0; i < message.depends.length; ++i)
                $root.Trace.QueryPlanNode.DeferredNodeDepends.encode(message.depends[i], writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
            if (message.label != null && Object.hasOwnProperty.call(message, "label"))
              writer.uint32(
                /* id 2, wireType 2 =*/
                18
              ).string(message.label);
            if (message.path != null && message.path.length)
              for (let i = 0; i < message.path.length; ++i)
                $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.path[i], writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).fork()).ldelim();
            if (message.node != null && Object.hasOwnProperty.call(message, "node"))
              $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(
                /* id 4, wireType 2 =*/
                34
              ).fork()).ldelim();
            return writer;
          };
          DeferredNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          DeferredNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferredNode();
            while (reader.pos < end) {
              let tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  if (!(message.depends && message.depends.length))
                    message.depends = [];
                  message.depends.push($root.Trace.QueryPlanNode.DeferredNodeDepends.decode(reader, reader.uint32()));
                  break;
                case 2:
                  message.label = reader.string();
                  break;
                case 3:
                  if (!(message.path && message.path.length))
                    message.path = [];
                  message.path.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));
                  break;
                case 4:
                  message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          DeferredNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          DeferredNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.depends != null && message.hasOwnProperty("depends")) {
              if (!Array.isArray(message.depends))
                return "depends: array expected";
              for (let i = 0; i < message.depends.length; ++i) {
                let error = $root.Trace.QueryPlanNode.DeferredNodeDepends.verify(message.depends[i]);
                if (error)
                  return "depends." + error;
              }
            }
            if (message.label != null && message.hasOwnProperty("label")) {
              if (!$util.isString(message.label))
                return "label: string expected";
            }
            if (message.path != null && message.hasOwnProperty("path")) {
              if (!Array.isArray(message.path))
                return "path: array expected";
              for (let i = 0; i < message.path.length; ++i) {
                let error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.path[i]);
                if (error)
                  return "path." + error;
              }
            }
            if (message.node != null && message.hasOwnProperty("node")) {
              let error = $root.Trace.QueryPlanNode.verify(message.node);
              if (error)
                return "node." + error;
            }
            return null;
          };
          DeferredNode.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            let object = {};
            if (options.arrays || options.defaults) {
              object.depends = [];
              object.path = [];
            }
            if (options.defaults) {
              object.label = "";
              object.node = null;
            }
            if (message.depends && message.depends.length) {
              object.depends = [];
              for (let j2 = 0; j2 < message.depends.length; ++j2)
                object.depends[j2] = $root.Trace.QueryPlanNode.DeferredNodeDepends.toObject(message.depends[j2], options);
            }
            if (message.label != null && message.hasOwnProperty("label"))
              object.label = message.label;
            if (message.path && message.path.length) {
              object.path = [];
              for (let j2 = 0; j2 < message.path.length; ++j2)
                object.path[j2] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.path[j2], options);
            }
            if (message.node != null && message.hasOwnProperty("node"))
              object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);
            return object;
          };
          DeferredNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
          };
          return DeferredNode;
        }();
        QueryPlanNode.DeferredNodeDepends = function() {
          function DeferredNodeDepends(properties) {
            if (properties) {
              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          DeferredNodeDepends.prototype.id = "";
          DeferredNodeDepends.prototype.deferLabel = "";
          DeferredNodeDepends.create = function create(properties) {
            return new DeferredNodeDepends(properties);
          };
          DeferredNodeDepends.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
              writer.uint32(
                /* id 1, wireType 2 =*/
                10
              ).string(message.id);
            if (message.deferLabel != null && Object.hasOwnProperty.call(message, "deferLabel"))
              writer.uint32(
                /* id 2, wireType 2 =*/
                18
              ).string(message.deferLabel);
            return writer;
          };
          DeferredNodeDepends.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          DeferredNodeDepends.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferredNodeDepends();
            while (reader.pos < end) {
              let tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.id = reader.string();
                  break;
                case 2:
                  message.deferLabel = reader.string();
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          DeferredNodeDepends.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          DeferredNodeDepends.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.id != null && message.hasOwnProperty("id")) {
              if (!$util.isString(message.id))
                return "id: string expected";
            }
            if (message.deferLabel != null && message.hasOwnProperty("deferLabel")) {
              if (!$util.isString(message.deferLabel))
                return "deferLabel: string expected";
            }
            return null;
          };
          DeferredNodeDepends.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            let object = {};
            if (options.defaults) {
              object.id = "";
              object.deferLabel = "";
            }
            if (message.id != null && message.hasOwnProperty("id"))
              object.id = message.id;
            if (message.deferLabel != null && message.hasOwnProperty("deferLabel"))
              object.deferLabel = message.deferLabel;
            return object;
          };
          DeferredNodeDepends.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
          };
          return DeferredNodeDepends;
        }();
        QueryPlanNode.ResponsePathElement = function() {
          function ResponsePathElement(properties) {
            if (properties) {
              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          ResponsePathElement.prototype.fieldName = "";
          ResponsePathElement.prototype.index = 0;
          let $oneOfFields2;
          Object.defineProperty(ResponsePathElement.prototype, "id", {
            get: $util.oneOfGetter($oneOfFields2 = ["fieldName", "index"]),
            set: $util.oneOfSetter($oneOfFields2)
          });
          ResponsePathElement.create = function create(properties) {
            return new ResponsePathElement(properties);
          };
          ResponsePathElement.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.fieldName != null && Object.hasOwnProperty.call(message, "fieldName"))
              writer.uint32(
                /* id 1, wireType 2 =*/
                10
              ).string(message.fieldName);
            if (message.index != null && Object.hasOwnProperty.call(message, "index"))
              writer.uint32(
                /* id 2, wireType 0 =*/
                16
              ).uint32(message.index);
            return writer;
          };
          ResponsePathElement.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          ResponsePathElement.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ResponsePathElement();
            while (reader.pos < end) {
              let tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.fieldName = reader.string();
                  break;
                case 2:
                  message.index = reader.uint32();
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          ResponsePathElement.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          ResponsePathElement.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            let properties = {};
            if (message.fieldName != null && message.hasOwnProperty("fieldName")) {
              properties.id = 1;
              if (!$util.isString(message.fieldName))
                return "fieldName: string expected";
            }
            if (message.index != null && message.hasOwnProperty("index")) {
              if (properties.id === 1)
                return "id: multiple values";
              properties.id = 1;
              if (!$util.isInteger(message.index))
                return "index: integer expected";
            }
            return null;
          };
          ResponsePathElement.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            let object = {};
            if (message.fieldName != null && message.hasOwnProperty("fieldName")) {
              object.fieldName = message.fieldName;
              if (options.oneofs)
                object.id = "fieldName";
            }
            if (message.index != null && message.hasOwnProperty("index")) {
              object.index = message.index;
              if (options.oneofs)
                object.id = "index";
            }
            return object;
          };
          ResponsePathElement.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
          };
          return ResponsePathElement;
        }();
        return QueryPlanNode;
      }();
      return Trace2;
    })();
    ReportHeader = $root.ReportHeader = (() => {
      function ReportHeader2(properties) {
        if (properties) {
          for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      ReportHeader2.prototype.graphRef = "";
      ReportHeader2.prototype.hostname = "";
      ReportHeader2.prototype.agentVersion = "";
      ReportHeader2.prototype.serviceVersion = "";
      ReportHeader2.prototype.runtimeVersion = "";
      ReportHeader2.prototype.uname = "";
      ReportHeader2.prototype.executableSchemaId = "";
      ReportHeader2.create = function create(properties) {
        return new ReportHeader2(properties);
      };
      ReportHeader2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer.create();
        if (message.hostname != null && Object.hasOwnProperty.call(message, "hostname"))
          writer.uint32(
            /* id 5, wireType 2 =*/
            42
          ).string(message.hostname);
        if (message.agentVersion != null && Object.hasOwnProperty.call(message, "agentVersion"))
          writer.uint32(
            /* id 6, wireType 2 =*/
            50
          ).string(message.agentVersion);
        if (message.serviceVersion != null && Object.hasOwnProperty.call(message, "serviceVersion"))
          writer.uint32(
            /* id 7, wireType 2 =*/
            58
          ).string(message.serviceVersion);
        if (message.runtimeVersion != null && Object.hasOwnProperty.call(message, "runtimeVersion"))
          writer.uint32(
            /* id 8, wireType 2 =*/
            66
          ).string(message.runtimeVersion);
        if (message.uname != null && Object.hasOwnProperty.call(message, "uname"))
          writer.uint32(
            /* id 9, wireType 2 =*/
            74
          ).string(message.uname);
        if (message.executableSchemaId != null && Object.hasOwnProperty.call(message, "executableSchemaId"))
          writer.uint32(
            /* id 11, wireType 2 =*/
            90
          ).string(message.executableSchemaId);
        if (message.graphRef != null && Object.hasOwnProperty.call(message, "graphRef"))
          writer.uint32(
            /* id 12, wireType 2 =*/
            98
          ).string(message.graphRef);
        return writer;
      };
      ReportHeader2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      ReportHeader2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
          reader = $Reader.create(reader);
        let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.ReportHeader();
        while (reader.pos < end) {
          let tag = reader.uint32();
          switch (tag >>> 3) {
            case 12:
              message.graphRef = reader.string();
              break;
            case 5:
              message.hostname = reader.string();
              break;
            case 6:
              message.agentVersion = reader.string();
              break;
            case 7:
              message.serviceVersion = reader.string();
              break;
            case 8:
              message.runtimeVersion = reader.string();
              break;
            case 9:
              message.uname = reader.string();
              break;
            case 11:
              message.executableSchemaId = reader.string();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      ReportHeader2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
          reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
      };
      ReportHeader2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.graphRef != null && message.hasOwnProperty("graphRef")) {
          if (!$util.isString(message.graphRef))
            return "graphRef: string expected";
        }
        if (message.hostname != null && message.hasOwnProperty("hostname")) {
          if (!$util.isString(message.hostname))
            return "hostname: string expected";
        }
        if (message.agentVersion != null && message.hasOwnProperty("agentVersion")) {
          if (!$util.isString(message.agentVersion))
            return "agentVersion: string expected";
        }
        if (message.serviceVersion != null && message.hasOwnProperty("serviceVersion")) {
          if (!$util.isString(message.serviceVersion))
            return "serviceVersion: string expected";
        }
        if (message.runtimeVersion != null && message.hasOwnProperty("runtimeVersion")) {
          if (!$util.isString(message.runtimeVersion))
            return "runtimeVersion: string expected";
        }
        if (message.uname != null && message.hasOwnProperty("uname")) {
          if (!$util.isString(message.uname))
            return "uname: string expected";
        }
        if (message.executableSchemaId != null && message.hasOwnProperty("executableSchemaId")) {
          if (!$util.isString(message.executableSchemaId))
            return "executableSchemaId: string expected";
        }
        return null;
      };
      ReportHeader2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        let object = {};
        if (options.defaults) {
          object.hostname = "";
          object.agentVersion = "";
          object.serviceVersion = "";
          object.runtimeVersion = "";
          object.uname = "";
          object.executableSchemaId = "";
          object.graphRef = "";
        }
        if (message.hostname != null && message.hasOwnProperty("hostname"))
          object.hostname = message.hostname;
        if (message.agentVersion != null && message.hasOwnProperty("agentVersion"))
          object.agentVersion = message.agentVersion;
        if (message.serviceVersion != null && message.hasOwnProperty("serviceVersion"))
          object.serviceVersion = message.serviceVersion;
        if (message.runtimeVersion != null && message.hasOwnProperty("runtimeVersion"))
          object.runtimeVersion = message.runtimeVersion;
        if (message.uname != null && message.hasOwnProperty("uname"))
          object.uname = message.uname;
        if (message.executableSchemaId != null && message.hasOwnProperty("executableSchemaId"))
          object.executableSchemaId = message.executableSchemaId;
        if (message.graphRef != null && message.hasOwnProperty("graphRef"))
          object.graphRef = message.graphRef;
        return object;
      };
      ReportHeader2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
      };
      return ReportHeader2;
    })();
    PathErrorStats = $root.PathErrorStats = (() => {
      function PathErrorStats2(properties) {
        this.children = {};
        if (properties) {
          for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      PathErrorStats2.prototype.children = $util.emptyObject;
      PathErrorStats2.prototype.errorsCount = 0;
      PathErrorStats2.prototype.requestsWithErrorsCount = 0;
      PathErrorStats2.create = function create(properties) {
        return new PathErrorStats2(properties);
      };
      PathErrorStats2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer.create();
        if (message.children != null && Object.hasOwnProperty.call(message, "children"))
          for (let keys = Object.keys(message.children), i = 0; i < keys.length; ++i) {
            writer.uint32(
              /* id 1, wireType 2 =*/
              10
            ).fork().uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(keys[i]);
            $root.PathErrorStats.encode(message.children[keys[i]], writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim().ldelim();
          }
        if (message.errorsCount != null && Object.hasOwnProperty.call(message, "errorsCount"))
          writer.uint32(
            /* id 4, wireType 0 =*/
            32
          ).uint64(message.errorsCount);
        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, "requestsWithErrorsCount"))
          writer.uint32(
            /* id 5, wireType 0 =*/
            40
          ).uint64(message.requestsWithErrorsCount);
        return writer;
      };
      PathErrorStats2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      PathErrorStats2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
          reader = $Reader.create(reader);
        let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.PathErrorStats(), key;
        while (reader.pos < end) {
          let tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              reader.skip().pos++;
              if (message.children === $util.emptyObject)
                message.children = {};
              key = reader.string();
              reader.pos++;
              message.children[key] = $root.PathErrorStats.decode(reader, reader.uint32());
              break;
            case 4:
              message.errorsCount = reader.uint64();
              break;
            case 5:
              message.requestsWithErrorsCount = reader.uint64();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      PathErrorStats2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
          reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
      };
      PathErrorStats2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.children != null && message.hasOwnProperty("children")) {
          if (!$util.isObject(message.children))
            return "children: object expected";
          let key = Object.keys(message.children);
          for (let i = 0; i < key.length; ++i) {
            let error = $root.PathErrorStats.verify(message.children[key[i]]);
            if (error)
              return "children." + error;
          }
        }
        if (message.errorsCount != null && message.hasOwnProperty("errorsCount")) {
          if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))
            return "errorsCount: integer|Long expected";
        }
        if (message.requestsWithErrorsCount != null && message.hasOwnProperty("requestsWithErrorsCount")) {
          if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))
            return "requestsWithErrorsCount: integer|Long expected";
        }
        return null;
      };
      PathErrorStats2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        let object = {};
        if (options.objects || options.defaults)
          object.children = {};
        if (options.defaults) {
          object.errorsCount = 0;
          object.requestsWithErrorsCount = 0;
        }
        let keys2;
        if (message.children && (keys2 = Object.keys(message.children)).length) {
          object.children = {};
          for (let j2 = 0; j2 < keys2.length; ++j2)
            object.children[keys2[j2]] = $root.PathErrorStats.toObject(message.children[keys2[j2]], options);
        }
        if (message.errorsCount != null && message.hasOwnProperty("errorsCount"))
          if (typeof message.errorsCount === "number")
            object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;
          else
            object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;
        if (message.requestsWithErrorsCount != null && message.hasOwnProperty("requestsWithErrorsCount"))
          if (typeof message.requestsWithErrorsCount === "number")
            object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;
          else
            object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;
        return object;
      };
      PathErrorStats2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
      };
      return PathErrorStats2;
    })();
    QueryLatencyStats = $root.QueryLatencyStats = (() => {
      function QueryLatencyStats2(properties) {
        this.latencyCount = [];
        this.cacheLatencyCount = [];
        this.publicCacheTtlCount = [];
        this.privateCacheTtlCount = [];
        if (properties) {
          for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      QueryLatencyStats2.prototype.latencyCount = $util.emptyArray;
      QueryLatencyStats2.prototype.requestCount = 0;
      QueryLatencyStats2.prototype.cacheHits = 0;
      QueryLatencyStats2.prototype.persistedQueryHits = 0;
      QueryLatencyStats2.prototype.persistedQueryMisses = 0;
      QueryLatencyStats2.prototype.cacheLatencyCount = $util.emptyArray;
      QueryLatencyStats2.prototype.rootErrorStats = null;
      QueryLatencyStats2.prototype.requestsWithErrorsCount = 0;
      QueryLatencyStats2.prototype.publicCacheTtlCount = $util.emptyArray;
      QueryLatencyStats2.prototype.privateCacheTtlCount = $util.emptyArray;
      QueryLatencyStats2.prototype.registeredOperationCount = 0;
      QueryLatencyStats2.prototype.forbiddenOperationCount = 0;
      QueryLatencyStats2.prototype.requestsWithoutFieldInstrumentation = 0;
      QueryLatencyStats2.create = function create(properties) {
        return new QueryLatencyStats2(properties);
      };
      QueryLatencyStats2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer.create();
        if (message.requestCount != null && Object.hasOwnProperty.call(message, "requestCount"))
          writer.uint32(
            /* id 2, wireType 0 =*/
            16
          ).uint64(message.requestCount);
        if (message.cacheHits != null && Object.hasOwnProperty.call(message, "cacheHits"))
          writer.uint32(
            /* id 3, wireType 0 =*/
            24
          ).uint64(message.cacheHits);
        if (message.persistedQueryHits != null && Object.hasOwnProperty.call(message, "persistedQueryHits"))
          writer.uint32(
            /* id 4, wireType 0 =*/
            32
          ).uint64(message.persistedQueryHits);
        if (message.persistedQueryMisses != null && Object.hasOwnProperty.call(message, "persistedQueryMisses"))
          writer.uint32(
            /* id 5, wireType 0 =*/
            40
          ).uint64(message.persistedQueryMisses);
        if (message.rootErrorStats != null && Object.hasOwnProperty.call(message, "rootErrorStats"))
          $root.PathErrorStats.encode(message.rootErrorStats, writer.uint32(
            /* id 7, wireType 2 =*/
            58
          ).fork()).ldelim();
        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, "requestsWithErrorsCount"))
          writer.uint32(
            /* id 8, wireType 0 =*/
            64
          ).uint64(message.requestsWithErrorsCount);
        if (message.registeredOperationCount != null && Object.hasOwnProperty.call(message, "registeredOperationCount"))
          writer.uint32(
            /* id 11, wireType 0 =*/
            88
          ).uint64(message.registeredOperationCount);
        if (message.forbiddenOperationCount != null && Object.hasOwnProperty.call(message, "forbiddenOperationCount"))
          writer.uint32(
            /* id 12, wireType 0 =*/
            96
          ).uint64(message.forbiddenOperationCount);
        let array13;
        if (message.latencyCount != null && message.latencyCount.toArray)
          array13 = message.latencyCount.toArray();
        else
          array13 = message.latencyCount;
        if (array13 != null && array13.length) {
          writer.uint32(
            /* id 13, wireType 2 =*/
            106
          ).fork();
          for (let i = 0; i < array13.length; ++i)
            writer.sint64(array13[i]);
          writer.ldelim();
        }
        let array14;
        if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray)
          array14 = message.cacheLatencyCount.toArray();
        else
          array14 = message.cacheLatencyCount;
        if (array14 != null && array14.length) {
          writer.uint32(
            /* id 14, wireType 2 =*/
            114
          ).fork();
          for (let i = 0; i < array14.length; ++i)
            writer.sint64(array14[i]);
          writer.ldelim();
        }
        let array15;
        if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray)
          array15 = message.publicCacheTtlCount.toArray();
        else
          array15 = message.publicCacheTtlCount;
        if (array15 != null && array15.length) {
          writer.uint32(
            /* id 15, wireType 2 =*/
            122
          ).fork();
          for (let i = 0; i < array15.length; ++i)
            writer.sint64(array15[i]);
          writer.ldelim();
        }
        let array16;
        if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray)
          array16 = message.privateCacheTtlCount.toArray();
        else
          array16 = message.privateCacheTtlCount;
        if (array16 != null && array16.length) {
          writer.uint32(
            /* id 16, wireType 2 =*/
            130
          ).fork();
          for (let i = 0; i < array16.length; ++i)
            writer.sint64(array16[i]);
          writer.ldelim();
        }
        if (message.requestsWithoutFieldInstrumentation != null && Object.hasOwnProperty.call(message, "requestsWithoutFieldInstrumentation"))
          writer.uint32(
            /* id 17, wireType 0 =*/
            136
          ).uint64(message.requestsWithoutFieldInstrumentation);
        return writer;
      };
      QueryLatencyStats2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      QueryLatencyStats2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
          reader = $Reader.create(reader);
        let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.QueryLatencyStats();
        while (reader.pos < end) {
          let tag = reader.uint32();
          switch (tag >>> 3) {
            case 13:
              if (!(message.latencyCount && message.latencyCount.length))
                message.latencyCount = [];
              if ((tag & 7) === 2) {
                let end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2)
                  message.latencyCount.push(reader.sint64());
              } else
                message.latencyCount.push(reader.sint64());
              break;
            case 2:
              message.requestCount = reader.uint64();
              break;
            case 3:
              message.cacheHits = reader.uint64();
              break;
            case 4:
              message.persistedQueryHits = reader.uint64();
              break;
            case 5:
              message.persistedQueryMisses = reader.uint64();
              break;
            case 14:
              if (!(message.cacheLatencyCount && message.cacheLatencyCount.length))
                message.cacheLatencyCount = [];
              if ((tag & 7) === 2) {
                let end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2)
                  message.cacheLatencyCount.push(reader.sint64());
              } else
                message.cacheLatencyCount.push(reader.sint64());
              break;
            case 7:
              message.rootErrorStats = $root.PathErrorStats.decode(reader, reader.uint32());
              break;
            case 8:
              message.requestsWithErrorsCount = reader.uint64();
              break;
            case 15:
              if (!(message.publicCacheTtlCount && message.publicCacheTtlCount.length))
                message.publicCacheTtlCount = [];
              if ((tag & 7) === 2) {
                let end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2)
                  message.publicCacheTtlCount.push(reader.sint64());
              } else
                message.publicCacheTtlCount.push(reader.sint64());
              break;
            case 16:
              if (!(message.privateCacheTtlCount && message.privateCacheTtlCount.length))
                message.privateCacheTtlCount = [];
              if ((tag & 7) === 2) {
                let end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2)
                  message.privateCacheTtlCount.push(reader.sint64());
              } else
                message.privateCacheTtlCount.push(reader.sint64());
              break;
            case 11:
              message.registeredOperationCount = reader.uint64();
              break;
            case 12:
              message.forbiddenOperationCount = reader.uint64();
              break;
            case 17:
              message.requestsWithoutFieldInstrumentation = reader.uint64();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      QueryLatencyStats2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
          reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
      };
      QueryLatencyStats2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.latencyCount != null && message.hasOwnProperty("latencyCount")) {
          let array13;
          if (message.latencyCount != null && message.latencyCount.toArray)
            array13 = message.latencyCount.toArray();
          else
            array13 = message.latencyCount;
          if (!Array.isArray(array13))
            return "latencyCount: array expected";
          for (let i = 0; i < array13.length; ++i)
            if (!$util.isInteger(array13[i]) && !(array13[i] && $util.isInteger(array13[i].low) && $util.isInteger(array13[i].high)))
              return "latencyCount: integer|Long[] expected";
        }
        if (message.requestCount != null && message.hasOwnProperty("requestCount")) {
          if (!$util.isInteger(message.requestCount) && !(message.requestCount && $util.isInteger(message.requestCount.low) && $util.isInteger(message.requestCount.high)))
            return "requestCount: integer|Long expected";
        }
        if (message.cacheHits != null && message.hasOwnProperty("cacheHits")) {
          if (!$util.isInteger(message.cacheHits) && !(message.cacheHits && $util.isInteger(message.cacheHits.low) && $util.isInteger(message.cacheHits.high)))
            return "cacheHits: integer|Long expected";
        }
        if (message.persistedQueryHits != null && message.hasOwnProperty("persistedQueryHits")) {
          if (!$util.isInteger(message.persistedQueryHits) && !(message.persistedQueryHits && $util.isInteger(message.persistedQueryHits.low) && $util.isInteger(message.persistedQueryHits.high)))
            return "persistedQueryHits: integer|Long expected";
        }
        if (message.persistedQueryMisses != null && message.hasOwnProperty("persistedQueryMisses")) {
          if (!$util.isInteger(message.persistedQueryMisses) && !(message.persistedQueryMisses && $util.isInteger(message.persistedQueryMisses.low) && $util.isInteger(message.persistedQueryMisses.high)))
            return "persistedQueryMisses: integer|Long expected";
        }
        if (message.cacheLatencyCount != null && message.hasOwnProperty("cacheLatencyCount")) {
          let array14;
          if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray)
            array14 = message.cacheLatencyCount.toArray();
          else
            array14 = message.cacheLatencyCount;
          if (!Array.isArray(array14))
            return "cacheLatencyCount: array expected";
          for (let i = 0; i < array14.length; ++i)
            if (!$util.isInteger(array14[i]) && !(array14[i] && $util.isInteger(array14[i].low) && $util.isInteger(array14[i].high)))
              return "cacheLatencyCount: integer|Long[] expected";
        }
        if (message.rootErrorStats != null && message.hasOwnProperty("rootErrorStats")) {
          let error = $root.PathErrorStats.verify(message.rootErrorStats);
          if (error)
            return "rootErrorStats." + error;
        }
        if (message.requestsWithErrorsCount != null && message.hasOwnProperty("requestsWithErrorsCount")) {
          if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))
            return "requestsWithErrorsCount: integer|Long expected";
        }
        if (message.publicCacheTtlCount != null && message.hasOwnProperty("publicCacheTtlCount")) {
          let array15;
          if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray)
            array15 = message.publicCacheTtlCount.toArray();
          else
            array15 = message.publicCacheTtlCount;
          if (!Array.isArray(array15))
            return "publicCacheTtlCount: array expected";
          for (let i = 0; i < array15.length; ++i)
            if (!$util.isInteger(array15[i]) && !(array15[i] && $util.isInteger(array15[i].low) && $util.isInteger(array15[i].high)))
              return "publicCacheTtlCount: integer|Long[] expected";
        }
        if (message.privateCacheTtlCount != null && message.hasOwnProperty("privateCacheTtlCount")) {
          let array16;
          if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray)
            array16 = message.privateCacheTtlCount.toArray();
          else
            array16 = message.privateCacheTtlCount;
          if (!Array.isArray(array16))
            return "privateCacheTtlCount: array expected";
          for (let i = 0; i < array16.length; ++i)
            if (!$util.isInteger(array16[i]) && !(array16[i] && $util.isInteger(array16[i].low) && $util.isInteger(array16[i].high)))
              return "privateCacheTtlCount: integer|Long[] expected";
        }
        if (message.registeredOperationCount != null && message.hasOwnProperty("registeredOperationCount")) {
          if (!$util.isInteger(message.registeredOperationCount) && !(message.registeredOperationCount && $util.isInteger(message.registeredOperationCount.low) && $util.isInteger(message.registeredOperationCount.high)))
            return "registeredOperationCount: integer|Long expected";
        }
        if (message.forbiddenOperationCount != null && message.hasOwnProperty("forbiddenOperationCount")) {
          if (!$util.isInteger(message.forbiddenOperationCount) && !(message.forbiddenOperationCount && $util.isInteger(message.forbiddenOperationCount.low) && $util.isInteger(message.forbiddenOperationCount.high)))
            return "forbiddenOperationCount: integer|Long expected";
        }
        if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty("requestsWithoutFieldInstrumentation")) {
          if (!$util.isInteger(message.requestsWithoutFieldInstrumentation) && !(message.requestsWithoutFieldInstrumentation && $util.isInteger(message.requestsWithoutFieldInstrumentation.low) && $util.isInteger(message.requestsWithoutFieldInstrumentation.high)))
            return "requestsWithoutFieldInstrumentation: integer|Long expected";
        }
        return null;
      };
      QueryLatencyStats2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        let object = {};
        if (options.arrays || options.defaults) {
          object.latencyCount = [];
          object.cacheLatencyCount = [];
          object.publicCacheTtlCount = [];
          object.privateCacheTtlCount = [];
        }
        if (options.defaults) {
          object.requestCount = 0;
          object.cacheHits = 0;
          object.persistedQueryHits = 0;
          object.persistedQueryMisses = 0;
          object.rootErrorStats = null;
          object.requestsWithErrorsCount = 0;
          object.registeredOperationCount = 0;
          object.forbiddenOperationCount = 0;
          object.requestsWithoutFieldInstrumentation = 0;
        }
        if (message.requestCount != null && message.hasOwnProperty("requestCount"))
          if (typeof message.requestCount === "number")
            object.requestCount = options.longs === String ? String(message.requestCount) : message.requestCount;
          else
            object.requestCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestCount) : options.longs === Number ? new $util.LongBits(message.requestCount.low >>> 0, message.requestCount.high >>> 0).toNumber(true) : message.requestCount;
        if (message.cacheHits != null && message.hasOwnProperty("cacheHits"))
          if (typeof message.cacheHits === "number")
            object.cacheHits = options.longs === String ? String(message.cacheHits) : message.cacheHits;
          else
            object.cacheHits = options.longs === String ? $util.Long.prototype.toString.call(message.cacheHits) : options.longs === Number ? new $util.LongBits(message.cacheHits.low >>> 0, message.cacheHits.high >>> 0).toNumber(true) : message.cacheHits;
        if (message.persistedQueryHits != null && message.hasOwnProperty("persistedQueryHits"))
          if (typeof message.persistedQueryHits === "number")
            object.persistedQueryHits = options.longs === String ? String(message.persistedQueryHits) : message.persistedQueryHits;
          else
            object.persistedQueryHits = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryHits) : options.longs === Number ? new $util.LongBits(message.persistedQueryHits.low >>> 0, message.persistedQueryHits.high >>> 0).toNumber(true) : message.persistedQueryHits;
        if (message.persistedQueryMisses != null && message.hasOwnProperty("persistedQueryMisses"))
          if (typeof message.persistedQueryMisses === "number")
            object.persistedQueryMisses = options.longs === String ? String(message.persistedQueryMisses) : message.persistedQueryMisses;
          else
            object.persistedQueryMisses = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryMisses) : options.longs === Number ? new $util.LongBits(message.persistedQueryMisses.low >>> 0, message.persistedQueryMisses.high >>> 0).toNumber(true) : message.persistedQueryMisses;
        if (message.rootErrorStats != null && message.hasOwnProperty("rootErrorStats"))
          object.rootErrorStats = $root.PathErrorStats.toObject(message.rootErrorStats, options);
        if (message.requestsWithErrorsCount != null && message.hasOwnProperty("requestsWithErrorsCount"))
          if (typeof message.requestsWithErrorsCount === "number")
            object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;
          else
            object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;
        if (message.registeredOperationCount != null && message.hasOwnProperty("registeredOperationCount"))
          if (typeof message.registeredOperationCount === "number")
            object.registeredOperationCount = options.longs === String ? String(message.registeredOperationCount) : message.registeredOperationCount;
          else
            object.registeredOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.registeredOperationCount) : options.longs === Number ? new $util.LongBits(message.registeredOperationCount.low >>> 0, message.registeredOperationCount.high >>> 0).toNumber(true) : message.registeredOperationCount;
        if (message.forbiddenOperationCount != null && message.hasOwnProperty("forbiddenOperationCount"))
          if (typeof message.forbiddenOperationCount === "number")
            object.forbiddenOperationCount = options.longs === String ? String(message.forbiddenOperationCount) : message.forbiddenOperationCount;
          else
            object.forbiddenOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.forbiddenOperationCount) : options.longs === Number ? new $util.LongBits(message.forbiddenOperationCount.low >>> 0, message.forbiddenOperationCount.high >>> 0).toNumber(true) : message.forbiddenOperationCount;
        if (message.latencyCount && message.latencyCount.length) {
          object.latencyCount = [];
          for (let j2 = 0; j2 < message.latencyCount.length; ++j2)
            if (typeof message.latencyCount[j2] === "number")
              object.latencyCount[j2] = options.longs === String ? String(message.latencyCount[j2]) : message.latencyCount[j2];
            else
              object.latencyCount[j2] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j2]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j2].low >>> 0, message.latencyCount[j2].high >>> 0).toNumber() : message.latencyCount[j2];
        }
        if (message.cacheLatencyCount && message.cacheLatencyCount.length) {
          object.cacheLatencyCount = [];
          for (let j2 = 0; j2 < message.cacheLatencyCount.length; ++j2)
            if (typeof message.cacheLatencyCount[j2] === "number")
              object.cacheLatencyCount[j2] = options.longs === String ? String(message.cacheLatencyCount[j2]) : message.cacheLatencyCount[j2];
            else
              object.cacheLatencyCount[j2] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheLatencyCount[j2]) : options.longs === Number ? new $util.LongBits(message.cacheLatencyCount[j2].low >>> 0, message.cacheLatencyCount[j2].high >>> 0).toNumber() : message.cacheLatencyCount[j2];
        }
        if (message.publicCacheTtlCount && message.publicCacheTtlCount.length) {
          object.publicCacheTtlCount = [];
          for (let j2 = 0; j2 < message.publicCacheTtlCount.length; ++j2)
            if (typeof message.publicCacheTtlCount[j2] === "number")
              object.publicCacheTtlCount[j2] = options.longs === String ? String(message.publicCacheTtlCount[j2]) : message.publicCacheTtlCount[j2];
            else
              object.publicCacheTtlCount[j2] = options.longs === String ? $util.Long.prototype.toString.call(message.publicCacheTtlCount[j2]) : options.longs === Number ? new $util.LongBits(message.publicCacheTtlCount[j2].low >>> 0, message.publicCacheTtlCount[j2].high >>> 0).toNumber() : message.publicCacheTtlCount[j2];
        }
        if (message.privateCacheTtlCount && message.privateCacheTtlCount.length) {
          object.privateCacheTtlCount = [];
          for (let j2 = 0; j2 < message.privateCacheTtlCount.length; ++j2)
            if (typeof message.privateCacheTtlCount[j2] === "number")
              object.privateCacheTtlCount[j2] = options.longs === String ? String(message.privateCacheTtlCount[j2]) : message.privateCacheTtlCount[j2];
            else
              object.privateCacheTtlCount[j2] = options.longs === String ? $util.Long.prototype.toString.call(message.privateCacheTtlCount[j2]) : options.longs === Number ? new $util.LongBits(message.privateCacheTtlCount[j2].low >>> 0, message.privateCacheTtlCount[j2].high >>> 0).toNumber() : message.privateCacheTtlCount[j2];
        }
        if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty("requestsWithoutFieldInstrumentation"))
          if (typeof message.requestsWithoutFieldInstrumentation === "number")
            object.requestsWithoutFieldInstrumentation = options.longs === String ? String(message.requestsWithoutFieldInstrumentation) : message.requestsWithoutFieldInstrumentation;
          else
            object.requestsWithoutFieldInstrumentation = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithoutFieldInstrumentation) : options.longs === Number ? new $util.LongBits(message.requestsWithoutFieldInstrumentation.low >>> 0, message.requestsWithoutFieldInstrumentation.high >>> 0).toNumber(true) : message.requestsWithoutFieldInstrumentation;
        return object;
      };
      QueryLatencyStats2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
      };
      return QueryLatencyStats2;
    })();
    StatsContext = $root.StatsContext = (() => {
      function StatsContext2(properties) {
        if (properties) {
          for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      StatsContext2.prototype.clientName = "";
      StatsContext2.prototype.clientVersion = "";
      StatsContext2.create = function create(properties) {
        return new StatsContext2(properties);
      };
      StatsContext2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer.create();
        if (message.clientName != null && Object.hasOwnProperty.call(message, "clientName"))
          writer.uint32(
            /* id 2, wireType 2 =*/
            18
          ).string(message.clientName);
        if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
          writer.uint32(
            /* id 3, wireType 2 =*/
            26
          ).string(message.clientVersion);
        return writer;
      };
      StatsContext2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      StatsContext2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
          reader = $Reader.create(reader);
        let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.StatsContext();
        while (reader.pos < end) {
          let tag = reader.uint32();
          switch (tag >>> 3) {
            case 2:
              message.clientName = reader.string();
              break;
            case 3:
              message.clientVersion = reader.string();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      StatsContext2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
          reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
      };
      StatsContext2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.clientName != null && message.hasOwnProperty("clientName")) {
          if (!$util.isString(message.clientName))
            return "clientName: string expected";
        }
        if (message.clientVersion != null && message.hasOwnProperty("clientVersion")) {
          if (!$util.isString(message.clientVersion))
            return "clientVersion: string expected";
        }
        return null;
      };
      StatsContext2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        let object = {};
        if (options.defaults) {
          object.clientName = "";
          object.clientVersion = "";
        }
        if (message.clientName != null && message.hasOwnProperty("clientName"))
          object.clientName = message.clientName;
        if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
          object.clientVersion = message.clientVersion;
        return object;
      };
      StatsContext2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
      };
      return StatsContext2;
    })();
    ContextualizedQueryLatencyStats = $root.ContextualizedQueryLatencyStats = (() => {
      function ContextualizedQueryLatencyStats2(properties) {
        if (properties) {
          for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      ContextualizedQueryLatencyStats2.prototype.queryLatencyStats = null;
      ContextualizedQueryLatencyStats2.prototype.context = null;
      ContextualizedQueryLatencyStats2.create = function create(properties) {
        return new ContextualizedQueryLatencyStats2(properties);
      };
      ContextualizedQueryLatencyStats2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer.create();
        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, "queryLatencyStats"))
          $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(
            /* id 1, wireType 2 =*/
            10
          ).fork()).ldelim();
        if (message.context != null && Object.hasOwnProperty.call(message, "context"))
          $root.StatsContext.encode(message.context, writer.uint32(
            /* id 2, wireType 2 =*/
            18
          ).fork()).ldelim();
        return writer;
      };
      ContextualizedQueryLatencyStats2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      ContextualizedQueryLatencyStats2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
          reader = $Reader.create(reader);
        let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.ContextualizedQueryLatencyStats();
        while (reader.pos < end) {
          let tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());
              break;
            case 2:
              message.context = $root.StatsContext.decode(reader, reader.uint32());
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      ContextualizedQueryLatencyStats2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
          reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
      };
      ContextualizedQueryLatencyStats2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.queryLatencyStats != null && message.hasOwnProperty("queryLatencyStats")) {
          let error = $root.QueryLatencyStats.verify(message.queryLatencyStats);
          if (error)
            return "queryLatencyStats." + error;
        }
        if (message.context != null && message.hasOwnProperty("context")) {
          let error = $root.StatsContext.verify(message.context);
          if (error)
            return "context." + error;
        }
        return null;
      };
      ContextualizedQueryLatencyStats2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        let object = {};
        if (options.defaults) {
          object.queryLatencyStats = null;
          object.context = null;
        }
        if (message.queryLatencyStats != null && message.hasOwnProperty("queryLatencyStats"))
          object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);
        if (message.context != null && message.hasOwnProperty("context"))
          object.context = $root.StatsContext.toObject(message.context, options);
        return object;
      };
      ContextualizedQueryLatencyStats2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
      };
      return ContextualizedQueryLatencyStats2;
    })();
    ContextualizedTypeStats = $root.ContextualizedTypeStats = (() => {
      function ContextualizedTypeStats2(properties) {
        this.perTypeStat = {};
        if (properties) {
          for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      ContextualizedTypeStats2.prototype.context = null;
      ContextualizedTypeStats2.prototype.perTypeStat = $util.emptyObject;
      ContextualizedTypeStats2.create = function create(properties) {
        return new ContextualizedTypeStats2(properties);
      };
      ContextualizedTypeStats2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer.create();
        if (message.context != null && Object.hasOwnProperty.call(message, "context"))
          $root.StatsContext.encode(message.context, writer.uint32(
            /* id 1, wireType 2 =*/
            10
          ).fork()).ldelim();
        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, "perTypeStat"))
          for (let keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {
            writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork().uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(keys[i]);
            $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim().ldelim();
          }
        return writer;
      };
      ContextualizedTypeStats2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      ContextualizedTypeStats2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
          reader = $Reader.create(reader);
        let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.ContextualizedTypeStats(), key;
        while (reader.pos < end) {
          let tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              message.context = $root.StatsContext.decode(reader, reader.uint32());
              break;
            case 2:
              reader.skip().pos++;
              if (message.perTypeStat === $util.emptyObject)
                message.perTypeStat = {};
              key = reader.string();
              reader.pos++;
              message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      ContextualizedTypeStats2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
          reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
      };
      ContextualizedTypeStats2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.context != null && message.hasOwnProperty("context")) {
          let error = $root.StatsContext.verify(message.context);
          if (error)
            return "context." + error;
        }
        if (message.perTypeStat != null && message.hasOwnProperty("perTypeStat")) {
          if (!$util.isObject(message.perTypeStat))
            return "perTypeStat: object expected";
          let key = Object.keys(message.perTypeStat);
          for (let i = 0; i < key.length; ++i) {
            let error = $root.TypeStat.verify(message.perTypeStat[key[i]]);
            if (error)
              return "perTypeStat." + error;
          }
        }
        return null;
      };
      ContextualizedTypeStats2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        let object = {};
        if (options.objects || options.defaults)
          object.perTypeStat = {};
        if (options.defaults)
          object.context = null;
        if (message.context != null && message.hasOwnProperty("context"))
          object.context = $root.StatsContext.toObject(message.context, options);
        let keys2;
        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {
          object.perTypeStat = {};
          for (let j2 = 0; j2 < keys2.length; ++j2)
            object.perTypeStat[keys2[j2]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j2]], options);
        }
        return object;
      };
      ContextualizedTypeStats2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
      };
      return ContextualizedTypeStats2;
    })();
    FieldStat = $root.FieldStat = (() => {
      function FieldStat2(properties) {
        this.latencyCount = [];
        if (properties) {
          for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      FieldStat2.prototype.returnType = "";
      FieldStat2.prototype.errorsCount = 0;
      FieldStat2.prototype.observedExecutionCount = 0;
      FieldStat2.prototype.estimatedExecutionCount = 0;
      FieldStat2.prototype.requestsWithErrorsCount = 0;
      FieldStat2.prototype.latencyCount = $util.emptyArray;
      FieldStat2.create = function create(properties) {
        return new FieldStat2(properties);
      };
      FieldStat2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer.create();
        if (message.returnType != null && Object.hasOwnProperty.call(message, "returnType"))
          writer.uint32(
            /* id 3, wireType 2 =*/
            26
          ).string(message.returnType);
        if (message.errorsCount != null && Object.hasOwnProperty.call(message, "errorsCount"))
          writer.uint32(
            /* id 4, wireType 0 =*/
            32
          ).uint64(message.errorsCount);
        if (message.observedExecutionCount != null && Object.hasOwnProperty.call(message, "observedExecutionCount"))
          writer.uint32(
            /* id 5, wireType 0 =*/
            40
          ).uint64(message.observedExecutionCount);
        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, "requestsWithErrorsCount"))
          writer.uint32(
            /* id 6, wireType 0 =*/
            48
          ).uint64(message.requestsWithErrorsCount);
        let array9;
        if (message.latencyCount != null && message.latencyCount.toArray)
          array9 = message.latencyCount.toArray();
        else
          array9 = message.latencyCount;
        if (array9 != null && array9.length) {
          writer.uint32(
            /* id 9, wireType 2 =*/
            74
          ).fork();
          for (let i = 0; i < array9.length; ++i)
            writer.sint64(array9[i]);
          writer.ldelim();
        }
        if (message.estimatedExecutionCount != null && Object.hasOwnProperty.call(message, "estimatedExecutionCount"))
          writer.uint32(
            /* id 10, wireType 0 =*/
            80
          ).uint64(message.estimatedExecutionCount);
        return writer;
      };
      FieldStat2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      FieldStat2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
          reader = $Reader.create(reader);
        let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.FieldStat();
        while (reader.pos < end) {
          let tag = reader.uint32();
          switch (tag >>> 3) {
            case 3:
              message.returnType = reader.string();
              break;
            case 4:
              message.errorsCount = reader.uint64();
              break;
            case 5:
              message.observedExecutionCount = reader.uint64();
              break;
            case 10:
              message.estimatedExecutionCount = reader.uint64();
              break;
            case 6:
              message.requestsWithErrorsCount = reader.uint64();
              break;
            case 9:
              if (!(message.latencyCount && message.latencyCount.length))
                message.latencyCount = [];
              if ((tag & 7) === 2) {
                let end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2)
                  message.latencyCount.push(reader.sint64());
              } else
                message.latencyCount.push(reader.sint64());
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      FieldStat2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
          reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
      };
      FieldStat2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.returnType != null && message.hasOwnProperty("returnType")) {
          if (!$util.isString(message.returnType))
            return "returnType: string expected";
        }
        if (message.errorsCount != null && message.hasOwnProperty("errorsCount")) {
          if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))
            return "errorsCount: integer|Long expected";
        }
        if (message.observedExecutionCount != null && message.hasOwnProperty("observedExecutionCount")) {
          if (!$util.isInteger(message.observedExecutionCount) && !(message.observedExecutionCount && $util.isInteger(message.observedExecutionCount.low) && $util.isInteger(message.observedExecutionCount.high)))
            return "observedExecutionCount: integer|Long expected";
        }
        if (message.estimatedExecutionCount != null && message.hasOwnProperty("estimatedExecutionCount")) {
          if (!$util.isInteger(message.estimatedExecutionCount) && !(message.estimatedExecutionCount && $util.isInteger(message.estimatedExecutionCount.low) && $util.isInteger(message.estimatedExecutionCount.high)))
            return "estimatedExecutionCount: integer|Long expected";
        }
        if (message.requestsWithErrorsCount != null && message.hasOwnProperty("requestsWithErrorsCount")) {
          if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))
            return "requestsWithErrorsCount: integer|Long expected";
        }
        if (message.latencyCount != null && message.hasOwnProperty("latencyCount")) {
          let array9;
          if (message.latencyCount != null && message.latencyCount.toArray)
            array9 = message.latencyCount.toArray();
          else
            array9 = message.latencyCount;
          if (!Array.isArray(array9))
            return "latencyCount: array expected";
          for (let i = 0; i < array9.length; ++i)
            if (!$util.isInteger(array9[i]) && !(array9[i] && $util.isInteger(array9[i].low) && $util.isInteger(array9[i].high)))
              return "latencyCount: integer|Long[] expected";
        }
        return null;
      };
      FieldStat2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        let object = {};
        if (options.arrays || options.defaults)
          object.latencyCount = [];
        if (options.defaults) {
          object.returnType = "";
          object.errorsCount = 0;
          object.observedExecutionCount = 0;
          object.requestsWithErrorsCount = 0;
          object.estimatedExecutionCount = 0;
        }
        if (message.returnType != null && message.hasOwnProperty("returnType"))
          object.returnType = message.returnType;
        if (message.errorsCount != null && message.hasOwnProperty("errorsCount"))
          if (typeof message.errorsCount === "number")
            object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;
          else
            object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;
        if (message.observedExecutionCount != null && message.hasOwnProperty("observedExecutionCount"))
          if (typeof message.observedExecutionCount === "number")
            object.observedExecutionCount = options.longs === String ? String(message.observedExecutionCount) : message.observedExecutionCount;
          else
            object.observedExecutionCount = options.longs === String ? $util.Long.prototype.toString.call(message.observedExecutionCount) : options.longs === Number ? new $util.LongBits(message.observedExecutionCount.low >>> 0, message.observedExecutionCount.high >>> 0).toNumber(true) : message.observedExecutionCount;
        if (message.requestsWithErrorsCount != null && message.hasOwnProperty("requestsWithErrorsCount"))
          if (typeof message.requestsWithErrorsCount === "number")
            object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;
          else
            object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;
        if (message.latencyCount && message.latencyCount.length) {
          object.latencyCount = [];
          for (let j2 = 0; j2 < message.latencyCount.length; ++j2)
            if (typeof message.latencyCount[j2] === "number")
              object.latencyCount[j2] = options.longs === String ? String(message.latencyCount[j2]) : message.latencyCount[j2];
            else
              object.latencyCount[j2] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j2]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j2].low >>> 0, message.latencyCount[j2].high >>> 0).toNumber() : message.latencyCount[j2];
        }
        if (message.estimatedExecutionCount != null && message.hasOwnProperty("estimatedExecutionCount"))
          if (typeof message.estimatedExecutionCount === "number")
            object.estimatedExecutionCount = options.longs === String ? String(message.estimatedExecutionCount) : message.estimatedExecutionCount;
          else
            object.estimatedExecutionCount = options.longs === String ? $util.Long.prototype.toString.call(message.estimatedExecutionCount) : options.longs === Number ? new $util.LongBits(message.estimatedExecutionCount.low >>> 0, message.estimatedExecutionCount.high >>> 0).toNumber(true) : message.estimatedExecutionCount;
        return object;
      };
      FieldStat2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
      };
      return FieldStat2;
    })();
    TypeStat = $root.TypeStat = (() => {
      function TypeStat2(properties) {
        this.perFieldStat = {};
        if (properties) {
          for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      TypeStat2.prototype.perFieldStat = $util.emptyObject;
      TypeStat2.create = function create(properties) {
        return new TypeStat2(properties);
      };
      TypeStat2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer.create();
        if (message.perFieldStat != null && Object.hasOwnProperty.call(message, "perFieldStat"))
          for (let keys = Object.keys(message.perFieldStat), i = 0; i < keys.length; ++i) {
            writer.uint32(
              /* id 3, wireType 2 =*/
              26
            ).fork().uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(keys[i]);
            $root.FieldStat.encode(message.perFieldStat[keys[i]], writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim().ldelim();
          }
        return writer;
      };
      TypeStat2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      TypeStat2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
          reader = $Reader.create(reader);
        let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.TypeStat(), key;
        while (reader.pos < end) {
          let tag = reader.uint32();
          switch (tag >>> 3) {
            case 3:
              reader.skip().pos++;
              if (message.perFieldStat === $util.emptyObject)
                message.perFieldStat = {};
              key = reader.string();
              reader.pos++;
              message.perFieldStat[key] = $root.FieldStat.decode(reader, reader.uint32());
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      TypeStat2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
          reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
      };
      TypeStat2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.perFieldStat != null && message.hasOwnProperty("perFieldStat")) {
          if (!$util.isObject(message.perFieldStat))
            return "perFieldStat: object expected";
          let key = Object.keys(message.perFieldStat);
          for (let i = 0; i < key.length; ++i) {
            let error = $root.FieldStat.verify(message.perFieldStat[key[i]]);
            if (error)
              return "perFieldStat." + error;
          }
        }
        return null;
      };
      TypeStat2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        let object = {};
        if (options.objects || options.defaults)
          object.perFieldStat = {};
        let keys2;
        if (message.perFieldStat && (keys2 = Object.keys(message.perFieldStat)).length) {
          object.perFieldStat = {};
          for (let j2 = 0; j2 < keys2.length; ++j2)
            object.perFieldStat[keys2[j2]] = $root.FieldStat.toObject(message.perFieldStat[keys2[j2]], options);
        }
        return object;
      };
      TypeStat2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
      };
      return TypeStat2;
    })();
    ReferencedFieldsForType = $root.ReferencedFieldsForType = (() => {
      function ReferencedFieldsForType2(properties) {
        this.fieldNames = [];
        if (properties) {
          for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      ReferencedFieldsForType2.prototype.fieldNames = $util.emptyArray;
      ReferencedFieldsForType2.prototype.isInterface = false;
      ReferencedFieldsForType2.create = function create(properties) {
        return new ReferencedFieldsForType2(properties);
      };
      ReferencedFieldsForType2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer.create();
        if (message.fieldNames != null && message.fieldNames.length)
          for (let i = 0; i < message.fieldNames.length; ++i)
            writer.uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(message.fieldNames[i]);
        if (message.isInterface != null && Object.hasOwnProperty.call(message, "isInterface"))
          writer.uint32(
            /* id 2, wireType 0 =*/
            16
          ).bool(message.isInterface);
        return writer;
      };
      ReferencedFieldsForType2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      ReferencedFieldsForType2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
          reader = $Reader.create(reader);
        let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.ReferencedFieldsForType();
        while (reader.pos < end) {
          let tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              if (!(message.fieldNames && message.fieldNames.length))
                message.fieldNames = [];
              message.fieldNames.push(reader.string());
              break;
            case 2:
              message.isInterface = reader.bool();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      ReferencedFieldsForType2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
          reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
      };
      ReferencedFieldsForType2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.fieldNames != null && message.hasOwnProperty("fieldNames")) {
          if (!Array.isArray(message.fieldNames))
            return "fieldNames: array expected";
          for (let i = 0; i < message.fieldNames.length; ++i)
            if (!$util.isString(message.fieldNames[i]))
              return "fieldNames: string[] expected";
        }
        if (message.isInterface != null && message.hasOwnProperty("isInterface")) {
          if (typeof message.isInterface !== "boolean")
            return "isInterface: boolean expected";
        }
        return null;
      };
      ReferencedFieldsForType2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        let object = {};
        if (options.arrays || options.defaults)
          object.fieldNames = [];
        if (options.defaults)
          object.isInterface = false;
        if (message.fieldNames && message.fieldNames.length) {
          object.fieldNames = [];
          for (let j2 = 0; j2 < message.fieldNames.length; ++j2)
            object.fieldNames[j2] = message.fieldNames[j2];
        }
        if (message.isInterface != null && message.hasOwnProperty("isInterface"))
          object.isInterface = message.isInterface;
        return object;
      };
      ReferencedFieldsForType2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
      };
      return ReferencedFieldsForType2;
    })();
    Report = $root.Report = (() => {
      function Report2(properties) {
        this.tracesPerQuery = {};
        if (properties) {
          for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      Report2.prototype.header = null;
      Report2.prototype.tracesPerQuery = $util.emptyObject;
      Report2.prototype.endTime = null;
      Report2.prototype.operationCount = 0;
      Report2.prototype.tracesPreAggregated = false;
      Report2.create = function create(properties) {
        return new Report2(properties);
      };
      Report2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer.create();
        if (message.header != null && Object.hasOwnProperty.call(message, "header"))
          $root.ReportHeader.encode(message.header, writer.uint32(
            /* id 1, wireType 2 =*/
            10
          ).fork()).ldelim();
        if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
          $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(
            /* id 2, wireType 2 =*/
            18
          ).fork()).ldelim();
        if (message.tracesPerQuery != null && Object.hasOwnProperty.call(message, "tracesPerQuery"))
          for (let keys = Object.keys(message.tracesPerQuery), i = 0; i < keys.length; ++i) {
            writer.uint32(
              /* id 5, wireType 2 =*/
              42
            ).fork().uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(keys[i]);
            $root.TracesAndStats.encode(message.tracesPerQuery[keys[i]], writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim().ldelim();
          }
        if (message.operationCount != null && Object.hasOwnProperty.call(message, "operationCount"))
          writer.uint32(
            /* id 6, wireType 0 =*/
            48
          ).uint64(message.operationCount);
        if (message.tracesPreAggregated != null && Object.hasOwnProperty.call(message, "tracesPreAggregated"))
          writer.uint32(
            /* id 7, wireType 0 =*/
            56
          ).bool(message.tracesPreAggregated);
        return writer;
      };
      Report2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      Report2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
          reader = $Reader.create(reader);
        let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.Report(), key;
        while (reader.pos < end) {
          let tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              message.header = $root.ReportHeader.decode(reader, reader.uint32());
              break;
            case 5:
              reader.skip().pos++;
              if (message.tracesPerQuery === $util.emptyObject)
                message.tracesPerQuery = {};
              key = reader.string();
              reader.pos++;
              message.tracesPerQuery[key] = $root.TracesAndStats.decode(reader, reader.uint32());
              break;
            case 2:
              message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
              break;
            case 6:
              message.operationCount = reader.uint64();
              break;
            case 7:
              message.tracesPreAggregated = reader.bool();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      Report2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
          reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
      };
      Report2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.header != null && message.hasOwnProperty("header")) {
          let error = $root.ReportHeader.verify(message.header);
          if (error)
            return "header." + error;
        }
        if (message.tracesPerQuery != null && message.hasOwnProperty("tracesPerQuery")) {
          if (!$util.isObject(message.tracesPerQuery))
            return "tracesPerQuery: object expected";
          let key = Object.keys(message.tracesPerQuery);
          for (let i = 0; i < key.length; ++i) {
            let error = $root.TracesAndStats.verify(message.tracesPerQuery[key[i]]);
            if (error)
              return "tracesPerQuery." + error;
          }
        }
        if (message.endTime != null && message.hasOwnProperty("endTime")) {
          let error = $root.google.protobuf.Timestamp.verify(message.endTime);
          if (error)
            return "endTime." + error;
        }
        if (message.operationCount != null && message.hasOwnProperty("operationCount")) {
          if (!$util.isInteger(message.operationCount) && !(message.operationCount && $util.isInteger(message.operationCount.low) && $util.isInteger(message.operationCount.high)))
            return "operationCount: integer|Long expected";
        }
        if (message.tracesPreAggregated != null && message.hasOwnProperty("tracesPreAggregated")) {
          if (typeof message.tracesPreAggregated !== "boolean")
            return "tracesPreAggregated: boolean expected";
        }
        return null;
      };
      Report2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        let object = {};
        if (options.objects || options.defaults)
          object.tracesPerQuery = {};
        if (options.defaults) {
          object.header = null;
          object.endTime = null;
          object.operationCount = 0;
          object.tracesPreAggregated = false;
        }
        if (message.header != null && message.hasOwnProperty("header"))
          object.header = $root.ReportHeader.toObject(message.header, options);
        if (message.endTime != null && message.hasOwnProperty("endTime"))
          object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
        let keys2;
        if (message.tracesPerQuery && (keys2 = Object.keys(message.tracesPerQuery)).length) {
          object.tracesPerQuery = {};
          for (let j2 = 0; j2 < keys2.length; ++j2)
            object.tracesPerQuery[keys2[j2]] = $root.TracesAndStats.toObject(message.tracesPerQuery[keys2[j2]], options);
        }
        if (message.operationCount != null && message.hasOwnProperty("operationCount"))
          if (typeof message.operationCount === "number")
            object.operationCount = options.longs === String ? String(message.operationCount) : message.operationCount;
          else
            object.operationCount = options.longs === String ? $util.Long.prototype.toString.call(message.operationCount) : options.longs === Number ? new $util.LongBits(message.operationCount.low >>> 0, message.operationCount.high >>> 0).toNumber(true) : message.operationCount;
        if (message.tracesPreAggregated != null && message.hasOwnProperty("tracesPreAggregated"))
          object.tracesPreAggregated = message.tracesPreAggregated;
        return object;
      };
      Report2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
      };
      return Report2;
    })();
    ContextualizedStats = $root.ContextualizedStats = (() => {
      function ContextualizedStats2(properties) {
        this.perTypeStat = {};
        if (properties) {
          for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      ContextualizedStats2.prototype.context = null;
      ContextualizedStats2.prototype.queryLatencyStats = null;
      ContextualizedStats2.prototype.perTypeStat = $util.emptyObject;
      ContextualizedStats2.create = function create(properties) {
        return new ContextualizedStats2(properties);
      };
      ContextualizedStats2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer.create();
        if (message.context != null && Object.hasOwnProperty.call(message, "context"))
          $root.StatsContext.encode(message.context, writer.uint32(
            /* id 1, wireType 2 =*/
            10
          ).fork()).ldelim();
        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, "queryLatencyStats"))
          $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(
            /* id 2, wireType 2 =*/
            18
          ).fork()).ldelim();
        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, "perTypeStat"))
          for (let keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {
            writer.uint32(
              /* id 3, wireType 2 =*/
              26
            ).fork().uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(keys[i]);
            $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim().ldelim();
          }
        return writer;
      };
      ContextualizedStats2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      ContextualizedStats2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
          reader = $Reader.create(reader);
        let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.ContextualizedStats(), key;
        while (reader.pos < end) {
          let tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              message.context = $root.StatsContext.decode(reader, reader.uint32());
              break;
            case 2:
              message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());
              break;
            case 3:
              reader.skip().pos++;
              if (message.perTypeStat === $util.emptyObject)
                message.perTypeStat = {};
              key = reader.string();
              reader.pos++;
              message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      ContextualizedStats2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
          reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
      };
      ContextualizedStats2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.context != null && message.hasOwnProperty("context")) {
          let error = $root.StatsContext.verify(message.context);
          if (error)
            return "context." + error;
        }
        if (message.queryLatencyStats != null && message.hasOwnProperty("queryLatencyStats")) {
          let error = $root.QueryLatencyStats.verify(message.queryLatencyStats);
          if (error)
            return "queryLatencyStats." + error;
        }
        if (message.perTypeStat != null && message.hasOwnProperty("perTypeStat")) {
          if (!$util.isObject(message.perTypeStat))
            return "perTypeStat: object expected";
          let key = Object.keys(message.perTypeStat);
          for (let i = 0; i < key.length; ++i) {
            let error = $root.TypeStat.verify(message.perTypeStat[key[i]]);
            if (error)
              return "perTypeStat." + error;
          }
        }
        return null;
      };
      ContextualizedStats2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        let object = {};
        if (options.objects || options.defaults)
          object.perTypeStat = {};
        if (options.defaults) {
          object.context = null;
          object.queryLatencyStats = null;
        }
        if (message.context != null && message.hasOwnProperty("context"))
          object.context = $root.StatsContext.toObject(message.context, options);
        if (message.queryLatencyStats != null && message.hasOwnProperty("queryLatencyStats"))
          object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);
        let keys2;
        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {
          object.perTypeStat = {};
          for (let j2 = 0; j2 < keys2.length; ++j2)
            object.perTypeStat[keys2[j2]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j2]], options);
        }
        return object;
      };
      ContextualizedStats2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
      };
      return ContextualizedStats2;
    })();
    TracesAndStats = $root.TracesAndStats = (() => {
      function TracesAndStats2(properties) {
        this.trace = [];
        this.statsWithContext = [];
        this.referencedFieldsByType = {};
        this.internalTracesContributingToStats = [];
        if (properties) {
          for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      TracesAndStats2.prototype.trace = $util.emptyArray;
      TracesAndStats2.prototype.statsWithContext = $util.emptyArray;
      TracesAndStats2.prototype.referencedFieldsByType = $util.emptyObject;
      TracesAndStats2.prototype.internalTracesContributingToStats = $util.emptyArray;
      TracesAndStats2.create = function create(properties) {
        return new TracesAndStats2(properties);
      };
      TracesAndStats2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer.create();
        if (message.trace != null && message.trace.length)
          for (let i = 0; i < message.trace.length; ++i)
            if (message.trace[i] instanceof Uint8Array) {
              writer.uint32(
                /* id 1, wireType 2 =*/
                10
              );
              writer.bytes(message.trace[i]);
            } else
              $root.Trace.encode(message.trace[i], writer.uint32(
                /* id 1, wireType 2 =*/
                10
              ).fork()).ldelim();
        let array2;
        if (message.statsWithContext != null && message.statsWithContext.toArray)
          array2 = message.statsWithContext.toArray();
        else
          array2 = message.statsWithContext;
        if (array2 != null && array2.length)
          for (let i = 0; i < array2.length; ++i)
            $root.ContextualizedStats.encode(array2[i], writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim();
        if (message.internalTracesContributingToStats != null && message.internalTracesContributingToStats.length)
          for (let i = 0; i < message.internalTracesContributingToStats.length; ++i)
            if (message.internalTracesContributingToStats[i] instanceof Uint8Array) {
              writer.uint32(
                /* id 3, wireType 2 =*/
                26
              );
              writer.bytes(message.internalTracesContributingToStats[i]);
            } else
              $root.Trace.encode(message.internalTracesContributingToStats[i], writer.uint32(
                /* id 3, wireType 2 =*/
                26
              ).fork()).ldelim();
        if (message.referencedFieldsByType != null && Object.hasOwnProperty.call(message, "referencedFieldsByType"))
          for (let keys = Object.keys(message.referencedFieldsByType), i = 0; i < keys.length; ++i) {
            writer.uint32(
              /* id 4, wireType 2 =*/
              34
            ).fork().uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(keys[i]);
            $root.ReferencedFieldsForType.encode(message.referencedFieldsByType[keys[i]], writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim().ldelim();
          }
        return writer;
      };
      TracesAndStats2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      TracesAndStats2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
          reader = $Reader.create(reader);
        let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.TracesAndStats(), key;
        while (reader.pos < end) {
          let tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              if (!(message.trace && message.trace.length))
                message.trace = [];
              message.trace.push($root.Trace.decode(reader, reader.uint32()));
              break;
            case 2:
              if (!(message.statsWithContext && message.statsWithContext.length))
                message.statsWithContext = [];
              message.statsWithContext.push($root.ContextualizedStats.decode(reader, reader.uint32()));
              break;
            case 4:
              reader.skip().pos++;
              if (message.referencedFieldsByType === $util.emptyObject)
                message.referencedFieldsByType = {};
              key = reader.string();
              reader.pos++;
              message.referencedFieldsByType[key] = $root.ReferencedFieldsForType.decode(reader, reader.uint32());
              break;
            case 3:
              if (!(message.internalTracesContributingToStats && message.internalTracesContributingToStats.length))
                message.internalTracesContributingToStats = [];
              message.internalTracesContributingToStats.push($root.Trace.decode(reader, reader.uint32()));
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      TracesAndStats2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
          reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
      };
      TracesAndStats2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.trace != null && message.hasOwnProperty("trace")) {
          if (!Array.isArray(message.trace))
            return "trace: array expected";
          for (let i = 0; i < message.trace.length; ++i)
            if (!(message.trace[i] instanceof Uint8Array)) {
              let error = $root.Trace.verify(message.trace[i]);
              if (error)
                return "trace." + error;
            }
        }
        if (message.statsWithContext != null && message.hasOwnProperty("statsWithContext")) {
          let array2;
          if (message.statsWithContext != null && message.statsWithContext.toArray)
            array2 = message.statsWithContext.toArray();
          else
            array2 = message.statsWithContext;
          if (!Array.isArray(array2))
            return "statsWithContext: array expected";
          for (let i = 0; i < array2.length; ++i) {
            let error = $root.ContextualizedStats.verify(array2[i]);
            if (error)
              return "statsWithContext." + error;
          }
        }
        if (message.referencedFieldsByType != null && message.hasOwnProperty("referencedFieldsByType")) {
          if (!$util.isObject(message.referencedFieldsByType))
            return "referencedFieldsByType: object expected";
          let key = Object.keys(message.referencedFieldsByType);
          for (let i = 0; i < key.length; ++i) {
            let error = $root.ReferencedFieldsForType.verify(message.referencedFieldsByType[key[i]]);
            if (error)
              return "referencedFieldsByType." + error;
          }
        }
        if (message.internalTracesContributingToStats != null && message.hasOwnProperty("internalTracesContributingToStats")) {
          if (!Array.isArray(message.internalTracesContributingToStats))
            return "internalTracesContributingToStats: array expected";
          for (let i = 0; i < message.internalTracesContributingToStats.length; ++i)
            if (!(message.internalTracesContributingToStats[i] instanceof Uint8Array)) {
              let error = $root.Trace.verify(message.internalTracesContributingToStats[i]);
              if (error)
                return "internalTracesContributingToStats." + error;
            }
        }
        return null;
      };
      TracesAndStats2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        let object = {};
        if (options.arrays || options.defaults) {
          object.trace = [];
          object.statsWithContext = [];
          object.internalTracesContributingToStats = [];
        }
        if (options.objects || options.defaults)
          object.referencedFieldsByType = {};
        if (message.trace && message.trace.length) {
          object.trace = [];
          for (let j2 = 0; j2 < message.trace.length; ++j2)
            object.trace[j2] = $root.Trace.toObject(message.trace[j2], options);
        }
        if (message.statsWithContext && message.statsWithContext.length) {
          object.statsWithContext = [];
          for (let j2 = 0; j2 < message.statsWithContext.length; ++j2)
            object.statsWithContext[j2] = $root.ContextualizedStats.toObject(message.statsWithContext[j2], options);
        }
        if (message.internalTracesContributingToStats && message.internalTracesContributingToStats.length) {
          object.internalTracesContributingToStats = [];
          for (let j2 = 0; j2 < message.internalTracesContributingToStats.length; ++j2)
            object.internalTracesContributingToStats[j2] = $root.Trace.toObject(message.internalTracesContributingToStats[j2], options);
        }
        let keys2;
        if (message.referencedFieldsByType && (keys2 = Object.keys(message.referencedFieldsByType)).length) {
          object.referencedFieldsByType = {};
          for (let j2 = 0; j2 < keys2.length; ++j2)
            object.referencedFieldsByType[keys2[j2]] = $root.ReferencedFieldsForType.toObject(message.referencedFieldsByType[keys2[j2]], options);
        }
        return object;
      };
      TracesAndStats2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
      };
      return TracesAndStats2;
    })();
    google = $root.google = (() => {
      const google2 = {};
      google2.protobuf = function() {
        const protobuf = {};
        protobuf.Timestamp = function() {
          function Timestamp(properties) {
            if (properties) {
              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          Timestamp.prototype.seconds = 0;
          Timestamp.prototype.nanos = 0;
          Timestamp.create = function create(properties) {
            return new Timestamp(properties);
          };
          Timestamp.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
              writer.uint32(
                /* id 1, wireType 0 =*/
                8
              ).int64(message.seconds);
            if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
              writer.uint32(
                /* id 2, wireType 0 =*/
                16
              ).int32(message.nanos);
            return writer;
          };
          Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          Timestamp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
            while (reader.pos < end) {
              let tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.seconds = reader.int64();
                  break;
                case 2:
                  message.nanos = reader.int32();
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          Timestamp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          Timestamp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.seconds != null && message.hasOwnProperty("seconds")) {
              if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                return "seconds: integer|Long expected";
            }
            if (message.nanos != null && message.hasOwnProperty("nanos")) {
              if (!$util.isInteger(message.nanos))
                return "nanos: integer expected";
            }
            return null;
          };
          Timestamp.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            let object = {};
            if (options.defaults) {
              object.seconds = 0;
              object.nanos = 0;
            }
            if (message.seconds != null && message.hasOwnProperty("seconds"))
              if (typeof message.seconds === "number")
                object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
              else
                object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
            if (message.nanos != null && message.hasOwnProperty("nanos"))
              object.nanos = message.nanos;
            return object;
          };
          Timestamp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, import_minimal.default.util.toJSONOptions);
          };
          return Timestamp;
        }();
        return protobuf;
      }();
      return google2;
    })();
  }
});

// node_modules/@apollo/usage-reporting-protobuf/generated/cjs/protobuf.js
var require_protobuf = __commonJS({
  "node_modules/@apollo/usage-reporting-protobuf/generated/cjs/protobuf.js"(exports2, module2) {
    "use strict";
    var $protobuf2 = require_minimal2();
    var $Reader2 = $protobuf2.Reader;
    var $Writer2 = $protobuf2.Writer;
    var $util2 = $protobuf2.util;
    var $root2 = $protobuf2.roots["default"] || ($protobuf2.roots["default"] = {});
    $root2.Trace = function() {
      function Trace2(properties) {
        if (properties) {
          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      Trace2.prototype.startTime = null;
      Trace2.prototype.endTime = null;
      Trace2.prototype.durationNs = 0;
      Trace2.prototype.root = null;
      Trace2.prototype.isIncomplete = false;
      Trace2.prototype.signature = "";
      Trace2.prototype.unexecutedOperationBody = "";
      Trace2.prototype.unexecutedOperationName = "";
      Trace2.prototype.details = null;
      Trace2.prototype.clientName = "";
      Trace2.prototype.clientVersion = "";
      Trace2.prototype.http = null;
      Trace2.prototype.cachePolicy = null;
      Trace2.prototype.queryPlan = null;
      Trace2.prototype.fullQueryCacheHit = false;
      Trace2.prototype.persistedQueryHit = false;
      Trace2.prototype.persistedQueryRegister = false;
      Trace2.prototype.registeredOperation = false;
      Trace2.prototype.forbiddenOperation = false;
      Trace2.prototype.fieldExecutionWeight = 0;
      Trace2.create = function create(properties) {
        return new Trace2(properties);
      };
      Trace2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer2.create();
        if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
          $root2.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(
            /* id 3, wireType 2 =*/
            26
          ).fork()).ldelim();
        if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
          $root2.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(
            /* id 4, wireType 2 =*/
            34
          ).fork()).ldelim();
        if (message.details != null && Object.hasOwnProperty.call(message, "details"))
          $root2.Trace.Details.encode(message.details, writer.uint32(
            /* id 6, wireType 2 =*/
            50
          ).fork()).ldelim();
        if (message.clientName != null && Object.hasOwnProperty.call(message, "clientName"))
          writer.uint32(
            /* id 7, wireType 2 =*/
            58
          ).string(message.clientName);
        if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
          writer.uint32(
            /* id 8, wireType 2 =*/
            66
          ).string(message.clientVersion);
        if (message.http != null && Object.hasOwnProperty.call(message, "http"))
          $root2.Trace.HTTP.encode(message.http, writer.uint32(
            /* id 10, wireType 2 =*/
            82
          ).fork()).ldelim();
        if (message.durationNs != null && Object.hasOwnProperty.call(message, "durationNs"))
          writer.uint32(
            /* id 11, wireType 0 =*/
            88
          ).uint64(message.durationNs);
        if (message.root != null && Object.hasOwnProperty.call(message, "root"))
          $root2.Trace.Node.encode(message.root, writer.uint32(
            /* id 14, wireType 2 =*/
            114
          ).fork()).ldelim();
        if (message.cachePolicy != null && Object.hasOwnProperty.call(message, "cachePolicy"))
          $root2.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(
            /* id 18, wireType 2 =*/
            146
          ).fork()).ldelim();
        if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
          writer.uint32(
            /* id 19, wireType 2 =*/
            154
          ).string(message.signature);
        if (message.fullQueryCacheHit != null && Object.hasOwnProperty.call(message, "fullQueryCacheHit"))
          writer.uint32(
            /* id 20, wireType 0 =*/
            160
          ).bool(message.fullQueryCacheHit);
        if (message.persistedQueryHit != null && Object.hasOwnProperty.call(message, "persistedQueryHit"))
          writer.uint32(
            /* id 21, wireType 0 =*/
            168
          ).bool(message.persistedQueryHit);
        if (message.persistedQueryRegister != null && Object.hasOwnProperty.call(message, "persistedQueryRegister"))
          writer.uint32(
            /* id 22, wireType 0 =*/
            176
          ).bool(message.persistedQueryRegister);
        if (message.registeredOperation != null && Object.hasOwnProperty.call(message, "registeredOperation"))
          writer.uint32(
            /* id 24, wireType 0 =*/
            192
          ).bool(message.registeredOperation);
        if (message.forbiddenOperation != null && Object.hasOwnProperty.call(message, "forbiddenOperation"))
          writer.uint32(
            /* id 25, wireType 0 =*/
            200
          ).bool(message.forbiddenOperation);
        if (message.queryPlan != null && Object.hasOwnProperty.call(message, "queryPlan"))
          $root2.Trace.QueryPlanNode.encode(message.queryPlan, writer.uint32(
            /* id 26, wireType 2 =*/
            210
          ).fork()).ldelim();
        if (message.unexecutedOperationBody != null && Object.hasOwnProperty.call(message, "unexecutedOperationBody"))
          writer.uint32(
            /* id 27, wireType 2 =*/
            218
          ).string(message.unexecutedOperationBody);
        if (message.unexecutedOperationName != null && Object.hasOwnProperty.call(message, "unexecutedOperationName"))
          writer.uint32(
            /* id 28, wireType 2 =*/
            226
          ).string(message.unexecutedOperationName);
        if (message.fieldExecutionWeight != null && Object.hasOwnProperty.call(message, "fieldExecutionWeight"))
          writer.uint32(
            /* id 31, wireType 1 =*/
            249
          ).double(message.fieldExecutionWeight);
        if (message.isIncomplete != null && Object.hasOwnProperty.call(message, "isIncomplete"))
          writer.uint32(
            /* id 33, wireType 0 =*/
            264
          ).bool(message.isIncomplete);
        return writer;
      };
      Trace2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      Trace2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader2))
          reader = $Reader2.create(reader);
        var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
            case 4:
              message.startTime = $root2.google.protobuf.Timestamp.decode(reader, reader.uint32());
              break;
            case 3:
              message.endTime = $root2.google.protobuf.Timestamp.decode(reader, reader.uint32());
              break;
            case 11:
              message.durationNs = reader.uint64();
              break;
            case 14:
              message.root = $root2.Trace.Node.decode(reader, reader.uint32());
              break;
            case 33:
              message.isIncomplete = reader.bool();
              break;
            case 19:
              message.signature = reader.string();
              break;
            case 27:
              message.unexecutedOperationBody = reader.string();
              break;
            case 28:
              message.unexecutedOperationName = reader.string();
              break;
            case 6:
              message.details = $root2.Trace.Details.decode(reader, reader.uint32());
              break;
            case 7:
              message.clientName = reader.string();
              break;
            case 8:
              message.clientVersion = reader.string();
              break;
            case 10:
              message.http = $root2.Trace.HTTP.decode(reader, reader.uint32());
              break;
            case 18:
              message.cachePolicy = $root2.Trace.CachePolicy.decode(reader, reader.uint32());
              break;
            case 26:
              message.queryPlan = $root2.Trace.QueryPlanNode.decode(reader, reader.uint32());
              break;
            case 20:
              message.fullQueryCacheHit = reader.bool();
              break;
            case 21:
              message.persistedQueryHit = reader.bool();
              break;
            case 22:
              message.persistedQueryRegister = reader.bool();
              break;
            case 24:
              message.registeredOperation = reader.bool();
              break;
            case 25:
              message.forbiddenOperation = reader.bool();
              break;
            case 31:
              message.fieldExecutionWeight = reader.double();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      Trace2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader2))
          reader = new $Reader2(reader);
        return this.decode(reader, reader.uint32());
      };
      Trace2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.startTime != null && message.hasOwnProperty("startTime")) {
          var error = $root2.google.protobuf.Timestamp.verify(message.startTime);
          if (error)
            return "startTime." + error;
        }
        if (message.endTime != null && message.hasOwnProperty("endTime")) {
          var error = $root2.google.protobuf.Timestamp.verify(message.endTime);
          if (error)
            return "endTime." + error;
        }
        if (message.durationNs != null && message.hasOwnProperty("durationNs")) {
          if (!$util2.isInteger(message.durationNs) && !(message.durationNs && $util2.isInteger(message.durationNs.low) && $util2.isInteger(message.durationNs.high)))
            return "durationNs: integer|Long expected";
        }
        if (message.root != null && message.hasOwnProperty("root")) {
          var error = $root2.Trace.Node.verify(message.root);
          if (error)
            return "root." + error;
        }
        if (message.isIncomplete != null && message.hasOwnProperty("isIncomplete")) {
          if (typeof message.isIncomplete !== "boolean")
            return "isIncomplete: boolean expected";
        }
        if (message.signature != null && message.hasOwnProperty("signature")) {
          if (!$util2.isString(message.signature))
            return "signature: string expected";
        }
        if (message.unexecutedOperationBody != null && message.hasOwnProperty("unexecutedOperationBody")) {
          if (!$util2.isString(message.unexecutedOperationBody))
            return "unexecutedOperationBody: string expected";
        }
        if (message.unexecutedOperationName != null && message.hasOwnProperty("unexecutedOperationName")) {
          if (!$util2.isString(message.unexecutedOperationName))
            return "unexecutedOperationName: string expected";
        }
        if (message.details != null && message.hasOwnProperty("details")) {
          var error = $root2.Trace.Details.verify(message.details);
          if (error)
            return "details." + error;
        }
        if (message.clientName != null && message.hasOwnProperty("clientName")) {
          if (!$util2.isString(message.clientName))
            return "clientName: string expected";
        }
        if (message.clientVersion != null && message.hasOwnProperty("clientVersion")) {
          if (!$util2.isString(message.clientVersion))
            return "clientVersion: string expected";
        }
        if (message.http != null && message.hasOwnProperty("http")) {
          var error = $root2.Trace.HTTP.verify(message.http);
          if (error)
            return "http." + error;
        }
        if (message.cachePolicy != null && message.hasOwnProperty("cachePolicy")) {
          var error = $root2.Trace.CachePolicy.verify(message.cachePolicy);
          if (error)
            return "cachePolicy." + error;
        }
        if (message.queryPlan != null && message.hasOwnProperty("queryPlan")) {
          var error = $root2.Trace.QueryPlanNode.verify(message.queryPlan);
          if (error)
            return "queryPlan." + error;
        }
        if (message.fullQueryCacheHit != null && message.hasOwnProperty("fullQueryCacheHit")) {
          if (typeof message.fullQueryCacheHit !== "boolean")
            return "fullQueryCacheHit: boolean expected";
        }
        if (message.persistedQueryHit != null && message.hasOwnProperty("persistedQueryHit")) {
          if (typeof message.persistedQueryHit !== "boolean")
            return "persistedQueryHit: boolean expected";
        }
        if (message.persistedQueryRegister != null && message.hasOwnProperty("persistedQueryRegister")) {
          if (typeof message.persistedQueryRegister !== "boolean")
            return "persistedQueryRegister: boolean expected";
        }
        if (message.registeredOperation != null && message.hasOwnProperty("registeredOperation")) {
          if (typeof message.registeredOperation !== "boolean")
            return "registeredOperation: boolean expected";
        }
        if (message.forbiddenOperation != null && message.hasOwnProperty("forbiddenOperation")) {
          if (typeof message.forbiddenOperation !== "boolean")
            return "forbiddenOperation: boolean expected";
        }
        if (message.fieldExecutionWeight != null && message.hasOwnProperty("fieldExecutionWeight")) {
          if (typeof message.fieldExecutionWeight !== "number")
            return "fieldExecutionWeight: number expected";
        }
        return null;
      };
      Trace2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        var object = {};
        if (options.defaults) {
          object.endTime = null;
          object.startTime = null;
          object.details = null;
          object.clientName = "";
          object.clientVersion = "";
          object.http = null;
          object.durationNs = 0;
          object.root = null;
          object.cachePolicy = null;
          object.signature = "";
          object.fullQueryCacheHit = false;
          object.persistedQueryHit = false;
          object.persistedQueryRegister = false;
          object.registeredOperation = false;
          object.forbiddenOperation = false;
          object.queryPlan = null;
          object.unexecutedOperationBody = "";
          object.unexecutedOperationName = "";
          object.fieldExecutionWeight = 0;
          object.isIncomplete = false;
        }
        if (message.endTime != null && message.hasOwnProperty("endTime"))
          object.endTime = $root2.google.protobuf.Timestamp.toObject(message.endTime, options);
        if (message.startTime != null && message.hasOwnProperty("startTime"))
          object.startTime = $root2.google.protobuf.Timestamp.toObject(message.startTime, options);
        if (message.details != null && message.hasOwnProperty("details"))
          object.details = $root2.Trace.Details.toObject(message.details, options);
        if (message.clientName != null && message.hasOwnProperty("clientName"))
          object.clientName = message.clientName;
        if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
          object.clientVersion = message.clientVersion;
        if (message.http != null && message.hasOwnProperty("http"))
          object.http = $root2.Trace.HTTP.toObject(message.http, options);
        if (message.durationNs != null && message.hasOwnProperty("durationNs"))
          if (typeof message.durationNs === "number")
            object.durationNs = options.longs === String ? String(message.durationNs) : message.durationNs;
          else
            object.durationNs = options.longs === String ? $util2.Long.prototype.toString.call(message.durationNs) : options.longs === Number ? new $util2.LongBits(message.durationNs.low >>> 0, message.durationNs.high >>> 0).toNumber(true) : message.durationNs;
        if (message.root != null && message.hasOwnProperty("root"))
          object.root = $root2.Trace.Node.toObject(message.root, options);
        if (message.cachePolicy != null && message.hasOwnProperty("cachePolicy"))
          object.cachePolicy = $root2.Trace.CachePolicy.toObject(message.cachePolicy, options);
        if (message.signature != null && message.hasOwnProperty("signature"))
          object.signature = message.signature;
        if (message.fullQueryCacheHit != null && message.hasOwnProperty("fullQueryCacheHit"))
          object.fullQueryCacheHit = message.fullQueryCacheHit;
        if (message.persistedQueryHit != null && message.hasOwnProperty("persistedQueryHit"))
          object.persistedQueryHit = message.persistedQueryHit;
        if (message.persistedQueryRegister != null && message.hasOwnProperty("persistedQueryRegister"))
          object.persistedQueryRegister = message.persistedQueryRegister;
        if (message.registeredOperation != null && message.hasOwnProperty("registeredOperation"))
          object.registeredOperation = message.registeredOperation;
        if (message.forbiddenOperation != null && message.hasOwnProperty("forbiddenOperation"))
          object.forbiddenOperation = message.forbiddenOperation;
        if (message.queryPlan != null && message.hasOwnProperty("queryPlan"))
          object.queryPlan = $root2.Trace.QueryPlanNode.toObject(message.queryPlan, options);
        if (message.unexecutedOperationBody != null && message.hasOwnProperty("unexecutedOperationBody"))
          object.unexecutedOperationBody = message.unexecutedOperationBody;
        if (message.unexecutedOperationName != null && message.hasOwnProperty("unexecutedOperationName"))
          object.unexecutedOperationName = message.unexecutedOperationName;
        if (message.fieldExecutionWeight != null && message.hasOwnProperty("fieldExecutionWeight"))
          object.fieldExecutionWeight = options.json && !isFinite(message.fieldExecutionWeight) ? String(message.fieldExecutionWeight) : message.fieldExecutionWeight;
        if (message.isIncomplete != null && message.hasOwnProperty("isIncomplete"))
          object.isIncomplete = message.isIncomplete;
        return object;
      };
      Trace2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
      };
      Trace2.CachePolicy = function() {
        function CachePolicy(properties) {
          if (properties) {
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        CachePolicy.prototype.scope = 0;
        CachePolicy.prototype.maxAgeNs = 0;
        CachePolicy.create = function create(properties) {
          return new CachePolicy(properties);
        };
        CachePolicy.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer2.create();
          if (message.scope != null && Object.hasOwnProperty.call(message, "scope"))
            writer.uint32(
              /* id 1, wireType 0 =*/
              8
            ).int32(message.scope);
          if (message.maxAgeNs != null && Object.hasOwnProperty.call(message, "maxAgeNs"))
            writer.uint32(
              /* id 2, wireType 0 =*/
              16
            ).int64(message.maxAgeNs);
          return writer;
        };
        CachePolicy.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        CachePolicy.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader2))
            reader = $Reader2.create(reader);
          var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.CachePolicy();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.scope = reader.int32();
                break;
              case 2:
                message.maxAgeNs = reader.int64();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        CachePolicy.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader2))
            reader = new $Reader2(reader);
          return this.decode(reader, reader.uint32());
        };
        CachePolicy.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          if (message.scope != null && message.hasOwnProperty("scope"))
            switch (message.scope) {
              default:
                return "scope: enum value expected";
              case 0:
              case 1:
              case 2:
                break;
            }
          if (message.maxAgeNs != null && message.hasOwnProperty("maxAgeNs")) {
            if (!$util2.isInteger(message.maxAgeNs) && !(message.maxAgeNs && $util2.isInteger(message.maxAgeNs.low) && $util2.isInteger(message.maxAgeNs.high)))
              return "maxAgeNs: integer|Long expected";
          }
          return null;
        };
        CachePolicy.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          var object = {};
          if (options.defaults) {
            object.scope = options.enums === String ? "UNKNOWN" : 0;
            object.maxAgeNs = 0;
          }
          if (message.scope != null && message.hasOwnProperty("scope"))
            object.scope = options.enums === String ? $root2.Trace.CachePolicy.Scope[message.scope] : message.scope;
          if (message.maxAgeNs != null && message.hasOwnProperty("maxAgeNs"))
            if (typeof message.maxAgeNs === "number")
              object.maxAgeNs = options.longs === String ? String(message.maxAgeNs) : message.maxAgeNs;
            else
              object.maxAgeNs = options.longs === String ? $util2.Long.prototype.toString.call(message.maxAgeNs) : options.longs === Number ? new $util2.LongBits(message.maxAgeNs.low >>> 0, message.maxAgeNs.high >>> 0).toNumber() : message.maxAgeNs;
          return object;
        };
        CachePolicy.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
        };
        CachePolicy.Scope = function() {
          var valuesById = {}, values = Object.create(valuesById);
          values[valuesById[0] = "UNKNOWN"] = 0;
          values[valuesById[1] = "PUBLIC"] = 1;
          values[valuesById[2] = "PRIVATE"] = 2;
          return values;
        }();
        return CachePolicy;
      }();
      Trace2.Details = function() {
        function Details(properties) {
          this.variablesJson = {};
          if (properties) {
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        Details.prototype.variablesJson = $util2.emptyObject;
        Details.prototype.operationName = "";
        Details.create = function create(properties) {
          return new Details(properties);
        };
        Details.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer2.create();
          if (message.operationName != null && Object.hasOwnProperty.call(message, "operationName"))
            writer.uint32(
              /* id 3, wireType 2 =*/
              26
            ).string(message.operationName);
          if (message.variablesJson != null && Object.hasOwnProperty.call(message, "variablesJson"))
            for (var keys = Object.keys(message.variablesJson), i = 0; i < keys.length; ++i)
              writer.uint32(
                /* id 4, wireType 2 =*/
                34
              ).fork().uint32(
                /* id 1, wireType 2 =*/
                10
              ).string(keys[i]).uint32(
                /* id 2, wireType 2 =*/
                18
              ).string(message.variablesJson[keys[i]]).ldelim();
          return writer;
        };
        Details.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Details.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader2))
            reader = $Reader2.create(reader);
          var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.Details(), key;
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 4:
                reader.skip().pos++;
                if (message.variablesJson === $util2.emptyObject)
                  message.variablesJson = {};
                key = reader.string();
                reader.pos++;
                message.variablesJson[key] = reader.string();
                break;
              case 3:
                message.operationName = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Details.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader2))
            reader = new $Reader2(reader);
          return this.decode(reader, reader.uint32());
        };
        Details.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          if (message.variablesJson != null && message.hasOwnProperty("variablesJson")) {
            if (!$util2.isObject(message.variablesJson))
              return "variablesJson: object expected";
            var key = Object.keys(message.variablesJson);
            for (var i = 0; i < key.length; ++i)
              if (!$util2.isString(message.variablesJson[key[i]]))
                return "variablesJson: string{k:string} expected";
          }
          if (message.operationName != null && message.hasOwnProperty("operationName")) {
            if (!$util2.isString(message.operationName))
              return "operationName: string expected";
          }
          return null;
        };
        Details.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          var object = {};
          if (options.objects || options.defaults)
            object.variablesJson = {};
          if (options.defaults)
            object.operationName = "";
          if (message.operationName != null && message.hasOwnProperty("operationName"))
            object.operationName = message.operationName;
          var keys2;
          if (message.variablesJson && (keys2 = Object.keys(message.variablesJson)).length) {
            object.variablesJson = {};
            for (var j2 = 0; j2 < keys2.length; ++j2)
              object.variablesJson[keys2[j2]] = message.variablesJson[keys2[j2]];
          }
          return object;
        };
        Details.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
        };
        return Details;
      }();
      Trace2.Error = function() {
        function Error2(properties) {
          this.location = [];
          if (properties) {
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        Error2.prototype.message = "";
        Error2.prototype.location = $util2.emptyArray;
        Error2.prototype.timeNs = 0;
        Error2.prototype.json = "";
        Error2.create = function create(properties) {
          return new Error2(properties);
        };
        Error2.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer2.create();
          if (message.message != null && Object.hasOwnProperty.call(message, "message"))
            writer.uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(message.message);
          if (message.location != null && message.location.length)
            for (var i = 0; i < message.location.length; ++i)
              $root2.Trace.Location.encode(message.location[i], writer.uint32(
                /* id 2, wireType 2 =*/
                18
              ).fork()).ldelim();
          if (message.timeNs != null && Object.hasOwnProperty.call(message, "timeNs"))
            writer.uint32(
              /* id 3, wireType 0 =*/
              24
            ).uint64(message.timeNs);
          if (message.json != null && Object.hasOwnProperty.call(message, "json"))
            writer.uint32(
              /* id 4, wireType 2 =*/
              34
            ).string(message.json);
          return writer;
        };
        Error2.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Error2.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader2))
            reader = $Reader2.create(reader);
          var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.Error();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.message = reader.string();
                break;
              case 2:
                if (!(message.location && message.location.length))
                  message.location = [];
                message.location.push($root2.Trace.Location.decode(reader, reader.uint32()));
                break;
              case 3:
                message.timeNs = reader.uint64();
                break;
              case 4:
                message.json = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Error2.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader2))
            reader = new $Reader2(reader);
          return this.decode(reader, reader.uint32());
        };
        Error2.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          if (message.message != null && message.hasOwnProperty("message")) {
            if (!$util2.isString(message.message))
              return "message: string expected";
          }
          if (message.location != null && message.hasOwnProperty("location")) {
            if (!Array.isArray(message.location))
              return "location: array expected";
            for (var i = 0; i < message.location.length; ++i) {
              var error = $root2.Trace.Location.verify(message.location[i]);
              if (error)
                return "location." + error;
            }
          }
          if (message.timeNs != null && message.hasOwnProperty("timeNs")) {
            if (!$util2.isInteger(message.timeNs) && !(message.timeNs && $util2.isInteger(message.timeNs.low) && $util2.isInteger(message.timeNs.high)))
              return "timeNs: integer|Long expected";
          }
          if (message.json != null && message.hasOwnProperty("json")) {
            if (!$util2.isString(message.json))
              return "json: string expected";
          }
          return null;
        };
        Error2.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          var object = {};
          if (options.arrays || options.defaults)
            object.location = [];
          if (options.defaults) {
            object.message = "";
            object.timeNs = 0;
            object.json = "";
          }
          if (message.message != null && message.hasOwnProperty("message"))
            object.message = message.message;
          if (message.location && message.location.length) {
            object.location = [];
            for (var j2 = 0; j2 < message.location.length; ++j2)
              object.location[j2] = $root2.Trace.Location.toObject(message.location[j2], options);
          }
          if (message.timeNs != null && message.hasOwnProperty("timeNs"))
            if (typeof message.timeNs === "number")
              object.timeNs = options.longs === String ? String(message.timeNs) : message.timeNs;
            else
              object.timeNs = options.longs === String ? $util2.Long.prototype.toString.call(message.timeNs) : options.longs === Number ? new $util2.LongBits(message.timeNs.low >>> 0, message.timeNs.high >>> 0).toNumber(true) : message.timeNs;
          if (message.json != null && message.hasOwnProperty("json"))
            object.json = message.json;
          return object;
        };
        Error2.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
        };
        return Error2;
      }();
      Trace2.HTTP = function() {
        function HTTP(properties) {
          this.requestHeaders = {};
          this.responseHeaders = {};
          if (properties) {
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        HTTP.prototype.method = 0;
        HTTP.prototype.requestHeaders = $util2.emptyObject;
        HTTP.prototype.responseHeaders = $util2.emptyObject;
        HTTP.prototype.statusCode = 0;
        HTTP.create = function create(properties) {
          return new HTTP(properties);
        };
        HTTP.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer2.create();
          if (message.method != null && Object.hasOwnProperty.call(message, "method"))
            writer.uint32(
              /* id 1, wireType 0 =*/
              8
            ).int32(message.method);
          if (message.requestHeaders != null && Object.hasOwnProperty.call(message, "requestHeaders"))
            for (var keys = Object.keys(message.requestHeaders), i = 0; i < keys.length; ++i) {
              writer.uint32(
                /* id 4, wireType 2 =*/
                34
              ).fork().uint32(
                /* id 1, wireType 2 =*/
                10
              ).string(keys[i]);
              $root2.Trace.HTTP.Values.encode(message.requestHeaders[keys[i]], writer.uint32(
                /* id 2, wireType 2 =*/
                18
              ).fork()).ldelim().ldelim();
            }
          if (message.responseHeaders != null && Object.hasOwnProperty.call(message, "responseHeaders"))
            for (var keys = Object.keys(message.responseHeaders), i = 0; i < keys.length; ++i) {
              writer.uint32(
                /* id 5, wireType 2 =*/
                42
              ).fork().uint32(
                /* id 1, wireType 2 =*/
                10
              ).string(keys[i]);
              $root2.Trace.HTTP.Values.encode(message.responseHeaders[keys[i]], writer.uint32(
                /* id 2, wireType 2 =*/
                18
              ).fork()).ldelim().ldelim();
            }
          if (message.statusCode != null && Object.hasOwnProperty.call(message, "statusCode"))
            writer.uint32(
              /* id 6, wireType 0 =*/
              48
            ).uint32(message.statusCode);
          return writer;
        };
        HTTP.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        HTTP.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader2))
            reader = $Reader2.create(reader);
          var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.HTTP(), key;
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.method = reader.int32();
                break;
              case 4:
                reader.skip().pos++;
                if (message.requestHeaders === $util2.emptyObject)
                  message.requestHeaders = {};
                key = reader.string();
                reader.pos++;
                message.requestHeaders[key] = $root2.Trace.HTTP.Values.decode(reader, reader.uint32());
                break;
              case 5:
                reader.skip().pos++;
                if (message.responseHeaders === $util2.emptyObject)
                  message.responseHeaders = {};
                key = reader.string();
                reader.pos++;
                message.responseHeaders[key] = $root2.Trace.HTTP.Values.decode(reader, reader.uint32());
                break;
              case 6:
                message.statusCode = reader.uint32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        HTTP.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader2))
            reader = new $Reader2(reader);
          return this.decode(reader, reader.uint32());
        };
        HTTP.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          if (message.method != null && message.hasOwnProperty("method"))
            switch (message.method) {
              default:
                return "method: enum value expected";
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
                break;
            }
          if (message.requestHeaders != null && message.hasOwnProperty("requestHeaders")) {
            if (!$util2.isObject(message.requestHeaders))
              return "requestHeaders: object expected";
            var key = Object.keys(message.requestHeaders);
            for (var i = 0; i < key.length; ++i) {
              var error = $root2.Trace.HTTP.Values.verify(message.requestHeaders[key[i]]);
              if (error)
                return "requestHeaders." + error;
            }
          }
          if (message.responseHeaders != null && message.hasOwnProperty("responseHeaders")) {
            if (!$util2.isObject(message.responseHeaders))
              return "responseHeaders: object expected";
            var key = Object.keys(message.responseHeaders);
            for (var i = 0; i < key.length; ++i) {
              var error = $root2.Trace.HTTP.Values.verify(message.responseHeaders[key[i]]);
              if (error)
                return "responseHeaders." + error;
            }
          }
          if (message.statusCode != null && message.hasOwnProperty("statusCode")) {
            if (!$util2.isInteger(message.statusCode))
              return "statusCode: integer expected";
          }
          return null;
        };
        HTTP.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          var object = {};
          if (options.objects || options.defaults) {
            object.requestHeaders = {};
            object.responseHeaders = {};
          }
          if (options.defaults) {
            object.method = options.enums === String ? "UNKNOWN" : 0;
            object.statusCode = 0;
          }
          if (message.method != null && message.hasOwnProperty("method"))
            object.method = options.enums === String ? $root2.Trace.HTTP.Method[message.method] : message.method;
          var keys2;
          if (message.requestHeaders && (keys2 = Object.keys(message.requestHeaders)).length) {
            object.requestHeaders = {};
            for (var j2 = 0; j2 < keys2.length; ++j2)
              object.requestHeaders[keys2[j2]] = $root2.Trace.HTTP.Values.toObject(message.requestHeaders[keys2[j2]], options);
          }
          if (message.responseHeaders && (keys2 = Object.keys(message.responseHeaders)).length) {
            object.responseHeaders = {};
            for (var j2 = 0; j2 < keys2.length; ++j2)
              object.responseHeaders[keys2[j2]] = $root2.Trace.HTTP.Values.toObject(message.responseHeaders[keys2[j2]], options);
          }
          if (message.statusCode != null && message.hasOwnProperty("statusCode"))
            object.statusCode = message.statusCode;
          return object;
        };
        HTTP.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
        };
        HTTP.Values = function() {
          function Values(properties) {
            this.value = [];
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          Values.prototype.value = $util2.emptyArray;
          Values.create = function create(properties) {
            return new Values(properties);
          };
          Values.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer2.create();
            if (message.value != null && message.value.length)
              for (var i = 0; i < message.value.length; ++i)
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.value[i]);
            return writer;
          };
          Values.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          Values.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader2))
              reader = $Reader2.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.HTTP.Values();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  if (!(message.value && message.value.length))
                    message.value = [];
                  message.value.push(reader.string());
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          Values.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader2))
              reader = new $Reader2(reader);
            return this.decode(reader, reader.uint32());
          };
          Values.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.value != null && message.hasOwnProperty("value")) {
              if (!Array.isArray(message.value))
                return "value: array expected";
              for (var i = 0; i < message.value.length; ++i)
                if (!$util2.isString(message.value[i]))
                  return "value: string[] expected";
            }
            return null;
          };
          Values.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.arrays || options.defaults)
              object.value = [];
            if (message.value && message.value.length) {
              object.value = [];
              for (var j2 = 0; j2 < message.value.length; ++j2)
                object.value[j2] = message.value[j2];
            }
            return object;
          };
          Values.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
          };
          return Values;
        }();
        HTTP.Method = function() {
          var valuesById = {}, values = Object.create(valuesById);
          values[valuesById[0] = "UNKNOWN"] = 0;
          values[valuesById[1] = "OPTIONS"] = 1;
          values[valuesById[2] = "GET"] = 2;
          values[valuesById[3] = "HEAD"] = 3;
          values[valuesById[4] = "POST"] = 4;
          values[valuesById[5] = "PUT"] = 5;
          values[valuesById[6] = "DELETE"] = 6;
          values[valuesById[7] = "TRACE"] = 7;
          values[valuesById[8] = "CONNECT"] = 8;
          values[valuesById[9] = "PATCH"] = 9;
          return values;
        }();
        return HTTP;
      }();
      Trace2.Location = function() {
        function Location(properties) {
          if (properties) {
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        Location.prototype.line = 0;
        Location.prototype.column = 0;
        Location.create = function create(properties) {
          return new Location(properties);
        };
        Location.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer2.create();
          if (message.line != null && Object.hasOwnProperty.call(message, "line"))
            writer.uint32(
              /* id 1, wireType 0 =*/
              8
            ).uint32(message.line);
          if (message.column != null && Object.hasOwnProperty.call(message, "column"))
            writer.uint32(
              /* id 2, wireType 0 =*/
              16
            ).uint32(message.column);
          return writer;
        };
        Location.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Location.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader2))
            reader = $Reader2.create(reader);
          var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.Location();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.line = reader.uint32();
                break;
              case 2:
                message.column = reader.uint32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Location.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader2))
            reader = new $Reader2(reader);
          return this.decode(reader, reader.uint32());
        };
        Location.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          if (message.line != null && message.hasOwnProperty("line")) {
            if (!$util2.isInteger(message.line))
              return "line: integer expected";
          }
          if (message.column != null && message.hasOwnProperty("column")) {
            if (!$util2.isInteger(message.column))
              return "column: integer expected";
          }
          return null;
        };
        Location.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          var object = {};
          if (options.defaults) {
            object.line = 0;
            object.column = 0;
          }
          if (message.line != null && message.hasOwnProperty("line"))
            object.line = message.line;
          if (message.column != null && message.hasOwnProperty("column"))
            object.column = message.column;
          return object;
        };
        Location.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
        };
        return Location;
      }();
      Trace2.Node = function() {
        function Node(properties) {
          this.error = [];
          this.child = [];
          if (properties) {
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        Node.prototype.responseName = "";
        Node.prototype.index = 0;
        Node.prototype.originalFieldName = "";
        Node.prototype.type = "";
        Node.prototype.parentType = "";
        Node.prototype.cachePolicy = null;
        Node.prototype.startTime = 0;
        Node.prototype.endTime = 0;
        Node.prototype.error = $util2.emptyArray;
        Node.prototype.child = $util2.emptyArray;
        var $oneOfFields;
        Object.defineProperty(Node.prototype, "id", {
          get: $util2.oneOfGetter($oneOfFields = ["responseName", "index"]),
          set: $util2.oneOfSetter($oneOfFields)
        });
        Node.create = function create(properties) {
          return new Node(properties);
        };
        Node.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer2.create();
          if (message.responseName != null && Object.hasOwnProperty.call(message, "responseName"))
            writer.uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(message.responseName);
          if (message.index != null && Object.hasOwnProperty.call(message, "index"))
            writer.uint32(
              /* id 2, wireType 0 =*/
              16
            ).uint32(message.index);
          if (message.type != null && Object.hasOwnProperty.call(message, "type"))
            writer.uint32(
              /* id 3, wireType 2 =*/
              26
            ).string(message.type);
          if (message.cachePolicy != null && Object.hasOwnProperty.call(message, "cachePolicy"))
            $root2.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(
              /* id 5, wireType 2 =*/
              42
            ).fork()).ldelim();
          if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
            writer.uint32(
              /* id 8, wireType 0 =*/
              64
            ).uint64(message.startTime);
          if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
            writer.uint32(
              /* id 9, wireType 0 =*/
              72
            ).uint64(message.endTime);
          if (message.error != null && message.error.length)
            for (var i = 0; i < message.error.length; ++i)
              $root2.Trace.Error.encode(message.error[i], writer.uint32(
                /* id 11, wireType 2 =*/
                90
              ).fork()).ldelim();
          if (message.child != null && message.child.length)
            for (var i = 0; i < message.child.length; ++i)
              $root2.Trace.Node.encode(message.child[i], writer.uint32(
                /* id 12, wireType 2 =*/
                98
              ).fork()).ldelim();
          if (message.parentType != null && Object.hasOwnProperty.call(message, "parentType"))
            writer.uint32(
              /* id 13, wireType 2 =*/
              106
            ).string(message.parentType);
          if (message.originalFieldName != null && Object.hasOwnProperty.call(message, "originalFieldName"))
            writer.uint32(
              /* id 14, wireType 2 =*/
              114
            ).string(message.originalFieldName);
          return writer;
        };
        Node.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Node.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader2))
            reader = $Reader2.create(reader);
          var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.Node();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.responseName = reader.string();
                break;
              case 2:
                message.index = reader.uint32();
                break;
              case 14:
                message.originalFieldName = reader.string();
                break;
              case 3:
                message.type = reader.string();
                break;
              case 13:
                message.parentType = reader.string();
                break;
              case 5:
                message.cachePolicy = $root2.Trace.CachePolicy.decode(reader, reader.uint32());
                break;
              case 8:
                message.startTime = reader.uint64();
                break;
              case 9:
                message.endTime = reader.uint64();
                break;
              case 11:
                if (!(message.error && message.error.length))
                  message.error = [];
                message.error.push($root2.Trace.Error.decode(reader, reader.uint32()));
                break;
              case 12:
                if (!(message.child && message.child.length))
                  message.child = [];
                message.child.push($root2.Trace.Node.decode(reader, reader.uint32()));
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Node.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader2))
            reader = new $Reader2(reader);
          return this.decode(reader, reader.uint32());
        };
        Node.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          var properties = {};
          if (message.responseName != null && message.hasOwnProperty("responseName")) {
            properties.id = 1;
            if (!$util2.isString(message.responseName))
              return "responseName: string expected";
          }
          if (message.index != null && message.hasOwnProperty("index")) {
            if (properties.id === 1)
              return "id: multiple values";
            properties.id = 1;
            if (!$util2.isInteger(message.index))
              return "index: integer expected";
          }
          if (message.originalFieldName != null && message.hasOwnProperty("originalFieldName")) {
            if (!$util2.isString(message.originalFieldName))
              return "originalFieldName: string expected";
          }
          if (message.type != null && message.hasOwnProperty("type")) {
            if (!$util2.isString(message.type))
              return "type: string expected";
          }
          if (message.parentType != null && message.hasOwnProperty("parentType")) {
            if (!$util2.isString(message.parentType))
              return "parentType: string expected";
          }
          if (message.cachePolicy != null && message.hasOwnProperty("cachePolicy")) {
            var error = $root2.Trace.CachePolicy.verify(message.cachePolicy);
            if (error)
              return "cachePolicy." + error;
          }
          if (message.startTime != null && message.hasOwnProperty("startTime")) {
            if (!$util2.isInteger(message.startTime) && !(message.startTime && $util2.isInteger(message.startTime.low) && $util2.isInteger(message.startTime.high)))
              return "startTime: integer|Long expected";
          }
          if (message.endTime != null && message.hasOwnProperty("endTime")) {
            if (!$util2.isInteger(message.endTime) && !(message.endTime && $util2.isInteger(message.endTime.low) && $util2.isInteger(message.endTime.high)))
              return "endTime: integer|Long expected";
          }
          if (message.error != null && message.hasOwnProperty("error")) {
            if (!Array.isArray(message.error))
              return "error: array expected";
            for (var i = 0; i < message.error.length; ++i) {
              var error = $root2.Trace.Error.verify(message.error[i]);
              if (error)
                return "error." + error;
            }
          }
          if (message.child != null && message.hasOwnProperty("child")) {
            if (!Array.isArray(message.child))
              return "child: array expected";
            for (var i = 0; i < message.child.length; ++i) {
              var error = $root2.Trace.Node.verify(message.child[i]);
              if (error)
                return "child." + error;
            }
          }
          return null;
        };
        Node.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          var object = {};
          if (options.arrays || options.defaults) {
            object.error = [];
            object.child = [];
          }
          if (options.defaults) {
            object.type = "";
            object.cachePolicy = null;
            object.startTime = 0;
            object.endTime = 0;
            object.parentType = "";
            object.originalFieldName = "";
          }
          if (message.responseName != null && message.hasOwnProperty("responseName")) {
            object.responseName = message.responseName;
            if (options.oneofs)
              object.id = "responseName";
          }
          if (message.index != null && message.hasOwnProperty("index")) {
            object.index = message.index;
            if (options.oneofs)
              object.id = "index";
          }
          if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
          if (message.cachePolicy != null && message.hasOwnProperty("cachePolicy"))
            object.cachePolicy = $root2.Trace.CachePolicy.toObject(message.cachePolicy, options);
          if (message.startTime != null && message.hasOwnProperty("startTime"))
            if (typeof message.startTime === "number")
              object.startTime = options.longs === String ? String(message.startTime) : message.startTime;
            else
              object.startTime = options.longs === String ? $util2.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util2.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber(true) : message.startTime;
          if (message.endTime != null && message.hasOwnProperty("endTime"))
            if (typeof message.endTime === "number")
              object.endTime = options.longs === String ? String(message.endTime) : message.endTime;
            else
              object.endTime = options.longs === String ? $util2.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util2.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber(true) : message.endTime;
          if (message.error && message.error.length) {
            object.error = [];
            for (var j2 = 0; j2 < message.error.length; ++j2)
              object.error[j2] = $root2.Trace.Error.toObject(message.error[j2], options);
          }
          if (message.child && message.child.length) {
            object.child = [];
            for (var j2 = 0; j2 < message.child.length; ++j2)
              object.child[j2] = $root2.Trace.Node.toObject(message.child[j2], options);
          }
          if (message.parentType != null && message.hasOwnProperty("parentType"))
            object.parentType = message.parentType;
          if (message.originalFieldName != null && message.hasOwnProperty("originalFieldName"))
            object.originalFieldName = message.originalFieldName;
          return object;
        };
        Node.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
        };
        return Node;
      }();
      Trace2.QueryPlanNode = function() {
        function QueryPlanNode(properties) {
          if (properties) {
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        QueryPlanNode.prototype.sequence = null;
        QueryPlanNode.prototype.parallel = null;
        QueryPlanNode.prototype.fetch = null;
        QueryPlanNode.prototype.flatten = null;
        QueryPlanNode.prototype.defer = null;
        QueryPlanNode.prototype.condition = null;
        var $oneOfFields;
        Object.defineProperty(QueryPlanNode.prototype, "node", {
          get: $util2.oneOfGetter($oneOfFields = ["sequence", "parallel", "fetch", "flatten", "defer", "condition"]),
          set: $util2.oneOfSetter($oneOfFields)
        });
        QueryPlanNode.create = function create(properties) {
          return new QueryPlanNode(properties);
        };
        QueryPlanNode.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer2.create();
          if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
            $root2.Trace.QueryPlanNode.SequenceNode.encode(message.sequence, writer.uint32(
              /* id 1, wireType 2 =*/
              10
            ).fork()).ldelim();
          if (message.parallel != null && Object.hasOwnProperty.call(message, "parallel"))
            $root2.Trace.QueryPlanNode.ParallelNode.encode(message.parallel, writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim();
          if (message.fetch != null && Object.hasOwnProperty.call(message, "fetch"))
            $root2.Trace.QueryPlanNode.FetchNode.encode(message.fetch, writer.uint32(
              /* id 3, wireType 2 =*/
              26
            ).fork()).ldelim();
          if (message.flatten != null && Object.hasOwnProperty.call(message, "flatten"))
            $root2.Trace.QueryPlanNode.FlattenNode.encode(message.flatten, writer.uint32(
              /* id 4, wireType 2 =*/
              34
            ).fork()).ldelim();
          if (message.defer != null && Object.hasOwnProperty.call(message, "defer"))
            $root2.Trace.QueryPlanNode.DeferNode.encode(message.defer, writer.uint32(
              /* id 5, wireType 2 =*/
              42
            ).fork()).ldelim();
          if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
            $root2.Trace.QueryPlanNode.ConditionNode.encode(message.condition, writer.uint32(
              /* id 6, wireType 2 =*/
              50
            ).fork()).ldelim();
          return writer;
        };
        QueryPlanNode.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        QueryPlanNode.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader2))
            reader = $Reader2.create(reader);
          var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.QueryPlanNode();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.sequence = $root2.Trace.QueryPlanNode.SequenceNode.decode(reader, reader.uint32());
                break;
              case 2:
                message.parallel = $root2.Trace.QueryPlanNode.ParallelNode.decode(reader, reader.uint32());
                break;
              case 3:
                message.fetch = $root2.Trace.QueryPlanNode.FetchNode.decode(reader, reader.uint32());
                break;
              case 4:
                message.flatten = $root2.Trace.QueryPlanNode.FlattenNode.decode(reader, reader.uint32());
                break;
              case 5:
                message.defer = $root2.Trace.QueryPlanNode.DeferNode.decode(reader, reader.uint32());
                break;
              case 6:
                message.condition = $root2.Trace.QueryPlanNode.ConditionNode.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        QueryPlanNode.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader2))
            reader = new $Reader2(reader);
          return this.decode(reader, reader.uint32());
        };
        QueryPlanNode.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          var properties = {};
          if (message.sequence != null && message.hasOwnProperty("sequence")) {
            properties.node = 1;
            {
              var error = $root2.Trace.QueryPlanNode.SequenceNode.verify(message.sequence);
              if (error)
                return "sequence." + error;
            }
          }
          if (message.parallel != null && message.hasOwnProperty("parallel")) {
            if (properties.node === 1)
              return "node: multiple values";
            properties.node = 1;
            {
              var error = $root2.Trace.QueryPlanNode.ParallelNode.verify(message.parallel);
              if (error)
                return "parallel." + error;
            }
          }
          if (message.fetch != null && message.hasOwnProperty("fetch")) {
            if (properties.node === 1)
              return "node: multiple values";
            properties.node = 1;
            {
              var error = $root2.Trace.QueryPlanNode.FetchNode.verify(message.fetch);
              if (error)
                return "fetch." + error;
            }
          }
          if (message.flatten != null && message.hasOwnProperty("flatten")) {
            if (properties.node === 1)
              return "node: multiple values";
            properties.node = 1;
            {
              var error = $root2.Trace.QueryPlanNode.FlattenNode.verify(message.flatten);
              if (error)
                return "flatten." + error;
            }
          }
          if (message.defer != null && message.hasOwnProperty("defer")) {
            if (properties.node === 1)
              return "node: multiple values";
            properties.node = 1;
            {
              var error = $root2.Trace.QueryPlanNode.DeferNode.verify(message.defer);
              if (error)
                return "defer." + error;
            }
          }
          if (message.condition != null && message.hasOwnProperty("condition")) {
            if (properties.node === 1)
              return "node: multiple values";
            properties.node = 1;
            {
              var error = $root2.Trace.QueryPlanNode.ConditionNode.verify(message.condition);
              if (error)
                return "condition." + error;
            }
          }
          return null;
        };
        QueryPlanNode.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          var object = {};
          if (message.sequence != null && message.hasOwnProperty("sequence")) {
            object.sequence = $root2.Trace.QueryPlanNode.SequenceNode.toObject(message.sequence, options);
            if (options.oneofs)
              object.node = "sequence";
          }
          if (message.parallel != null && message.hasOwnProperty("parallel")) {
            object.parallel = $root2.Trace.QueryPlanNode.ParallelNode.toObject(message.parallel, options);
            if (options.oneofs)
              object.node = "parallel";
          }
          if (message.fetch != null && message.hasOwnProperty("fetch")) {
            object.fetch = $root2.Trace.QueryPlanNode.FetchNode.toObject(message.fetch, options);
            if (options.oneofs)
              object.node = "fetch";
          }
          if (message.flatten != null && message.hasOwnProperty("flatten")) {
            object.flatten = $root2.Trace.QueryPlanNode.FlattenNode.toObject(message.flatten, options);
            if (options.oneofs)
              object.node = "flatten";
          }
          if (message.defer != null && message.hasOwnProperty("defer")) {
            object.defer = $root2.Trace.QueryPlanNode.DeferNode.toObject(message.defer, options);
            if (options.oneofs)
              object.node = "defer";
          }
          if (message.condition != null && message.hasOwnProperty("condition")) {
            object.condition = $root2.Trace.QueryPlanNode.ConditionNode.toObject(message.condition, options);
            if (options.oneofs)
              object.node = "condition";
          }
          return object;
        };
        QueryPlanNode.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
        };
        QueryPlanNode.SequenceNode = function() {
          function SequenceNode(properties) {
            this.nodes = [];
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          SequenceNode.prototype.nodes = $util2.emptyArray;
          SequenceNode.create = function create(properties) {
            return new SequenceNode(properties);
          };
          SequenceNode.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer2.create();
            if (message.nodes != null && message.nodes.length)
              for (var i = 0; i < message.nodes.length; ++i)
                $root2.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
            return writer;
          };
          SequenceNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          SequenceNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader2))
              reader = $Reader2.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.QueryPlanNode.SequenceNode();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  if (!(message.nodes && message.nodes.length))
                    message.nodes = [];
                  message.nodes.push($root2.Trace.QueryPlanNode.decode(reader, reader.uint32()));
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          SequenceNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader2))
              reader = new $Reader2(reader);
            return this.decode(reader, reader.uint32());
          };
          SequenceNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.nodes != null && message.hasOwnProperty("nodes")) {
              if (!Array.isArray(message.nodes))
                return "nodes: array expected";
              for (var i = 0; i < message.nodes.length; ++i) {
                var error = $root2.Trace.QueryPlanNode.verify(message.nodes[i]);
                if (error)
                  return "nodes." + error;
              }
            }
            return null;
          };
          SequenceNode.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.arrays || options.defaults)
              object.nodes = [];
            if (message.nodes && message.nodes.length) {
              object.nodes = [];
              for (var j2 = 0; j2 < message.nodes.length; ++j2)
                object.nodes[j2] = $root2.Trace.QueryPlanNode.toObject(message.nodes[j2], options);
            }
            return object;
          };
          SequenceNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
          };
          return SequenceNode;
        }();
        QueryPlanNode.ParallelNode = function() {
          function ParallelNode(properties) {
            this.nodes = [];
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          ParallelNode.prototype.nodes = $util2.emptyArray;
          ParallelNode.create = function create(properties) {
            return new ParallelNode(properties);
          };
          ParallelNode.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer2.create();
            if (message.nodes != null && message.nodes.length)
              for (var i = 0; i < message.nodes.length; ++i)
                $root2.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
            return writer;
          };
          ParallelNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          ParallelNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader2))
              reader = $Reader2.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.QueryPlanNode.ParallelNode();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  if (!(message.nodes && message.nodes.length))
                    message.nodes = [];
                  message.nodes.push($root2.Trace.QueryPlanNode.decode(reader, reader.uint32()));
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          ParallelNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader2))
              reader = new $Reader2(reader);
            return this.decode(reader, reader.uint32());
          };
          ParallelNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.nodes != null && message.hasOwnProperty("nodes")) {
              if (!Array.isArray(message.nodes))
                return "nodes: array expected";
              for (var i = 0; i < message.nodes.length; ++i) {
                var error = $root2.Trace.QueryPlanNode.verify(message.nodes[i]);
                if (error)
                  return "nodes." + error;
              }
            }
            return null;
          };
          ParallelNode.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.arrays || options.defaults)
              object.nodes = [];
            if (message.nodes && message.nodes.length) {
              object.nodes = [];
              for (var j2 = 0; j2 < message.nodes.length; ++j2)
                object.nodes[j2] = $root2.Trace.QueryPlanNode.toObject(message.nodes[j2], options);
            }
            return object;
          };
          ParallelNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
          };
          return ParallelNode;
        }();
        QueryPlanNode.FetchNode = function() {
          function FetchNode(properties) {
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          FetchNode.prototype.serviceName = "";
          FetchNode.prototype.traceParsingFailed = false;
          FetchNode.prototype.trace = null;
          FetchNode.prototype.sentTimeOffset = 0;
          FetchNode.prototype.sentTime = null;
          FetchNode.prototype.receivedTime = null;
          FetchNode.create = function create(properties) {
            return new FetchNode(properties);
          };
          FetchNode.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer2.create();
            if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
              writer.uint32(
                /* id 1, wireType 2 =*/
                10
              ).string(message.serviceName);
            if (message.traceParsingFailed != null && Object.hasOwnProperty.call(message, "traceParsingFailed"))
              writer.uint32(
                /* id 2, wireType 0 =*/
                16
              ).bool(message.traceParsingFailed);
            if (message.trace != null && Object.hasOwnProperty.call(message, "trace"))
              $root2.Trace.encode(message.trace, writer.uint32(
                /* id 3, wireType 2 =*/
                26
              ).fork()).ldelim();
            if (message.sentTimeOffset != null && Object.hasOwnProperty.call(message, "sentTimeOffset"))
              writer.uint32(
                /* id 4, wireType 0 =*/
                32
              ).uint64(message.sentTimeOffset);
            if (message.sentTime != null && Object.hasOwnProperty.call(message, "sentTime"))
              $root2.google.protobuf.Timestamp.encode(message.sentTime, writer.uint32(
                /* id 5, wireType 2 =*/
                42
              ).fork()).ldelim();
            if (message.receivedTime != null && Object.hasOwnProperty.call(message, "receivedTime"))
              $root2.google.protobuf.Timestamp.encode(message.receivedTime, writer.uint32(
                /* id 6, wireType 2 =*/
                50
              ).fork()).ldelim();
            return writer;
          };
          FetchNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          FetchNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader2))
              reader = $Reader2.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.QueryPlanNode.FetchNode();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.serviceName = reader.string();
                  break;
                case 2:
                  message.traceParsingFailed = reader.bool();
                  break;
                case 3:
                  message.trace = $root2.Trace.decode(reader, reader.uint32());
                  break;
                case 4:
                  message.sentTimeOffset = reader.uint64();
                  break;
                case 5:
                  message.sentTime = $root2.google.protobuf.Timestamp.decode(reader, reader.uint32());
                  break;
                case 6:
                  message.receivedTime = $root2.google.protobuf.Timestamp.decode(reader, reader.uint32());
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          FetchNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader2))
              reader = new $Reader2(reader);
            return this.decode(reader, reader.uint32());
          };
          FetchNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.serviceName != null && message.hasOwnProperty("serviceName")) {
              if (!$util2.isString(message.serviceName))
                return "serviceName: string expected";
            }
            if (message.traceParsingFailed != null && message.hasOwnProperty("traceParsingFailed")) {
              if (typeof message.traceParsingFailed !== "boolean")
                return "traceParsingFailed: boolean expected";
            }
            if (message.trace != null && message.hasOwnProperty("trace")) {
              var error = $root2.Trace.verify(message.trace);
              if (error)
                return "trace." + error;
            }
            if (message.sentTimeOffset != null && message.hasOwnProperty("sentTimeOffset")) {
              if (!$util2.isInteger(message.sentTimeOffset) && !(message.sentTimeOffset && $util2.isInteger(message.sentTimeOffset.low) && $util2.isInteger(message.sentTimeOffset.high)))
                return "sentTimeOffset: integer|Long expected";
            }
            if (message.sentTime != null && message.hasOwnProperty("sentTime")) {
              var error = $root2.google.protobuf.Timestamp.verify(message.sentTime);
              if (error)
                return "sentTime." + error;
            }
            if (message.receivedTime != null && message.hasOwnProperty("receivedTime")) {
              var error = $root2.google.protobuf.Timestamp.verify(message.receivedTime);
              if (error)
                return "receivedTime." + error;
            }
            return null;
          };
          FetchNode.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.defaults) {
              object.serviceName = "";
              object.traceParsingFailed = false;
              object.trace = null;
              object.sentTimeOffset = 0;
              object.sentTime = null;
              object.receivedTime = null;
            }
            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
              object.serviceName = message.serviceName;
            if (message.traceParsingFailed != null && message.hasOwnProperty("traceParsingFailed"))
              object.traceParsingFailed = message.traceParsingFailed;
            if (message.trace != null && message.hasOwnProperty("trace"))
              object.trace = $root2.Trace.toObject(message.trace, options);
            if (message.sentTimeOffset != null && message.hasOwnProperty("sentTimeOffset"))
              if (typeof message.sentTimeOffset === "number")
                object.sentTimeOffset = options.longs === String ? String(message.sentTimeOffset) : message.sentTimeOffset;
              else
                object.sentTimeOffset = options.longs === String ? $util2.Long.prototype.toString.call(message.sentTimeOffset) : options.longs === Number ? new $util2.LongBits(message.sentTimeOffset.low >>> 0, message.sentTimeOffset.high >>> 0).toNumber(true) : message.sentTimeOffset;
            if (message.sentTime != null && message.hasOwnProperty("sentTime"))
              object.sentTime = $root2.google.protobuf.Timestamp.toObject(message.sentTime, options);
            if (message.receivedTime != null && message.hasOwnProperty("receivedTime"))
              object.receivedTime = $root2.google.protobuf.Timestamp.toObject(message.receivedTime, options);
            return object;
          };
          FetchNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
          };
          return FetchNode;
        }();
        QueryPlanNode.FlattenNode = function() {
          function FlattenNode(properties) {
            this.responsePath = [];
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          FlattenNode.prototype.responsePath = $util2.emptyArray;
          FlattenNode.prototype.node = null;
          FlattenNode.create = function create(properties) {
            return new FlattenNode(properties);
          };
          FlattenNode.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer2.create();
            if (message.responsePath != null && message.responsePath.length)
              for (var i = 0; i < message.responsePath.length; ++i)
                $root2.Trace.QueryPlanNode.ResponsePathElement.encode(message.responsePath[i], writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
            if (message.node != null && Object.hasOwnProperty.call(message, "node"))
              $root2.Trace.QueryPlanNode.encode(message.node, writer.uint32(
                /* id 2, wireType 2 =*/
                18
              ).fork()).ldelim();
            return writer;
          };
          FlattenNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          FlattenNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader2))
              reader = $Reader2.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.QueryPlanNode.FlattenNode();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  if (!(message.responsePath && message.responsePath.length))
                    message.responsePath = [];
                  message.responsePath.push($root2.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));
                  break;
                case 2:
                  message.node = $root2.Trace.QueryPlanNode.decode(reader, reader.uint32());
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          FlattenNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader2))
              reader = new $Reader2(reader);
            return this.decode(reader, reader.uint32());
          };
          FlattenNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.responsePath != null && message.hasOwnProperty("responsePath")) {
              if (!Array.isArray(message.responsePath))
                return "responsePath: array expected";
              for (var i = 0; i < message.responsePath.length; ++i) {
                var error = $root2.Trace.QueryPlanNode.ResponsePathElement.verify(message.responsePath[i]);
                if (error)
                  return "responsePath." + error;
              }
            }
            if (message.node != null && message.hasOwnProperty("node")) {
              var error = $root2.Trace.QueryPlanNode.verify(message.node);
              if (error)
                return "node." + error;
            }
            return null;
          };
          FlattenNode.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.arrays || options.defaults)
              object.responsePath = [];
            if (options.defaults)
              object.node = null;
            if (message.responsePath && message.responsePath.length) {
              object.responsePath = [];
              for (var j2 = 0; j2 < message.responsePath.length; ++j2)
                object.responsePath[j2] = $root2.Trace.QueryPlanNode.ResponsePathElement.toObject(message.responsePath[j2], options);
            }
            if (message.node != null && message.hasOwnProperty("node"))
              object.node = $root2.Trace.QueryPlanNode.toObject(message.node, options);
            return object;
          };
          FlattenNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
          };
          return FlattenNode;
        }();
        QueryPlanNode.DeferNode = function() {
          function DeferNode(properties) {
            this.deferred = [];
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          DeferNode.prototype.primary = null;
          DeferNode.prototype.deferred = $util2.emptyArray;
          DeferNode.create = function create(properties) {
            return new DeferNode(properties);
          };
          DeferNode.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer2.create();
            if (message.primary != null && Object.hasOwnProperty.call(message, "primary"))
              $root2.Trace.QueryPlanNode.DeferNodePrimary.encode(message.primary, writer.uint32(
                /* id 1, wireType 2 =*/
                10
              ).fork()).ldelim();
            if (message.deferred != null && message.deferred.length)
              for (var i = 0; i < message.deferred.length; ++i)
                $root2.Trace.QueryPlanNode.DeferredNode.encode(message.deferred[i], writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).fork()).ldelim();
            return writer;
          };
          DeferNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          DeferNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader2))
              reader = $Reader2.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.QueryPlanNode.DeferNode();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.primary = $root2.Trace.QueryPlanNode.DeferNodePrimary.decode(reader, reader.uint32());
                  break;
                case 2:
                  if (!(message.deferred && message.deferred.length))
                    message.deferred = [];
                  message.deferred.push($root2.Trace.QueryPlanNode.DeferredNode.decode(reader, reader.uint32()));
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          DeferNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader2))
              reader = new $Reader2(reader);
            return this.decode(reader, reader.uint32());
          };
          DeferNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.primary != null && message.hasOwnProperty("primary")) {
              var error = $root2.Trace.QueryPlanNode.DeferNodePrimary.verify(message.primary);
              if (error)
                return "primary." + error;
            }
            if (message.deferred != null && message.hasOwnProperty("deferred")) {
              if (!Array.isArray(message.deferred))
                return "deferred: array expected";
              for (var i = 0; i < message.deferred.length; ++i) {
                var error = $root2.Trace.QueryPlanNode.DeferredNode.verify(message.deferred[i]);
                if (error)
                  return "deferred." + error;
              }
            }
            return null;
          };
          DeferNode.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.arrays || options.defaults)
              object.deferred = [];
            if (options.defaults)
              object.primary = null;
            if (message.primary != null && message.hasOwnProperty("primary"))
              object.primary = $root2.Trace.QueryPlanNode.DeferNodePrimary.toObject(message.primary, options);
            if (message.deferred && message.deferred.length) {
              object.deferred = [];
              for (var j2 = 0; j2 < message.deferred.length; ++j2)
                object.deferred[j2] = $root2.Trace.QueryPlanNode.DeferredNode.toObject(message.deferred[j2], options);
            }
            return object;
          };
          DeferNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
          };
          return DeferNode;
        }();
        QueryPlanNode.ConditionNode = function() {
          function ConditionNode(properties) {
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          ConditionNode.prototype.condition = "";
          ConditionNode.prototype.ifClause = null;
          ConditionNode.prototype.elseClause = null;
          ConditionNode.create = function create(properties) {
            return new ConditionNode(properties);
          };
          ConditionNode.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer2.create();
            if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
              writer.uint32(
                /* id 1, wireType 2 =*/
                10
              ).string(message.condition);
            if (message.ifClause != null && Object.hasOwnProperty.call(message, "ifClause"))
              $root2.Trace.QueryPlanNode.encode(message.ifClause, writer.uint32(
                /* id 2, wireType 2 =*/
                18
              ).fork()).ldelim();
            if (message.elseClause != null && Object.hasOwnProperty.call(message, "elseClause"))
              $root2.Trace.QueryPlanNode.encode(message.elseClause, writer.uint32(
                /* id 3, wireType 2 =*/
                26
              ).fork()).ldelim();
            return writer;
          };
          ConditionNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          ConditionNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader2))
              reader = $Reader2.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.QueryPlanNode.ConditionNode();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.condition = reader.string();
                  break;
                case 2:
                  message.ifClause = $root2.Trace.QueryPlanNode.decode(reader, reader.uint32());
                  break;
                case 3:
                  message.elseClause = $root2.Trace.QueryPlanNode.decode(reader, reader.uint32());
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          ConditionNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader2))
              reader = new $Reader2(reader);
            return this.decode(reader, reader.uint32());
          };
          ConditionNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.condition != null && message.hasOwnProperty("condition")) {
              if (!$util2.isString(message.condition))
                return "condition: string expected";
            }
            if (message.ifClause != null && message.hasOwnProperty("ifClause")) {
              var error = $root2.Trace.QueryPlanNode.verify(message.ifClause);
              if (error)
                return "ifClause." + error;
            }
            if (message.elseClause != null && message.hasOwnProperty("elseClause")) {
              var error = $root2.Trace.QueryPlanNode.verify(message.elseClause);
              if (error)
                return "elseClause." + error;
            }
            return null;
          };
          ConditionNode.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.defaults) {
              object.condition = "";
              object.ifClause = null;
              object.elseClause = null;
            }
            if (message.condition != null && message.hasOwnProperty("condition"))
              object.condition = message.condition;
            if (message.ifClause != null && message.hasOwnProperty("ifClause"))
              object.ifClause = $root2.Trace.QueryPlanNode.toObject(message.ifClause, options);
            if (message.elseClause != null && message.hasOwnProperty("elseClause"))
              object.elseClause = $root2.Trace.QueryPlanNode.toObject(message.elseClause, options);
            return object;
          };
          ConditionNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
          };
          return ConditionNode;
        }();
        QueryPlanNode.DeferNodePrimary = function() {
          function DeferNodePrimary(properties) {
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          DeferNodePrimary.prototype.node = null;
          DeferNodePrimary.create = function create(properties) {
            return new DeferNodePrimary(properties);
          };
          DeferNodePrimary.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer2.create();
            if (message.node != null && Object.hasOwnProperty.call(message, "node"))
              $root2.Trace.QueryPlanNode.encode(message.node, writer.uint32(
                /* id 1, wireType 2 =*/
                10
              ).fork()).ldelim();
            return writer;
          };
          DeferNodePrimary.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          DeferNodePrimary.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader2))
              reader = $Reader2.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.QueryPlanNode.DeferNodePrimary();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.node = $root2.Trace.QueryPlanNode.decode(reader, reader.uint32());
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          DeferNodePrimary.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader2))
              reader = new $Reader2(reader);
            return this.decode(reader, reader.uint32());
          };
          DeferNodePrimary.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.node != null && message.hasOwnProperty("node")) {
              var error = $root2.Trace.QueryPlanNode.verify(message.node);
              if (error)
                return "node." + error;
            }
            return null;
          };
          DeferNodePrimary.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.defaults)
              object.node = null;
            if (message.node != null && message.hasOwnProperty("node"))
              object.node = $root2.Trace.QueryPlanNode.toObject(message.node, options);
            return object;
          };
          DeferNodePrimary.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
          };
          return DeferNodePrimary;
        }();
        QueryPlanNode.DeferredNode = function() {
          function DeferredNode(properties) {
            this.depends = [];
            this.path = [];
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          DeferredNode.prototype.depends = $util2.emptyArray;
          DeferredNode.prototype.label = "";
          DeferredNode.prototype.path = $util2.emptyArray;
          DeferredNode.prototype.node = null;
          DeferredNode.create = function create(properties) {
            return new DeferredNode(properties);
          };
          DeferredNode.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer2.create();
            if (message.depends != null && message.depends.length)
              for (var i = 0; i < message.depends.length; ++i)
                $root2.Trace.QueryPlanNode.DeferredNodeDepends.encode(message.depends[i], writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
            if (message.label != null && Object.hasOwnProperty.call(message, "label"))
              writer.uint32(
                /* id 2, wireType 2 =*/
                18
              ).string(message.label);
            if (message.path != null && message.path.length)
              for (var i = 0; i < message.path.length; ++i)
                $root2.Trace.QueryPlanNode.ResponsePathElement.encode(message.path[i], writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).fork()).ldelim();
            if (message.node != null && Object.hasOwnProperty.call(message, "node"))
              $root2.Trace.QueryPlanNode.encode(message.node, writer.uint32(
                /* id 4, wireType 2 =*/
                34
              ).fork()).ldelim();
            return writer;
          };
          DeferredNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          DeferredNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader2))
              reader = $Reader2.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.QueryPlanNode.DeferredNode();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  if (!(message.depends && message.depends.length))
                    message.depends = [];
                  message.depends.push($root2.Trace.QueryPlanNode.DeferredNodeDepends.decode(reader, reader.uint32()));
                  break;
                case 2:
                  message.label = reader.string();
                  break;
                case 3:
                  if (!(message.path && message.path.length))
                    message.path = [];
                  message.path.push($root2.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));
                  break;
                case 4:
                  message.node = $root2.Trace.QueryPlanNode.decode(reader, reader.uint32());
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          DeferredNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader2))
              reader = new $Reader2(reader);
            return this.decode(reader, reader.uint32());
          };
          DeferredNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.depends != null && message.hasOwnProperty("depends")) {
              if (!Array.isArray(message.depends))
                return "depends: array expected";
              for (var i = 0; i < message.depends.length; ++i) {
                var error = $root2.Trace.QueryPlanNode.DeferredNodeDepends.verify(message.depends[i]);
                if (error)
                  return "depends." + error;
              }
            }
            if (message.label != null && message.hasOwnProperty("label")) {
              if (!$util2.isString(message.label))
                return "label: string expected";
            }
            if (message.path != null && message.hasOwnProperty("path")) {
              if (!Array.isArray(message.path))
                return "path: array expected";
              for (var i = 0; i < message.path.length; ++i) {
                var error = $root2.Trace.QueryPlanNode.ResponsePathElement.verify(message.path[i]);
                if (error)
                  return "path." + error;
              }
            }
            if (message.node != null && message.hasOwnProperty("node")) {
              var error = $root2.Trace.QueryPlanNode.verify(message.node);
              if (error)
                return "node." + error;
            }
            return null;
          };
          DeferredNode.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.arrays || options.defaults) {
              object.depends = [];
              object.path = [];
            }
            if (options.defaults) {
              object.label = "";
              object.node = null;
            }
            if (message.depends && message.depends.length) {
              object.depends = [];
              for (var j2 = 0; j2 < message.depends.length; ++j2)
                object.depends[j2] = $root2.Trace.QueryPlanNode.DeferredNodeDepends.toObject(message.depends[j2], options);
            }
            if (message.label != null && message.hasOwnProperty("label"))
              object.label = message.label;
            if (message.path && message.path.length) {
              object.path = [];
              for (var j2 = 0; j2 < message.path.length; ++j2)
                object.path[j2] = $root2.Trace.QueryPlanNode.ResponsePathElement.toObject(message.path[j2], options);
            }
            if (message.node != null && message.hasOwnProperty("node"))
              object.node = $root2.Trace.QueryPlanNode.toObject(message.node, options);
            return object;
          };
          DeferredNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
          };
          return DeferredNode;
        }();
        QueryPlanNode.DeferredNodeDepends = function() {
          function DeferredNodeDepends(properties) {
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          DeferredNodeDepends.prototype.id = "";
          DeferredNodeDepends.prototype.deferLabel = "";
          DeferredNodeDepends.create = function create(properties) {
            return new DeferredNodeDepends(properties);
          };
          DeferredNodeDepends.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer2.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
              writer.uint32(
                /* id 1, wireType 2 =*/
                10
              ).string(message.id);
            if (message.deferLabel != null && Object.hasOwnProperty.call(message, "deferLabel"))
              writer.uint32(
                /* id 2, wireType 2 =*/
                18
              ).string(message.deferLabel);
            return writer;
          };
          DeferredNodeDepends.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          DeferredNodeDepends.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader2))
              reader = $Reader2.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.QueryPlanNode.DeferredNodeDepends();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.id = reader.string();
                  break;
                case 2:
                  message.deferLabel = reader.string();
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          DeferredNodeDepends.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader2))
              reader = new $Reader2(reader);
            return this.decode(reader, reader.uint32());
          };
          DeferredNodeDepends.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.id != null && message.hasOwnProperty("id")) {
              if (!$util2.isString(message.id))
                return "id: string expected";
            }
            if (message.deferLabel != null && message.hasOwnProperty("deferLabel")) {
              if (!$util2.isString(message.deferLabel))
                return "deferLabel: string expected";
            }
            return null;
          };
          DeferredNodeDepends.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.defaults) {
              object.id = "";
              object.deferLabel = "";
            }
            if (message.id != null && message.hasOwnProperty("id"))
              object.id = message.id;
            if (message.deferLabel != null && message.hasOwnProperty("deferLabel"))
              object.deferLabel = message.deferLabel;
            return object;
          };
          DeferredNodeDepends.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
          };
          return DeferredNodeDepends;
        }();
        QueryPlanNode.ResponsePathElement = function() {
          function ResponsePathElement(properties) {
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          ResponsePathElement.prototype.fieldName = "";
          ResponsePathElement.prototype.index = 0;
          var $oneOfFields2;
          Object.defineProperty(ResponsePathElement.prototype, "id", {
            get: $util2.oneOfGetter($oneOfFields2 = ["fieldName", "index"]),
            set: $util2.oneOfSetter($oneOfFields2)
          });
          ResponsePathElement.create = function create(properties) {
            return new ResponsePathElement(properties);
          };
          ResponsePathElement.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer2.create();
            if (message.fieldName != null && Object.hasOwnProperty.call(message, "fieldName"))
              writer.uint32(
                /* id 1, wireType 2 =*/
                10
              ).string(message.fieldName);
            if (message.index != null && Object.hasOwnProperty.call(message, "index"))
              writer.uint32(
                /* id 2, wireType 0 =*/
                16
              ).uint32(message.index);
            return writer;
          };
          ResponsePathElement.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          ResponsePathElement.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader2))
              reader = $Reader2.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Trace.QueryPlanNode.ResponsePathElement();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.fieldName = reader.string();
                  break;
                case 2:
                  message.index = reader.uint32();
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          ResponsePathElement.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader2))
              reader = new $Reader2(reader);
            return this.decode(reader, reader.uint32());
          };
          ResponsePathElement.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            var properties = {};
            if (message.fieldName != null && message.hasOwnProperty("fieldName")) {
              properties.id = 1;
              if (!$util2.isString(message.fieldName))
                return "fieldName: string expected";
            }
            if (message.index != null && message.hasOwnProperty("index")) {
              if (properties.id === 1)
                return "id: multiple values";
              properties.id = 1;
              if (!$util2.isInteger(message.index))
                return "index: integer expected";
            }
            return null;
          };
          ResponsePathElement.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (message.fieldName != null && message.hasOwnProperty("fieldName")) {
              object.fieldName = message.fieldName;
              if (options.oneofs)
                object.id = "fieldName";
            }
            if (message.index != null && message.hasOwnProperty("index")) {
              object.index = message.index;
              if (options.oneofs)
                object.id = "index";
            }
            return object;
          };
          ResponsePathElement.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
          };
          return ResponsePathElement;
        }();
        return QueryPlanNode;
      }();
      return Trace2;
    }();
    $root2.ReportHeader = function() {
      function ReportHeader2(properties) {
        if (properties) {
          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      ReportHeader2.prototype.graphRef = "";
      ReportHeader2.prototype.hostname = "";
      ReportHeader2.prototype.agentVersion = "";
      ReportHeader2.prototype.serviceVersion = "";
      ReportHeader2.prototype.runtimeVersion = "";
      ReportHeader2.prototype.uname = "";
      ReportHeader2.prototype.executableSchemaId = "";
      ReportHeader2.create = function create(properties) {
        return new ReportHeader2(properties);
      };
      ReportHeader2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer2.create();
        if (message.hostname != null && Object.hasOwnProperty.call(message, "hostname"))
          writer.uint32(
            /* id 5, wireType 2 =*/
            42
          ).string(message.hostname);
        if (message.agentVersion != null && Object.hasOwnProperty.call(message, "agentVersion"))
          writer.uint32(
            /* id 6, wireType 2 =*/
            50
          ).string(message.agentVersion);
        if (message.serviceVersion != null && Object.hasOwnProperty.call(message, "serviceVersion"))
          writer.uint32(
            /* id 7, wireType 2 =*/
            58
          ).string(message.serviceVersion);
        if (message.runtimeVersion != null && Object.hasOwnProperty.call(message, "runtimeVersion"))
          writer.uint32(
            /* id 8, wireType 2 =*/
            66
          ).string(message.runtimeVersion);
        if (message.uname != null && Object.hasOwnProperty.call(message, "uname"))
          writer.uint32(
            /* id 9, wireType 2 =*/
            74
          ).string(message.uname);
        if (message.executableSchemaId != null && Object.hasOwnProperty.call(message, "executableSchemaId"))
          writer.uint32(
            /* id 11, wireType 2 =*/
            90
          ).string(message.executableSchemaId);
        if (message.graphRef != null && Object.hasOwnProperty.call(message, "graphRef"))
          writer.uint32(
            /* id 12, wireType 2 =*/
            98
          ).string(message.graphRef);
        return writer;
      };
      ReportHeader2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      ReportHeader2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader2))
          reader = $Reader2.create(reader);
        var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.ReportHeader();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
            case 12:
              message.graphRef = reader.string();
              break;
            case 5:
              message.hostname = reader.string();
              break;
            case 6:
              message.agentVersion = reader.string();
              break;
            case 7:
              message.serviceVersion = reader.string();
              break;
            case 8:
              message.runtimeVersion = reader.string();
              break;
            case 9:
              message.uname = reader.string();
              break;
            case 11:
              message.executableSchemaId = reader.string();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      ReportHeader2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader2))
          reader = new $Reader2(reader);
        return this.decode(reader, reader.uint32());
      };
      ReportHeader2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.graphRef != null && message.hasOwnProperty("graphRef")) {
          if (!$util2.isString(message.graphRef))
            return "graphRef: string expected";
        }
        if (message.hostname != null && message.hasOwnProperty("hostname")) {
          if (!$util2.isString(message.hostname))
            return "hostname: string expected";
        }
        if (message.agentVersion != null && message.hasOwnProperty("agentVersion")) {
          if (!$util2.isString(message.agentVersion))
            return "agentVersion: string expected";
        }
        if (message.serviceVersion != null && message.hasOwnProperty("serviceVersion")) {
          if (!$util2.isString(message.serviceVersion))
            return "serviceVersion: string expected";
        }
        if (message.runtimeVersion != null && message.hasOwnProperty("runtimeVersion")) {
          if (!$util2.isString(message.runtimeVersion))
            return "runtimeVersion: string expected";
        }
        if (message.uname != null && message.hasOwnProperty("uname")) {
          if (!$util2.isString(message.uname))
            return "uname: string expected";
        }
        if (message.executableSchemaId != null && message.hasOwnProperty("executableSchemaId")) {
          if (!$util2.isString(message.executableSchemaId))
            return "executableSchemaId: string expected";
        }
        return null;
      };
      ReportHeader2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        var object = {};
        if (options.defaults) {
          object.hostname = "";
          object.agentVersion = "";
          object.serviceVersion = "";
          object.runtimeVersion = "";
          object.uname = "";
          object.executableSchemaId = "";
          object.graphRef = "";
        }
        if (message.hostname != null && message.hasOwnProperty("hostname"))
          object.hostname = message.hostname;
        if (message.agentVersion != null && message.hasOwnProperty("agentVersion"))
          object.agentVersion = message.agentVersion;
        if (message.serviceVersion != null && message.hasOwnProperty("serviceVersion"))
          object.serviceVersion = message.serviceVersion;
        if (message.runtimeVersion != null && message.hasOwnProperty("runtimeVersion"))
          object.runtimeVersion = message.runtimeVersion;
        if (message.uname != null && message.hasOwnProperty("uname"))
          object.uname = message.uname;
        if (message.executableSchemaId != null && message.hasOwnProperty("executableSchemaId"))
          object.executableSchemaId = message.executableSchemaId;
        if (message.graphRef != null && message.hasOwnProperty("graphRef"))
          object.graphRef = message.graphRef;
        return object;
      };
      ReportHeader2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
      };
      return ReportHeader2;
    }();
    $root2.PathErrorStats = function() {
      function PathErrorStats2(properties) {
        this.children = {};
        if (properties) {
          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      PathErrorStats2.prototype.children = $util2.emptyObject;
      PathErrorStats2.prototype.errorsCount = 0;
      PathErrorStats2.prototype.requestsWithErrorsCount = 0;
      PathErrorStats2.create = function create(properties) {
        return new PathErrorStats2(properties);
      };
      PathErrorStats2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer2.create();
        if (message.children != null && Object.hasOwnProperty.call(message, "children"))
          for (var keys = Object.keys(message.children), i = 0; i < keys.length; ++i) {
            writer.uint32(
              /* id 1, wireType 2 =*/
              10
            ).fork().uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(keys[i]);
            $root2.PathErrorStats.encode(message.children[keys[i]], writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim().ldelim();
          }
        if (message.errorsCount != null && Object.hasOwnProperty.call(message, "errorsCount"))
          writer.uint32(
            /* id 4, wireType 0 =*/
            32
          ).uint64(message.errorsCount);
        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, "requestsWithErrorsCount"))
          writer.uint32(
            /* id 5, wireType 0 =*/
            40
          ).uint64(message.requestsWithErrorsCount);
        return writer;
      };
      PathErrorStats2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      PathErrorStats2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader2))
          reader = $Reader2.create(reader);
        var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.PathErrorStats(), key;
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              reader.skip().pos++;
              if (message.children === $util2.emptyObject)
                message.children = {};
              key = reader.string();
              reader.pos++;
              message.children[key] = $root2.PathErrorStats.decode(reader, reader.uint32());
              break;
            case 4:
              message.errorsCount = reader.uint64();
              break;
            case 5:
              message.requestsWithErrorsCount = reader.uint64();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      PathErrorStats2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader2))
          reader = new $Reader2(reader);
        return this.decode(reader, reader.uint32());
      };
      PathErrorStats2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.children != null && message.hasOwnProperty("children")) {
          if (!$util2.isObject(message.children))
            return "children: object expected";
          var key = Object.keys(message.children);
          for (var i = 0; i < key.length; ++i) {
            var error = $root2.PathErrorStats.verify(message.children[key[i]]);
            if (error)
              return "children." + error;
          }
        }
        if (message.errorsCount != null && message.hasOwnProperty("errorsCount")) {
          if (!$util2.isInteger(message.errorsCount) && !(message.errorsCount && $util2.isInteger(message.errorsCount.low) && $util2.isInteger(message.errorsCount.high)))
            return "errorsCount: integer|Long expected";
        }
        if (message.requestsWithErrorsCount != null && message.hasOwnProperty("requestsWithErrorsCount")) {
          if (!$util2.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util2.isInteger(message.requestsWithErrorsCount.low) && $util2.isInteger(message.requestsWithErrorsCount.high)))
            return "requestsWithErrorsCount: integer|Long expected";
        }
        return null;
      };
      PathErrorStats2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        var object = {};
        if (options.objects || options.defaults)
          object.children = {};
        if (options.defaults) {
          object.errorsCount = 0;
          object.requestsWithErrorsCount = 0;
        }
        var keys2;
        if (message.children && (keys2 = Object.keys(message.children)).length) {
          object.children = {};
          for (var j2 = 0; j2 < keys2.length; ++j2)
            object.children[keys2[j2]] = $root2.PathErrorStats.toObject(message.children[keys2[j2]], options);
        }
        if (message.errorsCount != null && message.hasOwnProperty("errorsCount"))
          if (typeof message.errorsCount === "number")
            object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;
          else
            object.errorsCount = options.longs === String ? $util2.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util2.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;
        if (message.requestsWithErrorsCount != null && message.hasOwnProperty("requestsWithErrorsCount"))
          if (typeof message.requestsWithErrorsCount === "number")
            object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;
          else
            object.requestsWithErrorsCount = options.longs === String ? $util2.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util2.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;
        return object;
      };
      PathErrorStats2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
      };
      return PathErrorStats2;
    }();
    $root2.QueryLatencyStats = function() {
      function QueryLatencyStats2(properties) {
        this.latencyCount = [];
        this.cacheLatencyCount = [];
        this.publicCacheTtlCount = [];
        this.privateCacheTtlCount = [];
        if (properties) {
          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      QueryLatencyStats2.prototype.latencyCount = $util2.emptyArray;
      QueryLatencyStats2.prototype.requestCount = 0;
      QueryLatencyStats2.prototype.cacheHits = 0;
      QueryLatencyStats2.prototype.persistedQueryHits = 0;
      QueryLatencyStats2.prototype.persistedQueryMisses = 0;
      QueryLatencyStats2.prototype.cacheLatencyCount = $util2.emptyArray;
      QueryLatencyStats2.prototype.rootErrorStats = null;
      QueryLatencyStats2.prototype.requestsWithErrorsCount = 0;
      QueryLatencyStats2.prototype.publicCacheTtlCount = $util2.emptyArray;
      QueryLatencyStats2.prototype.privateCacheTtlCount = $util2.emptyArray;
      QueryLatencyStats2.prototype.registeredOperationCount = 0;
      QueryLatencyStats2.prototype.forbiddenOperationCount = 0;
      QueryLatencyStats2.prototype.requestsWithoutFieldInstrumentation = 0;
      QueryLatencyStats2.create = function create(properties) {
        return new QueryLatencyStats2(properties);
      };
      QueryLatencyStats2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer2.create();
        if (message.requestCount != null && Object.hasOwnProperty.call(message, "requestCount"))
          writer.uint32(
            /* id 2, wireType 0 =*/
            16
          ).uint64(message.requestCount);
        if (message.cacheHits != null && Object.hasOwnProperty.call(message, "cacheHits"))
          writer.uint32(
            /* id 3, wireType 0 =*/
            24
          ).uint64(message.cacheHits);
        if (message.persistedQueryHits != null && Object.hasOwnProperty.call(message, "persistedQueryHits"))
          writer.uint32(
            /* id 4, wireType 0 =*/
            32
          ).uint64(message.persistedQueryHits);
        if (message.persistedQueryMisses != null && Object.hasOwnProperty.call(message, "persistedQueryMisses"))
          writer.uint32(
            /* id 5, wireType 0 =*/
            40
          ).uint64(message.persistedQueryMisses);
        if (message.rootErrorStats != null && Object.hasOwnProperty.call(message, "rootErrorStats"))
          $root2.PathErrorStats.encode(message.rootErrorStats, writer.uint32(
            /* id 7, wireType 2 =*/
            58
          ).fork()).ldelim();
        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, "requestsWithErrorsCount"))
          writer.uint32(
            /* id 8, wireType 0 =*/
            64
          ).uint64(message.requestsWithErrorsCount);
        if (message.registeredOperationCount != null && Object.hasOwnProperty.call(message, "registeredOperationCount"))
          writer.uint32(
            /* id 11, wireType 0 =*/
            88
          ).uint64(message.registeredOperationCount);
        if (message.forbiddenOperationCount != null && Object.hasOwnProperty.call(message, "forbiddenOperationCount"))
          writer.uint32(
            /* id 12, wireType 0 =*/
            96
          ).uint64(message.forbiddenOperationCount);
        var array13;
        if (message.latencyCount != null && message.latencyCount.toArray)
          array13 = message.latencyCount.toArray();
        else
          array13 = message.latencyCount;
        if (array13 != null && array13.length) {
          writer.uint32(
            /* id 13, wireType 2 =*/
            106
          ).fork();
          for (var i = 0; i < array13.length; ++i)
            writer.sint64(array13[i]);
          writer.ldelim();
        }
        var array14;
        if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray)
          array14 = message.cacheLatencyCount.toArray();
        else
          array14 = message.cacheLatencyCount;
        if (array14 != null && array14.length) {
          writer.uint32(
            /* id 14, wireType 2 =*/
            114
          ).fork();
          for (var i = 0; i < array14.length; ++i)
            writer.sint64(array14[i]);
          writer.ldelim();
        }
        var array15;
        if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray)
          array15 = message.publicCacheTtlCount.toArray();
        else
          array15 = message.publicCacheTtlCount;
        if (array15 != null && array15.length) {
          writer.uint32(
            /* id 15, wireType 2 =*/
            122
          ).fork();
          for (var i = 0; i < array15.length; ++i)
            writer.sint64(array15[i]);
          writer.ldelim();
        }
        var array16;
        if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray)
          array16 = message.privateCacheTtlCount.toArray();
        else
          array16 = message.privateCacheTtlCount;
        if (array16 != null && array16.length) {
          writer.uint32(
            /* id 16, wireType 2 =*/
            130
          ).fork();
          for (var i = 0; i < array16.length; ++i)
            writer.sint64(array16[i]);
          writer.ldelim();
        }
        if (message.requestsWithoutFieldInstrumentation != null && Object.hasOwnProperty.call(message, "requestsWithoutFieldInstrumentation"))
          writer.uint32(
            /* id 17, wireType 0 =*/
            136
          ).uint64(message.requestsWithoutFieldInstrumentation);
        return writer;
      };
      QueryLatencyStats2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      QueryLatencyStats2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader2))
          reader = $Reader2.create(reader);
        var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.QueryLatencyStats();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
            case 13:
              if (!(message.latencyCount && message.latencyCount.length))
                message.latencyCount = [];
              if ((tag & 7) === 2) {
                var end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2)
                  message.latencyCount.push(reader.sint64());
              } else
                message.latencyCount.push(reader.sint64());
              break;
            case 2:
              message.requestCount = reader.uint64();
              break;
            case 3:
              message.cacheHits = reader.uint64();
              break;
            case 4:
              message.persistedQueryHits = reader.uint64();
              break;
            case 5:
              message.persistedQueryMisses = reader.uint64();
              break;
            case 14:
              if (!(message.cacheLatencyCount && message.cacheLatencyCount.length))
                message.cacheLatencyCount = [];
              if ((tag & 7) === 2) {
                var end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2)
                  message.cacheLatencyCount.push(reader.sint64());
              } else
                message.cacheLatencyCount.push(reader.sint64());
              break;
            case 7:
              message.rootErrorStats = $root2.PathErrorStats.decode(reader, reader.uint32());
              break;
            case 8:
              message.requestsWithErrorsCount = reader.uint64();
              break;
            case 15:
              if (!(message.publicCacheTtlCount && message.publicCacheTtlCount.length))
                message.publicCacheTtlCount = [];
              if ((tag & 7) === 2) {
                var end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2)
                  message.publicCacheTtlCount.push(reader.sint64());
              } else
                message.publicCacheTtlCount.push(reader.sint64());
              break;
            case 16:
              if (!(message.privateCacheTtlCount && message.privateCacheTtlCount.length))
                message.privateCacheTtlCount = [];
              if ((tag & 7) === 2) {
                var end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2)
                  message.privateCacheTtlCount.push(reader.sint64());
              } else
                message.privateCacheTtlCount.push(reader.sint64());
              break;
            case 11:
              message.registeredOperationCount = reader.uint64();
              break;
            case 12:
              message.forbiddenOperationCount = reader.uint64();
              break;
            case 17:
              message.requestsWithoutFieldInstrumentation = reader.uint64();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      QueryLatencyStats2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader2))
          reader = new $Reader2(reader);
        return this.decode(reader, reader.uint32());
      };
      QueryLatencyStats2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.latencyCount != null && message.hasOwnProperty("latencyCount")) {
          var array13;
          if (message.latencyCount != null && message.latencyCount.toArray)
            array13 = message.latencyCount.toArray();
          else
            array13 = message.latencyCount;
          if (!Array.isArray(array13))
            return "latencyCount: array expected";
          for (var i = 0; i < array13.length; ++i)
            if (!$util2.isInteger(array13[i]) && !(array13[i] && $util2.isInteger(array13[i].low) && $util2.isInteger(array13[i].high)))
              return "latencyCount: integer|Long[] expected";
        }
        if (message.requestCount != null && message.hasOwnProperty("requestCount")) {
          if (!$util2.isInteger(message.requestCount) && !(message.requestCount && $util2.isInteger(message.requestCount.low) && $util2.isInteger(message.requestCount.high)))
            return "requestCount: integer|Long expected";
        }
        if (message.cacheHits != null && message.hasOwnProperty("cacheHits")) {
          if (!$util2.isInteger(message.cacheHits) && !(message.cacheHits && $util2.isInteger(message.cacheHits.low) && $util2.isInteger(message.cacheHits.high)))
            return "cacheHits: integer|Long expected";
        }
        if (message.persistedQueryHits != null && message.hasOwnProperty("persistedQueryHits")) {
          if (!$util2.isInteger(message.persistedQueryHits) && !(message.persistedQueryHits && $util2.isInteger(message.persistedQueryHits.low) && $util2.isInteger(message.persistedQueryHits.high)))
            return "persistedQueryHits: integer|Long expected";
        }
        if (message.persistedQueryMisses != null && message.hasOwnProperty("persistedQueryMisses")) {
          if (!$util2.isInteger(message.persistedQueryMisses) && !(message.persistedQueryMisses && $util2.isInteger(message.persistedQueryMisses.low) && $util2.isInteger(message.persistedQueryMisses.high)))
            return "persistedQueryMisses: integer|Long expected";
        }
        if (message.cacheLatencyCount != null && message.hasOwnProperty("cacheLatencyCount")) {
          var array14;
          if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray)
            array14 = message.cacheLatencyCount.toArray();
          else
            array14 = message.cacheLatencyCount;
          if (!Array.isArray(array14))
            return "cacheLatencyCount: array expected";
          for (var i = 0; i < array14.length; ++i)
            if (!$util2.isInteger(array14[i]) && !(array14[i] && $util2.isInteger(array14[i].low) && $util2.isInteger(array14[i].high)))
              return "cacheLatencyCount: integer|Long[] expected";
        }
        if (message.rootErrorStats != null && message.hasOwnProperty("rootErrorStats")) {
          var error = $root2.PathErrorStats.verify(message.rootErrorStats);
          if (error)
            return "rootErrorStats." + error;
        }
        if (message.requestsWithErrorsCount != null && message.hasOwnProperty("requestsWithErrorsCount")) {
          if (!$util2.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util2.isInteger(message.requestsWithErrorsCount.low) && $util2.isInteger(message.requestsWithErrorsCount.high)))
            return "requestsWithErrorsCount: integer|Long expected";
        }
        if (message.publicCacheTtlCount != null && message.hasOwnProperty("publicCacheTtlCount")) {
          var array15;
          if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray)
            array15 = message.publicCacheTtlCount.toArray();
          else
            array15 = message.publicCacheTtlCount;
          if (!Array.isArray(array15))
            return "publicCacheTtlCount: array expected";
          for (var i = 0; i < array15.length; ++i)
            if (!$util2.isInteger(array15[i]) && !(array15[i] && $util2.isInteger(array15[i].low) && $util2.isInteger(array15[i].high)))
              return "publicCacheTtlCount: integer|Long[] expected";
        }
        if (message.privateCacheTtlCount != null && message.hasOwnProperty("privateCacheTtlCount")) {
          var array16;
          if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray)
            array16 = message.privateCacheTtlCount.toArray();
          else
            array16 = message.privateCacheTtlCount;
          if (!Array.isArray(array16))
            return "privateCacheTtlCount: array expected";
          for (var i = 0; i < array16.length; ++i)
            if (!$util2.isInteger(array16[i]) && !(array16[i] && $util2.isInteger(array16[i].low) && $util2.isInteger(array16[i].high)))
              return "privateCacheTtlCount: integer|Long[] expected";
        }
        if (message.registeredOperationCount != null && message.hasOwnProperty("registeredOperationCount")) {
          if (!$util2.isInteger(message.registeredOperationCount) && !(message.registeredOperationCount && $util2.isInteger(message.registeredOperationCount.low) && $util2.isInteger(message.registeredOperationCount.high)))
            return "registeredOperationCount: integer|Long expected";
        }
        if (message.forbiddenOperationCount != null && message.hasOwnProperty("forbiddenOperationCount")) {
          if (!$util2.isInteger(message.forbiddenOperationCount) && !(message.forbiddenOperationCount && $util2.isInteger(message.forbiddenOperationCount.low) && $util2.isInteger(message.forbiddenOperationCount.high)))
            return "forbiddenOperationCount: integer|Long expected";
        }
        if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty("requestsWithoutFieldInstrumentation")) {
          if (!$util2.isInteger(message.requestsWithoutFieldInstrumentation) && !(message.requestsWithoutFieldInstrumentation && $util2.isInteger(message.requestsWithoutFieldInstrumentation.low) && $util2.isInteger(message.requestsWithoutFieldInstrumentation.high)))
            return "requestsWithoutFieldInstrumentation: integer|Long expected";
        }
        return null;
      };
      QueryLatencyStats2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        var object = {};
        if (options.arrays || options.defaults) {
          object.latencyCount = [];
          object.cacheLatencyCount = [];
          object.publicCacheTtlCount = [];
          object.privateCacheTtlCount = [];
        }
        if (options.defaults) {
          object.requestCount = 0;
          object.cacheHits = 0;
          object.persistedQueryHits = 0;
          object.persistedQueryMisses = 0;
          object.rootErrorStats = null;
          object.requestsWithErrorsCount = 0;
          object.registeredOperationCount = 0;
          object.forbiddenOperationCount = 0;
          object.requestsWithoutFieldInstrumentation = 0;
        }
        if (message.requestCount != null && message.hasOwnProperty("requestCount"))
          if (typeof message.requestCount === "number")
            object.requestCount = options.longs === String ? String(message.requestCount) : message.requestCount;
          else
            object.requestCount = options.longs === String ? $util2.Long.prototype.toString.call(message.requestCount) : options.longs === Number ? new $util2.LongBits(message.requestCount.low >>> 0, message.requestCount.high >>> 0).toNumber(true) : message.requestCount;
        if (message.cacheHits != null && message.hasOwnProperty("cacheHits"))
          if (typeof message.cacheHits === "number")
            object.cacheHits = options.longs === String ? String(message.cacheHits) : message.cacheHits;
          else
            object.cacheHits = options.longs === String ? $util2.Long.prototype.toString.call(message.cacheHits) : options.longs === Number ? new $util2.LongBits(message.cacheHits.low >>> 0, message.cacheHits.high >>> 0).toNumber(true) : message.cacheHits;
        if (message.persistedQueryHits != null && message.hasOwnProperty("persistedQueryHits"))
          if (typeof message.persistedQueryHits === "number")
            object.persistedQueryHits = options.longs === String ? String(message.persistedQueryHits) : message.persistedQueryHits;
          else
            object.persistedQueryHits = options.longs === String ? $util2.Long.prototype.toString.call(message.persistedQueryHits) : options.longs === Number ? new $util2.LongBits(message.persistedQueryHits.low >>> 0, message.persistedQueryHits.high >>> 0).toNumber(true) : message.persistedQueryHits;
        if (message.persistedQueryMisses != null && message.hasOwnProperty("persistedQueryMisses"))
          if (typeof message.persistedQueryMisses === "number")
            object.persistedQueryMisses = options.longs === String ? String(message.persistedQueryMisses) : message.persistedQueryMisses;
          else
            object.persistedQueryMisses = options.longs === String ? $util2.Long.prototype.toString.call(message.persistedQueryMisses) : options.longs === Number ? new $util2.LongBits(message.persistedQueryMisses.low >>> 0, message.persistedQueryMisses.high >>> 0).toNumber(true) : message.persistedQueryMisses;
        if (message.rootErrorStats != null && message.hasOwnProperty("rootErrorStats"))
          object.rootErrorStats = $root2.PathErrorStats.toObject(message.rootErrorStats, options);
        if (message.requestsWithErrorsCount != null && message.hasOwnProperty("requestsWithErrorsCount"))
          if (typeof message.requestsWithErrorsCount === "number")
            object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;
          else
            object.requestsWithErrorsCount = options.longs === String ? $util2.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util2.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;
        if (message.registeredOperationCount != null && message.hasOwnProperty("registeredOperationCount"))
          if (typeof message.registeredOperationCount === "number")
            object.registeredOperationCount = options.longs === String ? String(message.registeredOperationCount) : message.registeredOperationCount;
          else
            object.registeredOperationCount = options.longs === String ? $util2.Long.prototype.toString.call(message.registeredOperationCount) : options.longs === Number ? new $util2.LongBits(message.registeredOperationCount.low >>> 0, message.registeredOperationCount.high >>> 0).toNumber(true) : message.registeredOperationCount;
        if (message.forbiddenOperationCount != null && message.hasOwnProperty("forbiddenOperationCount"))
          if (typeof message.forbiddenOperationCount === "number")
            object.forbiddenOperationCount = options.longs === String ? String(message.forbiddenOperationCount) : message.forbiddenOperationCount;
          else
            object.forbiddenOperationCount = options.longs === String ? $util2.Long.prototype.toString.call(message.forbiddenOperationCount) : options.longs === Number ? new $util2.LongBits(message.forbiddenOperationCount.low >>> 0, message.forbiddenOperationCount.high >>> 0).toNumber(true) : message.forbiddenOperationCount;
        if (message.latencyCount && message.latencyCount.length) {
          object.latencyCount = [];
          for (var j2 = 0; j2 < message.latencyCount.length; ++j2)
            if (typeof message.latencyCount[j2] === "number")
              object.latencyCount[j2] = options.longs === String ? String(message.latencyCount[j2]) : message.latencyCount[j2];
            else
              object.latencyCount[j2] = options.longs === String ? $util2.Long.prototype.toString.call(message.latencyCount[j2]) : options.longs === Number ? new $util2.LongBits(message.latencyCount[j2].low >>> 0, message.latencyCount[j2].high >>> 0).toNumber() : message.latencyCount[j2];
        }
        if (message.cacheLatencyCount && message.cacheLatencyCount.length) {
          object.cacheLatencyCount = [];
          for (var j2 = 0; j2 < message.cacheLatencyCount.length; ++j2)
            if (typeof message.cacheLatencyCount[j2] === "number")
              object.cacheLatencyCount[j2] = options.longs === String ? String(message.cacheLatencyCount[j2]) : message.cacheLatencyCount[j2];
            else
              object.cacheLatencyCount[j2] = options.longs === String ? $util2.Long.prototype.toString.call(message.cacheLatencyCount[j2]) : options.longs === Number ? new $util2.LongBits(message.cacheLatencyCount[j2].low >>> 0, message.cacheLatencyCount[j2].high >>> 0).toNumber() : message.cacheLatencyCount[j2];
        }
        if (message.publicCacheTtlCount && message.publicCacheTtlCount.length) {
          object.publicCacheTtlCount = [];
          for (var j2 = 0; j2 < message.publicCacheTtlCount.length; ++j2)
            if (typeof message.publicCacheTtlCount[j2] === "number")
              object.publicCacheTtlCount[j2] = options.longs === String ? String(message.publicCacheTtlCount[j2]) : message.publicCacheTtlCount[j2];
            else
              object.publicCacheTtlCount[j2] = options.longs === String ? $util2.Long.prototype.toString.call(message.publicCacheTtlCount[j2]) : options.longs === Number ? new $util2.LongBits(message.publicCacheTtlCount[j2].low >>> 0, message.publicCacheTtlCount[j2].high >>> 0).toNumber() : message.publicCacheTtlCount[j2];
        }
        if (message.privateCacheTtlCount && message.privateCacheTtlCount.length) {
          object.privateCacheTtlCount = [];
          for (var j2 = 0; j2 < message.privateCacheTtlCount.length; ++j2)
            if (typeof message.privateCacheTtlCount[j2] === "number")
              object.privateCacheTtlCount[j2] = options.longs === String ? String(message.privateCacheTtlCount[j2]) : message.privateCacheTtlCount[j2];
            else
              object.privateCacheTtlCount[j2] = options.longs === String ? $util2.Long.prototype.toString.call(message.privateCacheTtlCount[j2]) : options.longs === Number ? new $util2.LongBits(message.privateCacheTtlCount[j2].low >>> 0, message.privateCacheTtlCount[j2].high >>> 0).toNumber() : message.privateCacheTtlCount[j2];
        }
        if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty("requestsWithoutFieldInstrumentation"))
          if (typeof message.requestsWithoutFieldInstrumentation === "number")
            object.requestsWithoutFieldInstrumentation = options.longs === String ? String(message.requestsWithoutFieldInstrumentation) : message.requestsWithoutFieldInstrumentation;
          else
            object.requestsWithoutFieldInstrumentation = options.longs === String ? $util2.Long.prototype.toString.call(message.requestsWithoutFieldInstrumentation) : options.longs === Number ? new $util2.LongBits(message.requestsWithoutFieldInstrumentation.low >>> 0, message.requestsWithoutFieldInstrumentation.high >>> 0).toNumber(true) : message.requestsWithoutFieldInstrumentation;
        return object;
      };
      QueryLatencyStats2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
      };
      return QueryLatencyStats2;
    }();
    $root2.StatsContext = function() {
      function StatsContext2(properties) {
        if (properties) {
          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      StatsContext2.prototype.clientName = "";
      StatsContext2.prototype.clientVersion = "";
      StatsContext2.create = function create(properties) {
        return new StatsContext2(properties);
      };
      StatsContext2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer2.create();
        if (message.clientName != null && Object.hasOwnProperty.call(message, "clientName"))
          writer.uint32(
            /* id 2, wireType 2 =*/
            18
          ).string(message.clientName);
        if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
          writer.uint32(
            /* id 3, wireType 2 =*/
            26
          ).string(message.clientVersion);
        return writer;
      };
      StatsContext2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      StatsContext2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader2))
          reader = $Reader2.create(reader);
        var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.StatsContext();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
            case 2:
              message.clientName = reader.string();
              break;
            case 3:
              message.clientVersion = reader.string();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      StatsContext2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader2))
          reader = new $Reader2(reader);
        return this.decode(reader, reader.uint32());
      };
      StatsContext2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.clientName != null && message.hasOwnProperty("clientName")) {
          if (!$util2.isString(message.clientName))
            return "clientName: string expected";
        }
        if (message.clientVersion != null && message.hasOwnProperty("clientVersion")) {
          if (!$util2.isString(message.clientVersion))
            return "clientVersion: string expected";
        }
        return null;
      };
      StatsContext2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        var object = {};
        if (options.defaults) {
          object.clientName = "";
          object.clientVersion = "";
        }
        if (message.clientName != null && message.hasOwnProperty("clientName"))
          object.clientName = message.clientName;
        if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
          object.clientVersion = message.clientVersion;
        return object;
      };
      StatsContext2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
      };
      return StatsContext2;
    }();
    $root2.ContextualizedQueryLatencyStats = function() {
      function ContextualizedQueryLatencyStats2(properties) {
        if (properties) {
          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      ContextualizedQueryLatencyStats2.prototype.queryLatencyStats = null;
      ContextualizedQueryLatencyStats2.prototype.context = null;
      ContextualizedQueryLatencyStats2.create = function create(properties) {
        return new ContextualizedQueryLatencyStats2(properties);
      };
      ContextualizedQueryLatencyStats2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer2.create();
        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, "queryLatencyStats"))
          $root2.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(
            /* id 1, wireType 2 =*/
            10
          ).fork()).ldelim();
        if (message.context != null && Object.hasOwnProperty.call(message, "context"))
          $root2.StatsContext.encode(message.context, writer.uint32(
            /* id 2, wireType 2 =*/
            18
          ).fork()).ldelim();
        return writer;
      };
      ContextualizedQueryLatencyStats2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      ContextualizedQueryLatencyStats2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader2))
          reader = $Reader2.create(reader);
        var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.ContextualizedQueryLatencyStats();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              message.queryLatencyStats = $root2.QueryLatencyStats.decode(reader, reader.uint32());
              break;
            case 2:
              message.context = $root2.StatsContext.decode(reader, reader.uint32());
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      ContextualizedQueryLatencyStats2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader2))
          reader = new $Reader2(reader);
        return this.decode(reader, reader.uint32());
      };
      ContextualizedQueryLatencyStats2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.queryLatencyStats != null && message.hasOwnProperty("queryLatencyStats")) {
          var error = $root2.QueryLatencyStats.verify(message.queryLatencyStats);
          if (error)
            return "queryLatencyStats." + error;
        }
        if (message.context != null && message.hasOwnProperty("context")) {
          var error = $root2.StatsContext.verify(message.context);
          if (error)
            return "context." + error;
        }
        return null;
      };
      ContextualizedQueryLatencyStats2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        var object = {};
        if (options.defaults) {
          object.queryLatencyStats = null;
          object.context = null;
        }
        if (message.queryLatencyStats != null && message.hasOwnProperty("queryLatencyStats"))
          object.queryLatencyStats = $root2.QueryLatencyStats.toObject(message.queryLatencyStats, options);
        if (message.context != null && message.hasOwnProperty("context"))
          object.context = $root2.StatsContext.toObject(message.context, options);
        return object;
      };
      ContextualizedQueryLatencyStats2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
      };
      return ContextualizedQueryLatencyStats2;
    }();
    $root2.ContextualizedTypeStats = function() {
      function ContextualizedTypeStats2(properties) {
        this.perTypeStat = {};
        if (properties) {
          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      ContextualizedTypeStats2.prototype.context = null;
      ContextualizedTypeStats2.prototype.perTypeStat = $util2.emptyObject;
      ContextualizedTypeStats2.create = function create(properties) {
        return new ContextualizedTypeStats2(properties);
      };
      ContextualizedTypeStats2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer2.create();
        if (message.context != null && Object.hasOwnProperty.call(message, "context"))
          $root2.StatsContext.encode(message.context, writer.uint32(
            /* id 1, wireType 2 =*/
            10
          ).fork()).ldelim();
        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, "perTypeStat"))
          for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {
            writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork().uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(keys[i]);
            $root2.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim().ldelim();
          }
        return writer;
      };
      ContextualizedTypeStats2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      ContextualizedTypeStats2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader2))
          reader = $Reader2.create(reader);
        var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.ContextualizedTypeStats(), key;
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              message.context = $root2.StatsContext.decode(reader, reader.uint32());
              break;
            case 2:
              reader.skip().pos++;
              if (message.perTypeStat === $util2.emptyObject)
                message.perTypeStat = {};
              key = reader.string();
              reader.pos++;
              message.perTypeStat[key] = $root2.TypeStat.decode(reader, reader.uint32());
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      ContextualizedTypeStats2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader2))
          reader = new $Reader2(reader);
        return this.decode(reader, reader.uint32());
      };
      ContextualizedTypeStats2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.context != null && message.hasOwnProperty("context")) {
          var error = $root2.StatsContext.verify(message.context);
          if (error)
            return "context." + error;
        }
        if (message.perTypeStat != null && message.hasOwnProperty("perTypeStat")) {
          if (!$util2.isObject(message.perTypeStat))
            return "perTypeStat: object expected";
          var key = Object.keys(message.perTypeStat);
          for (var i = 0; i < key.length; ++i) {
            var error = $root2.TypeStat.verify(message.perTypeStat[key[i]]);
            if (error)
              return "perTypeStat." + error;
          }
        }
        return null;
      };
      ContextualizedTypeStats2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        var object = {};
        if (options.objects || options.defaults)
          object.perTypeStat = {};
        if (options.defaults)
          object.context = null;
        if (message.context != null && message.hasOwnProperty("context"))
          object.context = $root2.StatsContext.toObject(message.context, options);
        var keys2;
        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {
          object.perTypeStat = {};
          for (var j2 = 0; j2 < keys2.length; ++j2)
            object.perTypeStat[keys2[j2]] = $root2.TypeStat.toObject(message.perTypeStat[keys2[j2]], options);
        }
        return object;
      };
      ContextualizedTypeStats2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
      };
      return ContextualizedTypeStats2;
    }();
    $root2.FieldStat = function() {
      function FieldStat2(properties) {
        this.latencyCount = [];
        if (properties) {
          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      FieldStat2.prototype.returnType = "";
      FieldStat2.prototype.errorsCount = 0;
      FieldStat2.prototype.observedExecutionCount = 0;
      FieldStat2.prototype.estimatedExecutionCount = 0;
      FieldStat2.prototype.requestsWithErrorsCount = 0;
      FieldStat2.prototype.latencyCount = $util2.emptyArray;
      FieldStat2.create = function create(properties) {
        return new FieldStat2(properties);
      };
      FieldStat2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer2.create();
        if (message.returnType != null && Object.hasOwnProperty.call(message, "returnType"))
          writer.uint32(
            /* id 3, wireType 2 =*/
            26
          ).string(message.returnType);
        if (message.errorsCount != null && Object.hasOwnProperty.call(message, "errorsCount"))
          writer.uint32(
            /* id 4, wireType 0 =*/
            32
          ).uint64(message.errorsCount);
        if (message.observedExecutionCount != null && Object.hasOwnProperty.call(message, "observedExecutionCount"))
          writer.uint32(
            /* id 5, wireType 0 =*/
            40
          ).uint64(message.observedExecutionCount);
        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, "requestsWithErrorsCount"))
          writer.uint32(
            /* id 6, wireType 0 =*/
            48
          ).uint64(message.requestsWithErrorsCount);
        var array9;
        if (message.latencyCount != null && message.latencyCount.toArray)
          array9 = message.latencyCount.toArray();
        else
          array9 = message.latencyCount;
        if (array9 != null && array9.length) {
          writer.uint32(
            /* id 9, wireType 2 =*/
            74
          ).fork();
          for (var i = 0; i < array9.length; ++i)
            writer.sint64(array9[i]);
          writer.ldelim();
        }
        if (message.estimatedExecutionCount != null && Object.hasOwnProperty.call(message, "estimatedExecutionCount"))
          writer.uint32(
            /* id 10, wireType 0 =*/
            80
          ).uint64(message.estimatedExecutionCount);
        return writer;
      };
      FieldStat2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      FieldStat2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader2))
          reader = $Reader2.create(reader);
        var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.FieldStat();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
            case 3:
              message.returnType = reader.string();
              break;
            case 4:
              message.errorsCount = reader.uint64();
              break;
            case 5:
              message.observedExecutionCount = reader.uint64();
              break;
            case 10:
              message.estimatedExecutionCount = reader.uint64();
              break;
            case 6:
              message.requestsWithErrorsCount = reader.uint64();
              break;
            case 9:
              if (!(message.latencyCount && message.latencyCount.length))
                message.latencyCount = [];
              if ((tag & 7) === 2) {
                var end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2)
                  message.latencyCount.push(reader.sint64());
              } else
                message.latencyCount.push(reader.sint64());
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      FieldStat2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader2))
          reader = new $Reader2(reader);
        return this.decode(reader, reader.uint32());
      };
      FieldStat2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.returnType != null && message.hasOwnProperty("returnType")) {
          if (!$util2.isString(message.returnType))
            return "returnType: string expected";
        }
        if (message.errorsCount != null && message.hasOwnProperty("errorsCount")) {
          if (!$util2.isInteger(message.errorsCount) && !(message.errorsCount && $util2.isInteger(message.errorsCount.low) && $util2.isInteger(message.errorsCount.high)))
            return "errorsCount: integer|Long expected";
        }
        if (message.observedExecutionCount != null && message.hasOwnProperty("observedExecutionCount")) {
          if (!$util2.isInteger(message.observedExecutionCount) && !(message.observedExecutionCount && $util2.isInteger(message.observedExecutionCount.low) && $util2.isInteger(message.observedExecutionCount.high)))
            return "observedExecutionCount: integer|Long expected";
        }
        if (message.estimatedExecutionCount != null && message.hasOwnProperty("estimatedExecutionCount")) {
          if (!$util2.isInteger(message.estimatedExecutionCount) && !(message.estimatedExecutionCount && $util2.isInteger(message.estimatedExecutionCount.low) && $util2.isInteger(message.estimatedExecutionCount.high)))
            return "estimatedExecutionCount: integer|Long expected";
        }
        if (message.requestsWithErrorsCount != null && message.hasOwnProperty("requestsWithErrorsCount")) {
          if (!$util2.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util2.isInteger(message.requestsWithErrorsCount.low) && $util2.isInteger(message.requestsWithErrorsCount.high)))
            return "requestsWithErrorsCount: integer|Long expected";
        }
        if (message.latencyCount != null && message.hasOwnProperty("latencyCount")) {
          var array9;
          if (message.latencyCount != null && message.latencyCount.toArray)
            array9 = message.latencyCount.toArray();
          else
            array9 = message.latencyCount;
          if (!Array.isArray(array9))
            return "latencyCount: array expected";
          for (var i = 0; i < array9.length; ++i)
            if (!$util2.isInteger(array9[i]) && !(array9[i] && $util2.isInteger(array9[i].low) && $util2.isInteger(array9[i].high)))
              return "latencyCount: integer|Long[] expected";
        }
        return null;
      };
      FieldStat2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        var object = {};
        if (options.arrays || options.defaults)
          object.latencyCount = [];
        if (options.defaults) {
          object.returnType = "";
          object.errorsCount = 0;
          object.observedExecutionCount = 0;
          object.requestsWithErrorsCount = 0;
          object.estimatedExecutionCount = 0;
        }
        if (message.returnType != null && message.hasOwnProperty("returnType"))
          object.returnType = message.returnType;
        if (message.errorsCount != null && message.hasOwnProperty("errorsCount"))
          if (typeof message.errorsCount === "number")
            object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;
          else
            object.errorsCount = options.longs === String ? $util2.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util2.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;
        if (message.observedExecutionCount != null && message.hasOwnProperty("observedExecutionCount"))
          if (typeof message.observedExecutionCount === "number")
            object.observedExecutionCount = options.longs === String ? String(message.observedExecutionCount) : message.observedExecutionCount;
          else
            object.observedExecutionCount = options.longs === String ? $util2.Long.prototype.toString.call(message.observedExecutionCount) : options.longs === Number ? new $util2.LongBits(message.observedExecutionCount.low >>> 0, message.observedExecutionCount.high >>> 0).toNumber(true) : message.observedExecutionCount;
        if (message.requestsWithErrorsCount != null && message.hasOwnProperty("requestsWithErrorsCount"))
          if (typeof message.requestsWithErrorsCount === "number")
            object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;
          else
            object.requestsWithErrorsCount = options.longs === String ? $util2.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util2.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;
        if (message.latencyCount && message.latencyCount.length) {
          object.latencyCount = [];
          for (var j2 = 0; j2 < message.latencyCount.length; ++j2)
            if (typeof message.latencyCount[j2] === "number")
              object.latencyCount[j2] = options.longs === String ? String(message.latencyCount[j2]) : message.latencyCount[j2];
            else
              object.latencyCount[j2] = options.longs === String ? $util2.Long.prototype.toString.call(message.latencyCount[j2]) : options.longs === Number ? new $util2.LongBits(message.latencyCount[j2].low >>> 0, message.latencyCount[j2].high >>> 0).toNumber() : message.latencyCount[j2];
        }
        if (message.estimatedExecutionCount != null && message.hasOwnProperty("estimatedExecutionCount"))
          if (typeof message.estimatedExecutionCount === "number")
            object.estimatedExecutionCount = options.longs === String ? String(message.estimatedExecutionCount) : message.estimatedExecutionCount;
          else
            object.estimatedExecutionCount = options.longs === String ? $util2.Long.prototype.toString.call(message.estimatedExecutionCount) : options.longs === Number ? new $util2.LongBits(message.estimatedExecutionCount.low >>> 0, message.estimatedExecutionCount.high >>> 0).toNumber(true) : message.estimatedExecutionCount;
        return object;
      };
      FieldStat2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
      };
      return FieldStat2;
    }();
    $root2.TypeStat = function() {
      function TypeStat2(properties) {
        this.perFieldStat = {};
        if (properties) {
          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      TypeStat2.prototype.perFieldStat = $util2.emptyObject;
      TypeStat2.create = function create(properties) {
        return new TypeStat2(properties);
      };
      TypeStat2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer2.create();
        if (message.perFieldStat != null && Object.hasOwnProperty.call(message, "perFieldStat"))
          for (var keys = Object.keys(message.perFieldStat), i = 0; i < keys.length; ++i) {
            writer.uint32(
              /* id 3, wireType 2 =*/
              26
            ).fork().uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(keys[i]);
            $root2.FieldStat.encode(message.perFieldStat[keys[i]], writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim().ldelim();
          }
        return writer;
      };
      TypeStat2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      TypeStat2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader2))
          reader = $Reader2.create(reader);
        var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.TypeStat(), key;
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
            case 3:
              reader.skip().pos++;
              if (message.perFieldStat === $util2.emptyObject)
                message.perFieldStat = {};
              key = reader.string();
              reader.pos++;
              message.perFieldStat[key] = $root2.FieldStat.decode(reader, reader.uint32());
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      TypeStat2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader2))
          reader = new $Reader2(reader);
        return this.decode(reader, reader.uint32());
      };
      TypeStat2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.perFieldStat != null && message.hasOwnProperty("perFieldStat")) {
          if (!$util2.isObject(message.perFieldStat))
            return "perFieldStat: object expected";
          var key = Object.keys(message.perFieldStat);
          for (var i = 0; i < key.length; ++i) {
            var error = $root2.FieldStat.verify(message.perFieldStat[key[i]]);
            if (error)
              return "perFieldStat." + error;
          }
        }
        return null;
      };
      TypeStat2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        var object = {};
        if (options.objects || options.defaults)
          object.perFieldStat = {};
        var keys2;
        if (message.perFieldStat && (keys2 = Object.keys(message.perFieldStat)).length) {
          object.perFieldStat = {};
          for (var j2 = 0; j2 < keys2.length; ++j2)
            object.perFieldStat[keys2[j2]] = $root2.FieldStat.toObject(message.perFieldStat[keys2[j2]], options);
        }
        return object;
      };
      TypeStat2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
      };
      return TypeStat2;
    }();
    $root2.ReferencedFieldsForType = function() {
      function ReferencedFieldsForType2(properties) {
        this.fieldNames = [];
        if (properties) {
          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      ReferencedFieldsForType2.prototype.fieldNames = $util2.emptyArray;
      ReferencedFieldsForType2.prototype.isInterface = false;
      ReferencedFieldsForType2.create = function create(properties) {
        return new ReferencedFieldsForType2(properties);
      };
      ReferencedFieldsForType2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer2.create();
        if (message.fieldNames != null && message.fieldNames.length)
          for (var i = 0; i < message.fieldNames.length; ++i)
            writer.uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(message.fieldNames[i]);
        if (message.isInterface != null && Object.hasOwnProperty.call(message, "isInterface"))
          writer.uint32(
            /* id 2, wireType 0 =*/
            16
          ).bool(message.isInterface);
        return writer;
      };
      ReferencedFieldsForType2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      ReferencedFieldsForType2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader2))
          reader = $Reader2.create(reader);
        var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.ReferencedFieldsForType();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              if (!(message.fieldNames && message.fieldNames.length))
                message.fieldNames = [];
              message.fieldNames.push(reader.string());
              break;
            case 2:
              message.isInterface = reader.bool();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      ReferencedFieldsForType2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader2))
          reader = new $Reader2(reader);
        return this.decode(reader, reader.uint32());
      };
      ReferencedFieldsForType2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.fieldNames != null && message.hasOwnProperty("fieldNames")) {
          if (!Array.isArray(message.fieldNames))
            return "fieldNames: array expected";
          for (var i = 0; i < message.fieldNames.length; ++i)
            if (!$util2.isString(message.fieldNames[i]))
              return "fieldNames: string[] expected";
        }
        if (message.isInterface != null && message.hasOwnProperty("isInterface")) {
          if (typeof message.isInterface !== "boolean")
            return "isInterface: boolean expected";
        }
        return null;
      };
      ReferencedFieldsForType2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        var object = {};
        if (options.arrays || options.defaults)
          object.fieldNames = [];
        if (options.defaults)
          object.isInterface = false;
        if (message.fieldNames && message.fieldNames.length) {
          object.fieldNames = [];
          for (var j2 = 0; j2 < message.fieldNames.length; ++j2)
            object.fieldNames[j2] = message.fieldNames[j2];
        }
        if (message.isInterface != null && message.hasOwnProperty("isInterface"))
          object.isInterface = message.isInterface;
        return object;
      };
      ReferencedFieldsForType2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
      };
      return ReferencedFieldsForType2;
    }();
    $root2.Report = function() {
      function Report2(properties) {
        this.tracesPerQuery = {};
        if (properties) {
          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      Report2.prototype.header = null;
      Report2.prototype.tracesPerQuery = $util2.emptyObject;
      Report2.prototype.endTime = null;
      Report2.prototype.operationCount = 0;
      Report2.prototype.tracesPreAggregated = false;
      Report2.create = function create(properties) {
        return new Report2(properties);
      };
      Report2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer2.create();
        if (message.header != null && Object.hasOwnProperty.call(message, "header"))
          $root2.ReportHeader.encode(message.header, writer.uint32(
            /* id 1, wireType 2 =*/
            10
          ).fork()).ldelim();
        if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
          $root2.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(
            /* id 2, wireType 2 =*/
            18
          ).fork()).ldelim();
        if (message.tracesPerQuery != null && Object.hasOwnProperty.call(message, "tracesPerQuery"))
          for (var keys = Object.keys(message.tracesPerQuery), i = 0; i < keys.length; ++i) {
            writer.uint32(
              /* id 5, wireType 2 =*/
              42
            ).fork().uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(keys[i]);
            $root2.TracesAndStats.encode(message.tracesPerQuery[keys[i]], writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim().ldelim();
          }
        if (message.operationCount != null && Object.hasOwnProperty.call(message, "operationCount"))
          writer.uint32(
            /* id 6, wireType 0 =*/
            48
          ).uint64(message.operationCount);
        if (message.tracesPreAggregated != null && Object.hasOwnProperty.call(message, "tracesPreAggregated"))
          writer.uint32(
            /* id 7, wireType 0 =*/
            56
          ).bool(message.tracesPreAggregated);
        return writer;
      };
      Report2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      Report2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader2))
          reader = $Reader2.create(reader);
        var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.Report(), key;
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              message.header = $root2.ReportHeader.decode(reader, reader.uint32());
              break;
            case 5:
              reader.skip().pos++;
              if (message.tracesPerQuery === $util2.emptyObject)
                message.tracesPerQuery = {};
              key = reader.string();
              reader.pos++;
              message.tracesPerQuery[key] = $root2.TracesAndStats.decode(reader, reader.uint32());
              break;
            case 2:
              message.endTime = $root2.google.protobuf.Timestamp.decode(reader, reader.uint32());
              break;
            case 6:
              message.operationCount = reader.uint64();
              break;
            case 7:
              message.tracesPreAggregated = reader.bool();
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      Report2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader2))
          reader = new $Reader2(reader);
        return this.decode(reader, reader.uint32());
      };
      Report2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.header != null && message.hasOwnProperty("header")) {
          var error = $root2.ReportHeader.verify(message.header);
          if (error)
            return "header." + error;
        }
        if (message.tracesPerQuery != null && message.hasOwnProperty("tracesPerQuery")) {
          if (!$util2.isObject(message.tracesPerQuery))
            return "tracesPerQuery: object expected";
          var key = Object.keys(message.tracesPerQuery);
          for (var i = 0; i < key.length; ++i) {
            var error = $root2.TracesAndStats.verify(message.tracesPerQuery[key[i]]);
            if (error)
              return "tracesPerQuery." + error;
          }
        }
        if (message.endTime != null && message.hasOwnProperty("endTime")) {
          var error = $root2.google.protobuf.Timestamp.verify(message.endTime);
          if (error)
            return "endTime." + error;
        }
        if (message.operationCount != null && message.hasOwnProperty("operationCount")) {
          if (!$util2.isInteger(message.operationCount) && !(message.operationCount && $util2.isInteger(message.operationCount.low) && $util2.isInteger(message.operationCount.high)))
            return "operationCount: integer|Long expected";
        }
        if (message.tracesPreAggregated != null && message.hasOwnProperty("tracesPreAggregated")) {
          if (typeof message.tracesPreAggregated !== "boolean")
            return "tracesPreAggregated: boolean expected";
        }
        return null;
      };
      Report2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        var object = {};
        if (options.objects || options.defaults)
          object.tracesPerQuery = {};
        if (options.defaults) {
          object.header = null;
          object.endTime = null;
          object.operationCount = 0;
          object.tracesPreAggregated = false;
        }
        if (message.header != null && message.hasOwnProperty("header"))
          object.header = $root2.ReportHeader.toObject(message.header, options);
        if (message.endTime != null && message.hasOwnProperty("endTime"))
          object.endTime = $root2.google.protobuf.Timestamp.toObject(message.endTime, options);
        var keys2;
        if (message.tracesPerQuery && (keys2 = Object.keys(message.tracesPerQuery)).length) {
          object.tracesPerQuery = {};
          for (var j2 = 0; j2 < keys2.length; ++j2)
            object.tracesPerQuery[keys2[j2]] = $root2.TracesAndStats.toObject(message.tracesPerQuery[keys2[j2]], options);
        }
        if (message.operationCount != null && message.hasOwnProperty("operationCount"))
          if (typeof message.operationCount === "number")
            object.operationCount = options.longs === String ? String(message.operationCount) : message.operationCount;
          else
            object.operationCount = options.longs === String ? $util2.Long.prototype.toString.call(message.operationCount) : options.longs === Number ? new $util2.LongBits(message.operationCount.low >>> 0, message.operationCount.high >>> 0).toNumber(true) : message.operationCount;
        if (message.tracesPreAggregated != null && message.hasOwnProperty("tracesPreAggregated"))
          object.tracesPreAggregated = message.tracesPreAggregated;
        return object;
      };
      Report2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
      };
      return Report2;
    }();
    $root2.ContextualizedStats = function() {
      function ContextualizedStats2(properties) {
        this.perTypeStat = {};
        if (properties) {
          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      ContextualizedStats2.prototype.context = null;
      ContextualizedStats2.prototype.queryLatencyStats = null;
      ContextualizedStats2.prototype.perTypeStat = $util2.emptyObject;
      ContextualizedStats2.create = function create(properties) {
        return new ContextualizedStats2(properties);
      };
      ContextualizedStats2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer2.create();
        if (message.context != null && Object.hasOwnProperty.call(message, "context"))
          $root2.StatsContext.encode(message.context, writer.uint32(
            /* id 1, wireType 2 =*/
            10
          ).fork()).ldelim();
        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, "queryLatencyStats"))
          $root2.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(
            /* id 2, wireType 2 =*/
            18
          ).fork()).ldelim();
        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, "perTypeStat"))
          for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {
            writer.uint32(
              /* id 3, wireType 2 =*/
              26
            ).fork().uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(keys[i]);
            $root2.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim().ldelim();
          }
        return writer;
      };
      ContextualizedStats2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      ContextualizedStats2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader2))
          reader = $Reader2.create(reader);
        var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.ContextualizedStats(), key;
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              message.context = $root2.StatsContext.decode(reader, reader.uint32());
              break;
            case 2:
              message.queryLatencyStats = $root2.QueryLatencyStats.decode(reader, reader.uint32());
              break;
            case 3:
              reader.skip().pos++;
              if (message.perTypeStat === $util2.emptyObject)
                message.perTypeStat = {};
              key = reader.string();
              reader.pos++;
              message.perTypeStat[key] = $root2.TypeStat.decode(reader, reader.uint32());
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      ContextualizedStats2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader2))
          reader = new $Reader2(reader);
        return this.decode(reader, reader.uint32());
      };
      ContextualizedStats2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.context != null && message.hasOwnProperty("context")) {
          var error = $root2.StatsContext.verify(message.context);
          if (error)
            return "context." + error;
        }
        if (message.queryLatencyStats != null && message.hasOwnProperty("queryLatencyStats")) {
          var error = $root2.QueryLatencyStats.verify(message.queryLatencyStats);
          if (error)
            return "queryLatencyStats." + error;
        }
        if (message.perTypeStat != null && message.hasOwnProperty("perTypeStat")) {
          if (!$util2.isObject(message.perTypeStat))
            return "perTypeStat: object expected";
          var key = Object.keys(message.perTypeStat);
          for (var i = 0; i < key.length; ++i) {
            var error = $root2.TypeStat.verify(message.perTypeStat[key[i]]);
            if (error)
              return "perTypeStat." + error;
          }
        }
        return null;
      };
      ContextualizedStats2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        var object = {};
        if (options.objects || options.defaults)
          object.perTypeStat = {};
        if (options.defaults) {
          object.context = null;
          object.queryLatencyStats = null;
        }
        if (message.context != null && message.hasOwnProperty("context"))
          object.context = $root2.StatsContext.toObject(message.context, options);
        if (message.queryLatencyStats != null && message.hasOwnProperty("queryLatencyStats"))
          object.queryLatencyStats = $root2.QueryLatencyStats.toObject(message.queryLatencyStats, options);
        var keys2;
        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {
          object.perTypeStat = {};
          for (var j2 = 0; j2 < keys2.length; ++j2)
            object.perTypeStat[keys2[j2]] = $root2.TypeStat.toObject(message.perTypeStat[keys2[j2]], options);
        }
        return object;
      };
      ContextualizedStats2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
      };
      return ContextualizedStats2;
    }();
    $root2.TracesAndStats = function() {
      function TracesAndStats2(properties) {
        this.trace = [];
        this.statsWithContext = [];
        this.referencedFieldsByType = {};
        this.internalTracesContributingToStats = [];
        if (properties) {
          for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            if (properties[keys[i]] != null)
              this[keys[i]] = properties[keys[i]];
        }
      }
      TracesAndStats2.prototype.trace = $util2.emptyArray;
      TracesAndStats2.prototype.statsWithContext = $util2.emptyArray;
      TracesAndStats2.prototype.referencedFieldsByType = $util2.emptyObject;
      TracesAndStats2.prototype.internalTracesContributingToStats = $util2.emptyArray;
      TracesAndStats2.create = function create(properties) {
        return new TracesAndStats2(properties);
      };
      TracesAndStats2.encode = function encode(message, writer) {
        if (!writer)
          writer = $Writer2.create();
        if (message.trace != null && message.trace.length)
          for (var i = 0; i < message.trace.length; ++i)
            if (message.trace[i] instanceof Uint8Array) {
              writer.uint32(
                /* id 1, wireType 2 =*/
                10
              );
              writer.bytes(message.trace[i]);
            } else
              $root2.Trace.encode(message.trace[i], writer.uint32(
                /* id 1, wireType 2 =*/
                10
              ).fork()).ldelim();
        var array2;
        if (message.statsWithContext != null && message.statsWithContext.toArray)
          array2 = message.statsWithContext.toArray();
        else
          array2 = message.statsWithContext;
        if (array2 != null && array2.length)
          for (var i = 0; i < array2.length; ++i)
            $root2.ContextualizedStats.encode(array2[i], writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim();
        if (message.internalTracesContributingToStats != null && message.internalTracesContributingToStats.length)
          for (var i = 0; i < message.internalTracesContributingToStats.length; ++i)
            if (message.internalTracesContributingToStats[i] instanceof Uint8Array) {
              writer.uint32(
                /* id 3, wireType 2 =*/
                26
              );
              writer.bytes(message.internalTracesContributingToStats[i]);
            } else
              $root2.Trace.encode(message.internalTracesContributingToStats[i], writer.uint32(
                /* id 3, wireType 2 =*/
                26
              ).fork()).ldelim();
        if (message.referencedFieldsByType != null && Object.hasOwnProperty.call(message, "referencedFieldsByType"))
          for (var keys = Object.keys(message.referencedFieldsByType), i = 0; i < keys.length; ++i) {
            writer.uint32(
              /* id 4, wireType 2 =*/
              34
            ).fork().uint32(
              /* id 1, wireType 2 =*/
              10
            ).string(keys[i]);
            $root2.ReferencedFieldsForType.encode(message.referencedFieldsByType[keys[i]], writer.uint32(
              /* id 2, wireType 2 =*/
              18
            ).fork()).ldelim().ldelim();
          }
        return writer;
      };
      TracesAndStats2.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      TracesAndStats2.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader2))
          reader = $Reader2.create(reader);
        var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.TracesAndStats(), key;
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
            case 1:
              if (!(message.trace && message.trace.length))
                message.trace = [];
              message.trace.push($root2.Trace.decode(reader, reader.uint32()));
              break;
            case 2:
              if (!(message.statsWithContext && message.statsWithContext.length))
                message.statsWithContext = [];
              message.statsWithContext.push($root2.ContextualizedStats.decode(reader, reader.uint32()));
              break;
            case 4:
              reader.skip().pos++;
              if (message.referencedFieldsByType === $util2.emptyObject)
                message.referencedFieldsByType = {};
              key = reader.string();
              reader.pos++;
              message.referencedFieldsByType[key] = $root2.ReferencedFieldsForType.decode(reader, reader.uint32());
              break;
            case 3:
              if (!(message.internalTracesContributingToStats && message.internalTracesContributingToStats.length))
                message.internalTracesContributingToStats = [];
              message.internalTracesContributingToStats.push($root2.Trace.decode(reader, reader.uint32()));
              break;
            default:
              reader.skipType(tag & 7);
              break;
          }
        }
        return message;
      };
      TracesAndStats2.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader2))
          reader = new $Reader2(reader);
        return this.decode(reader, reader.uint32());
      };
      TracesAndStats2.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
          return "object expected";
        if (message.trace != null && message.hasOwnProperty("trace")) {
          if (!Array.isArray(message.trace))
            return "trace: array expected";
          for (var i = 0; i < message.trace.length; ++i)
            if (!(message.trace[i] instanceof Uint8Array)) {
              var error = $root2.Trace.verify(message.trace[i]);
              if (error)
                return "trace." + error;
            }
        }
        if (message.statsWithContext != null && message.hasOwnProperty("statsWithContext")) {
          var array2;
          if (message.statsWithContext != null && message.statsWithContext.toArray)
            array2 = message.statsWithContext.toArray();
          else
            array2 = message.statsWithContext;
          if (!Array.isArray(array2))
            return "statsWithContext: array expected";
          for (var i = 0; i < array2.length; ++i) {
            var error = $root2.ContextualizedStats.verify(array2[i]);
            if (error)
              return "statsWithContext." + error;
          }
        }
        if (message.referencedFieldsByType != null && message.hasOwnProperty("referencedFieldsByType")) {
          if (!$util2.isObject(message.referencedFieldsByType))
            return "referencedFieldsByType: object expected";
          var key = Object.keys(message.referencedFieldsByType);
          for (var i = 0; i < key.length; ++i) {
            var error = $root2.ReferencedFieldsForType.verify(message.referencedFieldsByType[key[i]]);
            if (error)
              return "referencedFieldsByType." + error;
          }
        }
        if (message.internalTracesContributingToStats != null && message.hasOwnProperty("internalTracesContributingToStats")) {
          if (!Array.isArray(message.internalTracesContributingToStats))
            return "internalTracesContributingToStats: array expected";
          for (var i = 0; i < message.internalTracesContributingToStats.length; ++i)
            if (!(message.internalTracesContributingToStats[i] instanceof Uint8Array)) {
              var error = $root2.Trace.verify(message.internalTracesContributingToStats[i]);
              if (error)
                return "internalTracesContributingToStats." + error;
            }
        }
        return null;
      };
      TracesAndStats2.toObject = function toObject(message, options) {
        if (!options)
          options = {};
        var object = {};
        if (options.arrays || options.defaults) {
          object.trace = [];
          object.statsWithContext = [];
          object.internalTracesContributingToStats = [];
        }
        if (options.objects || options.defaults)
          object.referencedFieldsByType = {};
        if (message.trace && message.trace.length) {
          object.trace = [];
          for (var j2 = 0; j2 < message.trace.length; ++j2)
            object.trace[j2] = $root2.Trace.toObject(message.trace[j2], options);
        }
        if (message.statsWithContext && message.statsWithContext.length) {
          object.statsWithContext = [];
          for (var j2 = 0; j2 < message.statsWithContext.length; ++j2)
            object.statsWithContext[j2] = $root2.ContextualizedStats.toObject(message.statsWithContext[j2], options);
        }
        if (message.internalTracesContributingToStats && message.internalTracesContributingToStats.length) {
          object.internalTracesContributingToStats = [];
          for (var j2 = 0; j2 < message.internalTracesContributingToStats.length; ++j2)
            object.internalTracesContributingToStats[j2] = $root2.Trace.toObject(message.internalTracesContributingToStats[j2], options);
        }
        var keys2;
        if (message.referencedFieldsByType && (keys2 = Object.keys(message.referencedFieldsByType)).length) {
          object.referencedFieldsByType = {};
          for (var j2 = 0; j2 < keys2.length; ++j2)
            object.referencedFieldsByType[keys2[j2]] = $root2.ReferencedFieldsForType.toObject(message.referencedFieldsByType[keys2[j2]], options);
        }
        return object;
      };
      TracesAndStats2.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
      };
      return TracesAndStats2;
    }();
    $root2.google = function() {
      var google2 = {};
      google2.protobuf = function() {
        var protobuf = {};
        protobuf.Timestamp = function() {
          function Timestamp(properties) {
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          Timestamp.prototype.seconds = 0;
          Timestamp.prototype.nanos = 0;
          Timestamp.create = function create(properties) {
            return new Timestamp(properties);
          };
          Timestamp.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer2.create();
            if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
              writer.uint32(
                /* id 1, wireType 0 =*/
                8
              ).int64(message.seconds);
            if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
              writer.uint32(
                /* id 2, wireType 0 =*/
                16
              ).int32(message.nanos);
            return writer;
          };
          Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          Timestamp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader2))
              reader = $Reader2.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root2.google.protobuf.Timestamp();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.seconds = reader.int64();
                  break;
                case 2:
                  message.nanos = reader.int32();
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          Timestamp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader2))
              reader = new $Reader2(reader);
            return this.decode(reader, reader.uint32());
          };
          Timestamp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.seconds != null && message.hasOwnProperty("seconds")) {
              if (!$util2.isInteger(message.seconds) && !(message.seconds && $util2.isInteger(message.seconds.low) && $util2.isInteger(message.seconds.high)))
                return "seconds: integer|Long expected";
            }
            if (message.nanos != null && message.hasOwnProperty("nanos")) {
              if (!$util2.isInteger(message.nanos))
                return "nanos: integer expected";
            }
            return null;
          };
          Timestamp.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.defaults) {
              object.seconds = 0;
              object.nanos = 0;
            }
            if (message.seconds != null && message.hasOwnProperty("seconds"))
              if (typeof message.seconds === "number")
                object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
              else
                object.seconds = options.longs === String ? $util2.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util2.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
            if (message.nanos != null && message.hasOwnProperty("nanos"))
              object.nanos = message.nanos;
            return object;
          };
          Timestamp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf2.util.toJSONOptions);
          };
          return Timestamp;
        }();
        return protobuf;
      }();
      return google2;
    }();
    module2.exports = $root2;
  }
});

// node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/calculateReferencedFieldsByType.js
var require_calculateReferencedFieldsByType = __commonJS({
  "node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/calculateReferencedFieldsByType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.calculateReferencedFieldsByType = void 0;
    var graphql_1 = require_graphql2();
    var usage_reporting_protobuf_1 = require_protobuf();
    function calculateReferencedFieldsByType2({ document, schema, resolvedOperationName }) {
      const documentSeparatedByOperation = (0, graphql_1.separateOperations)(document);
      const filteredDocument = documentSeparatedByOperation[resolvedOperationName !== null && resolvedOperationName !== void 0 ? resolvedOperationName : ""];
      if (!filteredDocument) {
        throw Error(`shouldn't happen: operation '${resolvedOperationName !== null && resolvedOperationName !== void 0 ? resolvedOperationName : ""}' not found`);
      }
      const typeInfo = new graphql_1.TypeInfo(schema);
      const interfaces = /* @__PURE__ */ new Set();
      const referencedFieldSetByType = /* @__PURE__ */ Object.create(null);
      (0, graphql_1.visit)(filteredDocument, (0, graphql_1.visitWithTypeInfo)(typeInfo, {
        Field(field) {
          const fieldName = field.name.value;
          const parentType = typeInfo.getParentType();
          if (!parentType) {
            throw Error(`shouldn't happen: missing parent type for field ${fieldName}`);
          }
          const parentTypeName = parentType.name;
          if (!referencedFieldSetByType[parentTypeName]) {
            referencedFieldSetByType[parentTypeName] = /* @__PURE__ */ new Set();
            if ((0, graphql_1.isInterfaceType)(parentType)) {
              interfaces.add(parentTypeName);
            }
          }
          referencedFieldSetByType[parentTypeName].add(fieldName);
        }
      }));
      const referencedFieldsByType = /* @__PURE__ */ Object.create(null);
      for (const [typeName, fieldNames] of Object.entries(referencedFieldSetByType)) {
        referencedFieldsByType[typeName] = new usage_reporting_protobuf_1.ReferencedFieldsForType({
          fieldNames: [...fieldNames],
          isInterface: interfaces.has(typeName)
        });
      }
      return referencedFieldsByType;
    }
    exports2.calculateReferencedFieldsByType = calculateReferencedFieldsByType2;
  }
});

// node_modules/@apollo/server/node_modules/@apollo/utils.dropunuseddefinitions/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/@apollo/server/node_modules/@apollo/utils.dropunuseddefinitions/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dropUnusedDefinitions = void 0;
    var graphql_1 = require_graphql2();
    function dropUnusedDefinitions(ast, operationName) {
      const separated = (0, graphql_1.separateOperations)(ast)[operationName];
      if (!separated) {
        return ast;
      }
      return separated;
    }
    exports2.dropUnusedDefinitions = dropUnusedDefinitions;
  }
});

// node_modules/@apollo/server/node_modules/@apollo/utils.stripsensitiveliterals/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/@apollo/server/node_modules/@apollo/utils.stripsensitiveliterals/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stripSensitiveLiterals = void 0;
    var graphql_1 = require_graphql2();
    function stripSensitiveLiterals(ast, options = {
      hideListAndObjectLiterals: false
    }) {
      const listAndObjectVisitorIfEnabled = options.hideListAndObjectLiterals ? {
        ListValue(node) {
          return { ...node, values: [] };
        },
        ObjectValue(node) {
          return { ...node, fields: [] };
        }
      } : {};
      return (0, graphql_1.visit)(ast, {
        IntValue(node) {
          return { ...node, value: "0" };
        },
        FloatValue(node) {
          return { ...node, value: "0" };
        },
        StringValue(node) {
          return { ...node, value: "", block: false };
        },
        ...listAndObjectVisitorIfEnabled
      });
    }
    exports2.stripSensitiveLiterals = stripSensitiveLiterals;
  }
});

// node_modules/@apollo/server/node_modules/@apollo/utils.printwithreducedwhitespace/dist/index.js
var require_dist6 = __commonJS({
  "node_modules/@apollo/server/node_modules/@apollo/utils.printwithreducedwhitespace/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.printWithReducedWhitespace = void 0;
    var graphql_1 = require_graphql2();
    function printWithReducedWhitespace(ast) {
      const sanitizedAST = (0, graphql_1.visit)(ast, {
        StringValue(node) {
          return {
            ...node,
            value: Buffer.from(node.value, "utf8").toString("hex"),
            block: false
          };
        }
      });
      const withWhitespace = (0, graphql_1.print)(sanitizedAST);
      const minimizedButStillHex = withWhitespace.replace(/\s+/g, " ").replace(/([^_a-zA-Z0-9]) /g, (_5, c) => c).replace(/ ([^_a-zA-Z0-9])/g, (_5, c) => c);
      return minimizedButStillHex.replace(/"([a-f0-9]+)"/g, (_5, hex) => JSON.stringify(Buffer.from(hex, "hex").toString("utf8")));
    }
    exports2.printWithReducedWhitespace = printWithReducedWhitespace;
  }
});

// node_modules/@apollo/server/node_modules/@apollo/utils.removealiases/dist/index.js
var require_dist7 = __commonJS({
  "node_modules/@apollo/server/node_modules/@apollo/utils.removealiases/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.removeAliases = void 0;
    var graphql_1 = require_graphql2();
    function removeAliases(ast) {
      return (0, graphql_1.visit)(ast, {
        Field(node) {
          const { alias, ...rest } = node;
          return rest;
        }
      });
    }
    exports2.removeAliases = removeAliases;
  }
});

// node_modules/lodash.sortby/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.sortby/index.js"(exports2, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var UNORDERED_COMPARE_FLAG = 1;
    var PARTIAL_COMPARE_FLAG = 2;
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayMap(array, iteratee) {
      var index = -1, length = array ? array.length : 0, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arraySome(array, predicate) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var nativeMax = Math.max;
    var DataView2 = getNative(root, "DataView");
    var Map2 = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set2 = getNative(root, "Set");
    var WeakMap2 = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1, length = values ? values.length : 0;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack2(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key) {
      return this.__data__["delete"](key);
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }
    Stack2.prototype.clear = stackClear;
    Stack2.prototype["delete"] = stackDelete;
    Stack2.prototype.get = stackGet;
    Stack2.prototype.has = stackHas;
    Stack2.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    var baseEach = createBaseEach(baseForOwn);
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    var baseFor = createBaseFor();
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    function baseGet(object, path2) {
      path2 = isKey(path2, object) ? [path2] : castPath(path2);
      var index = 0, length = path2.length;
      while (object != null && index < length) {
        object = object[toKey(path2[index++])];
      }
      return index && index == length ? object : void 0;
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObject2(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object), othIsObj = othTag == objectTag && !isHostObject(other), isSameTag = objTag == othTag;
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack2());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack2());
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack2());
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack2();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function baseMap(collection, iteratee) {
      var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
      baseEach(collection, function(value, key, collection2) {
        result[++index] = iteratee(value, key, collection2);
      });
      return result;
    }
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    function baseMatchesProperty(path2, srcValue) {
      if (isKey(path2) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path2), srcValue);
      }
      return function(object) {
        var objValue = get(object, path2);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path2) : baseIsEqual(srcValue, objValue, void 0, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));
      var result = baseMap(collection, function(value, key, collection2) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { "criteria": criteria, "index": ++index, "value": value };
      });
      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }
    function basePropertyDeep(path2) {
      return function(object) {
        return baseGet(object, path2);
      };
    }
    function baseRest(func, start) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== void 0, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
        var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
          return 1;
        }
        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }
    function compareMultiple(object, other, orders) {
      var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == "desc" ? -1 : 1);
        }
      }
      return object.index - other.index;
    }
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1, result = true, seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!seen.has(othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, objProps = keys(object), objLength = objProps.length, othProps = keys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getMatchData(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function hasPath(object, path2, hasFunc) {
      path2 = isKey(path2, object) ? [path2] : castPath(path2);
      var result, index = -1, length = path2.length;
      while (++index < length) {
        var key = toKey(path2[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index, object) {
      if (!isObject2(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function isStrictComparable(value) {
      return value === value && !isObject2(value);
    }
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    var stringToPath = memoize(function(string) {
      string = toString(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject2(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    function get(object, path2, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path2);
      return result === void 0 ? defaultValue : result;
    }
    function hasIn(object, path2) {
      return object != null && hasPath(object, path2, baseHasIn);
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function identity(value) {
      return value;
    }
    function property(path2) {
      return isKey(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
    }
    module2.exports = sortBy;
  }
});

// node_modules/@apollo/server/node_modules/@apollo/utils.sortast/dist/index.js
var require_dist8 = __commonJS({
  "node_modules/@apollo/server/node_modules/@apollo/utils.sortast/dist/index.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sortAST = void 0;
    var graphql_1 = require_graphql2();
    var lodash_sortby_1 = __importDefault2(require_lodash2());
    function sortAST(ast) {
      return (0, graphql_1.visit)(ast, {
        Document(node) {
          return {
            ...node,
            definitions: (0, lodash_sortby_1.default)(node.definitions, "kind", "name.value")
          };
        },
        OperationDefinition(node) {
          return sortVariableDefinitions(node);
        },
        SelectionSet(node) {
          return {
            ...node,
            selections: (0, lodash_sortby_1.default)(node.selections, "kind", "name.value")
          };
        },
        Field(node) {
          return sortArguments(node);
        },
        FragmentSpread(node) {
          return sortDirectives(node);
        },
        InlineFragment(node) {
          return sortDirectives(node);
        },
        FragmentDefinition(node) {
          return sortDirectives(sortVariableDefinitions(node));
        },
        Directive(node) {
          return sortArguments(node);
        }
      });
    }
    exports2.sortAST = sortAST;
    function sortDirectives(node) {
      return "directives" in node ? { ...node, directives: (0, lodash_sortby_1.default)(node.directives, "name.value") } : node;
    }
    function sortArguments(node) {
      return "arguments" in node ? { ...node, arguments: (0, lodash_sortby_1.default)(node.arguments, "name.value") } : node;
    }
    function sortVariableDefinitions(node) {
      return "variableDefinitions" in node ? {
        ...node,
        variableDefinitions: (0, lodash_sortby_1.default)(node.variableDefinitions, "variable.name.value")
      } : node;
    }
  }
});

// node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/signature.js
var require_signature = __commonJS({
  "node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/signature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.usageReportingSignature = void 0;
    var utils_dropunuseddefinitions_1 = require_dist4();
    var utils_stripsensitiveliterals_1 = require_dist5();
    var utils_printwithreducedwhitespace_1 = require_dist6();
    var utils_removealiases_1 = require_dist7();
    var utils_sortast_1 = require_dist8();
    function usageReportingSignature2(ast, operationName) {
      return (0, utils_printwithreducedwhitespace_1.printWithReducedWhitespace)((0, utils_sortast_1.sortAST)((0, utils_removealiases_1.removeAliases)((0, utils_stripsensitiveliterals_1.stripSensitiveLiterals)((0, utils_dropunuseddefinitions_1.dropUnusedDefinitions)(ast, operationName), {
        hideListAndObjectLiterals: true
      }))));
    }
    exports2.usageReportingSignature = usageReportingSignature2;
  }
});

// node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/index.js
var require_dist9 = __commonJS({
  "node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.usageReportingSignature = exports2.calculateReferencedFieldsByType = void 0;
    var calculateReferencedFieldsByType_1 = require_calculateReferencedFieldsByType();
    Object.defineProperty(exports2, "calculateReferencedFieldsByType", { enumerable: true, get: function() {
      return calculateReferencedFieldsByType_1.calculateReferencedFieldsByType;
    } });
    var signature_1 = require_signature();
    Object.defineProperty(exports2, "usageReportingSignature", { enumerable: true, get: function() {
      return signature_1.usageReportingSignature;
    } });
  }
});

// node_modules/retry/lib/retry_operation.js
var require_retry_operation = __commonJS({
  "node_modules/retry/lib/retry_operation.js"(exports2, module2) {
    function RetryOperation(timeouts, options) {
      if (typeof options === "boolean") {
        options = { forever: options };
      }
      this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
      this._timeouts = timeouts;
      this._options = options || {};
      this._maxRetryTime = options && options.maxRetryTime || Infinity;
      this._fn = null;
      this._errors = [];
      this._attempts = 1;
      this._operationTimeout = null;
      this._operationTimeoutCb = null;
      this._timeout = null;
      this._operationStart = null;
      this._timer = null;
      if (this._options.forever) {
        this._cachedTimeouts = this._timeouts.slice(0);
      }
    }
    module2.exports = RetryOperation;
    RetryOperation.prototype.reset = function() {
      this._attempts = 1;
      this._timeouts = this._originalTimeouts.slice(0);
    };
    RetryOperation.prototype.stop = function() {
      if (this._timeout) {
        clearTimeout(this._timeout);
      }
      if (this._timer) {
        clearTimeout(this._timer);
      }
      this._timeouts = [];
      this._cachedTimeouts = null;
    };
    RetryOperation.prototype.retry = function(err) {
      if (this._timeout) {
        clearTimeout(this._timeout);
      }
      if (!err) {
        return false;
      }
      var currentTime = (/* @__PURE__ */ new Date()).getTime();
      if (err && currentTime - this._operationStart >= this._maxRetryTime) {
        this._errors.push(err);
        this._errors.unshift(new Error("RetryOperation timeout occurred"));
        return false;
      }
      this._errors.push(err);
      var timeout = this._timeouts.shift();
      if (timeout === void 0) {
        if (this._cachedTimeouts) {
          this._errors.splice(0, this._errors.length - 1);
          timeout = this._cachedTimeouts.slice(-1);
        } else {
          return false;
        }
      }
      var self2 = this;
      this._timer = setTimeout(function() {
        self2._attempts++;
        if (self2._operationTimeoutCb) {
          self2._timeout = setTimeout(function() {
            self2._operationTimeoutCb(self2._attempts);
          }, self2._operationTimeout);
          if (self2._options.unref) {
            self2._timeout.unref();
          }
        }
        self2._fn(self2._attempts);
      }, timeout);
      if (this._options.unref) {
        this._timer.unref();
      }
      return true;
    };
    RetryOperation.prototype.attempt = function(fn2, timeoutOps) {
      this._fn = fn2;
      if (timeoutOps) {
        if (timeoutOps.timeout) {
          this._operationTimeout = timeoutOps.timeout;
        }
        if (timeoutOps.cb) {
          this._operationTimeoutCb = timeoutOps.cb;
        }
      }
      var self2 = this;
      if (this._operationTimeoutCb) {
        this._timeout = setTimeout(function() {
          self2._operationTimeoutCb();
        }, self2._operationTimeout);
      }
      this._operationStart = (/* @__PURE__ */ new Date()).getTime();
      this._fn(this._attempts);
    };
    RetryOperation.prototype.try = function(fn2) {
      console.log("Using RetryOperation.try() is deprecated");
      this.attempt(fn2);
    };
    RetryOperation.prototype.start = function(fn2) {
      console.log("Using RetryOperation.start() is deprecated");
      this.attempt(fn2);
    };
    RetryOperation.prototype.start = RetryOperation.prototype.try;
    RetryOperation.prototype.errors = function() {
      return this._errors;
    };
    RetryOperation.prototype.attempts = function() {
      return this._attempts;
    };
    RetryOperation.prototype.mainError = function() {
      if (this._errors.length === 0) {
        return null;
      }
      var counts = {};
      var mainError = null;
      var mainErrorCount = 0;
      for (var i = 0; i < this._errors.length; i++) {
        var error = this._errors[i];
        var message = error.message;
        var count = (counts[message] || 0) + 1;
        counts[message] = count;
        if (count >= mainErrorCount) {
          mainError = error;
          mainErrorCount = count;
        }
      }
      return mainError;
    };
  }
});

// node_modules/retry/lib/retry.js
var require_retry = __commonJS({
  "node_modules/retry/lib/retry.js"(exports2) {
    var RetryOperation = require_retry_operation();
    exports2.operation = function(options) {
      var timeouts = exports2.timeouts(options);
      return new RetryOperation(timeouts, {
        forever: options && (options.forever || options.retries === Infinity),
        unref: options && options.unref,
        maxRetryTime: options && options.maxRetryTime
      });
    };
    exports2.timeouts = function(options) {
      if (options instanceof Array) {
        return [].concat(options);
      }
      var opts = {
        retries: 10,
        factor: 2,
        minTimeout: 1 * 1e3,
        maxTimeout: Infinity,
        randomize: false
      };
      for (var key in options) {
        opts[key] = options[key];
      }
      if (opts.minTimeout > opts.maxTimeout) {
        throw new Error("minTimeout is greater than maxTimeout");
      }
      var timeouts = [];
      for (var i = 0; i < opts.retries; i++) {
        timeouts.push(this.createTimeout(i, opts));
      }
      if (options && options.forever && !timeouts.length) {
        timeouts.push(this.createTimeout(i, opts));
      }
      timeouts.sort(function(a, b2) {
        return a - b2;
      });
      return timeouts;
    };
    exports2.createTimeout = function(attempt, opts) {
      var random = opts.randomize ? Math.random() + 1 : 1;
      var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));
      timeout = Math.min(timeout, opts.maxTimeout);
      return timeout;
    };
    exports2.wrap = function(obj, options, methods) {
      if (options instanceof Array) {
        methods = options;
        options = null;
      }
      if (!methods) {
        methods = [];
        for (var key in obj) {
          if (typeof obj[key] === "function") {
            methods.push(key);
          }
        }
      }
      for (var i = 0; i < methods.length; i++) {
        var method = methods[i];
        var original = obj[method];
        obj[method] = function retryWrapper(original2) {
          var op2 = exports2.operation(options);
          var args = Array.prototype.slice.call(arguments, 1);
          var callback = args.pop();
          args.push(function(err) {
            if (op2.retry(err)) {
              return;
            }
            if (err) {
              arguments[0] = op2.mainError();
            }
            callback.apply(this, arguments);
          });
          op2.attempt(function() {
            original2.apply(obj, args);
          });
        }.bind(obj, original);
        obj[method].options = options;
      }
    };
  }
});

// node_modules/retry/index.js
var require_retry2 = __commonJS({
  "node_modules/retry/index.js"(exports2, module2) {
    module2.exports = require_retry();
  }
});

// node_modules/async-retry/lib/index.js
var require_lib = __commonJS({
  "node_modules/async-retry/lib/index.js"(exports2, module2) {
    var retrier = require_retry2();
    function retry2(fn2, opts) {
      function run(resolve, reject) {
        var options = opts || {};
        var op2;
        if (!("randomize" in options)) {
          options.randomize = true;
        }
        op2 = retrier.operation(options);
        function bail(err) {
          reject(err || new Error("Aborted"));
        }
        function onError(err, num) {
          if (err.bail) {
            bail(err);
            return;
          }
          if (!op2.retry(err)) {
            reject(op2.mainError());
          } else if (options.onRetry) {
            options.onRetry(err, num);
          }
        }
        function runAttempt(num) {
          var val;
          try {
            val = fn2(bail, num);
          } catch (err) {
            onError(err, num);
            return;
          }
          Promise.resolve(val).then(resolve).catch(function catchIt(err) {
            onError(err, num);
          });
        }
        op2.attempt(runAttempt);
      }
      return new Promise(run);
    }
    module2.exports = retry2;
  }
});

// node_modules/node-abort-controller/index.js
var require_node_abort_controller = __commonJS({
  "node_modules/node-abort-controller/index.js"(exports2, module2) {
    var { EventEmitter } = require("events");
    var AbortSignal3 = class {
      constructor() {
        this.eventEmitter = new EventEmitter();
        this.onabort = null;
        this.aborted = false;
        this.reason = void 0;
      }
      toString() {
        return "[object AbortSignal]";
      }
      get [Symbol.toStringTag]() {
        return "AbortSignal";
      }
      removeEventListener(name, handler) {
        this.eventEmitter.removeListener(name, handler);
      }
      addEventListener(name, handler) {
        this.eventEmitter.on(name, handler);
      }
      dispatchEvent(type) {
        const event = { type, target: this };
        const handlerName = `on${type}`;
        if (typeof this[handlerName] === "function") this[handlerName](event);
        this.eventEmitter.emit(type, event);
      }
      throwIfAborted() {
        if (this.aborted) {
          throw this.reason;
        }
      }
      static abort(reason) {
        const controller = new AbortController4();
        controller.abort();
        return controller.signal;
      }
      static timeout(time) {
        const controller = new AbortController4();
        setTimeout(() => controller.abort(new Error("TimeoutError")), time);
        return controller.signal;
      }
    };
    var AbortController4 = class {
      constructor() {
        this.signal = new AbortSignal3();
      }
      abort(reason) {
        if (this.signal.aborted) return;
        this.signal.aborted = true;
        if (reason) this.signal.reason = reason;
        else this.signal.reason = new Error("AbortError");
        this.signal.dispatchEvent("abort");
      }
      toString() {
        return "[object AbortController]";
      }
      get [Symbol.toStringTag]() {
        return "AbortController";
      }
    };
    module2.exports = { AbortController: AbortController4, AbortSignal: AbortSignal3 };
  }
});

// node_modules/webidl-conversions/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/webidl-conversions/lib/index.js"(exports2, module2) {
    "use strict";
    var conversions = {};
    module2.exports = conversions;
    function sign(x2) {
      return x2 < 0 ? -1 : 1;
    }
    function evenRound(x2) {
      if (x2 % 1 === 0.5 && (x2 & 1) === 0) {
        return Math.floor(x2);
      } else {
        return Math.round(x2);
      }
    }
    function createNumberConversion(bitLength, typeOpts) {
      if (!typeOpts.unsigned) {
        --bitLength;
      }
      const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
      const upperBound = Math.pow(2, bitLength) - 1;
      const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
      const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
      return function(V2, opts) {
        if (!opts) opts = {};
        let x2 = +V2;
        if (opts.enforceRange) {
          if (!Number.isFinite(x2)) {
            throw new TypeError("Argument is not a finite number");
          }
          x2 = sign(x2) * Math.floor(Math.abs(x2));
          if (x2 < lowerBound || x2 > upperBound) {
            throw new TypeError("Argument is not in byte range");
          }
          return x2;
        }
        if (!isNaN(x2) && opts.clamp) {
          x2 = evenRound(x2);
          if (x2 < lowerBound) x2 = lowerBound;
          if (x2 > upperBound) x2 = upperBound;
          return x2;
        }
        if (!Number.isFinite(x2) || x2 === 0) {
          return 0;
        }
        x2 = sign(x2) * Math.floor(Math.abs(x2));
        x2 = x2 % moduloVal;
        if (!typeOpts.unsigned && x2 >= moduloBound) {
          return x2 - moduloVal;
        } else if (typeOpts.unsigned) {
          if (x2 < 0) {
            x2 += moduloVal;
          } else if (x2 === -0) {
            return 0;
          }
        }
        return x2;
      };
    }
    conversions["void"] = function() {
      return void 0;
    };
    conversions["boolean"] = function(val) {
      return !!val;
    };
    conversions["byte"] = createNumberConversion(8, { unsigned: false });
    conversions["octet"] = createNumberConversion(8, { unsigned: true });
    conversions["short"] = createNumberConversion(16, { unsigned: false });
    conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
    conversions["long"] = createNumberConversion(32, { unsigned: false });
    conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
    conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
    conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
    conversions["double"] = function(V2) {
      const x2 = +V2;
      if (!Number.isFinite(x2)) {
        throw new TypeError("Argument is not a finite floating-point value");
      }
      return x2;
    };
    conversions["unrestricted double"] = function(V2) {
      const x2 = +V2;
      if (isNaN(x2)) {
        throw new TypeError("Argument is NaN");
      }
      return x2;
    };
    conversions["float"] = conversions["double"];
    conversions["unrestricted float"] = conversions["unrestricted double"];
    conversions["DOMString"] = function(V2, opts) {
      if (!opts) opts = {};
      if (opts.treatNullAsEmptyString && V2 === null) {
        return "";
      }
      return String(V2);
    };
    conversions["ByteString"] = function(V2, opts) {
      const x2 = String(V2);
      let c = void 0;
      for (let i = 0; (c = x2.codePointAt(i)) !== void 0; ++i) {
        if (c > 255) {
          throw new TypeError("Argument is not a valid bytestring");
        }
      }
      return x2;
    };
    conversions["USVString"] = function(V2) {
      const S = String(V2);
      const n = S.length;
      const U2 = [];
      for (let i = 0; i < n; ++i) {
        const c = S.charCodeAt(i);
        if (c < 55296 || c > 57343) {
          U2.push(String.fromCodePoint(c));
        } else if (56320 <= c && c <= 57343) {
          U2.push(String.fromCodePoint(65533));
        } else {
          if (i === n - 1) {
            U2.push(String.fromCodePoint(65533));
          } else {
            const d = S.charCodeAt(i + 1);
            if (56320 <= d && d <= 57343) {
              const a = c & 1023;
              const b2 = d & 1023;
              U2.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b2));
              ++i;
            } else {
              U2.push(String.fromCodePoint(65533));
            }
          }
        }
      }
      return U2.join("");
    };
    conversions["Date"] = function(V2, opts) {
      if (!(V2 instanceof Date)) {
        throw new TypeError("Argument is not a Date object");
      }
      if (isNaN(V2)) {
        return void 0;
      }
      return V2;
    };
    conversions["RegExp"] = function(V2, opts) {
      if (!(V2 instanceof RegExp)) {
        V2 = new RegExp(V2);
      }
      return V2;
    };
  }
});

// node_modules/whatwg-url/lib/utils.js
var require_utils4 = __commonJS({
  "node_modules/whatwg-url/lib/utils.js"(exports2, module2) {
    "use strict";
    module2.exports.mixin = function mixin(target, source) {
      const keys = Object.getOwnPropertyNames(source);
      for (let i = 0; i < keys.length; ++i) {
        Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
      }
    };
    module2.exports.wrapperSymbol = Symbol("wrapper");
    module2.exports.implSymbol = Symbol("impl");
    module2.exports.wrapperForImpl = function(impl) {
      return impl[module2.exports.wrapperSymbol];
    };
    module2.exports.implForWrapper = function(wrapper) {
      return wrapper[module2.exports.implSymbol];
    };
  }
});

// node_modules/tr46/lib/mappingTable.json
var require_mappingTable = __commonJS({
  "node_modules/tr46/lib/mappingTable.json"(exports2, module2) {
    module2.exports = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1e3, 1e3], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6e3], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8e3, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8e3]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9e3], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [3e4]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13e3, 13e3], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43e3, 43e3], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64e3, 64e3], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66e3, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[12e4, 12e4], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128e3, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23e3]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149e3]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32e3]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195e3, 195e3], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [4e4]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918e3, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]];
  }
});

// node_modules/tr46/index.js
var require_tr46 = __commonJS({
  "node_modules/tr46/index.js"(exports2, module2) {
    "use strict";
    var punycode = require("punycode");
    var mappingTable = require_mappingTable();
    var PROCESSING_OPTIONS = {
      TRANSITIONAL: 0,
      NONTRANSITIONAL: 1
    };
    function normalize(str) {
      return str.split("\0").map(function(s) {
        return s.normalize("NFC");
      }).join("\0");
    }
    function findStatus(val) {
      var start = 0;
      var end = mappingTable.length - 1;
      while (start <= end) {
        var mid = Math.floor((start + end) / 2);
        var target = mappingTable[mid];
        if (target[0][0] <= val && target[0][1] >= val) {
          return target;
        } else if (target[0][0] > val) {
          end = mid - 1;
        } else {
          start = mid + 1;
        }
      }
      return null;
    }
    var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    function countSymbols(string) {
      return string.replace(regexAstralSymbols, "_").length;
    }
    function mapChars(domain_name, useSTD3, processing_option) {
      var hasError = false;
      var processed = "";
      var len = countSymbols(domain_name);
      for (var i = 0; i < len; ++i) {
        var codePoint = domain_name.codePointAt(i);
        var status = findStatus(codePoint);
        switch (status[1]) {
          case "disallowed":
            hasError = true;
            processed += String.fromCodePoint(codePoint);
            break;
          case "ignored":
            break;
          case "mapped":
            processed += String.fromCodePoint.apply(String, status[2]);
            break;
          case "deviation":
            if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
              processed += String.fromCodePoint.apply(String, status[2]);
            } else {
              processed += String.fromCodePoint(codePoint);
            }
            break;
          case "valid":
            processed += String.fromCodePoint(codePoint);
            break;
          case "disallowed_STD3_mapped":
            if (useSTD3) {
              hasError = true;
              processed += String.fromCodePoint(codePoint);
            } else {
              processed += String.fromCodePoint.apply(String, status[2]);
            }
            break;
          case "disallowed_STD3_valid":
            if (useSTD3) {
              hasError = true;
            }
            processed += String.fromCodePoint(codePoint);
            break;
        }
      }
      return {
        string: processed,
        error: hasError
      };
    }
    var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
    function validateLabel(label, processing_option) {
      if (label.substr(0, 4) === "xn--") {
        label = punycode.toUnicode(label);
        processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
      }
      var error = false;
      if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
        error = true;
      }
      var len = countSymbols(label);
      for (var i = 0; i < len; ++i) {
        var status = findStatus(label.codePointAt(i));
        if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
          error = true;
          break;
        }
      }
      return {
        label,
        error
      };
    }
    function processing(domain_name, useSTD3, processing_option) {
      var result = mapChars(domain_name, useSTD3, processing_option);
      result.string = normalize(result.string);
      var labels = result.string.split(".");
      for (var i = 0; i < labels.length; ++i) {
        try {
          var validation = validateLabel(labels[i]);
          labels[i] = validation.label;
          result.error = result.error || validation.error;
        } catch (e) {
          result.error = true;
        }
      }
      return {
        string: labels.join("."),
        error: result.error
      };
    }
    module2.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
      var result = processing(domain_name, useSTD3, processing_option);
      var labels = result.string.split(".");
      labels = labels.map(function(l) {
        try {
          return punycode.toASCII(l);
        } catch (e) {
          result.error = true;
          return l;
        }
      });
      if (verifyDnsLength) {
        var total = labels.slice(0, labels.length - 1).join(".").length;
        if (total.length > 253 || total.length === 0) {
          result.error = true;
        }
        for (var i = 0; i < labels.length; ++i) {
          if (labels.length > 63 || labels.length === 0) {
            result.error = true;
            break;
          }
        }
      }
      if (result.error) return null;
      return labels.join(".");
    };
    module2.exports.toUnicode = function(domain_name, useSTD3) {
      var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
      return {
        domain: result.string,
        error: result.error
      };
    };
    module2.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
  }
});

// node_modules/whatwg-url/lib/url-state-machine.js
var require_url_state_machine = __commonJS({
  "node_modules/whatwg-url/lib/url-state-machine.js"(exports2, module2) {
    "use strict";
    var punycode = require("punycode");
    var tr46 = require_tr46();
    var specialSchemes = {
      ftp: 21,
      file: null,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var failure = Symbol("failure");
    function countSymbols(str) {
      return punycode.ucs2.decode(str).length;
    }
    function at2(input, idx) {
      const c = input[idx];
      return isNaN(c) ? void 0 : String.fromCodePoint(c);
    }
    function isASCIIDigit(c) {
      return c >= 48 && c <= 57;
    }
    function isASCIIAlpha(c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 122;
    }
    function isASCIIAlphanumeric(c) {
      return isASCIIAlpha(c) || isASCIIDigit(c);
    }
    function isASCIIHex(c) {
      return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
    }
    function isSingleDot(buffer) {
      return buffer === "." || buffer.toLowerCase() === "%2e";
    }
    function isDoubleDot(buffer) {
      buffer = buffer.toLowerCase();
      return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
    }
    function isWindowsDriveLetterCodePoints(cp1, cp2) {
      return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
    }
    function isWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
    }
    function isNormalizedWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
    }
    function containsForbiddenHostCodePoint(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function containsForbiddenHostCodePointExcludingPercent(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function isSpecialScheme(scheme) {
      return specialSchemes[scheme] !== void 0;
    }
    function isSpecial(url) {
      return isSpecialScheme(url.scheme);
    }
    function defaultPort(scheme) {
      return specialSchemes[scheme];
    }
    function percentEncode(c) {
      let hex = c.toString(16).toUpperCase();
      if (hex.length === 1) {
        hex = "0" + hex;
      }
      return "%" + hex;
    }
    function utf8PercentEncode(c) {
      const buf = new Buffer(c);
      let str = "";
      for (let i = 0; i < buf.length; ++i) {
        str += percentEncode(buf[i]);
      }
      return str;
    }
    function utf8PercentDecode(str) {
      const input = new Buffer(str);
      const output = [];
      for (let i = 0; i < input.length; ++i) {
        if (input[i] !== 37) {
          output.push(input[i]);
        } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
          output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
          i += 2;
        } else {
          output.push(input[i]);
        }
      }
      return new Buffer(output).toString();
    }
    function isC0ControlPercentEncode(c) {
      return c <= 31 || c > 126;
    }
    var extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
    function isPathPercentEncode(c) {
      return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
    }
    var extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
    function isUserinfoPercentEncode(c) {
      return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
    }
    function percentEncodeChar(c, encodeSetPredicate) {
      const cStr = String.fromCodePoint(c);
      if (encodeSetPredicate(c)) {
        return utf8PercentEncode(cStr);
      }
      return cStr;
    }
    function parseIPv4Number(input) {
      let R2 = 10;
      if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
        input = input.substring(2);
        R2 = 16;
      } else if (input.length >= 2 && input.charAt(0) === "0") {
        input = input.substring(1);
        R2 = 8;
      }
      if (input === "") {
        return 0;
      }
      const regex = R2 === 10 ? /[^0-9]/ : R2 === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
      if (regex.test(input)) {
        return failure;
      }
      return parseInt(input, R2);
    }
    function parseIPv4(input) {
      const parts = input.split(".");
      if (parts[parts.length - 1] === "") {
        if (parts.length > 1) {
          parts.pop();
        }
      }
      if (parts.length > 4) {
        return input;
      }
      const numbers = [];
      for (const part of parts) {
        if (part === "") {
          return input;
        }
        const n = parseIPv4Number(part);
        if (n === failure) {
          return input;
        }
        numbers.push(n);
      }
      for (let i = 0; i < numbers.length - 1; ++i) {
        if (numbers[i] > 255) {
          return failure;
        }
      }
      if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
        return failure;
      }
      let ipv4 = numbers.pop();
      let counter = 0;
      for (const n of numbers) {
        ipv4 += n * Math.pow(256, 3 - counter);
        ++counter;
      }
      return ipv4;
    }
    function serializeIPv4(address) {
      let output = "";
      let n = address;
      for (let i = 1; i <= 4; ++i) {
        output = String(n % 256) + output;
        if (i !== 4) {
          output = "." + output;
        }
        n = Math.floor(n / 256);
      }
      return output;
    }
    function parseIPv6(input) {
      const address = [0, 0, 0, 0, 0, 0, 0, 0];
      let pieceIndex = 0;
      let compress = null;
      let pointer = 0;
      input = punycode.ucs2.decode(input);
      if (input[pointer] === 58) {
        if (input[pointer + 1] !== 58) {
          return failure;
        }
        pointer += 2;
        ++pieceIndex;
        compress = pieceIndex;
      }
      while (pointer < input.length) {
        if (pieceIndex === 8) {
          return failure;
        }
        if (input[pointer] === 58) {
          if (compress !== null) {
            return failure;
          }
          ++pointer;
          ++pieceIndex;
          compress = pieceIndex;
          continue;
        }
        let value = 0;
        let length = 0;
        while (length < 4 && isASCIIHex(input[pointer])) {
          value = value * 16 + parseInt(at2(input, pointer), 16);
          ++pointer;
          ++length;
        }
        if (input[pointer] === 46) {
          if (length === 0) {
            return failure;
          }
          pointer -= length;
          if (pieceIndex > 6) {
            return failure;
          }
          let numbersSeen = 0;
          while (input[pointer] !== void 0) {
            let ipv4Piece = null;
            if (numbersSeen > 0) {
              if (input[pointer] === 46 && numbersSeen < 4) {
                ++pointer;
              } else {
                return failure;
              }
            }
            if (!isASCIIDigit(input[pointer])) {
              return failure;
            }
            while (isASCIIDigit(input[pointer])) {
              const number = parseInt(at2(input, pointer));
              if (ipv4Piece === null) {
                ipv4Piece = number;
              } else if (ipv4Piece === 0) {
                return failure;
              } else {
                ipv4Piece = ipv4Piece * 10 + number;
              }
              if (ipv4Piece > 255) {
                return failure;
              }
              ++pointer;
            }
            address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
            ++numbersSeen;
            if (numbersSeen === 2 || numbersSeen === 4) {
              ++pieceIndex;
            }
          }
          if (numbersSeen !== 4) {
            return failure;
          }
          break;
        } else if (input[pointer] === 58) {
          ++pointer;
          if (input[pointer] === void 0) {
            return failure;
          }
        } else if (input[pointer] !== void 0) {
          return failure;
        }
        address[pieceIndex] = value;
        ++pieceIndex;
      }
      if (compress !== null) {
        let swaps = pieceIndex - compress;
        pieceIndex = 7;
        while (pieceIndex !== 0 && swaps > 0) {
          const temp = address[compress + swaps - 1];
          address[compress + swaps - 1] = address[pieceIndex];
          address[pieceIndex] = temp;
          --pieceIndex;
          --swaps;
        }
      } else if (compress === null && pieceIndex !== 8) {
        return failure;
      }
      return address;
    }
    function serializeIPv6(address) {
      let output = "";
      const seqResult = findLongestZeroSequence(address);
      const compress = seqResult.idx;
      let ignore0 = false;
      for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
        if (ignore0 && address[pieceIndex] === 0) {
          continue;
        } else if (ignore0) {
          ignore0 = false;
        }
        if (compress === pieceIndex) {
          const separator = pieceIndex === 0 ? "::" : ":";
          output += separator;
          ignore0 = true;
          continue;
        }
        output += address[pieceIndex].toString(16);
        if (pieceIndex !== 7) {
          output += ":";
        }
      }
      return output;
    }
    function parseHost(input, isSpecialArg) {
      if (input[0] === "[") {
        if (input[input.length - 1] !== "]") {
          return failure;
        }
        return parseIPv6(input.substring(1, input.length - 1));
      }
      if (!isSpecialArg) {
        return parseOpaqueHost(input);
      }
      const domain = utf8PercentDecode(input);
      const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
      if (asciiDomain === null) {
        return failure;
      }
      if (containsForbiddenHostCodePoint(asciiDomain)) {
        return failure;
      }
      const ipv4Host = parseIPv4(asciiDomain);
      if (typeof ipv4Host === "number" || ipv4Host === failure) {
        return ipv4Host;
      }
      return asciiDomain;
    }
    function parseOpaqueHost(input) {
      if (containsForbiddenHostCodePointExcludingPercent(input)) {
        return failure;
      }
      let output = "";
      const decoded = punycode.ucs2.decode(input);
      for (let i = 0; i < decoded.length; ++i) {
        output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
      }
      return output;
    }
    function findLongestZeroSequence(arr) {
      let maxIdx = null;
      let maxLen = 1;
      let currStart = null;
      let currLen = 0;
      for (let i = 0; i < arr.length; ++i) {
        if (arr[i] !== 0) {
          if (currLen > maxLen) {
            maxIdx = currStart;
            maxLen = currLen;
          }
          currStart = null;
          currLen = 0;
        } else {
          if (currStart === null) {
            currStart = i;
          }
          ++currLen;
        }
      }
      if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
      }
      return {
        idx: maxIdx,
        len: maxLen
      };
    }
    function serializeHost(host) {
      if (typeof host === "number") {
        return serializeIPv4(host);
      }
      if (host instanceof Array) {
        return "[" + serializeIPv6(host) + "]";
      }
      return host;
    }
    function trimControlChars(url) {
      return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
    }
    function trimTabAndNewline(url) {
      return url.replace(/\u0009|\u000A|\u000D/g, "");
    }
    function shortenPath(url) {
      const path2 = url.path;
      if (path2.length === 0) {
        return;
      }
      if (url.scheme === "file" && path2.length === 1 && isNormalizedWindowsDriveLetter(path2[0])) {
        return;
      }
      path2.pop();
    }
    function includesCredentials(url) {
      return url.username !== "" || url.password !== "";
    }
    function cannotHaveAUsernamePasswordPort(url) {
      return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
    }
    function isNormalizedWindowsDriveLetter(string) {
      return /^[A-Za-z]:$/.test(string);
    }
    function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
      this.pointer = 0;
      this.input = input;
      this.base = base || null;
      this.encodingOverride = encodingOverride || "utf-8";
      this.stateOverride = stateOverride;
      this.url = url;
      this.failure = false;
      this.parseError = false;
      if (!this.url) {
        this.url = {
          scheme: "",
          username: "",
          password: "",
          host: null,
          port: null,
          path: [],
          query: null,
          fragment: null,
          cannotBeABaseURL: false
        };
        const res2 = trimControlChars(this.input);
        if (res2 !== this.input) {
          this.parseError = true;
        }
        this.input = res2;
      }
      const res = trimTabAndNewline(this.input);
      if (res !== this.input) {
        this.parseError = true;
      }
      this.input = res;
      this.state = stateOverride || "scheme start";
      this.buffer = "";
      this.atFlag = false;
      this.arrFlag = false;
      this.passwordTokenSeenFlag = false;
      this.input = punycode.ucs2.decode(this.input);
      for (; this.pointer <= this.input.length; ++this.pointer) {
        const c = this.input[this.pointer];
        const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
        const ret = this["parse " + this.state](c, cStr);
        if (!ret) {
          break;
        } else if (ret === failure) {
          this.failure = true;
          break;
        }
      }
    }
    URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
      if (isASCIIAlpha(c)) {
        this.buffer += cStr.toLowerCase();
        this.state = "scheme";
      } else if (!this.stateOverride) {
        this.state = "no scheme";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
      if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
        this.buffer += cStr.toLowerCase();
      } else if (c === 58) {
        if (this.stateOverride) {
          if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
            return false;
          }
          if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
            return false;
          }
          if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
            return false;
          }
          if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
            return false;
          }
        }
        this.url.scheme = this.buffer;
        this.buffer = "";
        if (this.stateOverride) {
          return false;
        }
        if (this.url.scheme === "file") {
          if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
            this.parseError = true;
          }
          this.state = "file";
        } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
          this.state = "special relative or authority";
        } else if (isSpecial(this.url)) {
          this.state = "special authority slashes";
        } else if (this.input[this.pointer + 1] === 47) {
          this.state = "path or authority";
          ++this.pointer;
        } else {
          this.url.cannotBeABaseURL = true;
          this.url.path.push("");
          this.state = "cannot-be-a-base-URL path";
        }
      } else if (!this.stateOverride) {
        this.buffer = "";
        this.state = "no scheme";
        this.pointer = -1;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
      if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
        return failure;
      } else if (this.base.cannotBeABaseURL && c === 35) {
        this.url.scheme = this.base.scheme;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.url.cannotBeABaseURL = true;
        this.state = "fragment";
      } else if (this.base.scheme === "file") {
        this.state = "file";
        --this.pointer;
      } else {
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
      if (c === 47) {
        this.state = "authority";
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
      this.url.scheme = this.base.scheme;
      if (isNaN(c)) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 47) {
        this.state = "relative slash";
      } else if (c === 63) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
        this.state = "relative slash";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice(0, this.base.path.length - 1);
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
      if (isSpecial(this.url) && (c === 47 || c === 92)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "special authority ignore slashes";
      } else if (c === 47) {
        this.state = "authority";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "special authority ignore slashes";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
      if (c !== 47 && c !== 92) {
        this.state = "authority";
        --this.pointer;
      } else {
        this.parseError = true;
      }
      return true;
    };
    URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
      if (c === 64) {
        this.parseError = true;
        if (this.atFlag) {
          this.buffer = "%40" + this.buffer;
        }
        this.atFlag = true;
        const len = countSymbols(this.buffer);
        for (let pointer = 0; pointer < len; ++pointer) {
          const codePoint = this.buffer.codePointAt(pointer);
          if (codePoint === 58 && !this.passwordTokenSeenFlag) {
            this.passwordTokenSeenFlag = true;
            continue;
          }
          const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
          if (this.passwordTokenSeenFlag) {
            this.url.password += encodedCodePoints;
          } else {
            this.url.username += encodedCodePoints;
          }
        }
        this.buffer = "";
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        if (this.atFlag && this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        this.pointer -= countSymbols(this.buffer) + 1;
        this.buffer = "";
        this.state = "host";
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
      if (this.stateOverride && this.url.scheme === "file") {
        --this.pointer;
        this.state = "file host";
      } else if (c === 58 && !this.arrFlag) {
        if (this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "port";
        if (this.stateOverride === "hostname") {
          return false;
        }
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        --this.pointer;
        if (isSpecial(this.url) && this.buffer === "") {
          this.parseError = true;
          return failure;
        } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
          this.parseError = true;
          return false;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "path start";
        if (this.stateOverride) {
          return false;
        }
      } else {
        if (c === 91) {
          this.arrFlag = true;
        } else if (c === 93) {
          this.arrFlag = false;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
      if (isASCIIDigit(c)) {
        this.buffer += cStr;
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
        if (this.buffer !== "") {
          const port = parseInt(this.buffer);
          if (port > Math.pow(2, 16) - 1) {
            this.parseError = true;
            return failure;
          }
          this.url.port = port === defaultPort(this.url.scheme) ? null : port;
          this.buffer = "";
        }
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    var fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
    URLStateMachine.prototype["parse file"] = function parseFile(c) {
      this.url.scheme = "file";
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file slash";
      } else if (this.base !== null && this.base.scheme === "file") {
        if (isNaN(c)) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
        } else if (c === 63) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = "";
          this.state = "query";
        } else if (c === 35) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          this.url.fragment = "";
          this.state = "fragment";
        } else {
          if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
          !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
          !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            shortenPath(this.url);
          } else {
            this.parseError = true;
          }
          this.state = "path";
          --this.pointer;
        }
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file host";
      } else {
        if (this.base !== null && this.base.scheme === "file") {
          if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
            this.url.path.push(this.base.path[0]);
          } else {
            this.url.host = this.base.host;
          }
        }
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
      if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
        --this.pointer;
        if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
          this.parseError = true;
          this.state = "path";
        } else if (this.buffer === "") {
          this.url.host = "";
          if (this.stateOverride) {
            return false;
          }
          this.state = "path start";
        } else {
          let host = parseHost(this.buffer, isSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          if (host === "localhost") {
            host = "";
          }
          this.url.host = host;
          if (this.stateOverride) {
            return false;
          }
          this.buffer = "";
          this.state = "path start";
        }
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
      if (isSpecial(this.url)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "path";
        if (c !== 47 && c !== 92) {
          --this.pointer;
        }
      } else if (!this.stateOverride && c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (!this.stateOverride && c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (c !== void 0) {
        this.state = "path";
        if (c !== 47) {
          --this.pointer;
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse path"] = function parsePath(c) {
      if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
        if (isSpecial(this.url) && c === 92) {
          this.parseError = true;
        }
        if (isDoubleDot(this.buffer)) {
          shortenPath(this.url);
          if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
            this.url.path.push("");
          }
        } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        } else if (!isSingleDot(this.buffer)) {
          if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
            if (this.url.host !== "" && this.url.host !== null) {
              this.parseError = true;
              this.url.host = "";
            }
            this.buffer = this.buffer[0] + ":";
          }
          this.url.path.push(this.buffer);
        }
        this.buffer = "";
        if (this.url.scheme === "file" && (c === void 0 || c === 63 || c === 35)) {
          while (this.url.path.length > 1 && this.url.path[0] === "") {
            this.parseError = true;
            this.url.path.shift();
          }
        }
        if (c === 63) {
          this.url.query = "";
          this.state = "query";
        }
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += percentEncodeChar(c, isPathPercentEncode);
      }
      return true;
    };
    URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (!isNaN(c) && c !== 37) {
          this.parseError = true;
        }
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        if (!isNaN(c)) {
          this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
      if (isNaN(c) || !this.stateOverride && c === 35) {
        if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
          this.encodingOverride = "utf-8";
        }
        const buffer = new Buffer(this.buffer);
        for (let i = 0; i < buffer.length; ++i) {
          if (buffer[i] < 33 || buffer[i] > 126 || buffer[i] === 34 || buffer[i] === 35 || buffer[i] === 60 || buffer[i] === 62) {
            this.url.query += percentEncode(buffer[i]);
          } else {
            this.url.query += String.fromCodePoint(buffer[i]);
          }
        }
        this.buffer = "";
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
      if (isNaN(c)) {
      } else if (c === 0) {
        this.parseError = true;
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
      }
      return true;
    };
    function serializeURL(url, excludeFragment) {
      let output = url.scheme + ":";
      if (url.host !== null) {
        output += "//";
        if (url.username !== "" || url.password !== "") {
          output += url.username;
          if (url.password !== "") {
            output += ":" + url.password;
          }
          output += "@";
        }
        output += serializeHost(url.host);
        if (url.port !== null) {
          output += ":" + url.port;
        }
      } else if (url.host === null && url.scheme === "file") {
        output += "//";
      }
      if (url.cannotBeABaseURL) {
        output += url.path[0];
      } else {
        for (const string of url.path) {
          output += "/" + string;
        }
      }
      if (url.query !== null) {
        output += "?" + url.query;
      }
      if (!excludeFragment && url.fragment !== null) {
        output += "#" + url.fragment;
      }
      return output;
    }
    function serializeOrigin(tuple) {
      let result = tuple.scheme + "://";
      result += serializeHost(tuple.host);
      if (tuple.port !== null) {
        result += ":" + tuple.port;
      }
      return result;
    }
    module2.exports.serializeURL = serializeURL;
    module2.exports.serializeURLOrigin = function(url) {
      switch (url.scheme) {
        case "blob":
          try {
            return module2.exports.serializeURLOrigin(module2.exports.parseURL(url.path[0]));
          } catch (e) {
            return "null";
          }
        case "ftp":
        case "gopher":
        case "http":
        case "https":
        case "ws":
        case "wss":
          return serializeOrigin({
            scheme: url.scheme,
            host: url.host,
            port: url.port
          });
        case "file":
          return "file://";
        default:
          return "null";
      }
    };
    module2.exports.basicURLParse = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
      if (usm.failure) {
        return "failure";
      }
      return usm.url;
    };
    module2.exports.setTheUsername = function(url, username) {
      url.username = "";
      const decoded = punycode.ucs2.decode(username);
      for (let i = 0; i < decoded.length; ++i) {
        url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.setThePassword = function(url, password) {
      url.password = "";
      const decoded = punycode.ucs2.decode(password);
      for (let i = 0; i < decoded.length; ++i) {
        url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.serializeHost = serializeHost;
    module2.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
    module2.exports.serializeInteger = function(integer) {
      return String(integer);
    };
    module2.exports.parseURL = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      return module2.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
    };
  }
});

// node_modules/whatwg-url/lib/URL-impl.js
var require_URL_impl = __commonJS({
  "node_modules/whatwg-url/lib/URL-impl.js"(exports2) {
    "use strict";
    var usm = require_url_state_machine();
    exports2.implementation = class URLImpl {
      constructor(constructorArgs) {
        const url = constructorArgs[0];
        const base = constructorArgs[1];
        let parsedBase = null;
        if (base !== void 0) {
          parsedBase = usm.basicURLParse(base);
          if (parsedBase === "failure") {
            throw new TypeError("Invalid base URL");
          }
        }
        const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get href() {
        return usm.serializeURL(this._url);
      }
      set href(v) {
        const parsedURL = usm.basicURLParse(v);
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get origin() {
        return usm.serializeURLOrigin(this._url);
      }
      get protocol() {
        return this._url.scheme + ":";
      }
      set protocol(v) {
        usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
      }
      get username() {
        return this._url.username;
      }
      set username(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setTheUsername(this._url, v);
      }
      get password() {
        return this._url.password;
      }
      set password(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setThePassword(this._url, v);
      }
      get host() {
        const url = this._url;
        if (url.host === null) {
          return "";
        }
        if (url.port === null) {
          return usm.serializeHost(url.host);
        }
        return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
      }
      set host(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
      }
      get hostname() {
        if (this._url.host === null) {
          return "";
        }
        return usm.serializeHost(this._url.host);
      }
      set hostname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
      }
      get port() {
        if (this._url.port === null) {
          return "";
        }
        return usm.serializeInteger(this._url.port);
      }
      set port(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        if (v === "") {
          this._url.port = null;
        } else {
          usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
        }
      }
      get pathname() {
        if (this._url.cannotBeABaseURL) {
          return this._url.path[0];
        }
        if (this._url.path.length === 0) {
          return "";
        }
        return "/" + this._url.path.join("/");
      }
      set pathname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        this._url.path = [];
        usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
      }
      get search() {
        if (this._url.query === null || this._url.query === "") {
          return "";
        }
        return "?" + this._url.query;
      }
      set search(v) {
        const url = this._url;
        if (v === "") {
          url.query = null;
          return;
        }
        const input = v[0] === "?" ? v.substring(1) : v;
        url.query = "";
        usm.basicURLParse(input, { url, stateOverride: "query" });
      }
      get hash() {
        if (this._url.fragment === null || this._url.fragment === "") {
          return "";
        }
        return "#" + this._url.fragment;
      }
      set hash(v) {
        if (v === "") {
          this._url.fragment = null;
          return;
        }
        const input = v[0] === "#" ? v.substring(1) : v;
        this._url.fragment = "";
        usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
      }
      toJSON() {
        return this.href;
      }
    };
  }
});

// node_modules/whatwg-url/lib/URL.js
var require_URL = __commonJS({
  "node_modules/whatwg-url/lib/URL.js"(exports2, module2) {
    "use strict";
    var conversions = require_lib2();
    var utils = require_utils4();
    var Impl = require_URL_impl();
    var impl = utils.implSymbol;
    function URL3(url) {
      if (!this || this[impl] || !(this instanceof URL3)) {
        throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
      }
      if (arguments.length < 1) {
        throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 2; ++i) {
        args[i] = arguments[i];
      }
      args[0] = conversions["USVString"](args[0]);
      if (args[1] !== void 0) {
        args[1] = conversions["USVString"](args[1]);
      }
      module2.exports.setup(this, args);
    }
    URL3.prototype.toJSON = function toJSON() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 0; ++i) {
        args[i] = arguments[i];
      }
      return this[impl].toJSON.apply(this[impl], args);
    };
    Object.defineProperty(URL3.prototype, "href", {
      get() {
        return this[impl].href;
      },
      set(V2) {
        V2 = conversions["USVString"](V2);
        this[impl].href = V2;
      },
      enumerable: true,
      configurable: true
    });
    URL3.prototype.toString = function() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      return this.href;
    };
    Object.defineProperty(URL3.prototype, "origin", {
      get() {
        return this[impl].origin;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "protocol", {
      get() {
        return this[impl].protocol;
      },
      set(V2) {
        V2 = conversions["USVString"](V2);
        this[impl].protocol = V2;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "username", {
      get() {
        return this[impl].username;
      },
      set(V2) {
        V2 = conversions["USVString"](V2);
        this[impl].username = V2;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "password", {
      get() {
        return this[impl].password;
      },
      set(V2) {
        V2 = conversions["USVString"](V2);
        this[impl].password = V2;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "host", {
      get() {
        return this[impl].host;
      },
      set(V2) {
        V2 = conversions["USVString"](V2);
        this[impl].host = V2;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "hostname", {
      get() {
        return this[impl].hostname;
      },
      set(V2) {
        V2 = conversions["USVString"](V2);
        this[impl].hostname = V2;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "port", {
      get() {
        return this[impl].port;
      },
      set(V2) {
        V2 = conversions["USVString"](V2);
        this[impl].port = V2;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "pathname", {
      get() {
        return this[impl].pathname;
      },
      set(V2) {
        V2 = conversions["USVString"](V2);
        this[impl].pathname = V2;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "search", {
      get() {
        return this[impl].search;
      },
      set(V2) {
        V2 = conversions["USVString"](V2);
        this[impl].search = V2;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "hash", {
      get() {
        return this[impl].hash;
      },
      set(V2) {
        V2 = conversions["USVString"](V2);
        this[impl].hash = V2;
      },
      enumerable: true,
      configurable: true
    });
    module2.exports = {
      is(obj) {
        return !!obj && obj[impl] instanceof Impl.implementation;
      },
      create(constructorArgs, privateData) {
        let obj = Object.create(URL3.prototype);
        this.setup(obj, constructorArgs, privateData);
        return obj;
      },
      setup(obj, constructorArgs, privateData) {
        if (!privateData) privateData = {};
        privateData.wrapper = obj;
        obj[impl] = new Impl.implementation(constructorArgs, privateData);
        obj[impl][utils.wrapperSymbol] = obj;
      },
      interface: URL3,
      expose: {
        Window: { URL: URL3 },
        Worker: { URL: URL3 }
      }
    };
  }
});

// node_modules/whatwg-url/lib/public-api.js
var require_public_api = __commonJS({
  "node_modules/whatwg-url/lib/public-api.js"(exports2) {
    "use strict";
    exports2.URL = require_URL().interface;
    exports2.serializeURL = require_url_state_machine().serializeURL;
    exports2.serializeURLOrigin = require_url_state_machine().serializeURLOrigin;
    exports2.basicURLParse = require_url_state_machine().basicURLParse;
    exports2.setTheUsername = require_url_state_machine().setTheUsername;
    exports2.setThePassword = require_url_state_machine().setThePassword;
    exports2.serializeHost = require_url_state_machine().serializeHost;
    exports2.serializeInteger = require_url_state_machine().serializeInteger;
    exports2.parseURL = require_url_state_machine().parseURL;
  }
});

// node_modules/node-fetch/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/node-fetch/lib/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var Stream = _interopDefault(require("stream"));
    var http = _interopDefault(require("http"));
    var Url = _interopDefault(require("url"));
    var whatwgUrl = _interopDefault(require_public_api());
    var https = _interopDefault(require("https"));
    var zlib = _interopDefault(require("zlib"));
    var Readable = Stream.Readable;
    var BUFFER = Symbol("buffer");
    var TYPE = Symbol("type");
    var Blob = class _Blob {
      constructor() {
        this[TYPE] = "";
        const blobParts = arguments[0];
        const options = arguments[1];
        const buffers = [];
        let size = 0;
        if (blobParts) {
          const a = blobParts;
          const length = Number(a.length);
          for (let i = 0; i < length; i++) {
            const element = a[i];
            let buffer;
            if (element instanceof Buffer) {
              buffer = element;
            } else if (ArrayBuffer.isView(element)) {
              buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
            } else if (element instanceof ArrayBuffer) {
              buffer = Buffer.from(element);
            } else if (element instanceof _Blob) {
              buffer = element[BUFFER];
            } else {
              buffer = Buffer.from(typeof element === "string" ? element : String(element));
            }
            size += buffer.length;
            buffers.push(buffer);
          }
        }
        this[BUFFER] = Buffer.concat(buffers);
        let type = options && options.type !== void 0 && String(options.type).toLowerCase();
        if (type && !/[^\u0020-\u007E]/.test(type)) {
          this[TYPE] = type;
        }
      }
      get size() {
        return this[BUFFER].length;
      }
      get type() {
        return this[TYPE];
      }
      text() {
        return Promise.resolve(this[BUFFER].toString());
      }
      arrayBuffer() {
        const buf = this[BUFFER];
        const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        return Promise.resolve(ab);
      }
      stream() {
        const readable = new Readable();
        readable._read = function() {
        };
        readable.push(this[BUFFER]);
        readable.push(null);
        return readable;
      }
      toString() {
        return "[object Blob]";
      }
      slice() {
        const size = this.size;
        const start = arguments[0];
        const end = arguments[1];
        let relativeStart, relativeEnd;
        if (start === void 0) {
          relativeStart = 0;
        } else if (start < 0) {
          relativeStart = Math.max(size + start, 0);
        } else {
          relativeStart = Math.min(start, size);
        }
        if (end === void 0) {
          relativeEnd = size;
        } else if (end < 0) {
          relativeEnd = Math.max(size + end, 0);
        } else {
          relativeEnd = Math.min(end, size);
        }
        const span = Math.max(relativeEnd - relativeStart, 0);
        const buffer = this[BUFFER];
        const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
        const blob = new _Blob([], { type: arguments[2] });
        blob[BUFFER] = slicedBuffer;
        return blob;
      }
    };
    Object.defineProperties(Blob.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
      value: "Blob",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function FetchError(message, type, systemError) {
      Error.call(this, message);
      this.message = message;
      this.type = type;
      if (systemError) {
        this.code = this.errno = systemError.code;
      }
      Error.captureStackTrace(this, this.constructor);
    }
    FetchError.prototype = Object.create(Error.prototype);
    FetchError.prototype.constructor = FetchError;
    FetchError.prototype.name = "FetchError";
    var convert;
    try {
      convert = require("encoding").convert;
    } catch (e) {
    }
    var INTERNALS = Symbol("Body internals");
    var PassThrough = Stream.PassThrough;
    function Body(body) {
      var _this = this;
      var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
      let size = _ref$size === void 0 ? 0 : _ref$size;
      var _ref$timeout = _ref.timeout;
      let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
      if (body == null) {
        body = null;
      } else if (isURLSearchParams(body)) {
        body = Buffer.from(body.toString());
      } else if (isBlob(body)) ;
      else if (Buffer.isBuffer(body)) ;
      else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        body = Buffer.from(body);
      } else if (ArrayBuffer.isView(body)) {
        body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
      } else if (body instanceof Stream) ;
      else {
        body = Buffer.from(String(body));
      }
      this[INTERNALS] = {
        body,
        disturbed: false,
        error: null
      };
      this.size = size;
      this.timeout = timeout;
      if (body instanceof Stream) {
        body.on("error", function(err) {
          const error = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
          _this[INTERNALS].error = error;
        });
      }
    }
    Body.prototype = {
      get body() {
        return this[INTERNALS].body;
      },
      get bodyUsed() {
        return this[INTERNALS].disturbed;
      },
      /**
       * Decode response as ArrayBuffer
       *
       * @return  Promise
       */
      arrayBuffer() {
        return consumeBody.call(this).then(function(buf) {
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        });
      },
      /**
       * Return raw response as Blob
       *
       * @return Promise
       */
      blob() {
        let ct2 = this.headers && this.headers.get("content-type") || "";
        return consumeBody.call(this).then(function(buf) {
          return Object.assign(
            // Prevent copying
            new Blob([], {
              type: ct2.toLowerCase()
            }),
            {
              [BUFFER]: buf
            }
          );
        });
      },
      /**
       * Decode response as json
       *
       * @return  Promise
       */
      json() {
        var _this2 = this;
        return consumeBody.call(this).then(function(buffer) {
          try {
            return JSON.parse(buffer.toString());
          } catch (err) {
            return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
          }
        });
      },
      /**
       * Decode response as text
       *
       * @return  Promise
       */
      text() {
        return consumeBody.call(this).then(function(buffer) {
          return buffer.toString();
        });
      },
      /**
       * Decode response as buffer (non-spec api)
       *
       * @return  Promise
       */
      buffer() {
        return consumeBody.call(this);
      },
      /**
       * Decode response as text, while automatically detecting the encoding and
       * trying to decode to UTF-8 (non-spec api)
       *
       * @return  Promise
       */
      textConverted() {
        var _this3 = this;
        return consumeBody.call(this).then(function(buffer) {
          return convertBody(buffer, _this3.headers);
        });
      }
    };
    Object.defineProperties(Body.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true }
    });
    Body.mixIn = function(proto) {
      for (const name of Object.getOwnPropertyNames(Body.prototype)) {
        if (!(name in proto)) {
          const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
          Object.defineProperty(proto, name, desc);
        }
      }
    };
    function consumeBody() {
      var _this4 = this;
      if (this[INTERNALS].disturbed) {
        return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
      }
      this[INTERNALS].disturbed = true;
      if (this[INTERNALS].error) {
        return Body.Promise.reject(this[INTERNALS].error);
      }
      let body = this.body;
      if (body === null) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      if (isBlob(body)) {
        body = body.stream();
      }
      if (Buffer.isBuffer(body)) {
        return Body.Promise.resolve(body);
      }
      if (!(body instanceof Stream)) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      let accum = [];
      let accumBytes = 0;
      let abort = false;
      return new Body.Promise(function(resolve, reject) {
        let resTimeout;
        if (_this4.timeout) {
          resTimeout = setTimeout(function() {
            abort = true;
            reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
          }, _this4.timeout);
        }
        body.on("error", function(err) {
          if (err.name === "AbortError") {
            abort = true;
            reject(err);
          } else {
            reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
          }
        });
        body.on("data", function(chunk) {
          if (abort || chunk === null) {
            return;
          }
          if (_this4.size && accumBytes + chunk.length > _this4.size) {
            abort = true;
            reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
            return;
          }
          accumBytes += chunk.length;
          accum.push(chunk);
        });
        body.on("end", function() {
          if (abort) {
            return;
          }
          clearTimeout(resTimeout);
          try {
            resolve(Buffer.concat(accum, accumBytes));
          } catch (err) {
            reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
          }
        });
      });
    }
    function convertBody(buffer, headers) {
      if (typeof convert !== "function") {
        throw new Error("The package `encoding` must be installed to use the textConverted() function");
      }
      const ct2 = headers.get("content-type");
      let charset = "utf-8";
      let res, str;
      if (ct2) {
        res = /charset=([^;]*)/i.exec(ct2);
      }
      str = buffer.slice(0, 1024).toString();
      if (!res && str) {
        res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
      }
      if (!res && str) {
        res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
        if (!res) {
          res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
          if (res) {
            res.pop();
          }
        }
        if (res) {
          res = /charset=(.*)/i.exec(res.pop());
        }
      }
      if (!res && str) {
        res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
      }
      if (res) {
        charset = res.pop();
        if (charset === "gb2312" || charset === "gbk") {
          charset = "gb18030";
        }
      }
      return convert(buffer, "UTF-8", charset).toString();
    }
    function isURLSearchParams(obj) {
      if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
        return false;
      }
      return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
    }
    function isBlob(obj) {
      return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
    }
    function clone(instance) {
      let p1, p2;
      let body = instance.body;
      if (instance.bodyUsed) {
        throw new Error("cannot clone body after it is used");
      }
      if (body instanceof Stream && typeof body.getBoundary !== "function") {
        p1 = new PassThrough();
        p2 = new PassThrough();
        body.pipe(p1);
        body.pipe(p2);
        instance[INTERNALS].body = p1;
        body = p2;
      }
      return body;
    }
    function extractContentType(body) {
      if (body === null) {
        return null;
      } else if (typeof body === "string") {
        return "text/plain;charset=UTF-8";
      } else if (isURLSearchParams(body)) {
        return "application/x-www-form-urlencoded;charset=UTF-8";
      } else if (isBlob(body)) {
        return body.type || null;
      } else if (Buffer.isBuffer(body)) {
        return null;
      } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        return null;
      } else if (ArrayBuffer.isView(body)) {
        return null;
      } else if (typeof body.getBoundary === "function") {
        return `multipart/form-data;boundary=${body.getBoundary()}`;
      } else if (body instanceof Stream) {
        return null;
      } else {
        return "text/plain;charset=UTF-8";
      }
    }
    function getTotalBytes(instance) {
      const body = instance.body;
      if (body === null) {
        return 0;
      } else if (isBlob(body)) {
        return body.size;
      } else if (Buffer.isBuffer(body)) {
        return body.length;
      } else if (body && typeof body.getLengthSync === "function") {
        if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
        body.hasKnownLength && body.hasKnownLength()) {
          return body.getLengthSync();
        }
        return null;
      } else {
        return null;
      }
    }
    function writeToStream(dest, instance) {
      const body = instance.body;
      if (body === null) {
        dest.end();
      } else if (isBlob(body)) {
        body.stream().pipe(dest);
      } else if (Buffer.isBuffer(body)) {
        dest.write(body);
        dest.end();
      } else {
        body.pipe(dest);
      }
    }
    Body.Promise = global.Promise;
    var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
    var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    function validateName(name) {
      name = `${name}`;
      if (invalidTokenRegex.test(name) || name === "") {
        throw new TypeError(`${name} is not a legal HTTP header name`);
      }
    }
    function validateValue(value) {
      value = `${value}`;
      if (invalidHeaderCharRegex.test(value)) {
        throw new TypeError(`${value} is not a legal HTTP header value`);
      }
    }
    function find(map, name) {
      name = name.toLowerCase();
      for (const key in map) {
        if (key.toLowerCase() === name) {
          return key;
        }
      }
      return void 0;
    }
    var MAP = Symbol("map");
    var Headers = class _Headers {
      /**
       * Headers class
       *
       * @param   Object  headers  Response headers
       * @return  Void
       */
      constructor() {
        let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
        this[MAP] = /* @__PURE__ */ Object.create(null);
        if (init instanceof _Headers) {
          const rawHeaders = init.raw();
          const headerNames = Object.keys(rawHeaders);
          for (const headerName of headerNames) {
            for (const value of rawHeaders[headerName]) {
              this.append(headerName, value);
            }
          }
          return;
        }
        if (init == null) ;
        else if (typeof init === "object") {
          const method = init[Symbol.iterator];
          if (method != null) {
            if (typeof method !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            const pairs = [];
            for (const pair of init) {
              if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                throw new TypeError("Each header pair must be iterable");
              }
              pairs.push(Array.from(pair));
            }
            for (const pair of pairs) {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              this.append(pair[0], pair[1]);
            }
          } else {
            for (const key of Object.keys(init)) {
              const value = init[key];
              this.append(key, value);
            }
          }
        } else {
          throw new TypeError("Provided initializer must be an object");
        }
      }
      /**
       * Return combined header value given name
       *
       * @param   String  name  Header name
       * @return  Mixed
       */
      get(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key === void 0) {
          return null;
        }
        return this[MAP][key].join(", ");
      }
      /**
       * Iterate over all headers
       *
       * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
       * @param   Boolean   thisArg   `this` context for callback function
       * @return  Void
       */
      forEach(callback) {
        let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
        let pairs = getHeaders(this);
        let i = 0;
        while (i < pairs.length) {
          var _pairs$i = pairs[i];
          const name = _pairs$i[0], value = _pairs$i[1];
          callback.call(thisArg, value, name, this);
          pairs = getHeaders(this);
          i++;
        }
      }
      /**
       * Overwrite header values given name
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */
      set(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        this[MAP][key !== void 0 ? key : name] = [value];
      }
      /**
       * Append a value onto existing header
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */
      append(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          this[MAP][key].push(value);
        } else {
          this[MAP][name] = [value];
        }
      }
      /**
       * Check for header name existence
       *
       * @param   String   name  Header name
       * @return  Boolean
       */
      has(name) {
        name = `${name}`;
        validateName(name);
        return find(this[MAP], name) !== void 0;
      }
      /**
       * Delete all header values given name
       *
       * @param   String  name  Header name
       * @return  Void
       */
      delete(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          delete this[MAP][key];
        }
      }
      /**
       * Return raw headers (non-spec api)
       *
       * @return  Object
       */
      raw() {
        return this[MAP];
      }
      /**
       * Get an iterator on keys.
       *
       * @return  Iterator
       */
      keys() {
        return createHeadersIterator(this, "key");
      }
      /**
       * Get an iterator on values.
       *
       * @return  Iterator
       */
      values() {
        return createHeadersIterator(this, "value");
      }
      /**
       * Get an iterator on entries.
       *
       * This is the default iterator of the Headers object.
       *
       * @return  Iterator
       */
      [Symbol.iterator]() {
        return createHeadersIterator(this, "key+value");
      }
    };
    Headers.prototype.entries = Headers.prototype[Symbol.iterator];
    Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
      value: "Headers",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Headers.prototype, {
      get: { enumerable: true },
      forEach: { enumerable: true },
      set: { enumerable: true },
      append: { enumerable: true },
      has: { enumerable: true },
      delete: { enumerable: true },
      keys: { enumerable: true },
      values: { enumerable: true },
      entries: { enumerable: true }
    });
    function getHeaders(headers) {
      let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
      const keys = Object.keys(headers[MAP]).sort();
      return keys.map(kind === "key" ? function(k2) {
        return k2.toLowerCase();
      } : kind === "value" ? function(k2) {
        return headers[MAP][k2].join(", ");
      } : function(k2) {
        return [k2.toLowerCase(), headers[MAP][k2].join(", ")];
      });
    }
    var INTERNAL = Symbol("internal");
    function createHeadersIterator(target, kind) {
      const iterator = Object.create(HeadersIteratorPrototype);
      iterator[INTERNAL] = {
        target,
        kind,
        index: 0
      };
      return iterator;
    }
    var HeadersIteratorPrototype = Object.setPrototypeOf({
      next() {
        if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
          throw new TypeError("Value of `this` is not a HeadersIterator");
        }
        var _INTERNAL = this[INTERNAL];
        const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
        const values = getHeaders(target, kind);
        const len = values.length;
        if (index >= len) {
          return {
            value: void 0,
            done: true
          };
        }
        this[INTERNAL].index = index + 1;
        return {
          value: values[index],
          done: false
        };
      }
    }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
    Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
      value: "HeadersIterator",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function exportNodeCompatibleHeaders(headers) {
      const obj = Object.assign({ __proto__: null }, headers[MAP]);
      const hostHeaderKey = find(headers[MAP], "Host");
      if (hostHeaderKey !== void 0) {
        obj[hostHeaderKey] = obj[hostHeaderKey][0];
      }
      return obj;
    }
    function createHeadersLenient(obj) {
      const headers = new Headers();
      for (const name of Object.keys(obj)) {
        if (invalidTokenRegex.test(name)) {
          continue;
        }
        if (Array.isArray(obj[name])) {
          for (const val of obj[name]) {
            if (invalidHeaderCharRegex.test(val)) {
              continue;
            }
            if (headers[MAP][name] === void 0) {
              headers[MAP][name] = [val];
            } else {
              headers[MAP][name].push(val);
            }
          }
        } else if (!invalidHeaderCharRegex.test(obj[name])) {
          headers[MAP][name] = [obj[name]];
        }
      }
      return headers;
    }
    var INTERNALS$1 = Symbol("Response internals");
    var STATUS_CODES = http.STATUS_CODES;
    var Response2 = class _Response {
      constructor() {
        let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Body.call(this, body, opts);
        const status = opts.status || 200;
        const headers = new Headers(opts.headers);
        if (body != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(body);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS$1] = {
          url: opts.url,
          status,
          statusText: opts.statusText || STATUS_CODES[status],
          headers,
          counter: opts.counter
        };
      }
      get url() {
        return this[INTERNALS$1].url || "";
      }
      get status() {
        return this[INTERNALS$1].status;
      }
      /**
       * Convenience property representing if the request ended normally
       */
      get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
      get redirected() {
        return this[INTERNALS$1].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$1].statusText;
      }
      get headers() {
        return this[INTERNALS$1].headers;
      }
      /**
       * Clone this response
       *
       * @return  Response
       */
      clone() {
        return new _Response(clone(this), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected
        });
      }
    };
    Body.mixIn(Response2.prototype);
    Object.defineProperties(Response2.prototype, {
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    });
    Object.defineProperty(Response2.prototype, Symbol.toStringTag, {
      value: "Response",
      writable: false,
      enumerable: false,
      configurable: true
    });
    var INTERNALS$2 = Symbol("Request internals");
    var URL3 = Url.URL || whatwgUrl.URL;
    var parse_url = Url.parse;
    var format_url = Url.format;
    function parseURL(urlStr) {
      if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
        urlStr = new URL3(urlStr).toString();
      }
      return parse_url(urlStr);
    }
    var streamDestructionSupported = "destroy" in Stream.Readable.prototype;
    function isRequest(input) {
      return typeof input === "object" && typeof input[INTERNALS$2] === "object";
    }
    function isAbortSignal(signal) {
      const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
      return !!(proto && proto.constructor.name === "AbortSignal");
    }
    var Request = class _Request {
      constructor(input) {
        let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        let parsedURL;
        if (!isRequest(input)) {
          if (input && input.href) {
            parsedURL = parseURL(input.href);
          } else {
            parsedURL = parseURL(`${input}`);
          }
          input = {};
        } else {
          parsedURL = parseURL(input.url);
        }
        let method = init.method || input.method || "GET";
        method = method.toUpperCase();
        if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
        Body.call(this, inputBody, {
          timeout: init.timeout || input.timeout || 0,
          size: init.size || input.size || 0
        });
        const headers = new Headers(init.headers || input.headers || {});
        if (inputBody != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(inputBody);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ("signal" in init) signal = init.signal;
        if (signal != null && !isAbortSignal(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal");
        }
        this[INTERNALS$2] = {
          method,
          redirect: init.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal
        };
        this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
        this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
        this.counter = init.counter || input.counter || 0;
        this.agent = init.agent || input.agent;
      }
      get method() {
        return this[INTERNALS$2].method;
      }
      get url() {
        return format_url(this[INTERNALS$2].parsedURL);
      }
      get headers() {
        return this[INTERNALS$2].headers;
      }
      get redirect() {
        return this[INTERNALS$2].redirect;
      }
      get signal() {
        return this[INTERNALS$2].signal;
      }
      /**
       * Clone this request
       *
       * @return  Request
       */
      clone() {
        return new _Request(this);
      }
    };
    Body.mixIn(Request.prototype);
    Object.defineProperty(Request.prototype, Symbol.toStringTag, {
      value: "Request",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Request.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true }
    });
    function getNodeRequestOptions(request) {
      const parsedURL = request[INTERNALS$2].parsedURL;
      const headers = new Headers(request[INTERNALS$2].headers);
      if (!headers.has("Accept")) {
        headers.set("Accept", "*/*");
      }
      if (!parsedURL.protocol || !parsedURL.hostname) {
        throw new TypeError("Only absolute URLs are supported");
      }
      if (!/^https?:$/.test(parsedURL.protocol)) {
        throw new TypeError("Only HTTP(S) protocols are supported");
      }
      if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
        throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
      }
      let contentLengthValue = null;
      if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
        contentLengthValue = "0";
      }
      if (request.body != null) {
        const totalBytes = getTotalBytes(request);
        if (typeof totalBytes === "number") {
          contentLengthValue = String(totalBytes);
        }
      }
      if (contentLengthValue) {
        headers.set("Content-Length", contentLengthValue);
      }
      if (!headers.has("User-Agent")) {
        headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
      }
      if (request.compress && !headers.has("Accept-Encoding")) {
        headers.set("Accept-Encoding", "gzip,deflate");
      }
      let agent = request.agent;
      if (typeof agent === "function") {
        agent = agent(parsedURL);
      }
      return Object.assign({}, parsedURL, {
        method: request.method,
        headers: exportNodeCompatibleHeaders(headers),
        agent
      });
    }
    function AbortError(message) {
      Error.call(this, message);
      this.type = "aborted";
      this.message = message;
      Error.captureStackTrace(this, this.constructor);
    }
    AbortError.prototype = Object.create(Error.prototype);
    AbortError.prototype.constructor = AbortError;
    AbortError.prototype.name = "AbortError";
    var URL$1 = Url.URL || whatwgUrl.URL;
    var PassThrough$1 = Stream.PassThrough;
    var isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
      const orig = new URL$1(original).hostname;
      const dest = new URL$1(destination).hostname;
      return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
    };
    var isSameProtocol = function isSameProtocol2(destination, original) {
      const orig = new URL$1(original).protocol;
      const dest = new URL$1(destination).protocol;
      return orig === dest;
    };
    function fetch4(url, opts) {
      if (!fetch4.Promise) {
        throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
      }
      Body.Promise = fetch4.Promise;
      return new fetch4.Promise(function(resolve, reject) {
        const request = new Request(url, opts);
        const options = getNodeRequestOptions(request);
        const send = (options.protocol === "https:" ? https : http).request;
        const signal = request.signal;
        let response = null;
        const abort = function abort2() {
          let error = new AbortError("The user aborted a request.");
          reject(error);
          if (request.body && request.body instanceof Stream.Readable) {
            destroyStream(request.body, error);
          }
          if (!response || !response.body) return;
          response.body.emit("error", error);
        };
        if (signal && signal.aborted) {
          abort();
          return;
        }
        const abortAndFinalize = function abortAndFinalize2() {
          abort();
          finalize();
        };
        const req = send(options);
        let reqTimeout;
        if (signal) {
          signal.addEventListener("abort", abortAndFinalize);
        }
        function finalize() {
          req.abort();
          if (signal) signal.removeEventListener("abort", abortAndFinalize);
          clearTimeout(reqTimeout);
        }
        if (request.timeout) {
          req.once("socket", function(socket) {
            reqTimeout = setTimeout(function() {
              reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
              finalize();
            }, request.timeout);
          });
        }
        req.on("error", function(err) {
          reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
          if (response && response.body) {
            destroyStream(response.body, err);
          }
          finalize();
        });
        fixResponseChunkedTransferBadEnding(req, function(err) {
          if (signal && signal.aborted) {
            return;
          }
          if (response && response.body) {
            destroyStream(response.body, err);
          }
        });
        if (parseInt(process.version.substring(1)) < 14) {
          req.on("socket", function(s) {
            s.addListener("close", function(hadError) {
              const hasDataListener = s.listenerCount("data") > 0;
              if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
                const err = new Error("Premature close");
                err.code = "ERR_STREAM_PREMATURE_CLOSE";
                response.body.emit("error", err);
              }
            });
          });
        }
        req.on("response", function(res) {
          clearTimeout(reqTimeout);
          const headers = createHeadersLenient(res.headers);
          if (fetch4.isRedirect(res.statusCode)) {
            const location = headers.get("Location");
            let locationURL = null;
            try {
              locationURL = location === null ? null : new URL$1(location, request.url).toString();
            } catch (err) {
              if (request.redirect !== "manual") {
                reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
                finalize();
                return;
              }
            }
            switch (request.redirect) {
              case "error":
                reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
                finalize();
                return;
              case "manual":
                if (locationURL !== null) {
                  try {
                    headers.set("Location", locationURL);
                  } catch (err) {
                    reject(err);
                  }
                }
                break;
              case "follow":
                if (locationURL === null) {
                  break;
                }
                if (request.counter >= request.follow) {
                  reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                  finalize();
                  return;
                }
                const requestOpts = {
                  headers: new Headers(request.headers),
                  follow: request.follow,
                  counter: request.counter + 1,
                  agent: request.agent,
                  compress: request.compress,
                  method: request.method,
                  body: request.body,
                  signal: request.signal,
                  timeout: request.timeout,
                  size: request.size
                };
                if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
                  for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                    requestOpts.headers.delete(name);
                  }
                }
                if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                  reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                  finalize();
                  return;
                }
                if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
                  requestOpts.method = "GET";
                  requestOpts.body = void 0;
                  requestOpts.headers.delete("content-length");
                }
                resolve(fetch4(new Request(locationURL, requestOpts)));
                finalize();
                return;
            }
          }
          res.once("end", function() {
            if (signal) signal.removeEventListener("abort", abortAndFinalize);
          });
          let body = res.pipe(new PassThrough$1());
          const response_options = {
            url: request.url,
            status: res.statusCode,
            statusText: res.statusMessage,
            headers,
            size: request.size,
            timeout: request.timeout,
            counter: request.counter
          };
          const codings = headers.get("Content-Encoding");
          if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
            response = new Response2(body, response_options);
            resolve(response);
            return;
          }
          const zlibOptions = {
            flush: zlib.Z_SYNC_FLUSH,
            finishFlush: zlib.Z_SYNC_FLUSH
          };
          if (codings == "gzip" || codings == "x-gzip") {
            body = body.pipe(zlib.createGunzip(zlibOptions));
            response = new Response2(body, response_options);
            resolve(response);
            return;
          }
          if (codings == "deflate" || codings == "x-deflate") {
            const raw2 = res.pipe(new PassThrough$1());
            raw2.once("data", function(chunk) {
              if ((chunk[0] & 15) === 8) {
                body = body.pipe(zlib.createInflate());
              } else {
                body = body.pipe(zlib.createInflateRaw());
              }
              response = new Response2(body, response_options);
              resolve(response);
            });
            raw2.on("end", function() {
              if (!response) {
                response = new Response2(body, response_options);
                resolve(response);
              }
            });
            return;
          }
          if (codings == "br" && typeof zlib.createBrotliDecompress === "function") {
            body = body.pipe(zlib.createBrotliDecompress());
            response = new Response2(body, response_options);
            resolve(response);
            return;
          }
          response = new Response2(body, response_options);
          resolve(response);
        });
        writeToStream(req, request);
      });
    }
    function fixResponseChunkedTransferBadEnding(request, errorCallback) {
      let socket;
      request.on("socket", function(s) {
        socket = s;
      });
      request.on("response", function(response) {
        const headers = response.headers;
        if (headers["transfer-encoding"] === "chunked" && !headers["content-length"]) {
          response.once("close", function(hadError) {
            const hasDataListener = socket && socket.listenerCount("data") > 0;
            if (hasDataListener && !hadError) {
              const err = new Error("Premature close");
              err.code = "ERR_STREAM_PREMATURE_CLOSE";
              errorCallback(err);
            }
          });
        }
      });
    }
    function destroyStream(stream, err) {
      if (stream.destroy) {
        stream.destroy(err);
      } else {
        stream.emit("error", err);
        stream.end();
      }
    }
    fetch4.isRedirect = function(code) {
      return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
    };
    fetch4.Promise = global.Promise;
    module2.exports = exports2 = fetch4;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.default = exports2;
    exports2.Headers = Headers;
    exports2.Request = Request;
    exports2.Response = Response2;
    exports2.FetchError = FetchError;
    exports2.AbortError = AbortError;
  }
});

// node_modules/@apollo/server/dist/esm/plugin/traceTreeBuilder.js
function internalError(message) {
  return new Error(`[internal apollo-server error] ${message}`);
}
function durationHrTimeToNanos(hrtime) {
  return hrtime[0] * 1e9 + hrtime[1];
}
function responsePathAsString(p) {
  if (p === void 0) {
    return "";
  }
  let res = String(p.key);
  while ((p = p.prev) !== void 0) {
    res = `${p.key}.${res}`;
  }
  return res;
}
function responsePathFromArray(path2, node) {
  let responsePath;
  let nodePtr = node;
  for (const key of path2) {
    nodePtr = nodePtr?.child?.find((child) => child.responseName === key);
    responsePath = {
      key,
      prev: responsePath,
      typename: nodePtr?.type ?? void 0
    };
  }
  return responsePath;
}
function errorToProtobufError(error) {
  return new Trace.Error({
    message: error.message,
    location: (error.locations || []).map(({ line, column }) => new Trace.Location({ line, column })),
    json: JSON.stringify(error)
  });
}
function dateToProtoTimestamp(date) {
  const totalMillis = +date;
  const millis = totalMillis % 1e3;
  return new google.protobuf.Timestamp({
    seconds: (totalMillis - millis) / 1e3,
    nanos: millis * 1e6
  });
}
var import_graphql36, TraceTreeBuilder;
var init_traceTreeBuilder = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/traceTreeBuilder.js"() {
    import_graphql36 = __toESM(require_graphql2(), 1);
    init_protobuf();
    init_UnreachableCaseError();
    TraceTreeBuilder = class {
      constructor(options) {
        this.rootNode = new Trace.Node();
        this.trace = new Trace({
          root: this.rootNode,
          fieldExecutionWeight: 1
        });
        this.stopped = false;
        this.nodes = /* @__PURE__ */ new Map([
          [responsePathAsString(), this.rootNode]
        ]);
        const { sendErrors, maskedBy } = options;
        if (!sendErrors || "masked" in sendErrors) {
          this.transformError = () => new import_graphql36.GraphQLError("<masked>", {
            extensions: { maskedBy }
          });
        } else if ("transform" in sendErrors) {
          this.transformError = sendErrors.transform;
        } else if ("unmodified" in sendErrors) {
          this.transformError = null;
        } else {
          throw new UnreachableCaseError(sendErrors);
        }
      }
      startTiming() {
        if (this.startHrTime) {
          throw internalError("startTiming called twice!");
        }
        if (this.stopped) {
          throw internalError("startTiming called after stopTiming!");
        }
        this.trace.startTime = dateToProtoTimestamp(/* @__PURE__ */ new Date());
        this.startHrTime = process.hrtime();
      }
      stopTiming() {
        if (!this.startHrTime) {
          throw internalError("stopTiming called before startTiming!");
        }
        if (this.stopped) {
          throw internalError("stopTiming called twice!");
        }
        this.trace.durationNs = durationHrTimeToNanos(process.hrtime(this.startHrTime));
        this.trace.endTime = dateToProtoTimestamp(/* @__PURE__ */ new Date());
        this.stopped = true;
      }
      willResolveField(info) {
        if (!this.startHrTime) {
          throw internalError("willResolveField called before startTiming!");
        }
        if (this.stopped) {
          return () => {
          };
        }
        const path2 = info.path;
        const node = this.newNode(path2);
        node.type = info.returnType.toString();
        node.parentType = info.parentType.toString();
        node.startTime = durationHrTimeToNanos(process.hrtime(this.startHrTime));
        if (typeof path2.key === "string" && path2.key !== info.fieldName) {
          node.originalFieldName = info.fieldName;
        }
        return () => {
          node.endTime = durationHrTimeToNanos(process.hrtime(this.startHrTime));
        };
      }
      didEncounterErrors(errors) {
        errors.forEach((err) => {
          if (err.extensions?.serviceName) {
            return;
          }
          const errorForReporting = this.transformAndNormalizeError(err);
          if (errorForReporting === null) {
            return;
          }
          this.addProtobufError(errorForReporting.path, errorToProtobufError(errorForReporting));
        });
      }
      addProtobufError(path2, error) {
        if (!this.startHrTime) {
          throw internalError("addProtobufError called before startTiming!");
        }
        if (this.stopped) {
          throw internalError("addProtobufError called after stopTiming!");
        }
        let node = this.rootNode;
        if (Array.isArray(path2)) {
          const specificNode = this.nodes.get(path2.join("."));
          if (specificNode) {
            node = specificNode;
          } else {
            const responsePath = responsePathFromArray(path2, this.rootNode);
            if (!responsePath) {
              throw internalError("addProtobufError called with invalid path!");
            }
            node = this.newNode(responsePath);
          }
        }
        node.error.push(error);
      }
      newNode(path2) {
        const node = new Trace.Node();
        const id2 = path2.key;
        if (typeof id2 === "number") {
          node.index = id2;
        } else {
          node.responseName = id2;
        }
        this.nodes.set(responsePathAsString(path2), node);
        const parentNode = this.ensureParentNode(path2);
        parentNode.child.push(node);
        return node;
      }
      ensureParentNode(path2) {
        const parentPath = responsePathAsString(path2.prev);
        const parentNode = this.nodes.get(parentPath);
        if (parentNode) {
          return parentNode;
        }
        return this.newNode(path2.prev);
      }
      transformAndNormalizeError(err) {
        if (this.transformError) {
          const clonedError = Object.assign(Object.create(Object.getPrototypeOf(err)), err);
          const rewrittenError = this.transformError(clonedError);
          if (rewrittenError === null) {
            return null;
          }
          if (!(rewrittenError instanceof import_graphql36.GraphQLError)) {
            return err;
          }
          return new import_graphql36.GraphQLError(rewrittenError.message, {
            nodes: err.nodes,
            source: err.source,
            positions: err.positions,
            path: err.path,
            originalError: err.originalError,
            extensions: rewrittenError.extensions || err.extensions
          });
        }
        return err;
      }
    };
  }
});

// node_modules/@apollo/server/dist/esm/plugin/usageReporting/iterateOverTrace.js
function iterateOverTrace(trace, f, includePath) {
  const rootPath = includePath ? new RootCollectingPathsResponseNamePath() : notCollectingPathsResponseNamePath;
  if (trace.root) {
    if (iterateOverTraceNode(trace.root, rootPath, f))
      return;
  }
  if (trace.queryPlan) {
    if (iterateOverQueryPlan(trace.queryPlan, rootPath, f))
      return;
  }
}
function iterateOverQueryPlan(node, rootPath, f) {
  if (!node)
    return false;
  if (node.fetch?.trace?.root && node.fetch.serviceName) {
    return iterateOverTraceNode(node.fetch.trace.root, rootPath.child(`service:${node.fetch.serviceName}`), f);
  }
  if (node.flatten?.node) {
    return iterateOverQueryPlan(node.flatten.node, rootPath, f);
  }
  if (node.parallel?.nodes) {
    return node.parallel.nodes.some((node2) => iterateOverQueryPlan(node2, rootPath, f));
  }
  if (node.sequence?.nodes) {
    return node.sequence.nodes.some((node2) => iterateOverQueryPlan(node2, rootPath, f));
  }
  return false;
}
function iterateOverTraceNode(node, path2, f) {
  if (f(node, path2)) {
    return true;
  }
  return node.child?.some((child) => {
    const childPath = child.responseName ? path2.child(child.responseName) : path2;
    return iterateOverTraceNode(child, childPath, f);
  }) ?? false;
}
var notCollectingPathsResponseNamePath, RootCollectingPathsResponseNamePath, ChildCollectingPathsResponseNamePath;
var init_iterateOverTrace = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/usageReporting/iterateOverTrace.js"() {
    notCollectingPathsResponseNamePath = {
      toArray() {
        throw Error("not collecting paths!");
      },
      child() {
        return this;
      }
    };
    RootCollectingPathsResponseNamePath = class {
      toArray() {
        return [];
      }
      child(responseName) {
        return new ChildCollectingPathsResponseNamePath(responseName, this);
      }
    };
    ChildCollectingPathsResponseNamePath = class _ChildCollectingPathsResponseNamePath {
      constructor(responseName, prev) {
        this.responseName = responseName;
        this.prev = prev;
      }
      toArray() {
        const out = [];
        let curr = this;
        while (curr instanceof _ChildCollectingPathsResponseNamePath) {
          out.push(curr.responseName);
          curr = curr.prev;
        }
        return out.reverse();
      }
      child(responseName) {
        return new _ChildCollectingPathsResponseNamePath(responseName, this);
      }
    };
  }
});

// node_modules/@apollo/server/dist/esm/plugin/usageReporting/durationHistogram.js
var DurationHistogram;
var init_durationHistogram = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/usageReporting/durationHistogram.js"() {
    DurationHistogram = class _DurationHistogram {
      toArray() {
        let bufferedZeroes = 0;
        const outputArray = [];
        for (const value of this.buckets) {
          if (value === 0) {
            bufferedZeroes++;
          } else {
            if (bufferedZeroes === 1) {
              outputArray.push(0);
            } else if (bufferedZeroes !== 0) {
              outputArray.push(-bufferedZeroes);
            }
            outputArray.push(Math.floor(value));
            bufferedZeroes = 0;
          }
        }
        return outputArray;
      }
      static durationToBucket(durationNs) {
        const log = Math.log(durationNs / 1e3);
        const unboundedBucket = Math.ceil(log / _DurationHistogram.EXPONENT_LOG);
        return unboundedBucket <= 0 || Number.isNaN(unboundedBucket) ? 0 : unboundedBucket >= _DurationHistogram.BUCKET_COUNT ? _DurationHistogram.BUCKET_COUNT - 1 : unboundedBucket;
      }
      incrementDuration(durationNs, value = 1) {
        this.incrementBucket(_DurationHistogram.durationToBucket(durationNs), value);
        return this;
      }
      incrementBucket(bucket, value = 1) {
        if (bucket >= _DurationHistogram.BUCKET_COUNT) {
          throw Error("Bucket is out of bounds of the buckets array");
        }
        if (bucket >= this.buckets.length) {
          const oldLength = this.buckets.length;
          this.buckets.length = bucket + 1;
          this.buckets.fill(0, oldLength);
        }
        this.buckets[bucket] += value;
      }
      combine(otherHistogram) {
        for (let i = 0; i < otherHistogram.buckets.length; i++) {
          this.incrementBucket(i, otherHistogram.buckets[i]);
        }
      }
      constructor(options) {
        const initSize = options?.initSize || 74;
        const buckets = options?.buckets;
        const arrayInitSize = Math.max(buckets?.length || 0, initSize);
        this.buckets = Array(arrayInitSize).fill(0);
        if (buckets) {
          buckets.forEach((val, index) => this.buckets[index] = val);
        }
      }
    };
    DurationHistogram.BUCKET_COUNT = 384;
    DurationHistogram.EXPONENT_LOG = Math.log(1.1);
  }
});

// node_modules/@apollo/server/dist/esm/plugin/usageReporting/defaultSendOperationsAsTrace.js
function defaultSendOperationsAsTrace() {
  const cache = new lru_cache_default({
    maxSize: Math.pow(2, 20),
    sizeCalculation: (_val, key) => {
      return key && Buffer.byteLength(key) || 0;
    }
  });
  return (trace, statsReportKey) => {
    const endTimeSeconds = trace.endTime?.seconds;
    if (endTimeSeconds == null) {
      throw Error("programming error: endTime not set on trace");
    }
    const hasErrors = traceHasErrors(trace);
    const cacheKey = JSON.stringify([
      statsReportKey,
      DurationHistogram.durationToBucket(trace.durationNs),
      Math.floor(endTimeSeconds / 60),
      hasErrors ? Math.floor(endTimeSeconds / 5) : ""
    ]);
    if (cache.get(cacheKey)) {
      return false;
    }
    cache.set(cacheKey, true);
    return true;
  };
}
function traceHasErrors(trace) {
  let hasErrors = false;
  function traceNodeStats(node) {
    if ((node.error?.length ?? 0) > 0) {
      hasErrors = true;
    }
    return hasErrors;
  }
  iterateOverTrace(trace, traceNodeStats, false);
  return hasErrors;
}
var init_defaultSendOperationsAsTrace = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/usageReporting/defaultSendOperationsAsTrace.js"() {
    init_lru_cache();
    init_iterateOverTrace();
    init_durationHistogram();
  }
});

// node_modules/@apollo/server/dist/esm/plugin/usageReporting/operationDerivedDataCache.js
function createOperationDerivedDataCache({ logger }) {
  let lastWarn;
  let lastDisposals = 0;
  return new lru_cache_default({
    sizeCalculation(obj) {
      return Buffer.byteLength(JSON.stringify(obj), "utf8");
    },
    maxSize: Math.pow(2, 20) * 10,
    dispose() {
      lastDisposals++;
      if (!lastWarn || (/* @__PURE__ */ new Date()).getTime() - lastWarn.getTime() > 6e4) {
        lastWarn = /* @__PURE__ */ new Date();
        logger.warn([
          "This server is processing a high number of unique operations.  ",
          `A total of ${lastDisposals} records have been `,
          "ejected from the ApolloServerPluginUsageReporting signature cache in the past ",
          "interval.  If you see this warning frequently, please open an ",
          "issue on the Apollo Server repository."
        ].join(""));
        lastDisposals = 0;
      }
    }
  });
}
function operationDerivedDataCacheKey(queryHash, operationName) {
  return `${queryHash}${operationName && ":" + operationName}`;
}
var init_operationDerivedDataCache = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/usageReporting/operationDerivedDataCache.js"() {
    init_lru_cache();
  }
});

// node_modules/@apollo/server/dist/esm/plugin/usageReporting/stats.js
function estimatedBytesForString(s) {
  return 2 + Buffer.byteLength(s);
}
var SizeEstimator, OurReport, OurTracesAndStats, StatsByContext, OurContextualizedStats, OurQueryLatencyStats, OurPathErrorStats, OurTypeStat, OurFieldStat;
var init_stats = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/usageReporting/stats.js"() {
    init_protobuf();
    init_durationHistogram();
    init_iterateOverTrace();
    SizeEstimator = class {
      constructor() {
        this.bytes = 0;
      }
    };
    OurReport = class {
      constructor(header) {
        this.header = header;
        this.tracesPreAggregated = false;
        this.tracesPerQuery = /* @__PURE__ */ Object.create(null);
        this.endTime = null;
        this.operationCount = 0;
        this.sizeEstimator = new SizeEstimator();
      }
      ensureCountsAreIntegers() {
        for (const tracesAndStats of Object.values(this.tracesPerQuery)) {
          tracesAndStats.ensureCountsAreIntegers();
        }
      }
      addTrace({ statsReportKey, trace, asTrace, referencedFieldsByType, maxTraceBytes = 10 * 1024 * 1024, nonFtv1ErrorPaths }) {
        const tracesAndStats = this.getTracesAndStats({
          statsReportKey,
          referencedFieldsByType
        });
        if (asTrace) {
          const encodedTrace = Trace.encode(trace).finish();
          if (!isNaN(maxTraceBytes) && encodedTrace.length > maxTraceBytes) {
            tracesAndStats.statsWithContext.addTrace(trace, this.sizeEstimator, nonFtv1ErrorPaths);
          } else {
            tracesAndStats.trace.push(encodedTrace);
            this.sizeEstimator.bytes += 2 + encodedTrace.length;
          }
        } else {
          tracesAndStats.statsWithContext.addTrace(trace, this.sizeEstimator, nonFtv1ErrorPaths);
        }
      }
      getTracesAndStats({ statsReportKey, referencedFieldsByType }) {
        const existing = this.tracesPerQuery[statsReportKey];
        if (existing) {
          return existing;
        }
        this.sizeEstimator.bytes += estimatedBytesForString(statsReportKey);
        for (const [typeName, referencedFieldsForType] of Object.entries(referencedFieldsByType)) {
          this.sizeEstimator.bytes += 2 + 2;
          if (referencedFieldsForType.isInterface) {
            this.sizeEstimator.bytes += 2;
          }
          this.sizeEstimator.bytes += estimatedBytesForString(typeName);
          for (const fieldName of referencedFieldsForType.fieldNames) {
            this.sizeEstimator.bytes += estimatedBytesForString(fieldName);
          }
        }
        return this.tracesPerQuery[statsReportKey] = new OurTracesAndStats(referencedFieldsByType);
      }
    };
    OurTracesAndStats = class {
      constructor(referencedFieldsByType) {
        this.referencedFieldsByType = referencedFieldsByType;
        this.trace = [];
        this.statsWithContext = new StatsByContext();
        this.internalTracesContributingToStats = [];
      }
      ensureCountsAreIntegers() {
        this.statsWithContext.ensureCountsAreIntegers();
      }
    };
    StatsByContext = class {
      constructor() {
        this.map = /* @__PURE__ */ Object.create(null);
      }
      toArray() {
        return Object.values(this.map);
      }
      ensureCountsAreIntegers() {
        for (const contextualizedStats of Object.values(this.map)) {
          contextualizedStats.ensureCountsAreIntegers();
        }
      }
      addTrace(trace, sizeEstimator, nonFtv1ErrorPaths) {
        this.getContextualizedStats(trace, sizeEstimator).addTrace(trace, sizeEstimator, nonFtv1ErrorPaths);
      }
      getContextualizedStats(trace, sizeEstimator) {
        const statsContext = {
          clientName: trace.clientName,
          clientVersion: trace.clientVersion
        };
        const statsContextKey = JSON.stringify(statsContext);
        const existing = this.map[statsContextKey];
        if (existing) {
          return existing;
        }
        sizeEstimator.bytes += 20 + estimatedBytesForString(trace.clientName) + estimatedBytesForString(trace.clientVersion);
        const contextualizedStats = new OurContextualizedStats(statsContext);
        this.map[statsContextKey] = contextualizedStats;
        return contextualizedStats;
      }
    };
    OurContextualizedStats = class {
      constructor(context2) {
        this.context = context2;
        this.queryLatencyStats = new OurQueryLatencyStats();
        this.perTypeStat = /* @__PURE__ */ Object.create(null);
      }
      ensureCountsAreIntegers() {
        for (const typeStat of Object.values(this.perTypeStat)) {
          typeStat.ensureCountsAreIntegers();
        }
      }
      addTrace(trace, sizeEstimator, nonFtv1ErrorPaths = []) {
        const { fieldExecutionWeight } = trace;
        if (!fieldExecutionWeight) {
          this.queryLatencyStats.requestsWithoutFieldInstrumentation++;
        }
        this.queryLatencyStats.requestCount++;
        if (trace.fullQueryCacheHit) {
          this.queryLatencyStats.cacheLatencyCount.incrementDuration(trace.durationNs);
          this.queryLatencyStats.cacheHits++;
        } else {
          this.queryLatencyStats.latencyCount.incrementDuration(trace.durationNs);
        }
        if (!trace.fullQueryCacheHit && trace.cachePolicy?.maxAgeNs != null) {
          switch (trace.cachePolicy.scope) {
            case Trace.CachePolicy.Scope.PRIVATE:
              this.queryLatencyStats.privateCacheTtlCount.incrementDuration(trace.cachePolicy.maxAgeNs);
              break;
            case Trace.CachePolicy.Scope.PUBLIC:
              this.queryLatencyStats.publicCacheTtlCount.incrementDuration(trace.cachePolicy.maxAgeNs);
              break;
          }
        }
        if (trace.persistedQueryHit) {
          this.queryLatencyStats.persistedQueryHits++;
        }
        if (trace.persistedQueryRegister) {
          this.queryLatencyStats.persistedQueryMisses++;
        }
        if (trace.forbiddenOperation) {
          this.queryLatencyStats.forbiddenOperationCount++;
        }
        if (trace.registeredOperation) {
          this.queryLatencyStats.registeredOperationCount++;
        }
        let hasError = false;
        const errorPathStats = /* @__PURE__ */ new Set();
        const traceNodeStats = (node, path2) => {
          if (node.error?.length) {
            hasError = true;
            let currPathErrorStats = this.queryLatencyStats.rootErrorStats;
            path2.toArray().forEach((subPath) => {
              currPathErrorStats = currPathErrorStats.getChild(subPath, sizeEstimator);
            });
            errorPathStats.add(currPathErrorStats);
            currPathErrorStats.errorsCount += node.error.length;
          }
          if (fieldExecutionWeight) {
            const fieldName = node.originalFieldName || node.responseName;
            if (node.parentType && fieldName && node.type && node.endTime != null && node.startTime != null && node.endTime >= node.startTime) {
              const typeStat = this.getTypeStat(node.parentType, sizeEstimator);
              const fieldStat = typeStat.getFieldStat(fieldName, node.type, sizeEstimator);
              fieldStat.errorsCount += node.error?.length ?? 0;
              fieldStat.observedExecutionCount++;
              fieldStat.estimatedExecutionCount += fieldExecutionWeight;
              fieldStat.requestsWithErrorsCount += (node.error?.length ?? 0) > 0 ? 1 : 0;
              fieldStat.latencyCount.incrementDuration(node.endTime - node.startTime, fieldExecutionWeight);
            }
          }
          return false;
        };
        iterateOverTrace(trace, traceNodeStats, true);
        for (const { subgraph, path: path2 } of nonFtv1ErrorPaths) {
          hasError = true;
          if (path2) {
            let currPathErrorStats = this.queryLatencyStats.rootErrorStats.getChild(`service:${subgraph}`, sizeEstimator);
            path2.forEach((subPath) => {
              if (typeof subPath === "string") {
                currPathErrorStats = currPathErrorStats.getChild(subPath, sizeEstimator);
              }
            });
            errorPathStats.add(currPathErrorStats);
            currPathErrorStats.errorsCount += 1;
          }
        }
        for (const errorPath of errorPathStats) {
          errorPath.requestsWithErrorsCount += 1;
        }
        if (hasError) {
          this.queryLatencyStats.requestsWithErrorsCount++;
        }
      }
      getTypeStat(parentType, sizeEstimator) {
        const existing = this.perTypeStat[parentType];
        if (existing) {
          return existing;
        }
        sizeEstimator.bytes += estimatedBytesForString(parentType);
        const typeStat = new OurTypeStat();
        this.perTypeStat[parentType] = typeStat;
        return typeStat;
      }
    };
    OurQueryLatencyStats = class {
      constructor() {
        this.latencyCount = new DurationHistogram();
        this.requestCount = 0;
        this.requestsWithoutFieldInstrumentation = 0;
        this.cacheHits = 0;
        this.persistedQueryHits = 0;
        this.persistedQueryMisses = 0;
        this.cacheLatencyCount = new DurationHistogram();
        this.rootErrorStats = new OurPathErrorStats();
        this.requestsWithErrorsCount = 0;
        this.publicCacheTtlCount = new DurationHistogram();
        this.privateCacheTtlCount = new DurationHistogram();
        this.registeredOperationCount = 0;
        this.forbiddenOperationCount = 0;
      }
    };
    OurPathErrorStats = class _OurPathErrorStats {
      constructor() {
        this.children = /* @__PURE__ */ Object.create(null);
        this.errorsCount = 0;
        this.requestsWithErrorsCount = 0;
      }
      getChild(subPath, sizeEstimator) {
        const existing = this.children[subPath];
        if (existing) {
          return existing;
        }
        const child = new _OurPathErrorStats();
        this.children[subPath] = child;
        sizeEstimator.bytes += estimatedBytesForString(subPath) + 4;
        return child;
      }
    };
    OurTypeStat = class {
      constructor() {
        this.perFieldStat = /* @__PURE__ */ Object.create(null);
      }
      getFieldStat(fieldName, returnType, sizeEstimator) {
        const existing = this.perFieldStat[fieldName];
        if (existing) {
          return existing;
        }
        sizeEstimator.bytes += estimatedBytesForString(fieldName) + estimatedBytesForString(returnType) + 10;
        const fieldStat = new OurFieldStat(returnType);
        this.perFieldStat[fieldName] = fieldStat;
        return fieldStat;
      }
      ensureCountsAreIntegers() {
        for (const fieldStat of Object.values(this.perFieldStat)) {
          fieldStat.ensureCountsAreIntegers();
        }
      }
    };
    OurFieldStat = class {
      constructor(returnType) {
        this.returnType = returnType;
        this.errorsCount = 0;
        this.observedExecutionCount = 0;
        this.estimatedExecutionCount = 0;
        this.requestsWithErrorsCount = 0;
        this.latencyCount = new DurationHistogram();
      }
      ensureCountsAreIntegers() {
        this.estimatedExecutionCount = Math.floor(this.estimatedExecutionCount);
      }
    };
  }
});

// node_modules/@apollo/server/dist/esm/plugin/usageReporting/traceDetails.js
function makeTraceDetails(variables, sendVariableValues, operationString) {
  const details = new Trace.Details();
  const variablesToRecord = (() => {
    if (sendVariableValues && "transform" in sendVariableValues) {
      const originalKeys = Object.keys(variables);
      try {
        const modifiedVariables = sendVariableValues.transform({
          variables,
          operationString
        });
        return cleanModifiedVariables(originalKeys, modifiedVariables);
      } catch (e) {
        return handleVariableValueTransformError(originalKeys);
      }
    } else {
      return variables;
    }
  })();
  Object.keys(variablesToRecord).forEach((name) => {
    if (!sendVariableValues || "none" in sendVariableValues && sendVariableValues.none || "all" in sendVariableValues && !sendVariableValues.all || "exceptNames" in sendVariableValues && sendVariableValues.exceptNames.includes(name) || "onlyNames" in sendVariableValues && !sendVariableValues.onlyNames.includes(name)) {
      details.variablesJson[name] = "";
    } else {
      try {
        details.variablesJson[name] = typeof variablesToRecord[name] === "undefined" ? "" : JSON.stringify(variablesToRecord[name]);
      } catch (e) {
        details.variablesJson[name] = JSON.stringify("[Unable to convert value to JSON]");
      }
    }
  });
  return details;
}
function handleVariableValueTransformError(variableNames) {
  const modifiedVariables = /* @__PURE__ */ Object.create(null);
  variableNames.forEach((name) => {
    modifiedVariables[name] = "[PREDICATE_FUNCTION_ERROR]";
  });
  return modifiedVariables;
}
function cleanModifiedVariables(originalKeys, modifiedVariables) {
  const cleanedVariables = /* @__PURE__ */ Object.create(null);
  originalKeys.forEach((name) => {
    cleanedVariables[name] = modifiedVariables[name];
  });
  return cleanedVariables;
}
var init_traceDetails = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/usageReporting/traceDetails.js"() {
    init_protobuf();
  }
});

// node_modules/@apollo/server/dist/esm/generated/packageVersion.js
var packageVersion;
var init_packageVersion = __esm({
  "node_modules/@apollo/server/dist/esm/generated/packageVersion.js"() {
    packageVersion = "4.11.2";
  }
});

// node_modules/@apollo/server/dist/esm/plugin/schemaIsSubgraph.js
function schemaIsSubgraph(schema) {
  const serviceType = schema.getType("_Service");
  if (!(0, import_graphql37.isObjectType)(serviceType)) {
    return false;
  }
  const sdlField = serviceType.getFields().sdl;
  if (!sdlField) {
    return false;
  }
  let sdlFieldType = sdlField.type;
  if ((0, import_graphql37.isNonNullType)(sdlFieldType)) {
    sdlFieldType = sdlFieldType.ofType;
  }
  if (!(0, import_graphql37.isScalarType)(sdlFieldType)) {
    return false;
  }
  return sdlFieldType.name == "String";
}
var import_graphql37;
var init_schemaIsSubgraph = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/schemaIsSubgraph.js"() {
    import_graphql37 = __toESM(require_graphql2(), 1);
  }
});

// node_modules/@apollo/server/dist/esm/plugin/usageReporting/plugin.js
function ApolloServerPluginUsageReporting(options = /* @__PURE__ */ Object.create(null)) {
  const fieldLevelInstrumentationOption = options.fieldLevelInstrumentation;
  const fieldLevelInstrumentation = typeof fieldLevelInstrumentationOption === "number" ? async () => Math.random() < fieldLevelInstrumentationOption ? 1 / fieldLevelInstrumentationOption : 0 : fieldLevelInstrumentationOption ? fieldLevelInstrumentationOption : async () => true;
  let requestDidStartHandler = null;
  return internalPlugin({
    __internal_plugin_id__: "UsageReporting",
    __is_disabled_plugin__: false,
    async requestDidStart(requestContext) {
      if (requestDidStartHandler) {
        return requestDidStartHandler(requestContext);
      }
      return {};
    },
    async serverWillStart({ logger: serverLogger, apollo, startedInBackground, schema }) {
      const logger = options.logger ?? serverLogger;
      const { key, graphRef } = apollo;
      if (!(key && graphRef)) {
        throw new Error("You've enabled usage reporting via ApolloServerPluginUsageReporting, but you also need to provide your Apollo API key and graph ref, via the APOLLO_KEY/APOLLO_GRAPH_REF environment variables or via `new ApolloServer({apollo: {key, graphRef})`.");
      }
      if (schemaIsSubgraph(schema)) {
        if (options.__onlyIfSchemaIsNotSubgraph) {
          logger.warn("You have specified an Apollo API key and graph ref but this server appears to be a subgraph. Typically usage reports are sent to Apollo by your Router or Gateway, not directly from your subgraph; usage reporting is disabled. To enable usage reporting anyway, explicitly install `ApolloServerPluginUsageReporting`. To disable this warning, install `ApolloServerPluginUsageReportingDisabled`.");
          return {};
        } else {
          logger.warn("You have installed `ApolloServerPluginUsageReporting` but this server appears to be a subgraph. Typically usage reports are sent to Apollo by your Router or Gateway, not directly from your subgraph. If this was unintentional, remove `ApolloServerPluginUsageReporting` from your server's `plugins` array.");
        }
      }
      logger.info(`Apollo usage reporting starting! See your graph at https://studio.apollographql.com/graph/${encodeURI(graphRef)}/`);
      const sendReportsImmediately = options.sendReportsImmediately ?? startedInBackground;
      let operationDerivedDataCache = null;
      const reportByExecutableSchemaId = /* @__PURE__ */ new Map();
      const getReportWhichMustBeUsedImmediately = (executableSchemaId) => {
        const existing = reportByExecutableSchemaId.get(executableSchemaId);
        if (existing) {
          return existing;
        }
        const report = new OurReport(new ReportHeader({
          ...reportHeaderDefaults,
          executableSchemaId,
          graphRef
        }));
        reportByExecutableSchemaId.set(executableSchemaId, report);
        return report;
      };
      const getAndDeleteReport = (executableSchemaId) => {
        const report = reportByExecutableSchemaId.get(executableSchemaId);
        if (report) {
          reportByExecutableSchemaId.delete(executableSchemaId);
          return report;
        }
        return null;
      };
      const overriddenExecutableSchemaId = options.overrideReportedSchema ? computeCoreSchemaHash(options.overrideReportedSchema) : void 0;
      let lastSeenExecutableSchemaToId;
      let reportTimer;
      if (!sendReportsImmediately) {
        reportTimer = setInterval(() => sendAllReportsAndReportErrors(), options.reportIntervalMs || 10 * 1e3);
      }
      let sendTraces = options.sendTraces ?? true;
      const sendOperationAsTrace = options.experimental_sendOperationAsTrace ?? defaultSendOperationsAsTrace();
      let stopped = false;
      function executableSchemaIdForSchema(schema2) {
        if (lastSeenExecutableSchemaToId?.executableSchema === schema2) {
          return lastSeenExecutableSchemaToId.executableSchemaId;
        }
        const id2 = computeCoreSchemaHash((0, import_graphql38.printSchema)(schema2));
        lastSeenExecutableSchemaToId = {
          executableSchema: schema2,
          executableSchemaId: id2
        };
        return id2;
      }
      async function sendAllReportsAndReportErrors() {
        await Promise.all([...reportByExecutableSchemaId.keys()].map((executableSchemaId) => sendReportAndReportErrors(executableSchemaId)));
      }
      async function sendReportAndReportErrors(executableSchemaId) {
        return sendReport(executableSchemaId).catch((err) => {
          if (options.reportErrorFunction) {
            options.reportErrorFunction(err);
          } else {
            logger.error(err.message);
          }
        });
      }
      const sendReport = async (executableSchemaId) => {
        let report = getAndDeleteReport(executableSchemaId);
        if (!report || Object.keys(report.tracesPerQuery).length === 0 && report.operationCount === 0) {
          return;
        }
        report.endTime = dateToProtoTimestamp(/* @__PURE__ */ new Date());
        report.ensureCountsAreIntegers();
        const protobufError = Report.verify(report);
        if (protobufError) {
          throw new Error(`Error verifying report: ${protobufError}`);
        }
        let message = Report.encode(report).finish();
        report = null;
        if (options.debugPrintReports) {
          const decodedReport = Report.decode(message);
          logger.info(`Apollo usage report: ${JSON.stringify(decodedReport.toJSON())}`);
        }
        const compressed = await new Promise((resolve, reject) => {
          (0, import_zlib.gzip)(message, (error, result) => {
            error ? reject(error) : resolve(result);
          });
        });
        message = null;
        const fetcher = options.fetcher ?? import_node_fetch.default;
        const response = await (0, import_async_retry.default)(async () => {
          const controller = new import_node_abort_controller.AbortController();
          const abortTimeout = setTimeout(() => {
            controller.abort();
          }, options.requestTimeoutMs ?? 3e4);
          let curResponse;
          try {
            curResponse = await fetcher((options.endpointUrl || "https://usage-reporting.api.apollographql.com") + "/api/ingress/traces", {
              method: "POST",
              headers: {
                "user-agent": "ApolloServerPluginUsageReporting",
                "x-api-key": key,
                "content-encoding": "gzip",
                accept: "application/json"
              },
              body: compressed,
              signal: controller.signal
            });
          } finally {
            clearTimeout(abortTimeout);
          }
          if (curResponse.status >= 500 && curResponse.status < 600) {
            throw new Error(`HTTP status ${curResponse.status}, ${await curResponse.text() || "(no body)"}`);
          } else {
            return curResponse;
          }
        }, {
          retries: (options.maxAttempts || 5) - 1,
          minTimeout: options.minimumRetryDelayMs || 100,
          factor: 2
        }).catch((err) => {
          throw new Error(`Error sending report to Apollo servers: ${err.message}`);
        });
        if (response.status < 200 || response.status >= 300) {
          throw new Error(`Error sending report to Apollo servers: HTTP status ${response.status}, ${await response.text() || "(no body)"}`);
        }
        if (sendTraces && response.status === 200 && response.headers.get("content-type")?.match(/^\s*application\/json\s*(?:;|$)/i)) {
          const body = await response.text();
          let parsedBody;
          try {
            parsedBody = JSON.parse(body);
          } catch (e) {
            throw new Error(`Error parsing response from Apollo servers: ${e}`);
          }
          if (parsedBody.tracesIgnored === true) {
            logger.debug("This graph's organization does not have access to traces; sending all subsequent operations as stats.");
            sendTraces = false;
          }
        }
        if (options.debugPrintReports) {
          logger.info(`Apollo usage report: status ${response.status}`);
        }
      };
      requestDidStartHandler = ({ metrics, schema: schema2, request: { http, variables } }) => {
        const treeBuilder = new TraceTreeBuilder({
          maskedBy: "ApolloServerPluginUsageReporting",
          sendErrors: options.sendErrors
        });
        treeBuilder.startTiming();
        metrics.startHrTime = treeBuilder.startHrTime;
        let graphqlValidationFailure = false;
        let graphqlUnknownOperationName = false;
        let includeOperationInUsageReporting = null;
        if (http) {
          treeBuilder.trace.http = new Trace.HTTP({
            method: Trace.HTTP.Method[http.method] || Trace.HTTP.Method.UNKNOWN
          });
          if (options.sendHeaders) {
            makeHTTPRequestHeaders(treeBuilder.trace.http, http.headers, options.sendHeaders);
          }
        }
        async function maybeCallIncludeRequestHook(requestContext) {
          if (includeOperationInUsageReporting !== null)
            return;
          if (typeof options.includeRequest !== "function") {
            includeOperationInUsageReporting = true;
            return;
          }
          includeOperationInUsageReporting = await options.includeRequest(requestContext);
          if (typeof includeOperationInUsageReporting !== "boolean") {
            logger.warn("The 'includeRequest' async predicate function must return a boolean value.");
            includeOperationInUsageReporting = true;
          }
        }
        let didResolveSource = false;
        return {
          async didResolveSource(requestContext) {
            didResolveSource = true;
            if (metrics.persistedQueryHit) {
              treeBuilder.trace.persistedQueryHit = true;
            }
            if (metrics.persistedQueryRegister) {
              treeBuilder.trace.persistedQueryRegister = true;
            }
            if (variables) {
              treeBuilder.trace.details = makeTraceDetails(variables, options.sendVariableValues, requestContext.source);
            }
            const clientInfo = (options.generateClientInfo || defaultGenerateClientInfo)(requestContext);
            if (clientInfo) {
              const { clientName, clientVersion } = clientInfo;
              treeBuilder.trace.clientVersion = clientVersion || "";
              treeBuilder.trace.clientName = clientName || "";
            }
          },
          async validationDidStart() {
            return async (validationErrors) => {
              graphqlValidationFailure = validationErrors ? validationErrors.length !== 0 : false;
            };
          },
          async didResolveOperation(requestContext) {
            graphqlUnknownOperationName = requestContext.operation === void 0;
            await maybeCallIncludeRequestHook(requestContext);
            if (includeOperationInUsageReporting && !graphqlUnknownOperationName) {
              if (metrics.captureTraces === void 0) {
                const rawWeight = await fieldLevelInstrumentation(requestContext);
                treeBuilder.trace.fieldExecutionWeight = typeof rawWeight === "number" ? rawWeight : rawWeight ? 1 : 0;
                metrics.captureTraces = !!treeBuilder.trace.fieldExecutionWeight;
              }
            }
          },
          async executionDidStart() {
            if (!metrics.captureTraces)
              return;
            return {
              willResolveField({ info }) {
                return treeBuilder.willResolveField(info);
              }
            };
          },
          async didEncounterSubsequentErrors(_requestContext, errors) {
            treeBuilder.didEncounterErrors(errors);
          },
          async willSendSubsequentPayload(requestContext, payload) {
            if (!payload.hasNext) {
              await operationFinished(requestContext);
            }
          },
          async willSendResponse(requestContext) {
            if (!didResolveSource)
              return;
            if (requestContext.errors) {
              treeBuilder.didEncounterErrors(requestContext.errors);
            }
            if (requestContext.response.body.kind === "single") {
              await operationFinished(requestContext);
            }
          }
        };
        async function operationFinished(requestContext) {
          const resolvedOperation = !!requestContext.operation;
          await maybeCallIncludeRequestHook(requestContext);
          treeBuilder.stopTiming();
          const executableSchemaId = overriddenExecutableSchemaId ?? executableSchemaIdForSchema(schema2);
          if (includeOperationInUsageReporting === false) {
            if (resolvedOperation) {
              getReportWhichMustBeUsedImmediately(executableSchemaId).operationCount++;
            }
            return;
          }
          treeBuilder.trace.fullQueryCacheHit = !!metrics.responseCacheHit;
          treeBuilder.trace.forbiddenOperation = !!metrics.forbiddenOperation;
          treeBuilder.trace.registeredOperation = !!metrics.registeredOperation;
          const policyIfCacheable = requestContext.overallCachePolicy.policyIfCacheable();
          if (policyIfCacheable) {
            treeBuilder.trace.cachePolicy = new Trace.CachePolicy({
              scope: policyIfCacheable.scope === "PRIVATE" ? Trace.CachePolicy.Scope.PRIVATE : policyIfCacheable.scope === "PUBLIC" ? Trace.CachePolicy.Scope.PUBLIC : Trace.CachePolicy.Scope.UNKNOWN,
              maxAgeNs: policyIfCacheable.maxAge * 1e9
            });
          }
          if (metrics.queryPlanTrace) {
            treeBuilder.trace.queryPlan = metrics.queryPlanTrace;
          }
          addTrace().catch(logger.error);
          async function addTrace() {
            if (stopped) {
              return;
            }
            await new Promise((res) => setImmediate(res));
            const executableSchemaId2 = overriddenExecutableSchemaId ?? executableSchemaIdForSchema(schema2);
            const { trace } = treeBuilder;
            let statsReportKey = void 0;
            let referencedFieldsByType;
            if (!requestContext.document) {
              statsReportKey = `## GraphQLParseFailure
`;
            } else if (graphqlValidationFailure) {
              statsReportKey = `## GraphQLValidationFailure
`;
            } else if (graphqlUnknownOperationName) {
              statsReportKey = `## GraphQLUnknownOperationName
`;
            }
            const isExecutable = statsReportKey === void 0;
            if (statsReportKey) {
              if (options.sendUnexecutableOperationDocuments) {
                trace.unexecutedOperationBody = requestContext.source;
                trace.unexecutedOperationName = requestContext.request.operationName || "";
              }
              referencedFieldsByType = /* @__PURE__ */ Object.create(null);
            } else {
              const operationDerivedData = getOperationDerivedData();
              statsReportKey = `# ${requestContext.operationName || "-"}
${operationDerivedData.signature}`;
              referencedFieldsByType = operationDerivedData.referencedFieldsByType;
            }
            const protobufError = Trace.verify(trace);
            if (protobufError) {
              throw new Error(`Error encoding trace: ${protobufError}`);
            }
            if (resolvedOperation) {
              getReportWhichMustBeUsedImmediately(executableSchemaId2).operationCount++;
            }
            getReportWhichMustBeUsedImmediately(executableSchemaId2).addTrace({
              statsReportKey,
              trace,
              asTrace: sendTraces && (!isExecutable || !!metrics.captureTraces) && !metrics.nonFtv1ErrorPaths?.length && sendOperationAsTrace(trace, statsReportKey),
              referencedFieldsByType,
              nonFtv1ErrorPaths: metrics.nonFtv1ErrorPaths ?? []
            });
            if (sendReportsImmediately || getReportWhichMustBeUsedImmediately(executableSchemaId2).sizeEstimator.bytes >= (options.maxUncompressedReportSize || 4 * 1024 * 1024)) {
              await sendReportAndReportErrors(executableSchemaId2);
            }
          }
          function getOperationDerivedData() {
            if (!requestContext.document) {
              throw new Error("No document?");
            }
            const cacheKey = operationDerivedDataCacheKey(requestContext.queryHash, requestContext.operationName || "");
            if (!operationDerivedDataCache || operationDerivedDataCache.forSchema !== schema2) {
              operationDerivedDataCache = {
                forSchema: schema2,
                cache: createOperationDerivedDataCache({ logger })
              };
            }
            const cachedOperationDerivedData = operationDerivedDataCache.cache.get(cacheKey);
            if (cachedOperationDerivedData) {
              return cachedOperationDerivedData;
            }
            const generatedSignature = (options.calculateSignature || import_utils19.usageReportingSignature)(requestContext.document, requestContext.operationName || "");
            const generatedOperationDerivedData = {
              signature: generatedSignature,
              referencedFieldsByType: (0, import_utils19.calculateReferencedFieldsByType)({
                document: requestContext.document,
                schema: schema2,
                resolvedOperationName: requestContext.operationName ?? null
              })
            };
            operationDerivedDataCache.cache.set(cacheKey, generatedOperationDerivedData);
            return generatedOperationDerivedData;
          }
        }
      };
      return {
        async serverWillStop() {
          if (reportTimer) {
            clearInterval(reportTimer);
            reportTimer = void 0;
          }
          stopped = true;
          await sendAllReportsAndReportErrors();
        }
      };
    }
  });
}
function makeHTTPRequestHeaders(http, headers, sendHeaders) {
  if (!sendHeaders || "none" in sendHeaders && sendHeaders.none || "all" in sendHeaders && !sendHeaders.all) {
    return;
  }
  for (const [key, value] of headers) {
    if ("exceptNames" in sendHeaders && sendHeaders.exceptNames.some((exceptHeader) => {
      return exceptHeader.toLowerCase() === key;
    }) || "onlyNames" in sendHeaders && !sendHeaders.onlyNames.some((header) => {
      return header.toLowerCase() === key;
    })) {
      continue;
    }
    switch (key) {
      case "authorization":
      case "cookie":
      case "set-cookie":
        break;
      default:
        http.requestHeaders[key] = new Trace.HTTP.Values({
          value: [value]
        });
    }
  }
}
function defaultGenerateClientInfo({ request }) {
  const clientNameHeaderKey = "apollographql-client-name";
  const clientVersionHeaderKey = "apollographql-client-version";
  if (request.http?.headers?.get(clientNameHeaderKey) || request.http?.headers?.get(clientVersionHeaderKey)) {
    return {
      clientName: request.http?.headers?.get(clientNameHeaderKey),
      clientVersion: request.http?.headers?.get(clientVersionHeaderKey)
    };
  } else if (request.extensions?.clientInfo) {
    return request.extensions.clientInfo;
  } else {
    return {};
  }
}
var import_utils19, import_async_retry, import_graphql38, import_node_abort_controller, import_node_fetch, import_os, import_zlib, reportHeaderDefaults;
var init_plugin = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/usageReporting/plugin.js"() {
    init_protobuf();
    import_utils19 = __toESM(require_dist9(), 1);
    import_async_retry = __toESM(require_lib(), 1);
    import_graphql38 = __toESM(require_graphql2(), 1);
    import_node_abort_controller = __toESM(require_node_abort_controller(), 1);
    import_node_fetch = __toESM(require_lib3(), 1);
    import_os = __toESM(require("os"), 1);
    import_zlib = require("zlib");
    init_internalPlugin();
    init_traceTreeBuilder();
    init_defaultSendOperationsAsTrace();
    init_operationDerivedDataCache();
    init_stats();
    init_traceDetails();
    init_packageVersion();
    init_computeCoreSchemaHash();
    init_schemaIsSubgraph();
    reportHeaderDefaults = {
      hostname: import_os.default.hostname(),
      agentVersion: `@apollo/server@${packageVersion}`,
      runtimeVersion: `node ${process.version}`,
      uname: `${import_os.default.platform()}, ${import_os.default.type()}, ${import_os.default.release()}, ${import_os.default.arch()})`
    };
  }
});

// node_modules/@apollo/server/dist/esm/plugin/usageReporting/index.js
var usageReporting_exports = {};
__export(usageReporting_exports, {
  ApolloServerPluginUsageReporting: () => ApolloServerPluginUsageReporting
});
var init_usageReporting = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/usageReporting/index.js"() {
    init_plugin();
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/rng.js
function rng2() {
  if (poolPtr2 > rnds8Pool2.length - 16) {
    import_crypto2.default.randomFillSync(rnds8Pool2);
    poolPtr2 = 0;
  }
  return rnds8Pool2.slice(poolPtr2, poolPtr2 += 16);
}
var import_crypto2, rnds8Pool2, poolPtr2;
var init_rng = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/rng.js"() {
    import_crypto2 = __toESM(require("crypto"));
    rnds8Pool2 = new Uint8Array(256);
    poolPtr2 = rnds8Pool2.length;
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/regex.js
var regex_default2;
var init_regex = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default2 = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/validate.js
function validate3(uuid) {
  return typeof uuid === "string" && regex_default2.test(uuid);
}
var validate_default2;
var init_validate = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default2 = validate3;
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/stringify.js
function unsafeStringify(arr, offset = 0) {
  return byteToHex2[arr[offset + 0]] + byteToHex2[arr[offset + 1]] + byteToHex2[arr[offset + 2]] + byteToHex2[arr[offset + 3]] + "-" + byteToHex2[arr[offset + 4]] + byteToHex2[arr[offset + 5]] + "-" + byteToHex2[arr[offset + 6]] + byteToHex2[arr[offset + 7]] + "-" + byteToHex2[arr[offset + 8]] + byteToHex2[arr[offset + 9]] + "-" + byteToHex2[arr[offset + 10]] + byteToHex2[arr[offset + 11]] + byteToHex2[arr[offset + 12]] + byteToHex2[arr[offset + 13]] + byteToHex2[arr[offset + 14]] + byteToHex2[arr[offset + 15]];
}
function stringify3(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset);
  if (!validate_default2(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex2, stringify_default2;
var init_stringify = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex2 = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex2.push((i + 256).toString(16).slice(1));
    }
    stringify_default2 = stringify3;
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b2 = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng2)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl2 = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b2[i++] = tl2 >>> 24 & 255;
  b2[i++] = tl2 >>> 16 & 255;
  b2[i++] = tl2 >>> 8 & 255;
  b2[i++] = tl2 & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b2[i++] = tmh >>> 8 & 255;
  b2[i++] = tmh & 255;
  b2[i++] = tmh >>> 24 & 15 | 16;
  b2[i++] = tmh >>> 16 & 255;
  b2[i++] = clockseq >>> 8 | 128;
  b2[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b2[i + n] = node[n];
  }
  return buf || unsafeStringify(b2);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/parse.js
function parse3(uuid) {
  if (!validate_default2(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse3;
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/md5.js
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto3.default.createHash("md5").update(bytes).digest();
}
var import_crypto3, md5_default;
var init_md5 = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/md5.js"() {
    import_crypto3 = __toESM(require("crypto"));
    md5_default = md5;
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/native.js
var import_crypto4, native_default;
var init_native = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/native.js"() {
    import_crypto4 = __toESM(require("crypto"));
    native_default = {
      randomUUID: import_crypto4.default.randomUUID
    };
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/v4.js
function v42(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng2)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default2;
var init_v4 = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/v4.js"() {
    init_native();
    init_rng();
    init_stringify();
    v4_default2 = v42;
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/sha1.js
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto5.default.createHash("sha1").update(bytes).digest();
}
var import_crypto5, sha1_default;
var init_sha1 = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/sha1.js"() {
    import_crypto5 = __toESM(require("crypto"));
    sha1_default = sha1;
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default2(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.slice(14, 15), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

// node_modules/@apollo/server/node_modules/uuid/dist/esm-node/index.js
var esm_node_exports2 = {};
__export(esm_node_exports2, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default2,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default2,
  v5: () => v5_default,
  validate: () => validate_default2,
  version: () => version_default
});
var init_esm_node = __esm({
  "node_modules/@apollo/server/node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/@apollo/server/dist/esm/plugin/schemaReporting/schemaReporter.js
var import_node_fetch2, schemaReportGql, SchemaReporter;
var init_schemaReporter = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/schemaReporting/schemaReporter.js"() {
    import_node_fetch2 = __toESM(require_lib3(), 1);
    init_packageVersion();
    schemaReportGql = `#graphql
  mutation SchemaReport($report: SchemaReport!, $coreSchema: String) {
    reportSchema(report: $report, coreSchema: $coreSchema) {
      __typename
      ... on ReportSchemaError {
        message
        code
      }
      ... on ReportSchemaResponse {
        inSeconds
        withCoreSchema
      }
    }
  }
`;
    SchemaReporter = class {
      constructor(options) {
        this.headers = {
          "Content-Type": "application/json",
          "x-api-key": options.apiKey,
          "apollographql-client-name": "ApolloServerPluginSchemaReporting",
          "apollographql-client-version": packageVersion
        };
        this.endpointUrl = options.endpointUrl || "https://schema-reporting.api.apollographql.com/api/graphql";
        this.schemaReport = options.schemaReport;
        this.coreSchema = options.coreSchema;
        this.isStopped = false;
        this.logger = options.logger;
        this.initialReportingDelayInMs = options.initialReportingDelayInMs;
        this.fallbackReportingDelayInMs = options.fallbackReportingDelayInMs;
        this.fetcher = options.fetcher ?? import_node_fetch2.default;
      }
      stopped() {
        return this.isStopped;
      }
      start() {
        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.initialReportingDelayInMs);
      }
      stop() {
        this.isStopped = true;
        if (this.pollTimer) {
          clearTimeout(this.pollTimer);
          this.pollTimer = void 0;
        }
      }
      async sendOneReportAndScheduleNext(sendNextWithCoreSchema) {
        this.pollTimer = void 0;
        if (this.stopped())
          return;
        try {
          const result = await this.reportSchema(sendNextWithCoreSchema);
          if (!result) {
            return;
          }
          if (!this.stopped()) {
            this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(result.withCoreSchema), result.inSeconds * 1e3);
          }
          return;
        } catch (error) {
          this.logger.error(`Error reporting server info to Apollo during schema reporting: ${error}`);
          if (!this.stopped()) {
            this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.fallbackReportingDelayInMs);
          }
        }
      }
      async reportSchema(withCoreSchema) {
        const { data, errors } = await this.apolloQuery({
          report: this.schemaReport,
          coreSchema: withCoreSchema ? this.coreSchema : null
        });
        if (errors) {
          throw new Error(errors.map((x2) => x2.message).join("\n"));
        }
        function msgForUnexpectedResponse(data2) {
          return [
            "Unexpected response shape from Apollo when",
            "reporting schema. If this continues, please reach",
            "out to support@apollographql.com.",
            "Received response:",
            JSON.stringify(data2)
          ].join(" ");
        }
        if (!data || !data.reportSchema) {
          throw new Error(msgForUnexpectedResponse(data));
        }
        if (data.reportSchema.__typename === "ReportSchemaResponse") {
          return data.reportSchema;
        } else if (data.reportSchema.__typename === "ReportSchemaError") {
          this.logger.error([
            "Received input validation error from Apollo:",
            data.reportSchema.message,
            "Stopping reporting. Please fix the input errors."
          ].join(" "));
          this.stop();
          return null;
        }
        throw new Error(msgForUnexpectedResponse(data));
      }
      async apolloQuery(variables) {
        const request = {
          query: schemaReportGql,
          variables
        };
        const httpResponse = await this.fetcher(this.endpointUrl, {
          method: "POST",
          headers: this.headers,
          body: JSON.stringify(request)
        });
        if (!httpResponse.ok) {
          throw new Error([
            `An unexpected HTTP status code (${httpResponse.status}) was`,
            "encountered during schema reporting."
          ].join(" "));
        }
        try {
          return await httpResponse.json();
        } catch (error) {
          throw new Error([
            "Couldn't report schema to Apollo.",
            "Parsing response as JSON failed.",
            "If this continues please reach out to support@apollographql.com",
            error
          ].join(" "));
        }
      }
    };
  }
});

// node_modules/@apollo/server/dist/esm/plugin/schemaReporting/index.js
var schemaReporting_exports = {};
__export(schemaReporting_exports, {
  ApolloServerPluginSchemaReporting: () => ApolloServerPluginSchemaReporting
});
function ApolloServerPluginSchemaReporting({ initialDelayMaxMs, overrideReportedSchema, endpointUrl, fetcher } = /* @__PURE__ */ Object.create(null)) {
  const bootId = v4_default2();
  return internalPlugin({
    __internal_plugin_id__: "SchemaReporting",
    __is_disabled_plugin__: false,
    async serverWillStart({ apollo, schema, logger }) {
      const { key, graphRef } = apollo;
      if (!key) {
        throw Error("To use ApolloServerPluginSchemaReporting, you must provide an Apollo API key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`");
      }
      if (!graphRef) {
        throw Error("To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, 'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment variable or passing `new ApolloServer({apollo: {graphRef}})`.");
      }
      if (overrideReportedSchema) {
        try {
          const validationErrors = (0, import_graphql39.validateSchema)((0, import_graphql39.buildSchema)(overrideReportedSchema, { noLocation: true }));
          if (validationErrors.length) {
            throw new Error(validationErrors.map((error) => error.message).join("\n"));
          }
        } catch (err) {
          throw new Error(`The schema provided to overrideReportedSchema failed to parse or validate: ${err.message}`);
        }
      }
      if (schemaIsSubgraph(schema)) {
        throw Error([
          "Schema reporting is not yet compatible with Apollo Federation subgraphs.",
          "If you're interested in using schema reporting with subgraphs,",
          "please contact Apollo support. To set up managed federation, see",
          "https://go.apollo.dev/s/managed-federation"
        ].join(" "));
      }
      if (endpointUrl !== void 0) {
        logger.info(`Apollo schema reporting: schema reporting URL override: ${endpointUrl}`);
      }
      const baseSchemaReport = {
        bootId,
        graphRef,
        platform: process.env.APOLLO_SERVER_PLATFORM || "local",
        runtimeVersion: `node ${process.version}`,
        userVersion: process.env.APOLLO_SERVER_USER_VERSION,
        serverId: process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || import_os2.default.hostname(),
        libraryVersion: `@apollo/server@${packageVersion}`
      };
      let currentSchemaReporter;
      return {
        schemaDidLoadOrUpdate({ apiSchema, coreSupergraphSdl }) {
          if (overrideReportedSchema !== void 0) {
            if (currentSchemaReporter) {
              return;
            } else {
              logger.info("Apollo schema reporting: schema to report has been overridden");
            }
          }
          const coreSchema = overrideReportedSchema ?? coreSupergraphSdl ?? (0, import_graphql39.printSchema)(apiSchema);
          const coreSchemaHash = computeCoreSchemaHash(coreSchema);
          const schemaReport = {
            ...baseSchemaReport,
            coreSchemaHash
          };
          currentSchemaReporter?.stop();
          currentSchemaReporter = new SchemaReporter({
            schemaReport,
            coreSchema,
            apiKey: key,
            endpointUrl,
            logger,
            initialReportingDelayInMs: Math.floor(Math.random() * (initialDelayMaxMs ?? 1e4)),
            fallbackReportingDelayInMs: 2e4,
            fetcher
          });
          currentSchemaReporter.start();
          logger.info(`Apollo schema reporting: reporting a new schema to Studio! See your graph at https://studio.apollographql.com/graph/${encodeURI(graphRef)}/ with server info ${JSON.stringify(schemaReport)}`);
        },
        async serverWillStop() {
          currentSchemaReporter?.stop();
        }
      };
    }
  });
}
var import_os2, import_graphql39;
var init_schemaReporting = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/schemaReporting/index.js"() {
    import_os2 = __toESM(require("os"), 1);
    init_internalPlugin();
    init_esm_node();
    import_graphql39 = __toESM(require_graphql2(), 1);
    init_schemaReporter();
    init_schemaIsSubgraph();
    init_packageVersion();
    init_computeCoreSchemaHash();
  }
});

// node_modules/@apollo/server/dist/esm/plugin/inlineTrace/index.js
var inlineTrace_exports = {};
__export(inlineTrace_exports, {
  ApolloServerPluginInlineTrace: () => ApolloServerPluginInlineTrace
});
function ApolloServerPluginInlineTrace(options = /* @__PURE__ */ Object.create(null)) {
  let enabled = options.__onlyIfSchemaIsSubgraph ? null : true;
  return internalPlugin({
    __internal_plugin_id__: "InlineTrace",
    __is_disabled_plugin__: false,
    async serverWillStart({ schema, logger }) {
      if (enabled === null) {
        enabled = schemaIsSubgraph(schema);
        if (enabled) {
          logger.info("Enabling inline tracing for this subgraph. To disable, use ApolloServerPluginInlineTraceDisabled.");
        }
      }
    },
    async requestDidStart({ request: { http }, metrics }) {
      if (!enabled) {
        return;
      }
      const treeBuilder = new TraceTreeBuilder({
        maskedBy: "ApolloServerPluginInlineTrace",
        sendErrors: options.includeErrors
      });
      if (http?.headers.get("apollo-federation-include-trace") !== "ftv1") {
        return;
      }
      if (metrics.captureTraces === false) {
        return;
      }
      metrics.captureTraces = true;
      treeBuilder.startTiming();
      return {
        async executionDidStart() {
          return {
            willResolveField({ info }) {
              return treeBuilder.willResolveField(info);
            }
          };
        },
        async didEncounterErrors({ errors }) {
          treeBuilder.didEncounterErrors(errors);
        },
        async willSendResponse({ response }) {
          treeBuilder.stopTiming();
          if (response.body.kind === "incremental") {
            return;
          }
          if (metrics.queryPlanTrace) {
            treeBuilder.trace.queryPlan = metrics.queryPlanTrace;
          }
          const encodedUint8Array = Trace.encode(treeBuilder.trace).finish();
          const encodedBuffer = Buffer.from(encodedUint8Array, encodedUint8Array.byteOffset, encodedUint8Array.byteLength);
          const extensions = response.body.singleResult.extensions || (response.body.singleResult.extensions = /* @__PURE__ */ Object.create(null));
          if (typeof extensions.ftv1 !== "undefined") {
            throw new Error("The `ftv1` extension was already present.");
          }
          extensions.ftv1 = encodedBuffer.toString("base64");
        }
      };
    }
  });
}
var init_inlineTrace = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/inlineTrace/index.js"() {
    init_protobuf();
    init_traceTreeBuilder();
    init_internalPlugin();
    init_schemaIsSubgraph();
  }
});

// node_modules/@apollo/server/dist/esm/plugin/landingPage/default/getEmbeddedHTML.js
function getConfigStringForHtml(config2) {
  return JSON.stringify(config2).replace("<", "\\u003c").replace(">", "\\u003e").replace("&", "\\u0026").replace("'", "\\u0027");
}
var getEmbeddedExplorerHTML, getEmbeddedSandboxHTML;
var init_getEmbeddedHTML = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/landingPage/default/getEmbeddedHTML.js"() {
    getEmbeddedExplorerHTML = (explorerCdnVersion, config2, apolloServerVersion, nonce) => {
      const productionLandingPageEmbedConfigOrDefault = {
        displayOptions: {},
        persistExplorerState: false,
        runTelemetry: true,
        ...typeof config2.embed === "boolean" ? {} : config2.embed
      };
      const embeddedExplorerParams = {
        graphRef: config2.graphRef,
        target: "#embeddableExplorer",
        initialState: {
          ..."document" in config2 || "headers" in config2 || "variables" in config2 ? {
            document: config2.document,
            headers: config2.headers,
            variables: config2.variables
          } : {},
          ..."collectionId" in config2 ? {
            collectionId: config2.collectionId,
            operationId: config2.operationId
          } : {},
          displayOptions: {
            ...productionLandingPageEmbedConfigOrDefault.displayOptions
          }
        },
        persistExplorerState: productionLandingPageEmbedConfigOrDefault.persistExplorerState,
        includeCookies: config2.includeCookies,
        runtime: apolloServerVersion,
        runTelemetry: productionLandingPageEmbedConfigOrDefault.runTelemetry,
        allowDynamicStyles: false
      };
      return `
<div class="fallback">
  <h1>Welcome to Apollo Server</h1>
  <p>Apollo Explorer cannot be loaded; it appears that you might be offline.</p>
</div>
<style nonce=${nonce}>
  iframe {
    background-color: white;
    height: 100%;
    width: 100%;
    border: none;
  }
  #embeddableExplorer {
    width: 100vw;
    height: 100vh;
    position: absolute;
    top: 0;
  }
</style>
<div id="embeddableExplorer"></div>
<script nonce="${nonce}" src="https://embeddable-explorer.cdn.apollographql.com/${encodeURIComponent(explorerCdnVersion)}/embeddable-explorer.umd.production.min.js?runtime=${encodeURIComponent(apolloServerVersion)}"></script>
<script nonce="${nonce}">
  var endpointUrl = window.location.href;
  var embeddedExplorerConfig = ${getConfigStringForHtml(embeddedExplorerParams)};
  new window.EmbeddedExplorer({
    ...embeddedExplorerConfig,
    endpointUrl,
  });
</script>
`;
    };
    getEmbeddedSandboxHTML = (sandboxCdnVersion, config2, apolloServerVersion, nonce) => {
      const localDevelopmentEmbedConfigOrDefault = {
        runTelemetry: true,
        endpointIsEditable: false,
        initialState: {},
        ...typeof config2.embed === "boolean" ? {} : config2.embed ?? {}
      };
      const embeddedSandboxConfig = {
        target: "#embeddableSandbox",
        initialState: {
          ..."document" in config2 || "headers" in config2 || "variables" in config2 ? {
            document: config2.document,
            variables: config2.variables,
            headers: config2.headers
          } : {},
          ..."collectionId" in config2 ? {
            collectionId: config2.collectionId,
            operationId: config2.operationId
          } : {},
          includeCookies: config2.includeCookies,
          ...localDevelopmentEmbedConfigOrDefault.initialState
        },
        hideCookieToggle: false,
        endpointIsEditable: localDevelopmentEmbedConfigOrDefault.endpointIsEditable,
        runtime: apolloServerVersion,
        runTelemetry: localDevelopmentEmbedConfigOrDefault.runTelemetry,
        allowDynamicStyles: false
      };
      return `
<div class="fallback">
  <h1>Welcome to Apollo Server</h1>
  <p>Apollo Sandbox cannot be loaded; it appears that you might be offline.</p>
</div>
<style nonce=${nonce}>
  iframe {
    background-color: white;
    height: 100%;
    width: 100%;
    border: none;
  }
  #embeddableSandbox {
    width: 100vw;
    height: 100vh;
    position: absolute;
    top: 0;
  }
</style>
<div id="embeddableSandbox"></div>
<script nonce="${nonce}" src="https://embeddable-sandbox.cdn.apollographql.com/${encodeURIComponent(sandboxCdnVersion)}/embeddable-sandbox.umd.production.min.js?runtime=${encodeURIComponent(apolloServerVersion)}"></script>
<script nonce="${nonce}">
  var initialEndpoint = window.location.href;
  var embeddedSandboxConfig = ${getConfigStringForHtml(embeddedSandboxConfig)};
  new window.EmbeddedSandbox(
    {
      ...embeddedSandboxConfig,
      initialEndpoint,
    }
  );
</script>
`;
    };
  }
});

// node_modules/@apollo/server/dist/esm/plugin/landingPage/default/index.js
var default_exports = {};
__export(default_exports, {
  ApolloServerPluginLandingPageLocalDefault: () => ApolloServerPluginLandingPageLocalDefault,
  ApolloServerPluginLandingPageProductionDefault: () => ApolloServerPluginLandingPageProductionDefault,
  DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION: () => DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION,
  DEFAULT_EMBEDDED_EXPLORER_VERSION: () => DEFAULT_EMBEDDED_EXPLORER_VERSION,
  DEFAULT_EMBEDDED_SANDBOX_VERSION: () => DEFAULT_EMBEDDED_SANDBOX_VERSION
});
function ApolloServerPluginLandingPageLocalDefault(options = {}) {
  const { version: version2, __internal_apolloStudioEnv__, ...rest } = {
    embed: true,
    ...options
  };
  return ApolloServerPluginLandingPageDefault(version2, {
    isProd: false,
    apolloStudioEnv: __internal_apolloStudioEnv__,
    ...rest
  });
}
function ApolloServerPluginLandingPageProductionDefault(options = {}) {
  const { version: version2, __internal_apolloStudioEnv__, ...rest } = options;
  return ApolloServerPluginLandingPageDefault(version2, {
    isProd: true,
    apolloStudioEnv: __internal_apolloStudioEnv__,
    ...rest
  });
}
function encodeConfig(config2) {
  return JSON.stringify(encodeURIComponent(JSON.stringify(config2)));
}
function ApolloServerPluginLandingPageDefault(maybeVersion, config2) {
  const explorerVersion = maybeVersion ?? DEFAULT_EMBEDDED_EXPLORER_VERSION;
  const sandboxVersion = maybeVersion ?? DEFAULT_EMBEDDED_SANDBOX_VERSION;
  const apolloServerLandingPageVersion = maybeVersion ?? DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION;
  const apolloServerVersion = `@apollo/server@${packageVersion}`;
  const scriptSafeList = [
    "https://apollo-server-landing-page.cdn.apollographql.com",
    "https://embeddable-sandbox.cdn.apollographql.com",
    "https://embeddable-explorer.cdn.apollographql.com"
  ].join(" ");
  const styleSafeList = [
    "https://apollo-server-landing-page.cdn.apollographql.com",
    "https://embeddable-sandbox.cdn.apollographql.com",
    "https://embeddable-explorer.cdn.apollographql.com",
    "https://fonts.googleapis.com"
  ].join(" ");
  const iframeSafeList = [
    "https://explorer.embed.apollographql.com",
    "https://sandbox.embed.apollographql.com",
    "https://embed.apollo.local:3000"
  ].join(" ");
  return {
    __internal_installed_implicitly__: false,
    async serverWillStart(server) {
      if (config2.precomputedNonce) {
        server.logger.warn("The `precomputedNonce` landing page configuration option is deprecated. Removing this option is strictly an improvement to Apollo Server's landing page Content Security Policy (CSP) implementation for preventing XSS attacks.");
      }
      return {
        async renderLandingPage() {
          const encodedASLandingPageVersion = encodeURIComponent(apolloServerLandingPageVersion);
          async function html() {
            const nonce = config2.precomputedNonce ?? (0, import_utils20.createHash)("sha256").update(v4_default2()).digest("hex");
            const scriptCsp = `script-src 'self' 'nonce-${nonce}' ${scriptSafeList}`;
            const styleCsp = `style-src 'nonce-${nonce}' ${styleSafeList}`;
            const imageCsp = `img-src https://apollo-server-landing-page.cdn.apollographql.com`;
            const manifestCsp = `manifest-src https://apollo-server-landing-page.cdn.apollographql.com`;
            const frameCsp = `frame-src ${iframeSafeList}`;
            return `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Security-Policy" content="${scriptCsp}; ${styleCsp}; ${imageCsp}; ${manifestCsp}; ${frameCsp}" />
    <link
      rel="icon"
      href="https://apollo-server-landing-page.cdn.apollographql.com/${encodedASLandingPageVersion}/assets/favicon.png"
    />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="preconnect" href="https://fonts.gstatic.com" />
    <link
      href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap"
      rel="stylesheet"
    />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Apollo server landing page" />
    <link
      rel="apple-touch-icon"
      href="https://apollo-server-landing-page.cdn.apollographql.com/${encodedASLandingPageVersion}/assets/favicon.png"
    />
    <link
      rel="manifest"
      href="https://apollo-server-landing-page.cdn.apollographql.com/${encodedASLandingPageVersion}/manifest.json"
    />
    <title>Apollo Server</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="react-root">
      <style nonce=${nonce}>
        body {
          margin: 0;
          overflow-x: hidden;
          overflow-y: hidden;
        }
        .fallback {
          opacity: 0;
          animation: fadeIn 1s 1s;
          animation-iteration-count: 1;
          animation-fill-mode: forwards;
          padding: 1em;
        }
        @keyframes fadeIn {
          0% {opacity:0;}
          100% {opacity:1; }
        }
      </style>
    ${config2.embed ? "graphRef" in config2 && config2.graphRef ? getEmbeddedExplorerHTML(explorerVersion, config2, apolloServerVersion, nonce) : !("graphRef" in config2) ? getEmbeddedSandboxHTML(sandboxVersion, config2, apolloServerVersion, nonce) : getNonEmbeddedLandingPageHTML(apolloServerLandingPageVersion, config2, apolloServerVersion, nonce) : getNonEmbeddedLandingPageHTML(apolloServerLandingPageVersion, config2, apolloServerVersion, nonce)}
    </div>
  </body>
</html>
          `;
          }
          return { html };
        }
      };
    }
  };
}
var import_utils20, getNonEmbeddedLandingPageHTML, DEFAULT_EMBEDDED_EXPLORER_VERSION, DEFAULT_EMBEDDED_SANDBOX_VERSION, DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION;
var init_default = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/landingPage/default/index.js"() {
    init_getEmbeddedHTML();
    init_packageVersion();
    import_utils20 = __toESM(require_dist3(), 1);
    init_esm_node();
    getNonEmbeddedLandingPageHTML = (cdnVersion, config2, apolloServerVersion, nonce) => {
      const encodedConfig = encodeConfig(config2);
      return `
 <div class="fallback">
  <h1>Welcome to Apollo Server</h1>
  <p>The full landing page cannot be loaded; it appears that you might be offline.</p>
</div>
<script nonce="${nonce}">window.landingPage = ${encodedConfig};</script>
<script nonce="${nonce}" src="https://apollo-server-landing-page.cdn.apollographql.com/${encodeURIComponent(cdnVersion)}/static/js/main.js?runtime=${apolloServerVersion}"></script>`;
    };
    DEFAULT_EMBEDDED_EXPLORER_VERSION = "v3";
    DEFAULT_EMBEDDED_SANDBOX_VERSION = "v2";
    DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION = "_latest";
  }
});

// node_modules/@apollo/server/dist/esm/plugin/disableSuggestions/index.js
var disableSuggestions_exports = {};
__export(disableSuggestions_exports, {
  ApolloServerPluginDisableSuggestions: () => ApolloServerPluginDisableSuggestions
});
function ApolloServerPluginDisableSuggestions() {
  return internalPlugin({
    __internal_plugin_id__: "DisableSuggestions",
    __is_disabled_plugin__: false,
    async requestDidStart() {
      return {
        async validationDidStart() {
          return async (validationErrors) => {
            validationErrors?.forEach((error) => {
              error.message = error.message.replace(/ ?Did you mean(.+?)\?$/, "");
            });
          };
        }
      };
    }
  });
}
var init_disableSuggestions = __esm({
  "node_modules/@apollo/server/dist/esm/plugin/disableSuggestions/index.js"() {
    init_internalPlugin();
  }
});

// node_modules/@as-integrations/next/dist/lib/isNextApiRequest.js
var require_isNextApiRequest = __commonJS({
  "node_modules/@as-integrations/next/dist/lib/isNextApiRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isNextApiRequest = void 0;
    var isNextApiRequest = function(req) {
      return "query" in req;
    };
    exports2.isNextApiRequest = isNextApiRequest;
  }
});

// node_modules/@as-integrations/next/dist/lib/getBody.js
var require_getBody = __commonJS({
  "node_modules/@as-integrations/next/dist/lib/getBody.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator2 = exports2 && exports2.__generator || function(thisArg, body) {
      var _5 = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y2, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
      return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op2) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op2[0] && (_5 = 0)), _5) try {
          if (f = 1, y2 && (t = op2[0] & 2 ? y2["return"] : op2[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op2[1])).done) return t;
          if (y2 = 0, t) op2 = [op2[0] & 2, t.value];
          switch (op2[0]) {
            case 0:
            case 1:
              t = op2;
              break;
            case 4:
              _5.label++;
              return { value: op2[1], done: false };
            case 5:
              _5.label++;
              y2 = op2[1];
              op2 = [0];
              continue;
            case 7:
              op2 = _5.ops.pop();
              _5.trys.pop();
              continue;
            default:
              if (!(t = _5.trys, t = t.length > 0 && t[t.length - 1]) && (op2[0] === 6 || op2[0] === 2)) {
                _5 = 0;
                continue;
              }
              if (op2[0] === 3 && (!t || op2[1] > t[0] && op2[1] < t[3])) {
                _5.label = op2[1];
                break;
              }
              if (op2[0] === 6 && _5.label < t[1]) {
                _5.label = t[1];
                t = op2;
                break;
              }
              if (t && _5.label < t[2]) {
                _5.label = t[2];
                _5.ops.push(op2);
                break;
              }
              if (t[2]) _5.ops.pop();
              _5.trys.pop();
              continue;
          }
          op2 = body.call(thisArg, _5);
        } catch (e) {
          op2 = [6, e];
          y2 = 0;
        } finally {
          f = t = 0;
        }
        if (op2[0] & 5) throw op2[1];
        return { value: op2[0] ? op2[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBody = void 0;
    var isNextApiRequest_1 = require_isNextApiRequest();
    var getBody = function(req) {
      return __awaiter2(void 0, void 0, void 0, function() {
        return __generator2(this, function(_a2) {
          if ((0, isNextApiRequest_1.isNextApiRequest)(req)) {
            return [2, req.body];
          }
          return [2, req.headers.get("content-type") === "application/json" ? req.json() : req.text()];
        });
      });
    };
    exports2.getBody = getBody;
  }
});

// node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d, b2) {
  if (typeof b2 !== "function" && b2 !== null)
    throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
  extendStatics(d, b2);
  function __() {
    this.constructor = d;
  }
  d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _5 = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y2, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op2) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op2[0] && (_5 = 0)), _5) try {
      if (f = 1, y2 && (t = op2[0] & 2 ? y2["return"] : op2[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op2[1])).done) return t;
      if (y2 = 0, t) op2 = [op2[0] & 2, t.value];
      switch (op2[0]) {
        case 0:
        case 1:
          t = op2;
          break;
        case 4:
          _5.label++;
          return { value: op2[1], done: false };
        case 5:
          _5.label++;
          y2 = op2[1];
          op2 = [0];
          continue;
        case 7:
          op2 = _5.ops.pop();
          _5.trys.pop();
          continue;
        default:
          if (!(t = _5.trys, t = t.length > 0 && t[t.length - 1]) && (op2[0] === 6 || op2[0] === 2)) {
            _5 = 0;
            continue;
          }
          if (op2[0] === 3 && (!t || op2[1] > t[0] && op2[1] < t[3])) {
            _5.label = op2[1];
            break;
          }
          if (op2[0] === 6 && _5.label < t[1]) {
            _5.label = t[1];
            t = op2;
            break;
          }
          if (t && _5.label < t[2]) {
            _5.label = t[2];
            _5.ops.push(op2);
            break;
          }
          if (t[2]) _5.ops.pop();
          _5.trys.pop();
          continue;
      }
      op2 = body.call(thisArg, _5);
    } catch (e) {
      op2 = [6, e];
      y2 = 0;
    } finally {
      f = t = 0;
    }
    if (op2[0] & 5) throw op2[1];
    return { value: op2[0] ? op2[1] : void 0, done: true };
  }
}
function __exportStar(m2, o) {
  for (var p in m2) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m2, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m2 = s && o[s], i = 0;
  if (m2) return m2.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m2 = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m2) return o;
  var i = m2.call(o), r, ar2 = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar2.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m2 = i["return"])) m2.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar2;
}
function __spread() {
  for (var ar2 = [], i = 0; i < arguments.length; i++)
    ar2 = ar2.concat(__read(arguments[i]));
  return ar2;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il2 = arguments.length; i < il2; i++) s += arguments[i].length;
  for (var r = Array(s), k2 = 0, i = 0; i < il2; i++)
    for (var a = arguments[i], j2 = 0, jl2 = a.length; j2 < jl2; j2++, k2++)
      r[k2] = a[j2];
  return r;
}
function __spreadArray(to2, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar2; i < l; i++) {
    if (ar2 || !(i in from)) {
      if (!ar2) ar2 = Array.prototype.slice.call(from, 0, i);
      ar2[i] = from[i];
    }
  }
  return to2.concat(ar2 || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q2 = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n]) i[n] = function(v) {
      return new Promise(function(a, b2) {
        q2.push([n, v, a, b2]) > 1 || resume(n, v);
      });
    };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q2[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q2[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q2.shift(), q2.length) resume(q2[0][0], q2[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m2 = o[Symbol.asyncIterator], i;
  return m2 ? m2.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw2) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw2 });
  } else {
    cooked.raw = raw2;
  }
  return cooked;
}
function __importStar(mod2) {
  if (mod2 && mod2.__esModule) return mod2;
  var result = {};
  if (mod2 != null) {
    for (var k2 in mod2) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k2)) __createBinding(result, mod2, k2);
  }
  __setModuleDefault(result, mod2);
  return result;
}
function __importDefault(mod2) {
  return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
var extendStatics, __assign, __createBinding, __setModuleDefault;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
        d2.__proto__ = b3;
      } || function(d2, b3) {
        for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
      };
      return extendStatics(d, b2);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m2[k2];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
  }
});

// node_modules/@graphql-tools/utils/cjs/loaders.js
var require_loaders = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/loaders.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@graphql-tools/utils/cjs/helpers.js
var require_helpers = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/helpers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertSome = exports2.isSome = exports2.compareNodes = exports2.nodeToString = exports2.compareStrings = exports2.isValidPath = exports2.isDocumentString = exports2.asArray = void 0;
    var graphql_1 = require_graphql2();
    var asArray2 = (fns) => Array.isArray(fns) ? fns : fns ? [fns] : [];
    exports2.asArray = asArray2;
    var invalidDocRegex = /\.[a-z0-9]+$/i;
    function isDocumentString(str) {
      if (typeof str !== "string") {
        return false;
      }
      if (invalidDocRegex.test(str)) {
        return false;
      }
      try {
        (0, graphql_1.parse)(str);
        return true;
      } catch (e) {
      }
      return false;
    }
    exports2.isDocumentString = isDocumentString;
    var invalidPathRegex = /[‘“!%^<=>`]/;
    function isValidPath(str) {
      return typeof str === "string" && !invalidPathRegex.test(str);
    }
    exports2.isValidPath = isValidPath;
    function compareStrings2(a, b2) {
      if (String(a) < String(b2)) {
        return -1;
      }
      if (String(a) > String(b2)) {
        return 1;
      }
      return 0;
    }
    exports2.compareStrings = compareStrings2;
    function nodeToString2(a) {
      var _a2, _b;
      let name;
      if ("alias" in a) {
        name = (_a2 = a.alias) === null || _a2 === void 0 ? void 0 : _a2.value;
      }
      if (name == null && "name" in a) {
        name = (_b = a.name) === null || _b === void 0 ? void 0 : _b.value;
      }
      if (name == null) {
        name = a.kind;
      }
      return name;
    }
    exports2.nodeToString = nodeToString2;
    function compareNodes2(a, b2, customFn) {
      const aStr = nodeToString2(a);
      const bStr = nodeToString2(b2);
      if (typeof customFn === "function") {
        return customFn(aStr, bStr);
      }
      return compareStrings2(aStr, bStr);
    }
    exports2.compareNodes = compareNodes2;
    function isSome2(input) {
      return input != null;
    }
    exports2.isSome = isSome2;
    function assertSome(input, message = "Value should be something") {
      if (input == null) {
        throw new Error(message);
      }
    }
    exports2.assertSome = assertSome;
  }
});

// node_modules/@graphql-tools/utils/cjs/jsutils.js
var require_jsutils = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/jsutils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hasOwnProperty = exports2.promiseReduce = exports2.isPromise = exports2.isObjectLike = exports2.isIterableObject = void 0;
    function isIterableObject(value) {
      return value != null && typeof value === "object" && Symbol.iterator in value;
    }
    exports2.isIterableObject = isIterableObject;
    function isObjectLike(value) {
      return typeof value === "object" && value !== null;
    }
    exports2.isObjectLike = isObjectLike;
    function isPromise2(value) {
      return isObjectLike(value) && typeof value["then"] === "function";
    }
    exports2.isPromise = isPromise2;
    function promiseReduce(values, callbackFn, initialValue) {
      let accumulator = initialValue;
      for (const value of values) {
        accumulator = isPromise2(accumulator) ? accumulator.then((resolved) => callbackFn(resolved, value)) : callbackFn(accumulator, value);
      }
      return accumulator;
    }
    exports2.promiseReduce = promiseReduce;
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    exports2.hasOwnProperty = hasOwnProperty;
  }
});

// node_modules/@graphql-tools/utils/cjs/errors.js
var require_errors = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/errors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.relocatedError = exports2.createGraphQLError = void 0;
    var graphql_1 = require_graphql2();
    function createGraphQLError(message, options) {
      if (graphql_1.versionInfo.major >= 17) {
        return new graphql_1.GraphQLError(message, options);
      }
      return new graphql_1.GraphQLError(message, options === null || options === void 0 ? void 0 : options.nodes, options === null || options === void 0 ? void 0 : options.source, options === null || options === void 0 ? void 0 : options.positions, options === null || options === void 0 ? void 0 : options.path, options === null || options === void 0 ? void 0 : options.originalError, options === null || options === void 0 ? void 0 : options.extensions);
    }
    exports2.createGraphQLError = createGraphQLError;
    function relocatedError(originalError, path2) {
      return createGraphQLError(originalError.message, {
        nodes: originalError.nodes,
        source: originalError.source,
        positions: originalError.positions,
        path: path2 == null ? originalError.path : path2,
        originalError,
        extensions: originalError.extensions
      });
    }
    exports2.relocatedError = relocatedError;
  }
});

// node_modules/@graphql-tools/utils/cjs/AggregateError.js
var require_AggregateError = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/AggregateError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isAggregateError = exports2.AggregateError = void 0;
    var AggregateErrorImpl2;
    exports2.AggregateError = AggregateErrorImpl2;
    if (typeof AggregateError === "undefined") {
      class AggregateErrorClass extends Error {
        constructor(errors, message = "") {
          super(message);
          this.errors = errors;
          this.name = "AggregateError";
          Error.captureStackTrace(this, AggregateErrorClass);
        }
      }
      exports2.AggregateError = AggregateErrorImpl2 = function(errors, message) {
        return new AggregateErrorClass(errors, message);
      };
    } else {
      exports2.AggregateError = AggregateErrorImpl2 = AggregateError;
    }
    function isAggregateError2(error) {
      return "errors" in error && Array.isArray(error["errors"]);
    }
    exports2.isAggregateError = isAggregateError2;
  }
});

// node_modules/@graphql-tools/utils/cjs/inspect.js
var require_inspect2 = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/inspect.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.inspect = void 0;
    var graphql_1 = require_graphql2();
    var AggregateError_js_1 = require_AggregateError();
    var MAX_RECURSIVE_DEPTH2 = 3;
    function inspect2(value) {
      return formatValue2(value, []);
    }
    exports2.inspect = inspect2;
    function formatValue2(value, seenValues) {
      switch (typeof value) {
        case "string":
          return JSON.stringify(value);
        case "function":
          return value.name ? `[function ${value.name}]` : "[function]";
        case "object":
          return formatObjectValue2(value, seenValues);
        default:
          return String(value);
      }
    }
    function formatError2(value) {
      if (value instanceof graphql_1.GraphQLError) {
        return value.toString();
      }
      return `${value.name}: ${value.message};
 ${value.stack}`;
    }
    function formatObjectValue2(value, previouslySeenValues) {
      if (value === null) {
        return "null";
      }
      if (value instanceof Error) {
        if ((0, AggregateError_js_1.isAggregateError)(value)) {
          return formatError2(value) + "\n" + formatArray2(value.errors, previouslySeenValues);
        }
        return formatError2(value);
      }
      if (previouslySeenValues.includes(value)) {
        return "[Circular]";
      }
      const seenValues = [...previouslySeenValues, value];
      if (isJSONable2(value)) {
        const jsonValue = value.toJSON();
        if (jsonValue !== value) {
          return typeof jsonValue === "string" ? jsonValue : formatValue2(jsonValue, seenValues);
        }
      } else if (Array.isArray(value)) {
        return formatArray2(value, seenValues);
      }
      return formatObject2(value, seenValues);
    }
    function isJSONable2(value) {
      return typeof value.toJSON === "function";
    }
    function formatObject2(object, seenValues) {
      const entries = Object.entries(object);
      if (entries.length === 0) {
        return "{}";
      }
      if (seenValues.length > MAX_RECURSIVE_DEPTH2) {
        return "[" + getObjectTag2(object) + "]";
      }
      const properties = entries.map(([key, value]) => key + ": " + formatValue2(value, seenValues));
      return "{ " + properties.join(", ") + " }";
    }
    function formatArray2(array, seenValues) {
      if (array.length === 0) {
        return "[]";
      }
      if (seenValues.length > MAX_RECURSIVE_DEPTH2) {
        return "[Array]";
      }
      const len = array.length;
      const items = [];
      for (let i = 0; i < len; ++i) {
        items.push(formatValue2(array[i], seenValues));
      }
      return "[" + items.join(", ") + "]";
    }
    function getObjectTag2(object) {
      const tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
      if (tag === "Object" && typeof object.constructor === "function") {
        const name = object.constructor.name;
        if (typeof name === "string" && name !== "") {
          return name;
        }
      }
      return tag;
    }
  }
});

// node_modules/@graphql-tools/utils/cjs/getArgumentValues.js
var require_getArgumentValues = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/getArgumentValues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getArgumentValues = void 0;
    var jsutils_js_1 = require_jsutils();
    var graphql_1 = require_graphql2();
    var errors_js_1 = require_errors();
    var inspect_js_1 = require_inspect2();
    function getArgumentValues(def, node, variableValues = {}) {
      var _a2;
      const coercedValues = {};
      const argumentNodes = (_a2 = node.arguments) !== null && _a2 !== void 0 ? _a2 : [];
      const argNodeMap = argumentNodes.reduce((prev, arg) => ({
        ...prev,
        [arg.name.value]: arg
      }), {});
      for (const { name, type: argType, defaultValue } of def.args) {
        const argumentNode = argNodeMap[name];
        if (!argumentNode) {
          if (defaultValue !== void 0) {
            coercedValues[name] = defaultValue;
          } else if ((0, graphql_1.isNonNullType)(argType)) {
            throw (0, errors_js_1.createGraphQLError)(`Argument "${name}" of required type "${(0, inspect_js_1.inspect)(argType)}" was not provided.`, {
              nodes: [node]
            });
          }
          continue;
        }
        const valueNode = argumentNode.value;
        let isNull = valueNode.kind === graphql_1.Kind.NULL;
        if (valueNode.kind === graphql_1.Kind.VARIABLE) {
          const variableName = valueNode.name.value;
          if (variableValues == null || !(0, jsutils_js_1.hasOwnProperty)(variableValues, variableName)) {
            if (defaultValue !== void 0) {
              coercedValues[name] = defaultValue;
            } else if ((0, graphql_1.isNonNullType)(argType)) {
              throw (0, errors_js_1.createGraphQLError)(`Argument "${name}" of required type "${(0, inspect_js_1.inspect)(argType)}" was provided the variable "$${variableName}" which was not provided a runtime value.`, {
                nodes: [valueNode]
              });
            }
            continue;
          }
          isNull = variableValues[variableName] == null;
        }
        if (isNull && (0, graphql_1.isNonNullType)(argType)) {
          throw (0, errors_js_1.createGraphQLError)(`Argument "${name}" of non-null type "${(0, inspect_js_1.inspect)(argType)}" must not be null.`, {
            nodes: [valueNode]
          });
        }
        const coercedValue = (0, graphql_1.valueFromAST)(valueNode, argType, variableValues);
        if (coercedValue === void 0) {
          throw (0, errors_js_1.createGraphQLError)(`Argument "${name}" has invalid value ${(0, graphql_1.print)(valueNode)}.`, {
            nodes: [valueNode]
          });
        }
        coercedValues[name] = coercedValue;
      }
      return coercedValues;
    }
    exports2.getArgumentValues = getArgumentValues;
  }
});

// node_modules/@graphql-tools/utils/cjs/get-directives.js
var require_get_directives = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/get-directives.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDirective = exports2.getDirectives = exports2.getDirectiveInExtensions = exports2.getDirectivesInExtensions = void 0;
    var getArgumentValues_js_1 = require_getArgumentValues();
    function getDirectivesInExtensions2(node, pathToDirectivesInExtensions = ["directives"]) {
      return pathToDirectivesInExtensions.reduce((acc, pathSegment) => acc == null ? acc : acc[pathSegment], node === null || node === void 0 ? void 0 : node.extensions);
    }
    exports2.getDirectivesInExtensions = getDirectivesInExtensions2;
    function _getDirectiveInExtensions(directivesInExtensions, directiveName) {
      const directiveInExtensions = directivesInExtensions.filter((directiveAnnotation) => directiveAnnotation.name === directiveName);
      if (!directiveInExtensions.length) {
        return void 0;
      }
      return directiveInExtensions.map((directive) => {
        var _a2;
        return (_a2 = directive.args) !== null && _a2 !== void 0 ? _a2 : {};
      });
    }
    function getDirectiveInExtensions(node, directiveName, pathToDirectivesInExtensions = ["directives"]) {
      const directivesInExtensions = pathToDirectivesInExtensions.reduce((acc, pathSegment) => acc == null ? acc : acc[pathSegment], node === null || node === void 0 ? void 0 : node.extensions);
      if (directivesInExtensions === void 0) {
        return void 0;
      }
      if (Array.isArray(directivesInExtensions)) {
        return _getDirectiveInExtensions(directivesInExtensions, directiveName);
      }
      const reformattedDirectivesInExtensions = [];
      for (const [name, argsOrArrayOfArgs] of Object.entries(directivesInExtensions)) {
        if (Array.isArray(argsOrArrayOfArgs)) {
          for (const args of argsOrArrayOfArgs) {
            reformattedDirectivesInExtensions.push({ name, args });
          }
        } else {
          reformattedDirectivesInExtensions.push({ name, args: argsOrArrayOfArgs });
        }
      }
      return _getDirectiveInExtensions(reformattedDirectivesInExtensions, directiveName);
    }
    exports2.getDirectiveInExtensions = getDirectiveInExtensions;
    function getDirectives(schema, node, pathToDirectivesInExtensions = ["directives"]) {
      const directivesInExtensions = getDirectivesInExtensions2(node, pathToDirectivesInExtensions);
      if (directivesInExtensions != null && directivesInExtensions.length > 0) {
        return directivesInExtensions;
      }
      const schemaDirectives = schema && schema.getDirectives ? schema.getDirectives() : [];
      const schemaDirectiveMap = schemaDirectives.reduce((schemaDirectiveMap2, schemaDirective) => {
        schemaDirectiveMap2[schemaDirective.name] = schemaDirective;
        return schemaDirectiveMap2;
      }, {});
      let astNodes = [];
      if (node.astNode) {
        astNodes.push(node.astNode);
      }
      if ("extensionASTNodes" in node && node.extensionASTNodes) {
        astNodes = [...astNodes, ...node.extensionASTNodes];
      }
      const result = [];
      for (const astNode of astNodes) {
        if (astNode.directives) {
          for (const directiveNode of astNode.directives) {
            const schemaDirective = schemaDirectiveMap[directiveNode.name.value];
            if (schemaDirective) {
              result.push({ name: directiveNode.name.value, args: (0, getArgumentValues_js_1.getArgumentValues)(schemaDirective, directiveNode) });
            }
          }
        }
      }
      return result;
    }
    exports2.getDirectives = getDirectives;
    function getDirective(schema, node, directiveName, pathToDirectivesInExtensions = ["directives"]) {
      const directiveInExtensions = getDirectiveInExtensions(node, directiveName, pathToDirectivesInExtensions);
      if (directiveInExtensions != null) {
        return directiveInExtensions;
      }
      const schemaDirective = schema && schema.getDirective ? schema.getDirective(directiveName) : void 0;
      if (schemaDirective == null) {
        return void 0;
      }
      let astNodes = [];
      if (node.astNode) {
        astNodes.push(node.astNode);
      }
      if ("extensionASTNodes" in node && node.extensionASTNodes) {
        astNodes = [...astNodes, ...node.extensionASTNodes];
      }
      const result = [];
      for (const astNode of astNodes) {
        if (astNode.directives) {
          for (const directiveNode of astNode.directives) {
            if (directiveNode.name.value === directiveName) {
              result.push((0, getArgumentValues_js_1.getArgumentValues)(schemaDirective, directiveNode));
            }
          }
        }
      }
      if (!result.length) {
        return void 0;
      }
      return result;
    }
    exports2.getDirective = getDirective;
  }
});

// node_modules/@graphql-tools/utils/cjs/get-fields-with-directives.js
var require_get_fields_with_directives = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/get-fields-with-directives.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getFieldsWithDirectives = void 0;
    var graphql_1 = require_graphql2();
    function getFieldsWithDirectives(documentNode, options = {}) {
      const result = {};
      let selected = ["ObjectTypeDefinition", "ObjectTypeExtension"];
      if (options.includeInputTypes) {
        selected = [...selected, "InputObjectTypeDefinition", "InputObjectTypeExtension"];
      }
      const allTypes = documentNode.definitions.filter((obj) => selected.includes(obj.kind));
      for (const type of allTypes) {
        const typeName = type.name.value;
        if (type.fields == null) {
          continue;
        }
        for (const field of type.fields) {
          if (field.directives && field.directives.length > 0) {
            const fieldName = field.name.value;
            const key = `${typeName}.${fieldName}`;
            const directives = field.directives.map((d) => ({
              name: d.name.value,
              args: (d.arguments || []).reduce((prev, arg) => ({ ...prev, [arg.name.value]: (0, graphql_1.valueFromASTUntyped)(arg.value) }), {})
            }));
            result[key] = directives;
          }
        }
      }
      return result;
    }
    exports2.getFieldsWithDirectives = getFieldsWithDirectives;
  }
});

// node_modules/@graphql-tools/utils/cjs/get-arguments-with-directives.js
var require_get_arguments_with_directives = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/get-arguments-with-directives.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getArgumentsWithDirectives = void 0;
    var graphql_1 = require_graphql2();
    function isTypeWithFields(t) {
      return t.kind === graphql_1.Kind.OBJECT_TYPE_DEFINITION || t.kind === graphql_1.Kind.OBJECT_TYPE_EXTENSION;
    }
    function getArgumentsWithDirectives(documentNode) {
      var _a2;
      const result = {};
      const allTypes = documentNode.definitions.filter(isTypeWithFields);
      for (const type of allTypes) {
        if (type.fields == null) {
          continue;
        }
        for (const field of type.fields) {
          const argsWithDirectives = (_a2 = field.arguments) === null || _a2 === void 0 ? void 0 : _a2.filter((arg) => {
            var _a3;
            return (_a3 = arg.directives) === null || _a3 === void 0 ? void 0 : _a3.length;
          });
          if (!(argsWithDirectives === null || argsWithDirectives === void 0 ? void 0 : argsWithDirectives.length)) {
            continue;
          }
          const typeFieldResult = result[`${type.name.value}.${field.name.value}`] = {};
          for (const arg of argsWithDirectives) {
            const directives = arg.directives.map((d) => ({
              name: d.name.value,
              args: (d.arguments || []).reduce((prev, dArg) => ({ ...prev, [dArg.name.value]: (0, graphql_1.valueFromASTUntyped)(dArg.value) }), {})
            }));
            typeFieldResult[arg.name.value] = directives;
          }
        }
      }
      return result;
    }
    exports2.getArgumentsWithDirectives = getArgumentsWithDirectives;
  }
});

// node_modules/@graphql-tools/utils/cjs/get-implementing-types.js
var require_get_implementing_types = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/get-implementing-types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getImplementingTypes = void 0;
    var graphql_1 = require_graphql2();
    function getImplementingTypes(interfaceName, schema) {
      const allTypesMap = schema.getTypeMap();
      const result = [];
      for (const graphqlTypeName in allTypesMap) {
        const graphqlType = allTypesMap[graphqlTypeName];
        if ((0, graphql_1.isObjectType)(graphqlType)) {
          const allInterfaces = graphqlType.getInterfaces();
          if (allInterfaces.find((int) => int.name === interfaceName)) {
            result.push(graphqlType.name);
          }
        }
      }
      return result;
    }
    exports2.getImplementingTypes = getImplementingTypes;
  }
});

// node_modules/@graphql-tools/utils/cjs/astFromType.js
var require_astFromType = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/astFromType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.astFromType = void 0;
    var graphql_1 = require_graphql2();
    var inspect_js_1 = require_inspect2();
    function astFromType2(type) {
      if ((0, graphql_1.isNonNullType)(type)) {
        const innerType = astFromType2(type.ofType);
        if (innerType.kind === graphql_1.Kind.NON_NULL_TYPE) {
          throw new Error(`Invalid type node ${(0, inspect_js_1.inspect)(type)}. Inner type of non-null type cannot be a non-null type.`);
        }
        return {
          kind: graphql_1.Kind.NON_NULL_TYPE,
          type: innerType
        };
      } else if ((0, graphql_1.isListType)(type)) {
        return {
          kind: graphql_1.Kind.LIST_TYPE,
          type: astFromType2(type.ofType)
        };
      }
      return {
        kind: graphql_1.Kind.NAMED_TYPE,
        name: {
          kind: graphql_1.Kind.NAME,
          value: type.name
        }
      };
    }
    exports2.astFromType = astFromType2;
  }
});

// node_modules/@graphql-tools/utils/cjs/astFromValueUntyped.js
var require_astFromValueUntyped = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/astFromValueUntyped.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.astFromValueUntyped = void 0;
    var graphql_1 = require_graphql2();
    function astFromValueUntyped2(value) {
      if (value === null) {
        return { kind: graphql_1.Kind.NULL };
      }
      if (value === void 0) {
        return null;
      }
      if (Array.isArray(value)) {
        const valuesNodes = [];
        for (const item of value) {
          const itemNode = astFromValueUntyped2(item);
          if (itemNode != null) {
            valuesNodes.push(itemNode);
          }
        }
        return { kind: graphql_1.Kind.LIST, values: valuesNodes };
      }
      if (typeof value === "object") {
        const fieldNodes = [];
        for (const fieldName in value) {
          const fieldValue = value[fieldName];
          const ast = astFromValueUntyped2(fieldValue);
          if (ast) {
            fieldNodes.push({
              kind: graphql_1.Kind.OBJECT_FIELD,
              name: { kind: graphql_1.Kind.NAME, value: fieldName },
              value: ast
            });
          }
        }
        return { kind: graphql_1.Kind.OBJECT, fields: fieldNodes };
      }
      if (typeof value === "boolean") {
        return { kind: graphql_1.Kind.BOOLEAN, value };
      }
      if (typeof value === "number" && isFinite(value)) {
        const stringNum = String(value);
        return integerStringRegExp2.test(stringNum) ? { kind: graphql_1.Kind.INT, value: stringNum } : { kind: graphql_1.Kind.FLOAT, value: stringNum };
      }
      if (typeof value === "string") {
        return { kind: graphql_1.Kind.STRING, value };
      }
      throw new TypeError(`Cannot convert value to AST: ${value}.`);
    }
    exports2.astFromValueUntyped = astFromValueUntyped2;
    var integerStringRegExp2 = /^-?(?:0|[1-9][0-9]*)$/;
  }
});

// node_modules/@graphql-tools/utils/cjs/memoize.js
var require_memoize = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/memoize.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.memoize2of5 = exports2.memoize2of4 = exports2.memoize5 = exports2.memoize4 = exports2.memoize3 = exports2.memoize2 = exports2.memoize1 = void 0;
    function memoize12(fn2) {
      const memoize1cache = /* @__PURE__ */ new WeakMap();
      return function memoized(a1) {
        const cachedValue = memoize1cache.get(a1);
        if (cachedValue === void 0) {
          const newValue = fn2(a1);
          memoize1cache.set(a1, newValue);
          return newValue;
        }
        return cachedValue;
      };
    }
    exports2.memoize1 = memoize12;
    function memoize2(fn2) {
      const memoize2cache = /* @__PURE__ */ new WeakMap();
      return function memoized(a1, a2) {
        let cache2 = memoize2cache.get(a1);
        if (!cache2) {
          cache2 = /* @__PURE__ */ new WeakMap();
          memoize2cache.set(a1, cache2);
          const newValue = fn2(a1, a2);
          cache2.set(a2, newValue);
          return newValue;
        }
        const cachedValue = cache2.get(a2);
        if (cachedValue === void 0) {
          const newValue = fn2(a1, a2);
          cache2.set(a2, newValue);
          return newValue;
        }
        return cachedValue;
      };
    }
    exports2.memoize2 = memoize2;
    function memoize3(fn2) {
      const memoize3Cache = /* @__PURE__ */ new WeakMap();
      return function memoized(a1, a2, a3) {
        let cache2 = memoize3Cache.get(a1);
        if (!cache2) {
          cache2 = /* @__PURE__ */ new WeakMap();
          memoize3Cache.set(a1, cache2);
          const cache32 = /* @__PURE__ */ new WeakMap();
          cache2.set(a2, cache32);
          const newValue = fn2(a1, a2, a3);
          cache32.set(a3, newValue);
          return newValue;
        }
        let cache3 = cache2.get(a2);
        if (!cache3) {
          cache3 = /* @__PURE__ */ new WeakMap();
          cache2.set(a2, cache3);
          const newValue = fn2(a1, a2, a3);
          cache3.set(a3, newValue);
          return newValue;
        }
        const cachedValue = cache3.get(a3);
        if (cachedValue === void 0) {
          const newValue = fn2(a1, a2, a3);
          cache3.set(a3, newValue);
          return newValue;
        }
        return cachedValue;
      };
    }
    exports2.memoize3 = memoize3;
    function memoize4(fn2) {
      const memoize4Cache = /* @__PURE__ */ new WeakMap();
      return function memoized(a1, a2, a3, a4) {
        let cache2 = memoize4Cache.get(a1);
        if (!cache2) {
          cache2 = /* @__PURE__ */ new WeakMap();
          memoize4Cache.set(a1, cache2);
          const cache32 = /* @__PURE__ */ new WeakMap();
          cache2.set(a2, cache32);
          const cache42 = /* @__PURE__ */ new WeakMap();
          cache32.set(a3, cache42);
          const newValue = fn2(a1, a2, a3, a4);
          cache42.set(a4, newValue);
          return newValue;
        }
        let cache3 = cache2.get(a2);
        if (!cache3) {
          cache3 = /* @__PURE__ */ new WeakMap();
          cache2.set(a2, cache3);
          const cache42 = /* @__PURE__ */ new WeakMap();
          cache3.set(a3, cache42);
          const newValue = fn2(a1, a2, a3, a4);
          cache42.set(a4, newValue);
          return newValue;
        }
        const cache4 = cache3.get(a3);
        if (!cache4) {
          const cache42 = /* @__PURE__ */ new WeakMap();
          cache3.set(a3, cache42);
          const newValue = fn2(a1, a2, a3, a4);
          cache42.set(a4, newValue);
          return newValue;
        }
        const cachedValue = cache4.get(a4);
        if (cachedValue === void 0) {
          const newValue = fn2(a1, a2, a3, a4);
          cache4.set(a4, newValue);
          return newValue;
        }
        return cachedValue;
      };
    }
    exports2.memoize4 = memoize4;
    function memoize5(fn2) {
      const memoize5Cache = /* @__PURE__ */ new WeakMap();
      return function memoized(a1, a2, a3, a4, a5) {
        let cache2 = memoize5Cache.get(a1);
        if (!cache2) {
          cache2 = /* @__PURE__ */ new WeakMap();
          memoize5Cache.set(a1, cache2);
          const cache32 = /* @__PURE__ */ new WeakMap();
          cache2.set(a2, cache32);
          const cache42 = /* @__PURE__ */ new WeakMap();
          cache32.set(a3, cache42);
          const cache52 = /* @__PURE__ */ new WeakMap();
          cache42.set(a4, cache52);
          const newValue = fn2(a1, a2, a3, a4, a5);
          cache52.set(a5, newValue);
          return newValue;
        }
        let cache3 = cache2.get(a2);
        if (!cache3) {
          cache3 = /* @__PURE__ */ new WeakMap();
          cache2.set(a2, cache3);
          const cache42 = /* @__PURE__ */ new WeakMap();
          cache3.set(a3, cache42);
          const cache52 = /* @__PURE__ */ new WeakMap();
          cache42.set(a4, cache52);
          const newValue = fn2(a1, a2, a3, a4, a5);
          cache52.set(a5, newValue);
          return newValue;
        }
        let cache4 = cache3.get(a3);
        if (!cache4) {
          cache4 = /* @__PURE__ */ new WeakMap();
          cache3.set(a3, cache4);
          const cache52 = /* @__PURE__ */ new WeakMap();
          cache4.set(a4, cache52);
          const newValue = fn2(a1, a2, a3, a4, a5);
          cache52.set(a5, newValue);
          return newValue;
        }
        let cache5 = cache4.get(a4);
        if (!cache5) {
          cache5 = /* @__PURE__ */ new WeakMap();
          cache4.set(a4, cache5);
          const newValue = fn2(a1, a2, a3, a4, a5);
          cache5.set(a5, newValue);
          return newValue;
        }
        const cachedValue = cache5.get(a5);
        if (cachedValue === void 0) {
          const newValue = fn2(a1, a2, a3, a4, a5);
          cache5.set(a5, newValue);
          return newValue;
        }
        return cachedValue;
      };
    }
    exports2.memoize5 = memoize5;
    function memoize2of4(fn2) {
      const memoize2of4cache = /* @__PURE__ */ new WeakMap();
      return function memoized(a1, a2, a3, a4) {
        let cache2 = memoize2of4cache.get(a1);
        if (!cache2) {
          cache2 = /* @__PURE__ */ new WeakMap();
          memoize2of4cache.set(a1, cache2);
          const newValue = fn2(a1, a2, a3, a4);
          cache2.set(a2, newValue);
          return newValue;
        }
        const cachedValue = cache2.get(a2);
        if (cachedValue === void 0) {
          const newValue = fn2(a1, a2, a3, a4);
          cache2.set(a2, newValue);
          return newValue;
        }
        return cachedValue;
      };
    }
    exports2.memoize2of4 = memoize2of4;
    function memoize2of5(fn2) {
      const memoize2of4cache = /* @__PURE__ */ new WeakMap();
      return function memoized(a1, a2, a3, a4, a5) {
        let cache2 = memoize2of4cache.get(a1);
        if (!cache2) {
          cache2 = /* @__PURE__ */ new WeakMap();
          memoize2of4cache.set(a1, cache2);
          const newValue = fn2(a1, a2, a3, a4, a5);
          cache2.set(a2, newValue);
          return newValue;
        }
        const cachedValue = cache2.get(a2);
        if (cachedValue === void 0) {
          const newValue = fn2(a1, a2, a3, a4, a5);
          cache2.set(a2, newValue);
          return newValue;
        }
        return cachedValue;
      };
    }
    exports2.memoize2of5 = memoize2of5;
  }
});

// node_modules/@graphql-tools/utils/cjs/rootTypes.js
var require_rootTypes = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/rootTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRootTypeMap = exports2.getRootTypes = exports2.getRootTypeNames = exports2.getDefinedRootType = void 0;
    var errors_js_1 = require_errors();
    var memoize_js_1 = require_memoize();
    function getDefinedRootType(schema, operation, nodes) {
      const rootTypeMap = (0, exports2.getRootTypeMap)(schema);
      const rootType = rootTypeMap.get(operation);
      if (rootType == null) {
        throw (0, errors_js_1.createGraphQLError)(`Schema is not configured to execute ${operation} operation.`, {
          nodes
        });
      }
      return rootType;
    }
    exports2.getDefinedRootType = getDefinedRootType;
    exports2.getRootTypeNames = (0, memoize_js_1.memoize1)(function getRootTypeNames3(schema) {
      const rootTypes = (0, exports2.getRootTypes)(schema);
      return new Set([...rootTypes].map((type) => type.name));
    });
    exports2.getRootTypes = (0, memoize_js_1.memoize1)(function getRootTypes3(schema) {
      const rootTypeMap = (0, exports2.getRootTypeMap)(schema);
      return new Set(rootTypeMap.values());
    });
    exports2.getRootTypeMap = (0, memoize_js_1.memoize1)(function getRootTypeMap3(schema) {
      const rootTypeMap = /* @__PURE__ */ new Map();
      const queryType = schema.getQueryType();
      if (queryType) {
        rootTypeMap.set("query", queryType);
      }
      const mutationType = schema.getMutationType();
      if (mutationType) {
        rootTypeMap.set("mutation", mutationType);
      }
      const subscriptionType = schema.getSubscriptionType();
      if (subscriptionType) {
        rootTypeMap.set("subscription", subscriptionType);
      }
      return rootTypeMap;
    });
  }
});

// node_modules/@graphql-tools/utils/cjs/print-schema-with-directives.js
var require_print_schema_with_directives = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/print-schema-with-directives.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeDirectiveNodes = exports2.makeDirectiveNode = exports2.makeDeprecatedDirective = exports2.astFromEnumValue = exports2.astFromInputField = exports2.astFromField = exports2.astFromScalarType = exports2.astFromEnumType = exports2.astFromInputObjectType = exports2.astFromUnionType = exports2.astFromInterfaceType = exports2.astFromObjectType = exports2.astFromArg = exports2.getDeprecatableDirectiveNodes = exports2.getDirectiveNodes = exports2.astFromDirective = exports2.astFromSchema = exports2.printSchemaWithDirectives = exports2.getDocumentNodeFromSchema = void 0;
    var graphql_1 = require_graphql2();
    var astFromType_js_1 = require_astFromType();
    var get_directives_js_1 = require_get_directives();
    var astFromValueUntyped_js_1 = require_astFromValueUntyped();
    var helpers_js_1 = require_helpers();
    var rootTypes_js_1 = require_rootTypes();
    function getDocumentNodeFromSchema2(schema, options = {}) {
      const pathToDirectivesInExtensions = options.pathToDirectivesInExtensions;
      const typesMap = schema.getTypeMap();
      const schemaNode = astFromSchema2(schema, pathToDirectivesInExtensions);
      const definitions = schemaNode != null ? [schemaNode] : [];
      const directives = schema.getDirectives();
      for (const directive of directives) {
        if ((0, graphql_1.isSpecifiedDirective)(directive)) {
          continue;
        }
        definitions.push(astFromDirective2(directive, schema, pathToDirectivesInExtensions));
      }
      for (const typeName in typesMap) {
        const type = typesMap[typeName];
        const isPredefinedScalar = (0, graphql_1.isSpecifiedScalarType)(type);
        const isIntrospection = (0, graphql_1.isIntrospectionType)(type);
        if (isPredefinedScalar || isIntrospection) {
          continue;
        }
        if ((0, graphql_1.isObjectType)(type)) {
          definitions.push(astFromObjectType2(type, schema, pathToDirectivesInExtensions));
        } else if ((0, graphql_1.isInterfaceType)(type)) {
          definitions.push(astFromInterfaceType2(type, schema, pathToDirectivesInExtensions));
        } else if ((0, graphql_1.isUnionType)(type)) {
          definitions.push(astFromUnionType2(type, schema, pathToDirectivesInExtensions));
        } else if ((0, graphql_1.isInputObjectType)(type)) {
          definitions.push(astFromInputObjectType2(type, schema, pathToDirectivesInExtensions));
        } else if ((0, graphql_1.isEnumType)(type)) {
          definitions.push(astFromEnumType2(type, schema, pathToDirectivesInExtensions));
        } else if ((0, graphql_1.isScalarType)(type)) {
          definitions.push(astFromScalarType2(type, schema, pathToDirectivesInExtensions));
        } else {
          throw new Error(`Unknown type ${type}.`);
        }
      }
      return {
        kind: graphql_1.Kind.DOCUMENT,
        definitions
      };
    }
    exports2.getDocumentNodeFromSchema = getDocumentNodeFromSchema2;
    function printSchemaWithDirectives(schema, options = {}) {
      const documentNode = getDocumentNodeFromSchema2(schema, options);
      return (0, graphql_1.print)(documentNode);
    }
    exports2.printSchemaWithDirectives = printSchemaWithDirectives;
    function astFromSchema2(schema, pathToDirectivesInExtensions) {
      var _a2, _b;
      const operationTypeMap = /* @__PURE__ */ new Map([
        ["query", void 0],
        ["mutation", void 0],
        ["subscription", void 0]
      ]);
      const nodes = [];
      if (schema.astNode != null) {
        nodes.push(schema.astNode);
      }
      if (schema.extensionASTNodes != null) {
        for (const extensionASTNode of schema.extensionASTNodes) {
          nodes.push(extensionASTNode);
        }
      }
      for (const node of nodes) {
        if (node.operationTypes) {
          for (const operationTypeDefinitionNode of node.operationTypes) {
            operationTypeMap.set(operationTypeDefinitionNode.operation, operationTypeDefinitionNode);
          }
        }
      }
      const rootTypeMap = (0, rootTypes_js_1.getRootTypeMap)(schema);
      for (const [operationTypeNode, operationTypeDefinitionNode] of operationTypeMap) {
        const rootType = rootTypeMap.get(operationTypeNode);
        if (rootType != null) {
          const rootTypeAST = (0, astFromType_js_1.astFromType)(rootType);
          if (operationTypeDefinitionNode != null) {
            operationTypeDefinitionNode.type = rootTypeAST;
          } else {
            operationTypeMap.set(operationTypeNode, {
              kind: graphql_1.Kind.OPERATION_TYPE_DEFINITION,
              operation: operationTypeNode,
              type: rootTypeAST
            });
          }
        }
      }
      const operationTypes = [...operationTypeMap.values()].filter(helpers_js_1.isSome);
      const directives = getDirectiveNodes2(schema, schema, pathToDirectivesInExtensions);
      if (!operationTypes.length && !directives.length) {
        return null;
      }
      const schemaNode = {
        kind: operationTypes != null ? graphql_1.Kind.SCHEMA_DEFINITION : graphql_1.Kind.SCHEMA_EXTENSION,
        operationTypes,
        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
        directives
      };
      schemaNode.description = ((_b = (_a2 = schema.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : schema.description != null) ? {
        kind: graphql_1.Kind.STRING,
        value: schema.description,
        block: true
      } : void 0;
      return schemaNode;
    }
    exports2.astFromSchema = astFromSchema2;
    function astFromDirective2(directive, schema, pathToDirectivesInExtensions) {
      var _a2, _b, _c2, _d2;
      return {
        kind: graphql_1.Kind.DIRECTIVE_DEFINITION,
        description: (_b = (_a2 = directive.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : directive.description ? {
          kind: graphql_1.Kind.STRING,
          value: directive.description
        } : void 0,
        name: {
          kind: graphql_1.Kind.NAME,
          value: directive.name
        },
        arguments: (_c2 = directive.args) === null || _c2 === void 0 ? void 0 : _c2.map((arg) => astFromArg2(arg, schema, pathToDirectivesInExtensions)),
        repeatable: directive.isRepeatable,
        locations: ((_d2 = directive.locations) === null || _d2 === void 0 ? void 0 : _d2.map((location) => ({
          kind: graphql_1.Kind.NAME,
          value: location
        }))) || []
      };
    }
    exports2.astFromDirective = astFromDirective2;
    function getDirectiveNodes2(entity, schema, pathToDirectivesInExtensions) {
      const directivesInExtensions = (0, get_directives_js_1.getDirectivesInExtensions)(entity, pathToDirectivesInExtensions);
      let nodes = [];
      if (entity.astNode != null) {
        nodes.push(entity.astNode);
      }
      if ("extensionASTNodes" in entity && entity.extensionASTNodes != null) {
        nodes = nodes.concat(entity.extensionASTNodes);
      }
      let directives;
      if (directivesInExtensions != null) {
        directives = makeDirectiveNodes2(schema, directivesInExtensions);
      } else {
        directives = [];
        for (const node of nodes) {
          if (node.directives) {
            directives.push(...node.directives);
          }
        }
      }
      return directives;
    }
    exports2.getDirectiveNodes = getDirectiveNodes2;
    function getDeprecatableDirectiveNodes2(entity, schema, pathToDirectivesInExtensions) {
      var _a2, _b;
      let directiveNodesBesidesDeprecated = [];
      let deprecatedDirectiveNode = null;
      const directivesInExtensions = (0, get_directives_js_1.getDirectivesInExtensions)(entity, pathToDirectivesInExtensions);
      let directives;
      if (directivesInExtensions != null) {
        directives = makeDirectiveNodes2(schema, directivesInExtensions);
      } else {
        directives = (_a2 = entity.astNode) === null || _a2 === void 0 ? void 0 : _a2.directives;
      }
      if (directives != null) {
        directiveNodesBesidesDeprecated = directives.filter((directive) => directive.name.value !== "deprecated");
        if (entity.deprecationReason != null) {
          deprecatedDirectiveNode = (_b = directives.filter((directive) => directive.name.value === "deprecated")) === null || _b === void 0 ? void 0 : _b[0];
        }
      }
      if (entity.deprecationReason != null && deprecatedDirectiveNode == null) {
        deprecatedDirectiveNode = makeDeprecatedDirective2(entity.deprecationReason);
      }
      return deprecatedDirectiveNode == null ? directiveNodesBesidesDeprecated : [deprecatedDirectiveNode].concat(directiveNodesBesidesDeprecated);
    }
    exports2.getDeprecatableDirectiveNodes = getDeprecatableDirectiveNodes2;
    function astFromArg2(arg, schema, pathToDirectivesInExtensions) {
      var _a2, _b, _c2;
      return {
        kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
        description: (_b = (_a2 = arg.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : arg.description ? {
          kind: graphql_1.Kind.STRING,
          value: arg.description,
          block: true
        } : void 0,
        name: {
          kind: graphql_1.Kind.NAME,
          value: arg.name
        },
        type: (0, astFromType_js_1.astFromType)(arg.type),
        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
        defaultValue: arg.defaultValue !== void 0 ? (_c2 = (0, graphql_1.astFromValue)(arg.defaultValue, arg.type)) !== null && _c2 !== void 0 ? _c2 : void 0 : void 0,
        directives: getDeprecatableDirectiveNodes2(arg, schema, pathToDirectivesInExtensions)
      };
    }
    exports2.astFromArg = astFromArg2;
    function astFromObjectType2(type, schema, pathToDirectivesInExtensions) {
      var _a2, _b;
      return {
        kind: graphql_1.Kind.OBJECT_TYPE_DEFINITION,
        description: (_b = (_a2 = type.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type.description ? {
          kind: graphql_1.Kind.STRING,
          value: type.description,
          block: true
        } : void 0,
        name: {
          kind: graphql_1.Kind.NAME,
          value: type.name
        },
        fields: Object.values(type.getFields()).map((field) => astFromField2(field, schema, pathToDirectivesInExtensions)),
        interfaces: Object.values(type.getInterfaces()).map((iFace) => (0, astFromType_js_1.astFromType)(iFace)),
        directives: getDirectiveNodes2(type, schema, pathToDirectivesInExtensions)
      };
    }
    exports2.astFromObjectType = astFromObjectType2;
    function astFromInterfaceType2(type, schema, pathToDirectivesInExtensions) {
      var _a2, _b;
      const node = {
        kind: graphql_1.Kind.INTERFACE_TYPE_DEFINITION,
        description: (_b = (_a2 = type.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type.description ? {
          kind: graphql_1.Kind.STRING,
          value: type.description,
          block: true
        } : void 0,
        name: {
          kind: graphql_1.Kind.NAME,
          value: type.name
        },
        fields: Object.values(type.getFields()).map((field) => astFromField2(field, schema, pathToDirectivesInExtensions)),
        directives: getDirectiveNodes2(type, schema, pathToDirectivesInExtensions)
      };
      if ("getInterfaces" in type) {
        node.interfaces = Object.values(type.getInterfaces()).map((iFace) => (0, astFromType_js_1.astFromType)(iFace));
      }
      return node;
    }
    exports2.astFromInterfaceType = astFromInterfaceType2;
    function astFromUnionType2(type, schema, pathToDirectivesInExtensions) {
      var _a2, _b;
      return {
        kind: graphql_1.Kind.UNION_TYPE_DEFINITION,
        description: (_b = (_a2 = type.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type.description ? {
          kind: graphql_1.Kind.STRING,
          value: type.description,
          block: true
        } : void 0,
        name: {
          kind: graphql_1.Kind.NAME,
          value: type.name
        },
        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
        directives: getDirectiveNodes2(type, schema, pathToDirectivesInExtensions),
        types: type.getTypes().map((type2) => (0, astFromType_js_1.astFromType)(type2))
      };
    }
    exports2.astFromUnionType = astFromUnionType2;
    function astFromInputObjectType2(type, schema, pathToDirectivesInExtensions) {
      var _a2, _b;
      return {
        kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,
        description: (_b = (_a2 = type.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type.description ? {
          kind: graphql_1.Kind.STRING,
          value: type.description,
          block: true
        } : void 0,
        name: {
          kind: graphql_1.Kind.NAME,
          value: type.name
        },
        fields: Object.values(type.getFields()).map((field) => astFromInputField2(field, schema, pathToDirectivesInExtensions)),
        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
        directives: getDirectiveNodes2(type, schema, pathToDirectivesInExtensions)
      };
    }
    exports2.astFromInputObjectType = astFromInputObjectType2;
    function astFromEnumType2(type, schema, pathToDirectivesInExtensions) {
      var _a2, _b;
      return {
        kind: graphql_1.Kind.ENUM_TYPE_DEFINITION,
        description: (_b = (_a2 = type.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type.description ? {
          kind: graphql_1.Kind.STRING,
          value: type.description,
          block: true
        } : void 0,
        name: {
          kind: graphql_1.Kind.NAME,
          value: type.name
        },
        values: Object.values(type.getValues()).map((value) => astFromEnumValue2(value, schema, pathToDirectivesInExtensions)),
        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
        directives: getDirectiveNodes2(type, schema, pathToDirectivesInExtensions)
      };
    }
    exports2.astFromEnumType = astFromEnumType2;
    function astFromScalarType2(type, schema, pathToDirectivesInExtensions) {
      var _a2, _b, _c2;
      const directivesInExtensions = (0, get_directives_js_1.getDirectivesInExtensions)(type, pathToDirectivesInExtensions);
      const directives = directivesInExtensions ? makeDirectiveNodes2(schema, directivesInExtensions) : ((_a2 = type.astNode) === null || _a2 === void 0 ? void 0 : _a2.directives) || [];
      const specifiedByValue = type["specifiedByUrl"] || type["specifiedByURL"];
      if (specifiedByValue && !directives.some((directiveNode) => directiveNode.name.value === "specifiedBy")) {
        const specifiedByArgs = {
          url: specifiedByValue
        };
        directives.push(makeDirectiveNode2("specifiedBy", specifiedByArgs));
      }
      return {
        kind: graphql_1.Kind.SCALAR_TYPE_DEFINITION,
        description: (_c2 = (_b = type.astNode) === null || _b === void 0 ? void 0 : _b.description) !== null && _c2 !== void 0 ? _c2 : type.description ? {
          kind: graphql_1.Kind.STRING,
          value: type.description,
          block: true
        } : void 0,
        name: {
          kind: graphql_1.Kind.NAME,
          value: type.name
        },
        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
        directives
      };
    }
    exports2.astFromScalarType = astFromScalarType2;
    function astFromField2(field, schema, pathToDirectivesInExtensions) {
      var _a2, _b;
      return {
        kind: graphql_1.Kind.FIELD_DEFINITION,
        description: (_b = (_a2 = field.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : field.description ? {
          kind: graphql_1.Kind.STRING,
          value: field.description,
          block: true
        } : void 0,
        name: {
          kind: graphql_1.Kind.NAME,
          value: field.name
        },
        arguments: field.args.map((arg) => astFromArg2(arg, schema, pathToDirectivesInExtensions)),
        type: (0, astFromType_js_1.astFromType)(field.type),
        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
        directives: getDeprecatableDirectiveNodes2(field, schema, pathToDirectivesInExtensions)
      };
    }
    exports2.astFromField = astFromField2;
    function astFromInputField2(field, schema, pathToDirectivesInExtensions) {
      var _a2, _b, _c2;
      return {
        kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
        description: (_b = (_a2 = field.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : field.description ? {
          kind: graphql_1.Kind.STRING,
          value: field.description,
          block: true
        } : void 0,
        name: {
          kind: graphql_1.Kind.NAME,
          value: field.name
        },
        type: (0, astFromType_js_1.astFromType)(field.type),
        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
        directives: getDeprecatableDirectiveNodes2(field, schema, pathToDirectivesInExtensions),
        defaultValue: (_c2 = (0, graphql_1.astFromValue)(field.defaultValue, field.type)) !== null && _c2 !== void 0 ? _c2 : void 0
      };
    }
    exports2.astFromInputField = astFromInputField2;
    function astFromEnumValue2(value, schema, pathToDirectivesInExtensions) {
      var _a2, _b;
      return {
        kind: graphql_1.Kind.ENUM_VALUE_DEFINITION,
        description: (_b = (_a2 = value.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : value.description ? {
          kind: graphql_1.Kind.STRING,
          value: value.description,
          block: true
        } : void 0,
        name: {
          kind: graphql_1.Kind.NAME,
          value: value.name
        },
        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
        directives: getDeprecatableDirectiveNodes2(value, schema, pathToDirectivesInExtensions)
      };
    }
    exports2.astFromEnumValue = astFromEnumValue2;
    function makeDeprecatedDirective2(deprecationReason) {
      return makeDirectiveNode2("deprecated", { reason: deprecationReason }, graphql_1.GraphQLDeprecatedDirective);
    }
    exports2.makeDeprecatedDirective = makeDeprecatedDirective2;
    function makeDirectiveNode2(name, args, directive) {
      const directiveArguments = [];
      if (directive != null) {
        for (const arg of directive.args) {
          const argName = arg.name;
          const argValue = args[argName];
          if (argValue !== void 0) {
            const value = (0, graphql_1.astFromValue)(argValue, arg.type);
            if (value) {
              directiveArguments.push({
                kind: graphql_1.Kind.ARGUMENT,
                name: {
                  kind: graphql_1.Kind.NAME,
                  value: argName
                },
                value
              });
            }
          }
        }
      } else {
        for (const argName in args) {
          const argValue = args[argName];
          const value = (0, astFromValueUntyped_js_1.astFromValueUntyped)(argValue);
          if (value) {
            directiveArguments.push({
              kind: graphql_1.Kind.ARGUMENT,
              name: {
                kind: graphql_1.Kind.NAME,
                value: argName
              },
              value
            });
          }
        }
      }
      return {
        kind: graphql_1.Kind.DIRECTIVE,
        name: {
          kind: graphql_1.Kind.NAME,
          value: name
        },
        arguments: directiveArguments
      };
    }
    exports2.makeDirectiveNode = makeDirectiveNode2;
    function makeDirectiveNodes2(schema, directiveValues) {
      const directiveNodes = [];
      for (const directiveName in directiveValues) {
        const arrayOrSingleValue = directiveValues[directiveName];
        const directive = schema === null || schema === void 0 ? void 0 : schema.getDirective(directiveName);
        if (Array.isArray(arrayOrSingleValue)) {
          for (const value of arrayOrSingleValue) {
            directiveNodes.push(makeDirectiveNode2(directiveName, value, directive));
          }
        } else {
          directiveNodes.push(makeDirectiveNode2(directiveName, arrayOrSingleValue, directive));
        }
      }
      return directiveNodes;
    }
    exports2.makeDirectiveNodes = makeDirectiveNodes2;
  }
});

// node_modules/@graphql-tools/utils/cjs/validate-documents.js
var require_validate_documents = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/validate-documents.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createDefaultRules = exports2.validateGraphQlDocuments = void 0;
    var graphql_1 = require_graphql2();
    function validateGraphQlDocuments(schema, documents, rules = createDefaultRules()) {
      var _a2;
      const definitionMap = /* @__PURE__ */ new Map();
      for (const document of documents) {
        for (const docDefinition of document.definitions) {
          if ("name" in docDefinition && docDefinition.name) {
            definitionMap.set(`${docDefinition.kind}_${docDefinition.name.value}`, docDefinition);
          } else {
            definitionMap.set(Date.now().toString(), docDefinition);
          }
        }
      }
      const fullAST = {
        kind: graphql_1.Kind.DOCUMENT,
        definitions: Array.from(definitionMap.values())
      };
      const errors = (0, graphql_1.validate)(schema, fullAST, rules);
      for (const error of errors) {
        error.stack = error.message;
        if (error.locations) {
          for (const location of error.locations) {
            error.stack += `
    at ${(_a2 = error.source) === null || _a2 === void 0 ? void 0 : _a2.name}:${location.line}:${location.column}`;
          }
        }
      }
      return errors;
    }
    exports2.validateGraphQlDocuments = validateGraphQlDocuments;
    function createDefaultRules() {
      let ignored = ["NoUnusedFragmentsRule", "NoUnusedVariablesRule", "KnownDirectivesRule"];
      if (graphql_1.versionInfo.major < 15) {
        ignored = ignored.map((rule) => rule.replace(/Rule$/, ""));
      }
      return graphql_1.specifiedRules.filter((f) => !ignored.includes(f.name));
    }
    exports2.createDefaultRules = createDefaultRules;
  }
});

// node_modules/@graphql-tools/utils/cjs/parse-graphql-json.js
var require_parse_graphql_json = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/parse-graphql-json.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseGraphQLJSON = void 0;
    var graphql_1 = require_graphql2();
    function stripBOM(content) {
      content = content.toString();
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    function parseBOM(content) {
      return JSON.parse(stripBOM(content));
    }
    function parseGraphQLJSON(location, jsonContent, options) {
      let parsedJson = parseBOM(jsonContent);
      if (parsedJson.data) {
        parsedJson = parsedJson.data;
      }
      if (parsedJson.kind === "Document") {
        return {
          location,
          document: parsedJson
        };
      } else if (parsedJson.__schema) {
        const schema = (0, graphql_1.buildClientSchema)(parsedJson, options);
        return {
          location,
          schema
        };
      } else if (typeof parsedJson === "string") {
        return {
          location,
          rawSDL: parsedJson
        };
      }
      throw new Error(`Not valid JSON content`);
    }
    exports2.parseGraphQLJSON = parseGraphQLJSON;
  }
});

// node_modules/@graphql-tools/utils/cjs/comments.js
var require_comments = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/comments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBlockStringIndentation = exports2.dedentBlockStringValue = exports2.getLeadingCommentBlock = exports2.getComment = exports2.getDescription = exports2.printWithComments = exports2.printComment = exports2.pushComment = exports2.collectComment = exports2.resetComments = void 0;
    var graphql_1 = require_graphql2();
    var MAX_LINE_LENGTH2 = 80;
    var commentsRegistry2 = {};
    function resetComments2() {
      commentsRegistry2 = {};
    }
    exports2.resetComments = resetComments2;
    function collectComment2(node) {
      var _a2;
      const entityName = (_a2 = node.name) === null || _a2 === void 0 ? void 0 : _a2.value;
      if (entityName == null) {
        return;
      }
      pushComment2(node, entityName);
      switch (node.kind) {
        case "EnumTypeDefinition":
          if (node.values) {
            for (const value of node.values) {
              pushComment2(value, entityName, value.name.value);
            }
          }
          break;
        case "ObjectTypeDefinition":
        case "InputObjectTypeDefinition":
        case "InterfaceTypeDefinition":
          if (node.fields) {
            for (const field of node.fields) {
              pushComment2(field, entityName, field.name.value);
              if (isFieldDefinitionNode2(field) && field.arguments) {
                for (const arg of field.arguments) {
                  pushComment2(arg, entityName, field.name.value, arg.name.value);
                }
              }
            }
          }
          break;
      }
    }
    exports2.collectComment = collectComment2;
    function pushComment2(node, entity, field, argument) {
      const comment = getComment2(node);
      if (typeof comment !== "string" || comment.length === 0) {
        return;
      }
      const keys = [entity];
      if (field) {
        keys.push(field);
        if (argument) {
          keys.push(argument);
        }
      }
      const path2 = keys.join(".");
      if (!commentsRegistry2[path2]) {
        commentsRegistry2[path2] = [];
      }
      commentsRegistry2[path2].push(comment);
    }
    exports2.pushComment = pushComment2;
    function printComment2(comment) {
      return "\n# " + comment.replace(/\n/g, "\n# ");
    }
    exports2.printComment = printComment2;
    function join3(maybeArray, separator) {
      return maybeArray ? maybeArray.filter((x2) => x2).join(separator || "") : "";
    }
    function hasMultilineItems2(maybeArray) {
      var _a2;
      return (_a2 = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some((str) => str.includes("\n"))) !== null && _a2 !== void 0 ? _a2 : false;
    }
    function addDescription2(cb) {
      return (node, _key, _parent, path2, ancestors) => {
        var _a2;
        const keys = [];
        const parent = path2.reduce((prev, key2) => {
          if (["fields", "arguments", "values"].includes(key2) && prev.name) {
            keys.push(prev.name.value);
          }
          return prev[key2];
        }, ancestors[0]);
        const key = [...keys, (_a2 = parent === null || parent === void 0 ? void 0 : parent.name) === null || _a2 === void 0 ? void 0 : _a2.value].filter(Boolean).join(".");
        const items = [];
        if (node.kind.includes("Definition") && commentsRegistry2[key]) {
          items.push(...commentsRegistry2[key]);
        }
        return join3([...items.map(printComment2), node.description, cb(node, _key, _parent, path2, ancestors)], "\n");
      };
    }
    function indent2(maybeString) {
      return maybeString && `  ${maybeString.replace(/\n/g, "\n  ")}`;
    }
    function block2(array) {
      return array && array.length !== 0 ? `{
${indent2(join3(array, "\n"))}
}` : "";
    }
    function wrap2(start, maybeString, end) {
      return maybeString ? start + maybeString + (end || "") : "";
    }
    function printBlockString2(value, isDescription = false) {
      const escaped = value.replace(/"""/g, '\\"""');
      return (value[0] === " " || value[0] === "	") && value.indexOf("\n") === -1 ? `"""${escaped.replace(/"$/, '"\n')}"""` : `"""
${isDescription ? escaped : indent2(escaped)}
"""`;
    }
    var printDocASTReducer2 = {
      Name: { leave: (node) => node.value },
      Variable: { leave: (node) => "$" + node.name },
      // Document
      Document: {
        leave: (node) => join3(node.definitions, "\n\n")
      },
      OperationDefinition: {
        leave: (node) => {
          const varDefs = wrap2("(", join3(node.variableDefinitions, ", "), ")");
          const prefix = join3([node.operation, join3([node.name, varDefs]), join3(node.directives, " ")], " ");
          return prefix + " " + node.selectionSet;
        }
      },
      VariableDefinition: {
        leave: ({ variable, type, defaultValue, directives }) => variable + ": " + type + wrap2(" = ", defaultValue) + wrap2(" ", join3(directives, " "))
      },
      SelectionSet: { leave: ({ selections }) => block2(selections) },
      Field: {
        leave({ alias, name, arguments: args, directives, selectionSet }) {
          const prefix = wrap2("", alias, ": ") + name;
          let argsLine = prefix + wrap2("(", join3(args, ", "), ")");
          if (argsLine.length > MAX_LINE_LENGTH2) {
            argsLine = prefix + wrap2("(\n", indent2(join3(args, "\n")), "\n)");
          }
          return join3([argsLine, join3(directives, " "), selectionSet], " ");
        }
      },
      Argument: { leave: ({ name, value }) => name + ": " + value },
      // Fragments
      FragmentSpread: {
        leave: ({ name, directives }) => "..." + name + wrap2(" ", join3(directives, " "))
      },
      InlineFragment: {
        leave: ({ typeCondition, directives, selectionSet }) => join3(["...", wrap2("on ", typeCondition), join3(directives, " "), selectionSet], " ")
      },
      FragmentDefinition: {
        leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => (
          // Note: fragment variable definitions are experimental and may be changed
          // or removed in the future.
          `fragment ${name}${wrap2("(", join3(variableDefinitions, ", "), ")")} on ${typeCondition} ${wrap2("", join3(directives, " "), " ")}` + selectionSet
        )
      },
      // Value
      IntValue: { leave: ({ value }) => value },
      FloatValue: { leave: ({ value }) => value },
      StringValue: {
        leave: ({ value, block: isBlockString }) => {
          if (isBlockString) {
            return printBlockString2(value);
          }
          return JSON.stringify(value);
        }
      },
      BooleanValue: { leave: ({ value }) => value ? "true" : "false" },
      NullValue: { leave: () => "null" },
      EnumValue: { leave: ({ value }) => value },
      ListValue: { leave: ({ values }) => "[" + join3(values, ", ") + "]" },
      ObjectValue: { leave: ({ fields }) => "{" + join3(fields, ", ") + "}" },
      ObjectField: { leave: ({ name, value }) => name + ": " + value },
      // Directive
      Directive: {
        leave: ({ name, arguments: args }) => "@" + name + wrap2("(", join3(args, ", "), ")")
      },
      // Type
      NamedType: { leave: ({ name }) => name },
      ListType: { leave: ({ type }) => "[" + type + "]" },
      NonNullType: { leave: ({ type }) => type + "!" },
      // Type System Definitions
      SchemaDefinition: {
        leave: ({ directives, operationTypes }) => join3(["schema", join3(directives, " "), block2(operationTypes)], " ")
      },
      OperationTypeDefinition: {
        leave: ({ operation, type }) => operation + ": " + type
      },
      ScalarTypeDefinition: {
        leave: ({ name, directives }) => join3(["scalar", name, join3(directives, " ")], " ")
      },
      ObjectTypeDefinition: {
        leave: ({ name, interfaces, directives, fields }) => join3(["type", name, wrap2("implements ", join3(interfaces, " & ")), join3(directives, " "), block2(fields)], " ")
      },
      FieldDefinition: {
        leave: ({ name, arguments: args, type, directives }) => name + (hasMultilineItems2(args) ? wrap2("(\n", indent2(join3(args, "\n")), "\n)") : wrap2("(", join3(args, ", "), ")")) + ": " + type + wrap2(" ", join3(directives, " "))
      },
      InputValueDefinition: {
        leave: ({ name, type, defaultValue, directives }) => join3([name + ": " + type, wrap2("= ", defaultValue), join3(directives, " ")], " ")
      },
      InterfaceTypeDefinition: {
        leave: ({ name, interfaces, directives, fields }) => join3(["interface", name, wrap2("implements ", join3(interfaces, " & ")), join3(directives, " "), block2(fields)], " ")
      },
      UnionTypeDefinition: {
        leave: ({ name, directives, types }) => join3(["union", name, join3(directives, " "), wrap2("= ", join3(types, " | "))], " ")
      },
      EnumTypeDefinition: {
        leave: ({ name, directives, values }) => join3(["enum", name, join3(directives, " "), block2(values)], " ")
      },
      EnumValueDefinition: {
        leave: ({ name, directives }) => join3([name, join3(directives, " ")], " ")
      },
      InputObjectTypeDefinition: {
        leave: ({ name, directives, fields }) => join3(["input", name, join3(directives, " "), block2(fields)], " ")
      },
      DirectiveDefinition: {
        leave: ({ name, arguments: args, repeatable, locations }) => "directive @" + name + (hasMultilineItems2(args) ? wrap2("(\n", indent2(join3(args, "\n")), "\n)") : wrap2("(", join3(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join3(locations, " | ")
      },
      SchemaExtension: {
        leave: ({ directives, operationTypes }) => join3(["extend schema", join3(directives, " "), block2(operationTypes)], " ")
      },
      ScalarTypeExtension: {
        leave: ({ name, directives }) => join3(["extend scalar", name, join3(directives, " ")], " ")
      },
      ObjectTypeExtension: {
        leave: ({ name, interfaces, directives, fields }) => join3(["extend type", name, wrap2("implements ", join3(interfaces, " & ")), join3(directives, " "), block2(fields)], " ")
      },
      InterfaceTypeExtension: {
        leave: ({ name, interfaces, directives, fields }) => join3(["extend interface", name, wrap2("implements ", join3(interfaces, " & ")), join3(directives, " "), block2(fields)], " ")
      },
      UnionTypeExtension: {
        leave: ({ name, directives, types }) => join3(["extend union", name, join3(directives, " "), wrap2("= ", join3(types, " | "))], " ")
      },
      EnumTypeExtension: {
        leave: ({ name, directives, values }) => join3(["extend enum", name, join3(directives, " "), block2(values)], " ")
      },
      InputObjectTypeExtension: {
        leave: ({ name, directives, fields }) => join3(["extend input", name, join3(directives, " "), block2(fields)], " ")
      }
    };
    var printDocASTReducerWithComments2 = Object.keys(printDocASTReducer2).reduce((prev, key) => ({
      ...prev,
      [key]: {
        leave: addDescription2(printDocASTReducer2[key].leave)
      }
    }), {});
    function printWithComments2(ast) {
      return (0, graphql_1.visit)(ast, printDocASTReducerWithComments2);
    }
    exports2.printWithComments = printWithComments2;
    function isFieldDefinitionNode2(node) {
      return node.kind === "FieldDefinition";
    }
    function getDescription(node, options) {
      if (node.description != null) {
        return node.description.value;
      }
      if (options === null || options === void 0 ? void 0 : options.commentDescriptions) {
        return getComment2(node);
      }
    }
    exports2.getDescription = getDescription;
    function getComment2(node) {
      const rawValue = getLeadingCommentBlock2(node);
      if (rawValue !== void 0) {
        return dedentBlockStringValue2(`
${rawValue}`);
      }
    }
    exports2.getComment = getComment2;
    function getLeadingCommentBlock2(node) {
      const loc = node.loc;
      if (!loc) {
        return;
      }
      const comments = [];
      let token = loc.startToken.prev;
      while (token != null && token.kind === graphql_1.TokenKind.COMMENT && token.next != null && token.prev != null && token.line + 1 === token.next.line && token.line !== token.prev.line) {
        const value = String(token.value);
        comments.push(value);
        token = token.prev;
      }
      return comments.length > 0 ? comments.reverse().join("\n") : void 0;
    }
    exports2.getLeadingCommentBlock = getLeadingCommentBlock2;
    function dedentBlockStringValue2(rawString) {
      const lines = rawString.split(/\r\n|[\n\r]/g);
      const commonIndent = getBlockStringIndentation2(lines);
      if (commonIndent !== 0) {
        for (let i = 1; i < lines.length; i++) {
          lines[i] = lines[i].slice(commonIndent);
        }
      }
      while (lines.length > 0 && isBlank2(lines[0])) {
        lines.shift();
      }
      while (lines.length > 0 && isBlank2(lines[lines.length - 1])) {
        lines.pop();
      }
      return lines.join("\n");
    }
    exports2.dedentBlockStringValue = dedentBlockStringValue2;
    function getBlockStringIndentation2(lines) {
      let commonIndent = null;
      for (let i = 1; i < lines.length; i++) {
        const line = lines[i];
        const indent3 = leadingWhitespace2(line);
        if (indent3 === line.length) {
          continue;
        }
        if (commonIndent === null || indent3 < commonIndent) {
          commonIndent = indent3;
          if (commonIndent === 0) {
            break;
          }
        }
      }
      return commonIndent === null ? 0 : commonIndent;
    }
    exports2.getBlockStringIndentation = getBlockStringIndentation2;
    function leadingWhitespace2(str) {
      let i = 0;
      while (i < str.length && (str[i] === " " || str[i] === "	")) {
        i++;
      }
      return i;
    }
    function isBlank2(str) {
      return leadingWhitespace2(str) === str.length;
    }
  }
});

// node_modules/@graphql-tools/utils/cjs/parse-graphql-sdl.js
var require_parse_graphql_sdl = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/parse-graphql-sdl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isDescribable = exports2.transformCommentsToDescriptions = exports2.parseGraphQLSDL = void 0;
    var graphql_1 = require_graphql2();
    var comments_js_1 = require_comments();
    function parseGraphQLSDL(location, rawSDL, options = {}) {
      let document;
      try {
        if (options.commentDescriptions && rawSDL.includes("#")) {
          document = transformCommentsToDescriptions(rawSDL, options);
          if (options.noLocation) {
            document = (0, graphql_1.parse)((0, graphql_1.print)(document), options);
          }
        } else {
          document = (0, graphql_1.parse)(new graphql_1.Source(rawSDL, location), options);
        }
      } catch (e) {
        if (e.message.includes("EOF") && rawSDL.replace(/(\#[^*]*)/g, "").trim() === "") {
          document = {
            kind: graphql_1.Kind.DOCUMENT,
            definitions: []
          };
        } else {
          throw e;
        }
      }
      return {
        location,
        document
      };
    }
    exports2.parseGraphQLSDL = parseGraphQLSDL;
    function transformCommentsToDescriptions(sourceSdl, options = {}) {
      const parsedDoc = (0, graphql_1.parse)(sourceSdl, {
        ...options,
        noLocation: false
      });
      const modifiedDoc = (0, graphql_1.visit)(parsedDoc, {
        leave: (node) => {
          if (isDescribable(node)) {
            const rawValue = (0, comments_js_1.getLeadingCommentBlock)(node);
            if (rawValue !== void 0) {
              const commentsBlock = (0, comments_js_1.dedentBlockStringValue)("\n" + rawValue);
              const isBlock = commentsBlock.includes("\n");
              if (!node.description) {
                return {
                  ...node,
                  description: {
                    kind: graphql_1.Kind.STRING,
                    value: commentsBlock,
                    block: isBlock
                  }
                };
              } else {
                return {
                  ...node,
                  description: {
                    ...node.description,
                    value: node.description.value + "\n" + commentsBlock,
                    block: true
                  }
                };
              }
            }
          }
        }
      });
      return modifiedDoc;
    }
    exports2.transformCommentsToDescriptions = transformCommentsToDescriptions;
    function isDescribable(node) {
      return (0, graphql_1.isTypeSystemDefinitionNode)(node) || node.kind === graphql_1.Kind.FIELD_DEFINITION || node.kind === graphql_1.Kind.INPUT_VALUE_DEFINITION || node.kind === graphql_1.Kind.ENUM_VALUE_DEFINITION;
    }
    exports2.isDescribable = isDescribable;
  }
});

// node_modules/@graphql-tools/utils/cjs/build-operation-for-field.js
var require_build_operation_for_field = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/build-operation-for-field.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.buildOperationNodeForField = void 0;
    var graphql_1 = require_graphql2();
    var rootTypes_js_1 = require_rootTypes();
    var operationVariables = [];
    var fieldTypeMap = /* @__PURE__ */ new Map();
    function addOperationVariable(variable) {
      operationVariables.push(variable);
    }
    function resetOperationVariables() {
      operationVariables = [];
    }
    function resetFieldMap() {
      fieldTypeMap = /* @__PURE__ */ new Map();
    }
    function buildOperationNodeForField({ schema, kind, field, models, ignore = [], depthLimit, circularReferenceDepth, argNames, selectedFields = true }) {
      resetOperationVariables();
      resetFieldMap();
      const rootTypeNames = (0, rootTypes_js_1.getRootTypeNames)(schema);
      const operationNode = buildOperationAndCollectVariables({
        schema,
        fieldName: field,
        kind,
        models: models || [],
        ignore,
        depthLimit: depthLimit || Infinity,
        circularReferenceDepth: circularReferenceDepth || 1,
        argNames,
        selectedFields,
        rootTypeNames
      });
      operationNode.variableDefinitions = [...operationVariables];
      resetOperationVariables();
      resetFieldMap();
      return operationNode;
    }
    exports2.buildOperationNodeForField = buildOperationNodeForField;
    function buildOperationAndCollectVariables({ schema, fieldName, kind, models, ignore, depthLimit, circularReferenceDepth, argNames, selectedFields, rootTypeNames }) {
      const type = (0, rootTypes_js_1.getDefinedRootType)(schema, kind);
      const field = type.getFields()[fieldName];
      const operationName = `${fieldName}_${kind}`;
      if (field.args) {
        for (const arg of field.args) {
          const argName = arg.name;
          if (!argNames || argNames.includes(argName)) {
            addOperationVariable(resolveVariable(arg, argName));
          }
        }
      }
      return {
        kind: graphql_1.Kind.OPERATION_DEFINITION,
        operation: kind,
        name: {
          kind: graphql_1.Kind.NAME,
          value: operationName
        },
        variableDefinitions: [],
        selectionSet: {
          kind: graphql_1.Kind.SELECTION_SET,
          selections: [
            resolveField({
              type,
              field,
              models,
              firstCall: true,
              path: [],
              ancestors: [],
              ignore,
              depthLimit,
              circularReferenceDepth,
              schema,
              depth: 0,
              argNames,
              selectedFields,
              rootTypeNames
            })
          ]
        }
      };
    }
    function resolveSelectionSet({ parent, type, models, firstCall, path: path2, ancestors, ignore, depthLimit, circularReferenceDepth, schema, depth, argNames, selectedFields, rootTypeNames }) {
      if (typeof selectedFields === "boolean" && depth > depthLimit) {
        return;
      }
      if ((0, graphql_1.isUnionType)(type)) {
        const types = type.getTypes();
        return {
          kind: graphql_1.Kind.SELECTION_SET,
          selections: types.filter((t) => !hasCircularRef([...ancestors, t], {
            depth: circularReferenceDepth
          })).map((t) => {
            return {
              kind: graphql_1.Kind.INLINE_FRAGMENT,
              typeCondition: {
                kind: graphql_1.Kind.NAMED_TYPE,
                name: {
                  kind: graphql_1.Kind.NAME,
                  value: t.name
                }
              },
              selectionSet: resolveSelectionSet({
                parent: type,
                type: t,
                models,
                path: path2,
                ancestors,
                ignore,
                depthLimit,
                circularReferenceDepth,
                schema,
                depth,
                argNames,
                selectedFields,
                rootTypeNames
              })
            };
          }).filter((fragmentNode) => {
            var _a2, _b;
            return ((_b = (_a2 = fragmentNode === null || fragmentNode === void 0 ? void 0 : fragmentNode.selectionSet) === null || _a2 === void 0 ? void 0 : _a2.selections) === null || _b === void 0 ? void 0 : _b.length) > 0;
          })
        };
      }
      if ((0, graphql_1.isInterfaceType)(type)) {
        const types = Object.values(schema.getTypeMap()).filter((t) => (0, graphql_1.isObjectType)(t) && t.getInterfaces().includes(type));
        return {
          kind: graphql_1.Kind.SELECTION_SET,
          selections: types.filter((t) => !hasCircularRef([...ancestors, t], {
            depth: circularReferenceDepth
          })).map((t) => {
            return {
              kind: graphql_1.Kind.INLINE_FRAGMENT,
              typeCondition: {
                kind: graphql_1.Kind.NAMED_TYPE,
                name: {
                  kind: graphql_1.Kind.NAME,
                  value: t.name
                }
              },
              selectionSet: resolveSelectionSet({
                parent: type,
                type: t,
                models,
                path: path2,
                ancestors,
                ignore,
                depthLimit,
                circularReferenceDepth,
                schema,
                depth,
                argNames,
                selectedFields,
                rootTypeNames
              })
            };
          }).filter((fragmentNode) => {
            var _a2, _b;
            return ((_b = (_a2 = fragmentNode === null || fragmentNode === void 0 ? void 0 : fragmentNode.selectionSet) === null || _a2 === void 0 ? void 0 : _a2.selections) === null || _b === void 0 ? void 0 : _b.length) > 0;
          })
        };
      }
      if ((0, graphql_1.isObjectType)(type) && !rootTypeNames.has(type.name)) {
        const isIgnored = ignore.includes(type.name) || ignore.includes(`${parent.name}.${path2[path2.length - 1]}`);
        const isModel = models.includes(type.name);
        if (!firstCall && isModel && !isIgnored) {
          return {
            kind: graphql_1.Kind.SELECTION_SET,
            selections: [
              {
                kind: graphql_1.Kind.FIELD,
                name: {
                  kind: graphql_1.Kind.NAME,
                  value: "id"
                }
              }
            ]
          };
        }
        const fields = type.getFields();
        return {
          kind: graphql_1.Kind.SELECTION_SET,
          selections: Object.keys(fields).filter((fieldName) => {
            return !hasCircularRef([...ancestors, (0, graphql_1.getNamedType)(fields[fieldName].type)], {
              depth: circularReferenceDepth
            });
          }).map((fieldName) => {
            const selectedSubFields = typeof selectedFields === "object" ? selectedFields[fieldName] : true;
            if (selectedSubFields) {
              return resolveField({
                type,
                field: fields[fieldName],
                models,
                path: [...path2, fieldName],
                ancestors,
                ignore,
                depthLimit,
                circularReferenceDepth,
                schema,
                depth,
                argNames,
                selectedFields: selectedSubFields,
                rootTypeNames
              });
            }
            return null;
          }).filter((f) => {
            var _a2, _b;
            if (f == null) {
              return false;
            } else if ("selectionSet" in f) {
              return !!((_b = (_a2 = f.selectionSet) === null || _a2 === void 0 ? void 0 : _a2.selections) === null || _b === void 0 ? void 0 : _b.length);
            }
            return true;
          })
        };
      }
    }
    function resolveVariable(arg, name) {
      function resolveVariableType(type) {
        if ((0, graphql_1.isListType)(type)) {
          return {
            kind: graphql_1.Kind.LIST_TYPE,
            type: resolveVariableType(type.ofType)
          };
        }
        if ((0, graphql_1.isNonNullType)(type)) {
          return {
            kind: graphql_1.Kind.NON_NULL_TYPE,
            // for v16 compatibility
            type: resolveVariableType(type.ofType)
          };
        }
        return {
          kind: graphql_1.Kind.NAMED_TYPE,
          name: {
            kind: graphql_1.Kind.NAME,
            value: type.name
          }
        };
      }
      return {
        kind: graphql_1.Kind.VARIABLE_DEFINITION,
        variable: {
          kind: graphql_1.Kind.VARIABLE,
          name: {
            kind: graphql_1.Kind.NAME,
            value: name || arg.name
          }
        },
        type: resolveVariableType(arg.type)
      };
    }
    function getArgumentName(name, path2) {
      return [...path2, name].join("_");
    }
    function resolveField({ type, field, models, firstCall, path: path2, ancestors, ignore, depthLimit, circularReferenceDepth, schema, depth, argNames, selectedFields, rootTypeNames }) {
      const namedType = (0, graphql_1.getNamedType)(field.type);
      let args = [];
      let removeField = false;
      if (field.args && field.args.length) {
        args = field.args.map((arg) => {
          const argumentName = getArgumentName(arg.name, path2);
          if (argNames && !argNames.includes(argumentName)) {
            if ((0, graphql_1.isNonNullType)(arg.type)) {
              removeField = true;
            }
            return null;
          }
          if (!firstCall) {
            addOperationVariable(resolveVariable(arg, argumentName));
          }
          return {
            kind: graphql_1.Kind.ARGUMENT,
            name: {
              kind: graphql_1.Kind.NAME,
              value: arg.name
            },
            value: {
              kind: graphql_1.Kind.VARIABLE,
              name: {
                kind: graphql_1.Kind.NAME,
                value: getArgumentName(arg.name, path2)
              }
            }
          };
        }).filter(Boolean);
      }
      if (removeField) {
        return null;
      }
      const fieldPath = [...path2, field.name];
      const fieldPathStr = fieldPath.join(".");
      let fieldName = field.name;
      if (fieldTypeMap.has(fieldPathStr) && fieldTypeMap.get(fieldPathStr) !== field.type.toString()) {
        fieldName += field.type.toString().replace("!", "NonNull").replace("[", "List").replace("]", "");
      }
      fieldTypeMap.set(fieldPathStr, field.type.toString());
      if (!(0, graphql_1.isScalarType)(namedType) && !(0, graphql_1.isEnumType)(namedType)) {
        return {
          kind: graphql_1.Kind.FIELD,
          name: {
            kind: graphql_1.Kind.NAME,
            value: field.name
          },
          ...fieldName !== field.name && { alias: { kind: graphql_1.Kind.NAME, value: fieldName } },
          selectionSet: resolveSelectionSet({
            parent: type,
            type: namedType,
            models,
            firstCall,
            path: fieldPath,
            ancestors: [...ancestors, type],
            ignore,
            depthLimit,
            circularReferenceDepth,
            schema,
            depth: depth + 1,
            argNames,
            selectedFields,
            rootTypeNames
          }) || void 0,
          arguments: args
        };
      }
      return {
        kind: graphql_1.Kind.FIELD,
        name: {
          kind: graphql_1.Kind.NAME,
          value: field.name
        },
        ...fieldName !== field.name && { alias: { kind: graphql_1.Kind.NAME, value: fieldName } },
        arguments: args
      };
    }
    function hasCircularRef(types, config2 = {
      depth: 1
    }) {
      const type = types[types.length - 1];
      if ((0, graphql_1.isScalarType)(type)) {
        return false;
      }
      const size = types.filter((t) => t.name === type.name).length;
      return size > config2.depth;
    }
  }
});

// node_modules/@graphql-tools/utils/cjs/types.js
var require_types = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DirectiveLocation = void 0;
    var DirectiveLocation;
    (function(DirectiveLocation2) {
      DirectiveLocation2["QUERY"] = "QUERY";
      DirectiveLocation2["MUTATION"] = "MUTATION";
      DirectiveLocation2["SUBSCRIPTION"] = "SUBSCRIPTION";
      DirectiveLocation2["FIELD"] = "FIELD";
      DirectiveLocation2["FRAGMENT_DEFINITION"] = "FRAGMENT_DEFINITION";
      DirectiveLocation2["FRAGMENT_SPREAD"] = "FRAGMENT_SPREAD";
      DirectiveLocation2["INLINE_FRAGMENT"] = "INLINE_FRAGMENT";
      DirectiveLocation2["VARIABLE_DEFINITION"] = "VARIABLE_DEFINITION";
      DirectiveLocation2["SCHEMA"] = "SCHEMA";
      DirectiveLocation2["SCALAR"] = "SCALAR";
      DirectiveLocation2["OBJECT"] = "OBJECT";
      DirectiveLocation2["FIELD_DEFINITION"] = "FIELD_DEFINITION";
      DirectiveLocation2["ARGUMENT_DEFINITION"] = "ARGUMENT_DEFINITION";
      DirectiveLocation2["INTERFACE"] = "INTERFACE";
      DirectiveLocation2["UNION"] = "UNION";
      DirectiveLocation2["ENUM"] = "ENUM";
      DirectiveLocation2["ENUM_VALUE"] = "ENUM_VALUE";
      DirectiveLocation2["INPUT_OBJECT"] = "INPUT_OBJECT";
      DirectiveLocation2["INPUT_FIELD_DEFINITION"] = "INPUT_FIELD_DEFINITION";
    })(DirectiveLocation = exports2.DirectiveLocation || (exports2.DirectiveLocation = {}));
  }
});

// node_modules/@graphql-tools/utils/cjs/Interfaces.js
var require_Interfaces = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/Interfaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MapperKind = void 0;
    var MapperKind2;
    (function(MapperKind3) {
      MapperKind3["TYPE"] = "MapperKind.TYPE";
      MapperKind3["SCALAR_TYPE"] = "MapperKind.SCALAR_TYPE";
      MapperKind3["ENUM_TYPE"] = "MapperKind.ENUM_TYPE";
      MapperKind3["COMPOSITE_TYPE"] = "MapperKind.COMPOSITE_TYPE";
      MapperKind3["OBJECT_TYPE"] = "MapperKind.OBJECT_TYPE";
      MapperKind3["INPUT_OBJECT_TYPE"] = "MapperKind.INPUT_OBJECT_TYPE";
      MapperKind3["ABSTRACT_TYPE"] = "MapperKind.ABSTRACT_TYPE";
      MapperKind3["UNION_TYPE"] = "MapperKind.UNION_TYPE";
      MapperKind3["INTERFACE_TYPE"] = "MapperKind.INTERFACE_TYPE";
      MapperKind3["ROOT_OBJECT"] = "MapperKind.ROOT_OBJECT";
      MapperKind3["QUERY"] = "MapperKind.QUERY";
      MapperKind3["MUTATION"] = "MapperKind.MUTATION";
      MapperKind3["SUBSCRIPTION"] = "MapperKind.SUBSCRIPTION";
      MapperKind3["DIRECTIVE"] = "MapperKind.DIRECTIVE";
      MapperKind3["FIELD"] = "MapperKind.FIELD";
      MapperKind3["COMPOSITE_FIELD"] = "MapperKind.COMPOSITE_FIELD";
      MapperKind3["OBJECT_FIELD"] = "MapperKind.OBJECT_FIELD";
      MapperKind3["ROOT_FIELD"] = "MapperKind.ROOT_FIELD";
      MapperKind3["QUERY_ROOT_FIELD"] = "MapperKind.QUERY_ROOT_FIELD";
      MapperKind3["MUTATION_ROOT_FIELD"] = "MapperKind.MUTATION_ROOT_FIELD";
      MapperKind3["SUBSCRIPTION_ROOT_FIELD"] = "MapperKind.SUBSCRIPTION_ROOT_FIELD";
      MapperKind3["INTERFACE_FIELD"] = "MapperKind.INTERFACE_FIELD";
      MapperKind3["INPUT_OBJECT_FIELD"] = "MapperKind.INPUT_OBJECT_FIELD";
      MapperKind3["ARGUMENT"] = "MapperKind.ARGUMENT";
      MapperKind3["ENUM_VALUE"] = "MapperKind.ENUM_VALUE";
    })(MapperKind2 = exports2.MapperKind || (exports2.MapperKind = {}));
  }
});

// node_modules/@graphql-tools/utils/cjs/getObjectTypeFromTypeMap.js
var require_getObjectTypeFromTypeMap = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/getObjectTypeFromTypeMap.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getObjectTypeFromTypeMap = void 0;
    var graphql_1 = require_graphql2();
    function getObjectTypeFromTypeMap2(typeMap, type) {
      if (type) {
        const maybeObjectType = typeMap[type.name];
        if ((0, graphql_1.isObjectType)(maybeObjectType)) {
          return maybeObjectType;
        }
      }
    }
    exports2.getObjectTypeFromTypeMap = getObjectTypeFromTypeMap2;
  }
});

// node_modules/@graphql-tools/utils/cjs/stub.js
var require_stub = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/stub.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBuiltInForStub = exports2.isNamedStub = exports2.createStub = exports2.createNamedStub = void 0;
    var graphql_1 = require_graphql2();
    function createNamedStub(name, type) {
      let constructor;
      if (type === "object") {
        constructor = graphql_1.GraphQLObjectType;
      } else if (type === "interface") {
        constructor = graphql_1.GraphQLInterfaceType;
      } else {
        constructor = graphql_1.GraphQLInputObjectType;
      }
      return new constructor({
        name,
        fields: {
          _fake: {
            type: graphql_1.GraphQLString
          }
        }
      });
    }
    exports2.createNamedStub = createNamedStub;
    function createStub(node, type) {
      switch (node.kind) {
        case graphql_1.Kind.LIST_TYPE:
          return new graphql_1.GraphQLList(createStub(node.type, type));
        case graphql_1.Kind.NON_NULL_TYPE:
          return new graphql_1.GraphQLNonNull(createStub(node.type, type));
        default:
          if (type === "output") {
            return createNamedStub(node.name.value, "object");
          }
          return createNamedStub(node.name.value, "input");
      }
    }
    exports2.createStub = createStub;
    function isNamedStub2(type) {
      if ("getFields" in type) {
        const fields = type.getFields();
        for (const fieldName in fields) {
          const field = fields[fieldName];
          return field.name === "_fake";
        }
      }
      return false;
    }
    exports2.isNamedStub = isNamedStub2;
    function getBuiltInForStub2(type) {
      switch (type.name) {
        case graphql_1.GraphQLInt.name:
          return graphql_1.GraphQLInt;
        case graphql_1.GraphQLFloat.name:
          return graphql_1.GraphQLFloat;
        case graphql_1.GraphQLString.name:
          return graphql_1.GraphQLString;
        case graphql_1.GraphQLBoolean.name:
          return graphql_1.GraphQLBoolean;
        case graphql_1.GraphQLID.name:
          return graphql_1.GraphQLID;
        default:
          return type;
      }
    }
    exports2.getBuiltInForStub = getBuiltInForStub2;
  }
});

// node_modules/@graphql-tools/utils/cjs/rewire.js
var require_rewire = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/rewire.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rewireTypes = void 0;
    var graphql_1 = require_graphql2();
    var stub_js_1 = require_stub();
    function rewireTypes2(originalTypeMap, directives) {
      const referenceTypeMap = /* @__PURE__ */ Object.create(null);
      for (const typeName in originalTypeMap) {
        referenceTypeMap[typeName] = originalTypeMap[typeName];
      }
      const newTypeMap = /* @__PURE__ */ Object.create(null);
      for (const typeName in referenceTypeMap) {
        const namedType = referenceTypeMap[typeName];
        if (namedType == null || typeName.startsWith("__")) {
          continue;
        }
        const newName = namedType.name;
        if (newName.startsWith("__")) {
          continue;
        }
        if (newTypeMap[newName] != null) {
          console.warn(`Duplicate schema type name ${newName} found; keeping the existing one found in the schema`);
          continue;
        }
        newTypeMap[newName] = namedType;
      }
      for (const typeName in newTypeMap) {
        newTypeMap[typeName] = rewireNamedType(newTypeMap[typeName]);
      }
      const newDirectives = directives.map((directive) => rewireDirective(directive));
      return {
        typeMap: newTypeMap,
        directives: newDirectives
      };
      function rewireDirective(directive) {
        if ((0, graphql_1.isSpecifiedDirective)(directive)) {
          return directive;
        }
        const directiveConfig = directive.toConfig();
        directiveConfig.args = rewireArgs(directiveConfig.args);
        return new graphql_1.GraphQLDirective(directiveConfig);
      }
      function rewireArgs(args) {
        const rewiredArgs = {};
        for (const argName in args) {
          const arg = args[argName];
          const rewiredArgType = rewireType(arg.type);
          if (rewiredArgType != null) {
            arg.type = rewiredArgType;
            rewiredArgs[argName] = arg;
          }
        }
        return rewiredArgs;
      }
      function rewireNamedType(type) {
        if ((0, graphql_1.isObjectType)(type)) {
          const config2 = type.toConfig();
          const newConfig = {
            ...config2,
            fields: () => rewireFields(config2.fields),
            interfaces: () => rewireNamedTypes(config2.interfaces)
          };
          return new graphql_1.GraphQLObjectType(newConfig);
        } else if ((0, graphql_1.isInterfaceType)(type)) {
          const config2 = type.toConfig();
          const newConfig = {
            ...config2,
            fields: () => rewireFields(config2.fields)
          };
          if ("interfaces" in newConfig) {
            newConfig.interfaces = () => rewireNamedTypes(config2.interfaces);
          }
          return new graphql_1.GraphQLInterfaceType(newConfig);
        } else if ((0, graphql_1.isUnionType)(type)) {
          const config2 = type.toConfig();
          const newConfig = {
            ...config2,
            types: () => rewireNamedTypes(config2.types)
          };
          return new graphql_1.GraphQLUnionType(newConfig);
        } else if ((0, graphql_1.isInputObjectType)(type)) {
          const config2 = type.toConfig();
          const newConfig = {
            ...config2,
            fields: () => rewireInputFields(config2.fields)
          };
          return new graphql_1.GraphQLInputObjectType(newConfig);
        } else if ((0, graphql_1.isEnumType)(type)) {
          const enumConfig = type.toConfig();
          return new graphql_1.GraphQLEnumType(enumConfig);
        } else if ((0, graphql_1.isScalarType)(type)) {
          if ((0, graphql_1.isSpecifiedScalarType)(type)) {
            return type;
          }
          const scalarConfig = type.toConfig();
          return new graphql_1.GraphQLScalarType(scalarConfig);
        }
        throw new Error(`Unexpected schema type: ${type}`);
      }
      function rewireFields(fields) {
        const rewiredFields = {};
        for (const fieldName in fields) {
          const field = fields[fieldName];
          const rewiredFieldType = rewireType(field.type);
          if (rewiredFieldType != null && field.args) {
            field.type = rewiredFieldType;
            field.args = rewireArgs(field.args);
            rewiredFields[fieldName] = field;
          }
        }
        return rewiredFields;
      }
      function rewireInputFields(fields) {
        const rewiredFields = {};
        for (const fieldName in fields) {
          const field = fields[fieldName];
          const rewiredFieldType = rewireType(field.type);
          if (rewiredFieldType != null) {
            field.type = rewiredFieldType;
            rewiredFields[fieldName] = field;
          }
        }
        return rewiredFields;
      }
      function rewireNamedTypes(namedTypes) {
        const rewiredTypes = [];
        for (const namedType of namedTypes) {
          const rewiredType = rewireType(namedType);
          if (rewiredType != null) {
            rewiredTypes.push(rewiredType);
          }
        }
        return rewiredTypes;
      }
      function rewireType(type) {
        if ((0, graphql_1.isListType)(type)) {
          const rewiredType = rewireType(type.ofType);
          return rewiredType != null ? new graphql_1.GraphQLList(rewiredType) : null;
        } else if ((0, graphql_1.isNonNullType)(type)) {
          const rewiredType = rewireType(type.ofType);
          return rewiredType != null ? new graphql_1.GraphQLNonNull(rewiredType) : null;
        } else if ((0, graphql_1.isNamedType)(type)) {
          let rewiredType = referenceTypeMap[type.name];
          if (rewiredType === void 0) {
            rewiredType = (0, stub_js_1.isNamedStub)(type) ? (0, stub_js_1.getBuiltInForStub)(type) : rewireNamedType(type);
            newTypeMap[rewiredType.name] = referenceTypeMap[type.name] = rewiredType;
          }
          return rewiredType != null ? newTypeMap[rewiredType.name] : null;
        }
        return null;
      }
    }
    exports2.rewireTypes = rewireTypes2;
  }
});

// node_modules/@graphql-tools/utils/cjs/transformInputValue.js
var require_transformInputValue = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/transformInputValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseInputValueLiteral = exports2.parseInputValue = exports2.serializeInputValue = exports2.transformInputValue = void 0;
    var graphql_1 = require_graphql2();
    var helpers_js_1 = require_helpers();
    function transformInputValue2(type, value, inputLeafValueTransformer = null, inputObjectValueTransformer = null) {
      if (value == null) {
        return value;
      }
      const nullableType = (0, graphql_1.getNullableType)(type);
      if ((0, graphql_1.isLeafType)(nullableType)) {
        return inputLeafValueTransformer != null ? inputLeafValueTransformer(nullableType, value) : value;
      } else if ((0, graphql_1.isListType)(nullableType)) {
        return (0, helpers_js_1.asArray)(value).map((listMember) => transformInputValue2(nullableType.ofType, listMember, inputLeafValueTransformer, inputObjectValueTransformer));
      } else if ((0, graphql_1.isInputObjectType)(nullableType)) {
        const fields = nullableType.getFields();
        const newValue = {};
        for (const key in value) {
          const field = fields[key];
          if (field != null) {
            newValue[key] = transformInputValue2(field.type, value[key], inputLeafValueTransformer, inputObjectValueTransformer);
          }
        }
        return inputObjectValueTransformer != null ? inputObjectValueTransformer(nullableType, newValue) : newValue;
      }
    }
    exports2.transformInputValue = transformInputValue2;
    function serializeInputValue2(type, value) {
      return transformInputValue2(type, value, (t, v) => {
        try {
          return t.serialize(v);
        } catch (_a2) {
          return v;
        }
      });
    }
    exports2.serializeInputValue = serializeInputValue2;
    function parseInputValue2(type, value) {
      return transformInputValue2(type, value, (t, v) => {
        try {
          return t.parseValue(v);
        } catch (_a2) {
          return v;
        }
      });
    }
    exports2.parseInputValue = parseInputValue2;
    function parseInputValueLiteral(type, value) {
      return transformInputValue2(type, value, (t, v) => t.parseLiteral(v, {}));
    }
    exports2.parseInputValueLiteral = parseInputValueLiteral;
  }
});

// node_modules/@graphql-tools/utils/cjs/mapSchema.js
var require_mapSchema = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/mapSchema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.correctASTNodes = exports2.mapSchema = void 0;
    var graphql_1 = require_graphql2();
    var getObjectTypeFromTypeMap_js_1 = require_getObjectTypeFromTypeMap();
    var Interfaces_js_1 = require_Interfaces();
    var rewire_js_1 = require_rewire();
    var transformInputValue_js_1 = require_transformInputValue();
    function mapSchema2(schema, schemaMapper = {}) {
      const newTypeMap = mapArguments2(mapFields2(mapTypes2(mapDefaultValues2(mapEnumValues2(mapTypes2(mapDefaultValues2(schema.getTypeMap(), schema, transformInputValue_js_1.serializeInputValue), schema, schemaMapper, (type) => (0, graphql_1.isLeafType)(type)), schema, schemaMapper), schema, transformInputValue_js_1.parseInputValue), schema, schemaMapper, (type) => !(0, graphql_1.isLeafType)(type)), schema, schemaMapper), schema, schemaMapper);
      const originalDirectives = schema.getDirectives();
      const newDirectives = mapDirectives2(originalDirectives, schema, schemaMapper);
      const { typeMap, directives } = (0, rewire_js_1.rewireTypes)(newTypeMap, newDirectives);
      return new graphql_1.GraphQLSchema({
        ...schema.toConfig(),
        query: (0, getObjectTypeFromTypeMap_js_1.getObjectTypeFromTypeMap)(typeMap, (0, getObjectTypeFromTypeMap_js_1.getObjectTypeFromTypeMap)(newTypeMap, schema.getQueryType())),
        mutation: (0, getObjectTypeFromTypeMap_js_1.getObjectTypeFromTypeMap)(typeMap, (0, getObjectTypeFromTypeMap_js_1.getObjectTypeFromTypeMap)(newTypeMap, schema.getMutationType())),
        subscription: (0, getObjectTypeFromTypeMap_js_1.getObjectTypeFromTypeMap)(typeMap, (0, getObjectTypeFromTypeMap_js_1.getObjectTypeFromTypeMap)(newTypeMap, schema.getSubscriptionType())),
        types: Object.values(typeMap),
        directives
      });
    }
    exports2.mapSchema = mapSchema2;
    function mapTypes2(originalTypeMap, schema, schemaMapper, testFn = () => true) {
      const newTypeMap = {};
      for (const typeName in originalTypeMap) {
        if (!typeName.startsWith("__")) {
          const originalType = originalTypeMap[typeName];
          if (originalType == null || !testFn(originalType)) {
            newTypeMap[typeName] = originalType;
            continue;
          }
          const typeMapper = getTypeMapper2(schema, schemaMapper, typeName);
          if (typeMapper == null) {
            newTypeMap[typeName] = originalType;
            continue;
          }
          const maybeNewType = typeMapper(originalType, schema);
          if (maybeNewType === void 0) {
            newTypeMap[typeName] = originalType;
            continue;
          }
          newTypeMap[typeName] = maybeNewType;
        }
      }
      return newTypeMap;
    }
    function mapEnumValues2(originalTypeMap, schema, schemaMapper) {
      const enumValueMapper = getEnumValueMapper2(schemaMapper);
      if (!enumValueMapper) {
        return originalTypeMap;
      }
      return mapTypes2(originalTypeMap, schema, {
        [Interfaces_js_1.MapperKind.ENUM_TYPE]: (type) => {
          const config2 = type.toConfig();
          const originalEnumValueConfigMap = config2.values;
          const newEnumValueConfigMap = {};
          for (const externalValue in originalEnumValueConfigMap) {
            const originalEnumValueConfig = originalEnumValueConfigMap[externalValue];
            const mappedEnumValue = enumValueMapper(originalEnumValueConfig, type.name, schema, externalValue);
            if (mappedEnumValue === void 0) {
              newEnumValueConfigMap[externalValue] = originalEnumValueConfig;
            } else if (Array.isArray(mappedEnumValue)) {
              const [newExternalValue, newEnumValueConfig] = mappedEnumValue;
              newEnumValueConfigMap[newExternalValue] = newEnumValueConfig === void 0 ? originalEnumValueConfig : newEnumValueConfig;
            } else if (mappedEnumValue !== null) {
              newEnumValueConfigMap[externalValue] = mappedEnumValue;
            }
          }
          return correctASTNodes2(new graphql_1.GraphQLEnumType({
            ...config2,
            values: newEnumValueConfigMap
          }));
        }
      }, (type) => (0, graphql_1.isEnumType)(type));
    }
    function mapDefaultValues2(originalTypeMap, schema, fn2) {
      const newTypeMap = mapArguments2(originalTypeMap, schema, {
        [Interfaces_js_1.MapperKind.ARGUMENT]: (argumentConfig) => {
          if (argumentConfig.defaultValue === void 0) {
            return argumentConfig;
          }
          const maybeNewType = getNewType2(originalTypeMap, argumentConfig.type);
          if (maybeNewType != null) {
            return {
              ...argumentConfig,
              defaultValue: fn2(maybeNewType, argumentConfig.defaultValue)
            };
          }
        }
      });
      return mapFields2(newTypeMap, schema, {
        [Interfaces_js_1.MapperKind.INPUT_OBJECT_FIELD]: (inputFieldConfig) => {
          if (inputFieldConfig.defaultValue === void 0) {
            return inputFieldConfig;
          }
          const maybeNewType = getNewType2(newTypeMap, inputFieldConfig.type);
          if (maybeNewType != null) {
            return {
              ...inputFieldConfig,
              defaultValue: fn2(maybeNewType, inputFieldConfig.defaultValue)
            };
          }
        }
      });
    }
    function getNewType2(newTypeMap, type) {
      if ((0, graphql_1.isListType)(type)) {
        const newType = getNewType2(newTypeMap, type.ofType);
        return newType != null ? new graphql_1.GraphQLList(newType) : null;
      } else if ((0, graphql_1.isNonNullType)(type)) {
        const newType = getNewType2(newTypeMap, type.ofType);
        return newType != null ? new graphql_1.GraphQLNonNull(newType) : null;
      } else if ((0, graphql_1.isNamedType)(type)) {
        const newType = newTypeMap[type.name];
        return newType != null ? newType : null;
      }
      return null;
    }
    function mapFields2(originalTypeMap, schema, schemaMapper) {
      const newTypeMap = {};
      for (const typeName in originalTypeMap) {
        if (!typeName.startsWith("__")) {
          const originalType = originalTypeMap[typeName];
          if (!(0, graphql_1.isObjectType)(originalType) && !(0, graphql_1.isInterfaceType)(originalType) && !(0, graphql_1.isInputObjectType)(originalType)) {
            newTypeMap[typeName] = originalType;
            continue;
          }
          const fieldMapper = getFieldMapper2(schema, schemaMapper, typeName);
          if (fieldMapper == null) {
            newTypeMap[typeName] = originalType;
            continue;
          }
          const config2 = originalType.toConfig();
          const originalFieldConfigMap = config2.fields;
          const newFieldConfigMap = {};
          for (const fieldName in originalFieldConfigMap) {
            const originalFieldConfig = originalFieldConfigMap[fieldName];
            const mappedField = fieldMapper(originalFieldConfig, fieldName, typeName, schema);
            if (mappedField === void 0) {
              newFieldConfigMap[fieldName] = originalFieldConfig;
            } else if (Array.isArray(mappedField)) {
              const [newFieldName, newFieldConfig] = mappedField;
              if (newFieldConfig.astNode != null) {
                newFieldConfig.astNode = {
                  ...newFieldConfig.astNode,
                  name: {
                    ...newFieldConfig.astNode.name,
                    value: newFieldName
                  }
                };
              }
              newFieldConfigMap[newFieldName] = newFieldConfig === void 0 ? originalFieldConfig : newFieldConfig;
            } else if (mappedField !== null) {
              newFieldConfigMap[fieldName] = mappedField;
            }
          }
          if ((0, graphql_1.isObjectType)(originalType)) {
            newTypeMap[typeName] = correctASTNodes2(new graphql_1.GraphQLObjectType({
              ...config2,
              fields: newFieldConfigMap
            }));
          } else if ((0, graphql_1.isInterfaceType)(originalType)) {
            newTypeMap[typeName] = correctASTNodes2(new graphql_1.GraphQLInterfaceType({
              ...config2,
              fields: newFieldConfigMap
            }));
          } else {
            newTypeMap[typeName] = correctASTNodes2(new graphql_1.GraphQLInputObjectType({
              ...config2,
              fields: newFieldConfigMap
            }));
          }
        }
      }
      return newTypeMap;
    }
    function mapArguments2(originalTypeMap, schema, schemaMapper) {
      const newTypeMap = {};
      for (const typeName in originalTypeMap) {
        if (!typeName.startsWith("__")) {
          const originalType = originalTypeMap[typeName];
          if (!(0, graphql_1.isObjectType)(originalType) && !(0, graphql_1.isInterfaceType)(originalType)) {
            newTypeMap[typeName] = originalType;
            continue;
          }
          const argumentMapper = getArgumentMapper2(schemaMapper);
          if (argumentMapper == null) {
            newTypeMap[typeName] = originalType;
            continue;
          }
          const config2 = originalType.toConfig();
          const originalFieldConfigMap = config2.fields;
          const newFieldConfigMap = {};
          for (const fieldName in originalFieldConfigMap) {
            const originalFieldConfig = originalFieldConfigMap[fieldName];
            const originalArgumentConfigMap = originalFieldConfig.args;
            if (originalArgumentConfigMap == null) {
              newFieldConfigMap[fieldName] = originalFieldConfig;
              continue;
            }
            const argumentNames = Object.keys(originalArgumentConfigMap);
            if (!argumentNames.length) {
              newFieldConfigMap[fieldName] = originalFieldConfig;
              continue;
            }
            const newArgumentConfigMap = {};
            for (const argumentName of argumentNames) {
              const originalArgumentConfig = originalArgumentConfigMap[argumentName];
              const mappedArgument = argumentMapper(originalArgumentConfig, fieldName, typeName, schema);
              if (mappedArgument === void 0) {
                newArgumentConfigMap[argumentName] = originalArgumentConfig;
              } else if (Array.isArray(mappedArgument)) {
                const [newArgumentName, newArgumentConfig] = mappedArgument;
                newArgumentConfigMap[newArgumentName] = newArgumentConfig;
              } else if (mappedArgument !== null) {
                newArgumentConfigMap[argumentName] = mappedArgument;
              }
            }
            newFieldConfigMap[fieldName] = {
              ...originalFieldConfig,
              args: newArgumentConfigMap
            };
          }
          if ((0, graphql_1.isObjectType)(originalType)) {
            newTypeMap[typeName] = new graphql_1.GraphQLObjectType({
              ...config2,
              fields: newFieldConfigMap
            });
          } else if ((0, graphql_1.isInterfaceType)(originalType)) {
            newTypeMap[typeName] = new graphql_1.GraphQLInterfaceType({
              ...config2,
              fields: newFieldConfigMap
            });
          } else {
            newTypeMap[typeName] = new graphql_1.GraphQLInputObjectType({
              ...config2,
              fields: newFieldConfigMap
            });
          }
        }
      }
      return newTypeMap;
    }
    function mapDirectives2(originalDirectives, schema, schemaMapper) {
      const directiveMapper = getDirectiveMapper2(schemaMapper);
      if (directiveMapper == null) {
        return originalDirectives.slice();
      }
      const newDirectives = [];
      for (const directive of originalDirectives) {
        const mappedDirective = directiveMapper(directive, schema);
        if (mappedDirective === void 0) {
          newDirectives.push(directive);
        } else if (mappedDirective !== null) {
          newDirectives.push(mappedDirective);
        }
      }
      return newDirectives;
    }
    function getTypeSpecifiers2(schema, typeName) {
      var _a2, _b, _c2;
      const type = schema.getType(typeName);
      const specifiers = [Interfaces_js_1.MapperKind.TYPE];
      if ((0, graphql_1.isObjectType)(type)) {
        specifiers.push(Interfaces_js_1.MapperKind.COMPOSITE_TYPE, Interfaces_js_1.MapperKind.OBJECT_TYPE);
        if (typeName === ((_a2 = schema.getQueryType()) === null || _a2 === void 0 ? void 0 : _a2.name)) {
          specifiers.push(Interfaces_js_1.MapperKind.ROOT_OBJECT, Interfaces_js_1.MapperKind.QUERY);
        } else if (typeName === ((_b = schema.getMutationType()) === null || _b === void 0 ? void 0 : _b.name)) {
          specifiers.push(Interfaces_js_1.MapperKind.ROOT_OBJECT, Interfaces_js_1.MapperKind.MUTATION);
        } else if (typeName === ((_c2 = schema.getSubscriptionType()) === null || _c2 === void 0 ? void 0 : _c2.name)) {
          specifiers.push(Interfaces_js_1.MapperKind.ROOT_OBJECT, Interfaces_js_1.MapperKind.SUBSCRIPTION);
        }
      } else if ((0, graphql_1.isInputObjectType)(type)) {
        specifiers.push(Interfaces_js_1.MapperKind.INPUT_OBJECT_TYPE);
      } else if ((0, graphql_1.isInterfaceType)(type)) {
        specifiers.push(Interfaces_js_1.MapperKind.COMPOSITE_TYPE, Interfaces_js_1.MapperKind.ABSTRACT_TYPE, Interfaces_js_1.MapperKind.INTERFACE_TYPE);
      } else if ((0, graphql_1.isUnionType)(type)) {
        specifiers.push(Interfaces_js_1.MapperKind.COMPOSITE_TYPE, Interfaces_js_1.MapperKind.ABSTRACT_TYPE, Interfaces_js_1.MapperKind.UNION_TYPE);
      } else if ((0, graphql_1.isEnumType)(type)) {
        specifiers.push(Interfaces_js_1.MapperKind.ENUM_TYPE);
      } else if ((0, graphql_1.isScalarType)(type)) {
        specifiers.push(Interfaces_js_1.MapperKind.SCALAR_TYPE);
      }
      return specifiers;
    }
    function getTypeMapper2(schema, schemaMapper, typeName) {
      const specifiers = getTypeSpecifiers2(schema, typeName);
      let typeMapper;
      const stack = [...specifiers];
      while (!typeMapper && stack.length > 0) {
        const next = stack.pop();
        typeMapper = schemaMapper[next];
      }
      return typeMapper != null ? typeMapper : null;
    }
    function getFieldSpecifiers2(schema, typeName) {
      var _a2, _b, _c2;
      const type = schema.getType(typeName);
      const specifiers = [Interfaces_js_1.MapperKind.FIELD];
      if ((0, graphql_1.isObjectType)(type)) {
        specifiers.push(Interfaces_js_1.MapperKind.COMPOSITE_FIELD, Interfaces_js_1.MapperKind.OBJECT_FIELD);
        if (typeName === ((_a2 = schema.getQueryType()) === null || _a2 === void 0 ? void 0 : _a2.name)) {
          specifiers.push(Interfaces_js_1.MapperKind.ROOT_FIELD, Interfaces_js_1.MapperKind.QUERY_ROOT_FIELD);
        } else if (typeName === ((_b = schema.getMutationType()) === null || _b === void 0 ? void 0 : _b.name)) {
          specifiers.push(Interfaces_js_1.MapperKind.ROOT_FIELD, Interfaces_js_1.MapperKind.MUTATION_ROOT_FIELD);
        } else if (typeName === ((_c2 = schema.getSubscriptionType()) === null || _c2 === void 0 ? void 0 : _c2.name)) {
          specifiers.push(Interfaces_js_1.MapperKind.ROOT_FIELD, Interfaces_js_1.MapperKind.SUBSCRIPTION_ROOT_FIELD);
        }
      } else if ((0, graphql_1.isInterfaceType)(type)) {
        specifiers.push(Interfaces_js_1.MapperKind.COMPOSITE_FIELD, Interfaces_js_1.MapperKind.INTERFACE_FIELD);
      } else if ((0, graphql_1.isInputObjectType)(type)) {
        specifiers.push(Interfaces_js_1.MapperKind.INPUT_OBJECT_FIELD);
      }
      return specifiers;
    }
    function getFieldMapper2(schema, schemaMapper, typeName) {
      const specifiers = getFieldSpecifiers2(schema, typeName);
      let fieldMapper;
      const stack = [...specifiers];
      while (!fieldMapper && stack.length > 0) {
        const next = stack.pop();
        fieldMapper = schemaMapper[next];
      }
      return fieldMapper !== null && fieldMapper !== void 0 ? fieldMapper : null;
    }
    function getArgumentMapper2(schemaMapper) {
      const argumentMapper = schemaMapper[Interfaces_js_1.MapperKind.ARGUMENT];
      return argumentMapper != null ? argumentMapper : null;
    }
    function getDirectiveMapper2(schemaMapper) {
      const directiveMapper = schemaMapper[Interfaces_js_1.MapperKind.DIRECTIVE];
      return directiveMapper != null ? directiveMapper : null;
    }
    function getEnumValueMapper2(schemaMapper) {
      const enumValueMapper = schemaMapper[Interfaces_js_1.MapperKind.ENUM_VALUE];
      return enumValueMapper != null ? enumValueMapper : null;
    }
    function correctASTNodes2(type) {
      if ((0, graphql_1.isObjectType)(type)) {
        const config2 = type.toConfig();
        if (config2.astNode != null) {
          const fields = [];
          for (const fieldName in config2.fields) {
            const fieldConfig = config2.fields[fieldName];
            if (fieldConfig.astNode != null) {
              fields.push(fieldConfig.astNode);
            }
          }
          config2.astNode = {
            ...config2.astNode,
            kind: graphql_1.Kind.OBJECT_TYPE_DEFINITION,
            fields
          };
        }
        if (config2.extensionASTNodes != null) {
          config2.extensionASTNodes = config2.extensionASTNodes.map((node) => ({
            ...node,
            kind: graphql_1.Kind.OBJECT_TYPE_EXTENSION,
            fields: void 0
          }));
        }
        return new graphql_1.GraphQLObjectType(config2);
      } else if ((0, graphql_1.isInterfaceType)(type)) {
        const config2 = type.toConfig();
        if (config2.astNode != null) {
          const fields = [];
          for (const fieldName in config2.fields) {
            const fieldConfig = config2.fields[fieldName];
            if (fieldConfig.astNode != null) {
              fields.push(fieldConfig.astNode);
            }
          }
          config2.astNode = {
            ...config2.astNode,
            kind: graphql_1.Kind.INTERFACE_TYPE_DEFINITION,
            fields
          };
        }
        if (config2.extensionASTNodes != null) {
          config2.extensionASTNodes = config2.extensionASTNodes.map((node) => ({
            ...node,
            kind: graphql_1.Kind.INTERFACE_TYPE_EXTENSION,
            fields: void 0
          }));
        }
        return new graphql_1.GraphQLInterfaceType(config2);
      } else if ((0, graphql_1.isInputObjectType)(type)) {
        const config2 = type.toConfig();
        if (config2.astNode != null) {
          const fields = [];
          for (const fieldName in config2.fields) {
            const fieldConfig = config2.fields[fieldName];
            if (fieldConfig.astNode != null) {
              fields.push(fieldConfig.astNode);
            }
          }
          config2.astNode = {
            ...config2.astNode,
            kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,
            fields
          };
        }
        if (config2.extensionASTNodes != null) {
          config2.extensionASTNodes = config2.extensionASTNodes.map((node) => ({
            ...node,
            kind: graphql_1.Kind.INPUT_OBJECT_TYPE_EXTENSION,
            fields: void 0
          }));
        }
        return new graphql_1.GraphQLInputObjectType(config2);
      } else if ((0, graphql_1.isEnumType)(type)) {
        const config2 = type.toConfig();
        if (config2.astNode != null) {
          const values = [];
          for (const enumKey in config2.values) {
            const enumValueConfig = config2.values[enumKey];
            if (enumValueConfig.astNode != null) {
              values.push(enumValueConfig.astNode);
            }
          }
          config2.astNode = {
            ...config2.astNode,
            values
          };
        }
        if (config2.extensionASTNodes != null) {
          config2.extensionASTNodes = config2.extensionASTNodes.map((node) => ({
            ...node,
            values: void 0
          }));
        }
        return new graphql_1.GraphQLEnumType(config2);
      } else {
        return type;
      }
    }
    exports2.correctASTNodes = correctASTNodes2;
  }
});

// node_modules/@graphql-tools/utils/cjs/filterSchema.js
var require_filterSchema = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/filterSchema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.filterSchema = void 0;
    var graphql_1 = require_graphql2();
    var Interfaces_js_1 = require_Interfaces();
    var mapSchema_js_1 = require_mapSchema();
    function filterSchema({ schema, typeFilter = () => true, fieldFilter = void 0, rootFieldFilter = void 0, objectFieldFilter = void 0, interfaceFieldFilter = void 0, inputObjectFieldFilter = void 0, argumentFilter = void 0 }) {
      const filteredSchema = (0, mapSchema_js_1.mapSchema)(schema, {
        [Interfaces_js_1.MapperKind.QUERY]: (type) => filterRootFields(type, "Query", rootFieldFilter, argumentFilter),
        [Interfaces_js_1.MapperKind.MUTATION]: (type) => filterRootFields(type, "Mutation", rootFieldFilter, argumentFilter),
        [Interfaces_js_1.MapperKind.SUBSCRIPTION]: (type) => filterRootFields(type, "Subscription", rootFieldFilter, argumentFilter),
        [Interfaces_js_1.MapperKind.OBJECT_TYPE]: (type) => typeFilter(type.name, type) ? filterElementFields(graphql_1.GraphQLObjectType, type, objectFieldFilter || fieldFilter, argumentFilter) : null,
        [Interfaces_js_1.MapperKind.INTERFACE_TYPE]: (type) => typeFilter(type.name, type) ? filterElementFields(graphql_1.GraphQLInterfaceType, type, interfaceFieldFilter || fieldFilter, argumentFilter) : null,
        [Interfaces_js_1.MapperKind.INPUT_OBJECT_TYPE]: (type) => typeFilter(type.name, type) ? filterElementFields(graphql_1.GraphQLInputObjectType, type, inputObjectFieldFilter || fieldFilter) : null,
        [Interfaces_js_1.MapperKind.UNION_TYPE]: (type) => typeFilter(type.name, type) ? void 0 : null,
        [Interfaces_js_1.MapperKind.ENUM_TYPE]: (type) => typeFilter(type.name, type) ? void 0 : null,
        [Interfaces_js_1.MapperKind.SCALAR_TYPE]: (type) => typeFilter(type.name, type) ? void 0 : null
      });
      return filteredSchema;
    }
    exports2.filterSchema = filterSchema;
    function filterRootFields(type, operation, rootFieldFilter, argumentFilter) {
      if (rootFieldFilter || argumentFilter) {
        const config2 = type.toConfig();
        for (const fieldName in config2.fields) {
          const field = config2.fields[fieldName];
          if (rootFieldFilter && !rootFieldFilter(operation, fieldName, config2.fields[fieldName])) {
            delete config2.fields[fieldName];
          } else if (argumentFilter && field.args) {
            for (const argName in field.args) {
              if (!argumentFilter(operation, fieldName, argName, field.args[argName])) {
                delete field.args[argName];
              }
            }
          }
        }
        return new graphql_1.GraphQLObjectType(config2);
      }
      return type;
    }
    function filterElementFields(ElementConstructor, type, fieldFilter, argumentFilter) {
      if (fieldFilter || argumentFilter) {
        const config2 = type.toConfig();
        for (const fieldName in config2.fields) {
          const field = config2.fields[fieldName];
          if (fieldFilter && !fieldFilter(type.name, fieldName, config2.fields[fieldName])) {
            delete config2.fields[fieldName];
          } else if (argumentFilter && "args" in field) {
            for (const argName in field.args) {
              if (!argumentFilter(type.name, fieldName, argName, field.args[argName])) {
                delete field.args[argName];
              }
            }
          }
        }
        return new ElementConstructor(config2);
      }
    }
  }
});

// node_modules/@graphql-tools/utils/cjs/heal.js
var require_heal = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/heal.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.healTypes = exports2.healSchema = void 0;
    var graphql_1 = require_graphql2();
    function healSchema2(schema) {
      healTypes2(schema.getTypeMap(), schema.getDirectives());
      return schema;
    }
    exports2.healSchema = healSchema2;
    function healTypes2(originalTypeMap, directives) {
      const actualNamedTypeMap = /* @__PURE__ */ Object.create(null);
      for (const typeName in originalTypeMap) {
        const namedType = originalTypeMap[typeName];
        if (namedType == null || typeName.startsWith("__")) {
          continue;
        }
        const actualName = namedType.name;
        if (actualName.startsWith("__")) {
          continue;
        }
        if (actualNamedTypeMap[actualName] != null) {
          console.warn(`Duplicate schema type name ${actualName} found; keeping the existing one found in the schema`);
          continue;
        }
        actualNamedTypeMap[actualName] = namedType;
      }
      for (const typeName in actualNamedTypeMap) {
        const namedType = actualNamedTypeMap[typeName];
        originalTypeMap[typeName] = namedType;
      }
      for (const decl of directives) {
        decl.args = decl.args.filter((arg) => {
          arg.type = healType(arg.type);
          return arg.type !== null;
        });
      }
      for (const typeName in originalTypeMap) {
        const namedType = originalTypeMap[typeName];
        if (!typeName.startsWith("__") && typeName in actualNamedTypeMap) {
          if (namedType != null) {
            healNamedType(namedType);
          }
        }
      }
      for (const typeName in originalTypeMap) {
        if (!typeName.startsWith("__") && !(typeName in actualNamedTypeMap)) {
          delete originalTypeMap[typeName];
        }
      }
      function healNamedType(type) {
        if ((0, graphql_1.isObjectType)(type)) {
          healFields(type);
          healInterfaces(type);
          return;
        } else if ((0, graphql_1.isInterfaceType)(type)) {
          healFields(type);
          if ("getInterfaces" in type) {
            healInterfaces(type);
          }
          return;
        } else if ((0, graphql_1.isUnionType)(type)) {
          healUnderlyingTypes(type);
          return;
        } else if ((0, graphql_1.isInputObjectType)(type)) {
          healInputFields(type);
          return;
        } else if ((0, graphql_1.isLeafType)(type)) {
          return;
        }
        throw new Error(`Unexpected schema type: ${type}`);
      }
      function healFields(type) {
        const fieldMap = type.getFields();
        for (const [key, field] of Object.entries(fieldMap)) {
          field.args.map((arg) => {
            arg.type = healType(arg.type);
            return arg.type === null ? null : arg;
          }).filter(Boolean);
          field.type = healType(field.type);
          if (field.type === null) {
            delete fieldMap[key];
          }
        }
      }
      function healInterfaces(type) {
        if ("getInterfaces" in type) {
          const interfaces = type.getInterfaces();
          interfaces.push(...interfaces.splice(0).map((iface) => healType(iface)).filter(Boolean));
        }
      }
      function healInputFields(type) {
        const fieldMap = type.getFields();
        for (const [key, field] of Object.entries(fieldMap)) {
          field.type = healType(field.type);
          if (field.type === null) {
            delete fieldMap[key];
          }
        }
      }
      function healUnderlyingTypes(type) {
        const types = type.getTypes();
        types.push(...types.splice(0).map((t) => healType(t)).filter(Boolean));
      }
      function healType(type) {
        if ((0, graphql_1.isListType)(type)) {
          const healedType = healType(type.ofType);
          return healedType != null ? new graphql_1.GraphQLList(healedType) : null;
        } else if ((0, graphql_1.isNonNullType)(type)) {
          const healedType = healType(type.ofType);
          return healedType != null ? new graphql_1.GraphQLNonNull(healedType) : null;
        } else if ((0, graphql_1.isNamedType)(type)) {
          const officialType = originalTypeMap[type.name];
          if (officialType && type !== officialType) {
            return officialType;
          }
        }
        return type;
      }
    }
    exports2.healTypes = healTypes2;
  }
});

// node_modules/@graphql-tools/utils/cjs/getResolversFromSchema.js
var require_getResolversFromSchema = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/getResolversFromSchema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolversFromSchema = void 0;
    var graphql_1 = require_graphql2();
    function getResolversFromSchema(schema, includeDefaultMergedResolver) {
      var _a2, _b;
      const resolvers2 = /* @__PURE__ */ Object.create(null);
      const typeMap = schema.getTypeMap();
      for (const typeName in typeMap) {
        if (!typeName.startsWith("__")) {
          const type = typeMap[typeName];
          if ((0, graphql_1.isScalarType)(type)) {
            if (!(0, graphql_1.isSpecifiedScalarType)(type)) {
              const config2 = type.toConfig();
              delete config2.astNode;
              resolvers2[typeName] = new graphql_1.GraphQLScalarType(config2);
            }
          } else if ((0, graphql_1.isEnumType)(type)) {
            resolvers2[typeName] = {};
            const values = type.getValues();
            for (const value of values) {
              resolvers2[typeName][value.name] = value.value;
            }
          } else if ((0, graphql_1.isInterfaceType)(type)) {
            if (type.resolveType != null) {
              resolvers2[typeName] = {
                __resolveType: type.resolveType
              };
            }
          } else if ((0, graphql_1.isUnionType)(type)) {
            if (type.resolveType != null) {
              resolvers2[typeName] = {
                __resolveType: type.resolveType
              };
            }
          } else if ((0, graphql_1.isObjectType)(type)) {
            resolvers2[typeName] = {};
            if (type.isTypeOf != null) {
              resolvers2[typeName].__isTypeOf = type.isTypeOf;
            }
            const fields = type.getFields();
            for (const fieldName in fields) {
              const field = fields[fieldName];
              if (field.subscribe != null) {
                resolvers2[typeName][fieldName] = resolvers2[typeName][fieldName] || {};
                resolvers2[typeName][fieldName].subscribe = field.subscribe;
              }
              if (field.resolve != null && ((_a2 = field.resolve) === null || _a2 === void 0 ? void 0 : _a2.name) !== "defaultFieldResolver") {
                switch ((_b = field.resolve) === null || _b === void 0 ? void 0 : _b.name) {
                  case "defaultMergedResolver":
                    if (!includeDefaultMergedResolver) {
                      continue;
                    }
                    break;
                  case "defaultFieldResolver":
                    continue;
                }
                resolvers2[typeName][fieldName] = resolvers2[typeName][fieldName] || {};
                resolvers2[typeName][fieldName].resolve = field.resolve;
              }
            }
          }
        }
      }
      return resolvers2;
    }
    exports2.getResolversFromSchema = getResolversFromSchema;
  }
});

// node_modules/@graphql-tools/utils/cjs/forEachField.js
var require_forEachField = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/forEachField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.forEachField = void 0;
    var graphql_1 = require_graphql2();
    function forEachField2(schema, fn2) {
      const typeMap = schema.getTypeMap();
      for (const typeName in typeMap) {
        const type = typeMap[typeName];
        if (!(0, graphql_1.getNamedType)(type).name.startsWith("__") && (0, graphql_1.isObjectType)(type)) {
          const fields = type.getFields();
          for (const fieldName in fields) {
            const field = fields[fieldName];
            fn2(field, typeName, fieldName);
          }
        }
      }
    }
    exports2.forEachField = forEachField2;
  }
});

// node_modules/@graphql-tools/utils/cjs/forEachDefaultValue.js
var require_forEachDefaultValue = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/forEachDefaultValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.forEachDefaultValue = void 0;
    var graphql_1 = require_graphql2();
    function forEachDefaultValue2(schema, fn2) {
      const typeMap = schema.getTypeMap();
      for (const typeName in typeMap) {
        const type = typeMap[typeName];
        if (!(0, graphql_1.getNamedType)(type).name.startsWith("__")) {
          if ((0, graphql_1.isObjectType)(type)) {
            const fields = type.getFields();
            for (const fieldName in fields) {
              const field = fields[fieldName];
              for (const arg of field.args) {
                arg.defaultValue = fn2(arg.type, arg.defaultValue);
              }
            }
          } else if ((0, graphql_1.isInputObjectType)(type)) {
            const fields = type.getFields();
            for (const fieldName in fields) {
              const field = fields[fieldName];
              field.defaultValue = fn2(field.type, field.defaultValue);
            }
          }
        }
      }
    }
    exports2.forEachDefaultValue = forEachDefaultValue2;
  }
});

// node_modules/@graphql-tools/utils/cjs/addTypes.js
var require_addTypes = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/addTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.addTypes = void 0;
    var graphql_1 = require_graphql2();
    var getObjectTypeFromTypeMap_js_1 = require_getObjectTypeFromTypeMap();
    var rewire_js_1 = require_rewire();
    function addTypes(schema, newTypesOrDirectives) {
      const config2 = schema.toConfig();
      const originalTypeMap = {};
      for (const type of config2.types) {
        originalTypeMap[type.name] = type;
      }
      const originalDirectiveMap = {};
      for (const directive of config2.directives) {
        originalDirectiveMap[directive.name] = directive;
      }
      for (const newTypeOrDirective of newTypesOrDirectives) {
        if ((0, graphql_1.isNamedType)(newTypeOrDirective)) {
          originalTypeMap[newTypeOrDirective.name] = newTypeOrDirective;
        } else if ((0, graphql_1.isDirective)(newTypeOrDirective)) {
          originalDirectiveMap[newTypeOrDirective.name] = newTypeOrDirective;
        }
      }
      const { typeMap, directives } = (0, rewire_js_1.rewireTypes)(originalTypeMap, Object.values(originalDirectiveMap));
      return new graphql_1.GraphQLSchema({
        ...config2,
        query: (0, getObjectTypeFromTypeMap_js_1.getObjectTypeFromTypeMap)(typeMap, schema.getQueryType()),
        mutation: (0, getObjectTypeFromTypeMap_js_1.getObjectTypeFromTypeMap)(typeMap, schema.getMutationType()),
        subscription: (0, getObjectTypeFromTypeMap_js_1.getObjectTypeFromTypeMap)(typeMap, schema.getSubscriptionType()),
        types: Object.values(typeMap),
        directives
      });
    }
    exports2.addTypes = addTypes;
  }
});

// node_modules/@graphql-tools/utils/cjs/prune.js
var require_prune = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/prune.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pruneSchema = void 0;
    var graphql_1 = require_graphql2();
    var mapSchema_js_1 = require_mapSchema();
    var Interfaces_js_1 = require_Interfaces();
    var rootTypes_js_1 = require_rootTypes();
    var get_implementing_types_js_1 = require_get_implementing_types();
    function pruneSchema(schema, options = {}) {
      const { skipEmptyCompositeTypePruning, skipEmptyUnionPruning, skipPruning, skipUnimplementedInterfacesPruning, skipUnusedTypesPruning } = options;
      let prunedTypes = [];
      let prunedSchema = schema;
      do {
        let visited = visitSchema(prunedSchema);
        if (skipPruning) {
          const revisit = [];
          for (const typeName in prunedSchema.getTypeMap()) {
            if (typeName.startsWith("__")) {
              continue;
            }
            const type = prunedSchema.getType(typeName);
            if (type && skipPruning(type)) {
              revisit.push(typeName);
            }
          }
          visited = visitQueue(revisit, prunedSchema, visited);
        }
        prunedTypes = [];
        prunedSchema = (0, mapSchema_js_1.mapSchema)(prunedSchema, {
          [Interfaces_js_1.MapperKind.TYPE]: (type) => {
            if (!visited.has(type.name) && !(0, graphql_1.isSpecifiedScalarType)(type)) {
              if ((0, graphql_1.isUnionType)(type) || (0, graphql_1.isInputObjectType)(type) || (0, graphql_1.isInterfaceType)(type) || (0, graphql_1.isObjectType)(type) || (0, graphql_1.isScalarType)(type)) {
                if (skipUnusedTypesPruning) {
                  return type;
                }
                if ((0, graphql_1.isUnionType)(type) && skipEmptyUnionPruning && !Object.keys(type.getTypes()).length) {
                  return type;
                }
                if ((0, graphql_1.isInputObjectType)(type) || (0, graphql_1.isInterfaceType)(type) || (0, graphql_1.isObjectType)(type)) {
                  if (skipEmptyCompositeTypePruning && !Object.keys(type.getFields()).length) {
                    return type;
                  }
                }
                if ((0, graphql_1.isInterfaceType)(type) && skipUnimplementedInterfacesPruning) {
                  return type;
                }
              }
              prunedTypes.push(type.name);
              visited.delete(type.name);
              return null;
            }
            return type;
          }
        });
      } while (prunedTypes.length);
      return prunedSchema;
    }
    exports2.pruneSchema = pruneSchema;
    function visitSchema(schema) {
      const queue = [];
      for (const type of (0, rootTypes_js_1.getRootTypes)(schema)) {
        queue.push(type.name);
      }
      return visitQueue(queue, schema);
    }
    function visitQueue(queue, schema, visited = /* @__PURE__ */ new Set()) {
      const revisit = /* @__PURE__ */ new Map();
      while (queue.length) {
        const typeName = queue.pop();
        if (visited.has(typeName) && revisit[typeName] !== true) {
          continue;
        }
        const type = schema.getType(typeName);
        if (type) {
          if ((0, graphql_1.isUnionType)(type)) {
            queue.push(...type.getTypes().map((type2) => type2.name));
          }
          if ((0, graphql_1.isInterfaceType)(type) && revisit[typeName] === true) {
            queue.push(...(0, get_implementing_types_js_1.getImplementingTypes)(type.name, schema));
            revisit[typeName] = false;
          }
          if ((0, graphql_1.isEnumType)(type)) {
            queue.push(...type.getValues().flatMap((value) => {
              if (value.astNode) {
                return getDirectivesArgumentsTypeNames(schema, value.astNode);
              }
              return [];
            }));
          }
          if ("getInterfaces" in type) {
            queue.push(...type.getInterfaces().map((iface) => iface.name));
          }
          if ("getFields" in type) {
            const fields = type.getFields();
            const entries = Object.entries(fields);
            if (!entries.length) {
              continue;
            }
            for (const [, field] of entries) {
              if ((0, graphql_1.isObjectType)(type)) {
                queue.push(...field.args.flatMap((arg) => {
                  const typeNames = [(0, graphql_1.getNamedType)(arg.type).name];
                  if (arg.astNode) {
                    typeNames.push(...getDirectivesArgumentsTypeNames(schema, arg.astNode));
                  }
                  return typeNames;
                }));
              }
              const namedType = (0, graphql_1.getNamedType)(field.type);
              queue.push(namedType.name);
              if (field.astNode) {
                queue.push(...getDirectivesArgumentsTypeNames(schema, field.astNode));
              }
              if ((0, graphql_1.isInterfaceType)(namedType) && !(namedType.name in revisit)) {
                revisit[namedType.name] = true;
              }
            }
          }
          if (type.astNode) {
            queue.push(...getDirectivesArgumentsTypeNames(schema, type.astNode));
          }
          visited.add(typeName);
        }
      }
      return visited;
    }
    function getDirectivesArgumentsTypeNames(schema, astNode) {
      var _a2;
      return ((_a2 = astNode.directives) !== null && _a2 !== void 0 ? _a2 : []).flatMap((directive) => {
        var _a3, _b;
        return (_b = (_a3 = schema.getDirective(directive.name.value)) === null || _a3 === void 0 ? void 0 : _a3.args.map((arg) => (0, graphql_1.getNamedType)(arg.type).name)) !== null && _b !== void 0 ? _b : [];
      });
    }
  }
});

// node_modules/@graphql-tools/utils/cjs/mergeDeep.js
var require_mergeDeep = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/mergeDeep.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeDeep = void 0;
    var helpers_js_1 = require_helpers();
    function mergeDeep2(sources, respectPrototype = false) {
      const target = sources[0] || {};
      const output = {};
      if (respectPrototype) {
        Object.setPrototypeOf(output, Object.create(Object.getPrototypeOf(target)));
      }
      for (const source of sources) {
        if (isObject2(target) && isObject2(source)) {
          if (respectPrototype) {
            const outputPrototype = Object.getPrototypeOf(output);
            const sourcePrototype = Object.getPrototypeOf(source);
            if (sourcePrototype) {
              for (const key of Object.getOwnPropertyNames(sourcePrototype)) {
                const descriptor = Object.getOwnPropertyDescriptor(sourcePrototype, key);
                if ((0, helpers_js_1.isSome)(descriptor)) {
                  Object.defineProperty(outputPrototype, key, descriptor);
                }
              }
            }
          }
          for (const key in source) {
            if (isObject2(source[key])) {
              if (!(key in output)) {
                Object.assign(output, { [key]: source[key] });
              } else {
                output[key] = mergeDeep2([output[key], source[key]], respectPrototype);
              }
            } else {
              Object.assign(output, { [key]: source[key] });
            }
          }
        }
      }
      return output;
    }
    exports2.mergeDeep = mergeDeep2;
    function isObject2(item) {
      return item && typeof item === "object" && !Array.isArray(item);
    }
  }
});

// node_modules/@graphql-tools/utils/cjs/selectionSets.js
var require_selectionSets = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/selectionSets.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseSelectionSet = void 0;
    var graphql_1 = require_graphql2();
    function parseSelectionSet(selectionSet, options) {
      const query = (0, graphql_1.parse)(selectionSet, options).definitions[0];
      return query.selectionSet;
    }
    exports2.parseSelectionSet = parseSelectionSet;
  }
});

// node_modules/@graphql-tools/utils/cjs/getResponseKeyFromInfo.js
var require_getResponseKeyFromInfo = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/getResponseKeyFromInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResponseKeyFromInfo = void 0;
    function getResponseKeyFromInfo(info) {
      return info.fieldNodes[0].alias != null ? info.fieldNodes[0].alias.value : info.fieldName;
    }
    exports2.getResponseKeyFromInfo = getResponseKeyFromInfo;
  }
});

// node_modules/@graphql-tools/utils/cjs/fields.js
var require_fields = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/fields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.modifyObjectFields = exports2.selectObjectFields = exports2.removeObjectFields = exports2.appendObjectFields = void 0;
    var graphql_1 = require_graphql2();
    var Interfaces_js_1 = require_Interfaces();
    var mapSchema_js_1 = require_mapSchema();
    var addTypes_js_1 = require_addTypes();
    function appendObjectFields(schema, typeName, additionalFields) {
      if (schema.getType(typeName) == null) {
        return (0, addTypes_js_1.addTypes)(schema, [
          new graphql_1.GraphQLObjectType({
            name: typeName,
            fields: additionalFields
          })
        ]);
      }
      return (0, mapSchema_js_1.mapSchema)(schema, {
        [Interfaces_js_1.MapperKind.OBJECT_TYPE]: (type) => {
          if (type.name === typeName) {
            const config2 = type.toConfig();
            const originalFieldConfigMap = config2.fields;
            const newFieldConfigMap = {};
            for (const fieldName in originalFieldConfigMap) {
              newFieldConfigMap[fieldName] = originalFieldConfigMap[fieldName];
            }
            for (const fieldName in additionalFields) {
              newFieldConfigMap[fieldName] = additionalFields[fieldName];
            }
            return (0, mapSchema_js_1.correctASTNodes)(new graphql_1.GraphQLObjectType({
              ...config2,
              fields: newFieldConfigMap
            }));
          }
        }
      });
    }
    exports2.appendObjectFields = appendObjectFields;
    function removeObjectFields(schema, typeName, testFn) {
      const removedFields = {};
      const newSchema = (0, mapSchema_js_1.mapSchema)(schema, {
        [Interfaces_js_1.MapperKind.OBJECT_TYPE]: (type) => {
          if (type.name === typeName) {
            const config2 = type.toConfig();
            const originalFieldConfigMap = config2.fields;
            const newFieldConfigMap = {};
            for (const fieldName in originalFieldConfigMap) {
              const originalFieldConfig = originalFieldConfigMap[fieldName];
              if (testFn(fieldName, originalFieldConfig)) {
                removedFields[fieldName] = originalFieldConfig;
              } else {
                newFieldConfigMap[fieldName] = originalFieldConfig;
              }
            }
            return (0, mapSchema_js_1.correctASTNodes)(new graphql_1.GraphQLObjectType({
              ...config2,
              fields: newFieldConfigMap
            }));
          }
        }
      });
      return [newSchema, removedFields];
    }
    exports2.removeObjectFields = removeObjectFields;
    function selectObjectFields(schema, typeName, testFn) {
      const selectedFields = {};
      (0, mapSchema_js_1.mapSchema)(schema, {
        [Interfaces_js_1.MapperKind.OBJECT_TYPE]: (type) => {
          if (type.name === typeName) {
            const config2 = type.toConfig();
            const originalFieldConfigMap = config2.fields;
            for (const fieldName in originalFieldConfigMap) {
              const originalFieldConfig = originalFieldConfigMap[fieldName];
              if (testFn(fieldName, originalFieldConfig)) {
                selectedFields[fieldName] = originalFieldConfig;
              }
            }
          }
          return void 0;
        }
      });
      return selectedFields;
    }
    exports2.selectObjectFields = selectObjectFields;
    function modifyObjectFields(schema, typeName, testFn, newFields) {
      const removedFields = {};
      const newSchema = (0, mapSchema_js_1.mapSchema)(schema, {
        [Interfaces_js_1.MapperKind.OBJECT_TYPE]: (type) => {
          if (type.name === typeName) {
            const config2 = type.toConfig();
            const originalFieldConfigMap = config2.fields;
            const newFieldConfigMap = {};
            for (const fieldName in originalFieldConfigMap) {
              const originalFieldConfig = originalFieldConfigMap[fieldName];
              if (testFn(fieldName, originalFieldConfig)) {
                removedFields[fieldName] = originalFieldConfig;
              } else {
                newFieldConfigMap[fieldName] = originalFieldConfig;
              }
            }
            for (const fieldName in newFields) {
              const fieldConfig = newFields[fieldName];
              newFieldConfigMap[fieldName] = fieldConfig;
            }
            return (0, mapSchema_js_1.correctASTNodes)(new graphql_1.GraphQLObjectType({
              ...config2,
              fields: newFieldConfigMap
            }));
          }
        }
      });
      return [newSchema, removedFields];
    }
    exports2.modifyObjectFields = modifyObjectFields;
  }
});

// node_modules/@graphql-tools/utils/cjs/renameType.js
var require_renameType = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/renameType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.renameType = void 0;
    var graphql_1 = require_graphql2();
    function renameType(type, newTypeName) {
      if ((0, graphql_1.isObjectType)(type)) {
        return new graphql_1.GraphQLObjectType({
          ...type.toConfig(),
          name: newTypeName,
          astNode: type.astNode == null ? type.astNode : {
            ...type.astNode,
            name: {
              ...type.astNode.name,
              value: newTypeName
            }
          },
          extensionASTNodes: type.extensionASTNodes == null ? type.extensionASTNodes : type.extensionASTNodes.map((node) => ({
            ...node,
            name: {
              ...node.name,
              value: newTypeName
            }
          }))
        });
      } else if ((0, graphql_1.isInterfaceType)(type)) {
        return new graphql_1.GraphQLInterfaceType({
          ...type.toConfig(),
          name: newTypeName,
          astNode: type.astNode == null ? type.astNode : {
            ...type.astNode,
            name: {
              ...type.astNode.name,
              value: newTypeName
            }
          },
          extensionASTNodes: type.extensionASTNodes == null ? type.extensionASTNodes : type.extensionASTNodes.map((node) => ({
            ...node,
            name: {
              ...node.name,
              value: newTypeName
            }
          }))
        });
      } else if ((0, graphql_1.isUnionType)(type)) {
        return new graphql_1.GraphQLUnionType({
          ...type.toConfig(),
          name: newTypeName,
          astNode: type.astNode == null ? type.astNode : {
            ...type.astNode,
            name: {
              ...type.astNode.name,
              value: newTypeName
            }
          },
          extensionASTNodes: type.extensionASTNodes == null ? type.extensionASTNodes : type.extensionASTNodes.map((node) => ({
            ...node,
            name: {
              ...node.name,
              value: newTypeName
            }
          }))
        });
      } else if ((0, graphql_1.isInputObjectType)(type)) {
        return new graphql_1.GraphQLInputObjectType({
          ...type.toConfig(),
          name: newTypeName,
          astNode: type.astNode == null ? type.astNode : {
            ...type.astNode,
            name: {
              ...type.astNode.name,
              value: newTypeName
            }
          },
          extensionASTNodes: type.extensionASTNodes == null ? type.extensionASTNodes : type.extensionASTNodes.map((node) => ({
            ...node,
            name: {
              ...node.name,
              value: newTypeName
            }
          }))
        });
      } else if ((0, graphql_1.isEnumType)(type)) {
        return new graphql_1.GraphQLEnumType({
          ...type.toConfig(),
          name: newTypeName,
          astNode: type.astNode == null ? type.astNode : {
            ...type.astNode,
            name: {
              ...type.astNode.name,
              value: newTypeName
            }
          },
          extensionASTNodes: type.extensionASTNodes == null ? type.extensionASTNodes : type.extensionASTNodes.map((node) => ({
            ...node,
            name: {
              ...node.name,
              value: newTypeName
            }
          }))
        });
      } else if ((0, graphql_1.isScalarType)(type)) {
        return new graphql_1.GraphQLScalarType({
          ...type.toConfig(),
          name: newTypeName,
          astNode: type.astNode == null ? type.astNode : {
            ...type.astNode,
            name: {
              ...type.astNode.name,
              value: newTypeName
            }
          },
          extensionASTNodes: type.extensionASTNodes == null ? type.extensionASTNodes : type.extensionASTNodes.map((node) => ({
            ...node,
            name: {
              ...node.name,
              value: newTypeName
            }
          }))
        });
      }
      throw new Error(`Unknown type ${type}.`);
    }
    exports2.renameType = renameType;
  }
});

// node_modules/@graphql-tools/utils/cjs/mapAsyncIterator.js
var require_mapAsyncIterator2 = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/mapAsyncIterator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mapAsyncIterator = void 0;
    function mapAsyncIterator(iterator, callback, rejectCallback) {
      let $return;
      let abruptClose;
      if (typeof iterator.return === "function") {
        $return = iterator.return;
        abruptClose = (error) => {
          const rethrow = () => Promise.reject(error);
          return $return.call(iterator).then(rethrow, rethrow);
        };
      }
      function mapResult(result) {
        return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);
      }
      let mapReject;
      if (rejectCallback) {
        const reject = rejectCallback;
        mapReject = (error) => asyncMapValue(error, reject).then(iteratorResult, abruptClose);
      }
      return {
        next() {
          return iterator.next().then(mapResult, mapReject);
        },
        return() {
          return $return ? $return.call(iterator).then(mapResult, mapReject) : Promise.resolve({ value: void 0, done: true });
        },
        throw(error) {
          if (typeof iterator.throw === "function") {
            return iterator.throw(error).then(mapResult, mapReject);
          }
          return Promise.reject(error).catch(abruptClose);
        },
        [Symbol.asyncIterator]() {
          return this;
        }
      };
    }
    exports2.mapAsyncIterator = mapAsyncIterator;
    function asyncMapValue(value, callback) {
      return new Promise((resolve) => resolve(callback(value)));
    }
    function iteratorResult(value) {
      return { value, done: false };
    }
  }
});

// node_modules/@graphql-tools/utils/cjs/updateArgument.js
var require_updateArgument = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/updateArgument.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createVariableNameGenerator = exports2.updateArgument = void 0;
    var graphql_1 = require_graphql2();
    var astFromType_js_1 = require_astFromType();
    function updateArgument(argumentNodes, variableDefinitionsMap, variableValues, argName, varName, type, value) {
      argumentNodes[argName] = {
        kind: graphql_1.Kind.ARGUMENT,
        name: {
          kind: graphql_1.Kind.NAME,
          value: argName
        },
        value: {
          kind: graphql_1.Kind.VARIABLE,
          name: {
            kind: graphql_1.Kind.NAME,
            value: varName
          }
        }
      };
      variableDefinitionsMap[varName] = {
        kind: graphql_1.Kind.VARIABLE_DEFINITION,
        variable: {
          kind: graphql_1.Kind.VARIABLE,
          name: {
            kind: graphql_1.Kind.NAME,
            value: varName
          }
        },
        type: (0, astFromType_js_1.astFromType)(type)
      };
      if (value !== void 0) {
        variableValues[varName] = value;
        return;
      }
      if (varName in variableValues) {
        delete variableValues[varName];
      }
    }
    exports2.updateArgument = updateArgument;
    function createVariableNameGenerator(variableDefinitionMap) {
      let varCounter = 0;
      return (argName) => {
        let varName;
        do {
          varName = `_v${(varCounter++).toString()}_${argName}`;
        } while (varName in variableDefinitionMap);
        return varName;
      };
    }
    exports2.createVariableNameGenerator = createVariableNameGenerator;
  }
});

// node_modules/@graphql-tools/utils/cjs/implementsAbstractType.js
var require_implementsAbstractType = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/implementsAbstractType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.implementsAbstractType = void 0;
    var graphql_1 = require_graphql2();
    function implementsAbstractType(schema, typeA, typeB) {
      if (typeB == null || typeA == null) {
        return false;
      } else if (typeA === typeB) {
        return true;
      } else if ((0, graphql_1.isCompositeType)(typeA) && (0, graphql_1.isCompositeType)(typeB)) {
        return (0, graphql_1.doTypesOverlap)(schema, typeA, typeB);
      }
      return false;
    }
    exports2.implementsAbstractType = implementsAbstractType;
  }
});

// node_modules/@graphql-tools/utils/cjs/observableToAsyncIterable.js
var require_observableToAsyncIterable = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/observableToAsyncIterable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.observableToAsyncIterable = void 0;
    function observableToAsyncIterable(observable) {
      const pullQueue = [];
      const pushQueue = [];
      let listening = true;
      const pushValue = (value) => {
        if (pullQueue.length !== 0) {
          pullQueue.shift()({ value, done: false });
        } else {
          pushQueue.push({ value, done: false });
        }
      };
      const pushError = (error) => {
        if (pullQueue.length !== 0) {
          pullQueue.shift()({ value: { errors: [error] }, done: false });
        } else {
          pushQueue.push({ value: { errors: [error] }, done: false });
        }
      };
      const pushDone = () => {
        if (pullQueue.length !== 0) {
          pullQueue.shift()({ done: true });
        } else {
          pushQueue.push({ done: true });
        }
      };
      const pullValue = () => new Promise((resolve) => {
        if (pushQueue.length !== 0) {
          const element = pushQueue.shift();
          resolve(element);
        } else {
          pullQueue.push(resolve);
        }
      });
      const subscription = observable.subscribe({
        next(value) {
          pushValue(value);
        },
        error(err) {
          pushError(err);
        },
        complete() {
          pushDone();
        }
      });
      const emptyQueue = () => {
        if (listening) {
          listening = false;
          subscription.unsubscribe();
          for (const resolve of pullQueue) {
            resolve({ value: void 0, done: true });
          }
          pullQueue.length = 0;
          pushQueue.length = 0;
        }
      };
      return {
        next() {
          return listening ? pullValue() : this.return();
        },
        return() {
          emptyQueue();
          return Promise.resolve({ value: void 0, done: true });
        },
        throw(error) {
          emptyQueue();
          return Promise.reject(error);
        },
        [Symbol.asyncIterator]() {
          return this;
        }
      };
    }
    exports2.observableToAsyncIterable = observableToAsyncIterable;
  }
});

// node_modules/@graphql-tools/utils/cjs/getOperationASTFromRequest.js
var require_getOperationASTFromRequest = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/getOperationASTFromRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getOperationASTFromRequest = exports2.getOperationASTFromDocument = void 0;
    var graphql_1 = require_graphql2();
    var memoize_js_1 = require_memoize();
    function getOperationASTFromDocument(documentNode, operationName) {
      const doc = (0, graphql_1.getOperationAST)(documentNode, operationName);
      if (!doc) {
        throw new Error(`Cannot infer operation ${operationName || ""}`);
      }
      return doc;
    }
    exports2.getOperationASTFromDocument = getOperationASTFromDocument;
    exports2.getOperationASTFromRequest = (0, memoize_js_1.memoize1)(function getOperationASTFromRequest(request) {
      return getOperationASTFromDocument(request.document, request.operationName);
    });
  }
});

// node_modules/@graphql-tools/utils/cjs/directives.js
var require_directives2 = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/directives.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GraphQLStreamDirective = exports2.GraphQLDeferDirective = void 0;
    var graphql_1 = require_graphql2();
    exports2.GraphQLDeferDirective = new graphql_1.GraphQLDirective({
      name: "defer",
      description: "Directs the executor to defer this fragment when the `if` argument is true or undefined.",
      locations: [graphql_1.DirectiveLocation.FRAGMENT_SPREAD, graphql_1.DirectiveLocation.INLINE_FRAGMENT],
      args: {
        if: {
          type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean),
          description: "Deferred when true or undefined.",
          defaultValue: true
        },
        label: {
          type: graphql_1.GraphQLString,
          description: "Unique name"
        }
      }
    });
    exports2.GraphQLStreamDirective = new graphql_1.GraphQLDirective({
      name: "stream",
      description: "Directs the executor to stream plural fields when the `if` argument is true or undefined.",
      locations: [graphql_1.DirectiveLocation.FIELD],
      args: {
        if: {
          type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean),
          description: "Stream when true or undefined.",
          defaultValue: true
        },
        label: {
          type: graphql_1.GraphQLString,
          description: "Unique name"
        },
        initialCount: {
          defaultValue: 0,
          type: graphql_1.GraphQLInt,
          description: "Number of items to return immediately"
        }
      }
    });
  }
});

// node_modules/@graphql-tools/utils/cjs/AccumulatorMap.js
var require_AccumulatorMap = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/AccumulatorMap.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AccumulatorMap = void 0;
    var AccumulatorMap = class extends Map {
      get [Symbol.toStringTag]() {
        return "AccumulatorMap";
      }
      add(key, item) {
        const group = this.get(key);
        if (group === void 0) {
          this.set(key, [item]);
        } else {
          group.push(item);
        }
      }
    };
    exports2.AccumulatorMap = AccumulatorMap;
  }
});

// node_modules/@graphql-tools/utils/cjs/collectFields.js
var require_collectFields2 = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/collectFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.collectSubFields = exports2.getDeferValues = exports2.getFieldEntryKey = exports2.doesFragmentConditionMatch = exports2.shouldIncludeNode = exports2.collectFields = void 0;
    var memoize_js_1 = require_memoize();
    var graphql_1 = require_graphql2();
    var directives_js_1 = require_directives2();
    var AccumulatorMap_js_1 = require_AccumulatorMap();
    function collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, patches, visitedFragmentNames) {
      for (const selection of selectionSet.selections) {
        switch (selection.kind) {
          case graphql_1.Kind.FIELD: {
            if (!shouldIncludeNode(variableValues, selection)) {
              continue;
            }
            fields.add(getFieldEntryKey(selection), selection);
            break;
          }
          case graphql_1.Kind.INLINE_FRAGMENT: {
            if (!shouldIncludeNode(variableValues, selection) || !doesFragmentConditionMatch(schema, selection, runtimeType)) {
              continue;
            }
            const defer = getDeferValues(variableValues, selection);
            if (defer) {
              const patchFields = new AccumulatorMap_js_1.AccumulatorMap();
              collectFieldsImpl(schema, fragments, variableValues, runtimeType, selection.selectionSet, patchFields, patches, visitedFragmentNames);
              patches.push({
                label: defer.label,
                fields: patchFields
              });
            } else {
              collectFieldsImpl(schema, fragments, variableValues, runtimeType, selection.selectionSet, fields, patches, visitedFragmentNames);
            }
            break;
          }
          case graphql_1.Kind.FRAGMENT_SPREAD: {
            const fragName = selection.name.value;
            if (!shouldIncludeNode(variableValues, selection)) {
              continue;
            }
            const defer = getDeferValues(variableValues, selection);
            if (visitedFragmentNames.has(fragName) && !defer) {
              continue;
            }
            const fragment = fragments[fragName];
            if (!fragment || !doesFragmentConditionMatch(schema, fragment, runtimeType)) {
              continue;
            }
            if (!defer) {
              visitedFragmentNames.add(fragName);
            }
            if (defer) {
              const patchFields = new AccumulatorMap_js_1.AccumulatorMap();
              collectFieldsImpl(schema, fragments, variableValues, runtimeType, fragment.selectionSet, patchFields, patches, visitedFragmentNames);
              patches.push({
                label: defer.label,
                fields: patchFields
              });
            } else {
              collectFieldsImpl(schema, fragments, variableValues, runtimeType, fragment.selectionSet, fields, patches, visitedFragmentNames);
            }
            break;
          }
        }
      }
    }
    function collectFields(schema, fragments, variableValues, runtimeType, selectionSet) {
      const fields = new AccumulatorMap_js_1.AccumulatorMap();
      const patches = [];
      collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, patches, /* @__PURE__ */ new Set());
      return { fields, patches };
    }
    exports2.collectFields = collectFields;
    function shouldIncludeNode(variableValues, node) {
      const skip2 = (0, graphql_1.getDirectiveValues)(graphql_1.GraphQLSkipDirective, node, variableValues);
      if ((skip2 === null || skip2 === void 0 ? void 0 : skip2["if"]) === true) {
        return false;
      }
      const include = (0, graphql_1.getDirectiveValues)(graphql_1.GraphQLIncludeDirective, node, variableValues);
      if ((include === null || include === void 0 ? void 0 : include["if"]) === false) {
        return false;
      }
      return true;
    }
    exports2.shouldIncludeNode = shouldIncludeNode;
    function doesFragmentConditionMatch(schema, fragment, type) {
      const typeConditionNode = fragment.typeCondition;
      if (!typeConditionNode) {
        return true;
      }
      const conditionalType = (0, graphql_1.typeFromAST)(schema, typeConditionNode);
      if (conditionalType === type) {
        return true;
      }
      if ((0, graphql_1.isAbstractType)(conditionalType)) {
        const possibleTypes = schema.getPossibleTypes(conditionalType);
        return possibleTypes.includes(type);
      }
      return false;
    }
    exports2.doesFragmentConditionMatch = doesFragmentConditionMatch;
    function getFieldEntryKey(node) {
      return node.alias ? node.alias.value : node.name.value;
    }
    exports2.getFieldEntryKey = getFieldEntryKey;
    function getDeferValues(variableValues, node) {
      const defer = (0, graphql_1.getDirectiveValues)(directives_js_1.GraphQLDeferDirective, node, variableValues);
      if (!defer) {
        return;
      }
      if (defer["if"] === false) {
        return;
      }
      return {
        label: typeof defer["label"] === "string" ? defer["label"] : void 0
      };
    }
    exports2.getDeferValues = getDeferValues;
    exports2.collectSubFields = (0, memoize_js_1.memoize5)(function collectSubfields(schema, fragments, variableValues, returnType, fieldNodes) {
      const subFieldNodes = new AccumulatorMap_js_1.AccumulatorMap();
      const visitedFragmentNames = /* @__PURE__ */ new Set();
      const subPatches = [];
      const subFieldsAndPatches = {
        fields: subFieldNodes,
        patches: subPatches
      };
      for (const node of fieldNodes) {
        if (node.selectionSet) {
          collectFieldsImpl(schema, fragments, variableValues, returnType, node.selectionSet, subFieldNodes, subPatches, visitedFragmentNames);
        }
      }
      return subFieldsAndPatches;
    });
  }
});

// node_modules/@graphql-tools/utils/cjs/visitResult.js
var require_visitResult = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/visitResult.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.visitResult = exports2.visitErrors = exports2.visitData = void 0;
    var getOperationASTFromRequest_js_1 = require_getOperationASTFromRequest();
    var graphql_1 = require_graphql2();
    var collectFields_js_1 = require_collectFields2();
    function visitData(data, enter, leave) {
      if (Array.isArray(data)) {
        return data.map((value) => visitData(value, enter, leave));
      } else if (typeof data === "object") {
        const newData = enter != null ? enter(data) : data;
        if (newData != null) {
          for (const key in newData) {
            const value = newData[key];
            Object.defineProperty(newData, key, {
              value: visitData(value, enter, leave)
            });
          }
        }
        return leave != null ? leave(newData) : newData;
      }
      return data;
    }
    exports2.visitData = visitData;
    function visitErrors(errors, visitor) {
      return errors.map((error) => visitor(error));
    }
    exports2.visitErrors = visitErrors;
    function visitResult(result, request, schema, resultVisitorMap, errorVisitorMap) {
      const fragments = request.document.definitions.reduce((acc, def) => {
        if (def.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {
          acc[def.name.value] = def;
        }
        return acc;
      }, {});
      const variableValues = request.variables || {};
      const errorInfo = {
        segmentInfoMap: /* @__PURE__ */ new Map(),
        unpathedErrors: /* @__PURE__ */ new Set()
      };
      const data = result.data;
      const errors = result.errors;
      const visitingErrors = errors != null && errorVisitorMap != null;
      const operationDocumentNode = (0, getOperationASTFromRequest_js_1.getOperationASTFromRequest)(request);
      if (data != null && operationDocumentNode != null) {
        result.data = visitRoot(data, operationDocumentNode, schema, fragments, variableValues, resultVisitorMap, visitingErrors ? errors : void 0, errorInfo);
      }
      if (errors != null && errorVisitorMap) {
        result.errors = visitErrorsByType(errors, errorVisitorMap, errorInfo);
      }
      return result;
    }
    exports2.visitResult = visitResult;
    function visitErrorsByType(errors, errorVisitorMap, errorInfo) {
      const segmentInfoMap = errorInfo.segmentInfoMap;
      const unpathedErrors = errorInfo.unpathedErrors;
      const unpathedErrorVisitor = errorVisitorMap["__unpathed"];
      return errors.map((originalError) => {
        const pathSegmentsInfo = segmentInfoMap.get(originalError);
        const newError = pathSegmentsInfo == null ? originalError : pathSegmentsInfo.reduceRight((acc, segmentInfo) => {
          const typeName = segmentInfo.type.name;
          const typeVisitorMap = errorVisitorMap[typeName];
          if (typeVisitorMap == null) {
            return acc;
          }
          const errorVisitor = typeVisitorMap[segmentInfo.fieldName];
          return errorVisitor == null ? acc : errorVisitor(acc, segmentInfo.pathIndex);
        }, originalError);
        if (unpathedErrorVisitor && unpathedErrors.has(originalError)) {
          return unpathedErrorVisitor(newError);
        }
        return newError;
      });
    }
    function getOperationRootType(schema, operationDef) {
      switch (operationDef.operation) {
        case "query":
          return schema.getQueryType();
        case "mutation":
          return schema.getMutationType();
        case "subscription":
          return schema.getSubscriptionType();
      }
    }
    function visitRoot(root, operation, schema, fragments, variableValues, resultVisitorMap, errors, errorInfo) {
      const operationRootType = getOperationRootType(schema, operation);
      const { fields: collectedFields } = (0, collectFields_js_1.collectFields)(schema, fragments, variableValues, operationRootType, operation.selectionSet);
      return visitObjectValue(root, operationRootType, collectedFields, schema, fragments, variableValues, resultVisitorMap, 0, errors, errorInfo);
    }
    function visitObjectValue(object, type, fieldNodeMap, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo) {
      var _a2;
      const fieldMap = type.getFields();
      const typeVisitorMap = resultVisitorMap === null || resultVisitorMap === void 0 ? void 0 : resultVisitorMap[type.name];
      const enterObject = typeVisitorMap === null || typeVisitorMap === void 0 ? void 0 : typeVisitorMap.__enter;
      const newObject = enterObject != null ? enterObject(object) : object;
      let sortedErrors;
      let errorMap = null;
      if (errors != null) {
        sortedErrors = sortErrorsByPathSegment(errors, pathIndex);
        errorMap = sortedErrors.errorMap;
        for (const error of sortedErrors.unpathedErrors) {
          errorInfo.unpathedErrors.add(error);
        }
      }
      for (const [responseKey, subFieldNodes] of fieldNodeMap) {
        const fieldName = subFieldNodes[0].name.value;
        let fieldType = (_a2 = fieldMap[fieldName]) === null || _a2 === void 0 ? void 0 : _a2.type;
        if (fieldType == null) {
          switch (fieldName) {
            case "__typename":
              fieldType = graphql_1.TypeNameMetaFieldDef.type;
              break;
            case "__schema":
              fieldType = graphql_1.SchemaMetaFieldDef.type;
              break;
            case "__type":
              fieldType = graphql_1.TypeMetaFieldDef.type;
              break;
          }
        }
        const newPathIndex = pathIndex + 1;
        let fieldErrors;
        if (errorMap) {
          fieldErrors = errorMap[responseKey];
          if (fieldErrors != null) {
            delete errorMap[responseKey];
          }
          addPathSegmentInfo(type, fieldName, newPathIndex, fieldErrors, errorInfo);
        }
        const newValue = visitFieldValue(object[responseKey], fieldType, subFieldNodes, schema, fragments, variableValues, resultVisitorMap, newPathIndex, fieldErrors, errorInfo);
        updateObject(newObject, responseKey, newValue, typeVisitorMap, fieldName);
      }
      const oldTypename = newObject.__typename;
      if (oldTypename != null) {
        updateObject(newObject, "__typename", oldTypename, typeVisitorMap, "__typename");
      }
      if (errorMap) {
        for (const errorsKey in errorMap) {
          const errors2 = errorMap[errorsKey];
          for (const error of errors2) {
            errorInfo.unpathedErrors.add(error);
          }
        }
      }
      const leaveObject = typeVisitorMap === null || typeVisitorMap === void 0 ? void 0 : typeVisitorMap.__leave;
      return leaveObject != null ? leaveObject(newObject) : newObject;
    }
    function updateObject(object, responseKey, newValue, typeVisitorMap, fieldName) {
      if (typeVisitorMap == null) {
        object[responseKey] = newValue;
        return;
      }
      const fieldVisitor = typeVisitorMap[fieldName];
      if (fieldVisitor == null) {
        object[responseKey] = newValue;
        return;
      }
      const visitedValue = fieldVisitor(newValue);
      if (visitedValue === void 0) {
        delete object[responseKey];
        return;
      }
      object[responseKey] = visitedValue;
    }
    function visitListValue(list, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo) {
      return list.map((listMember) => visitFieldValue(listMember, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex + 1, errors, errorInfo));
    }
    function visitFieldValue(value, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors = [], errorInfo) {
      if (value == null) {
        return value;
      }
      const nullableType = (0, graphql_1.getNullableType)(returnType);
      if ((0, graphql_1.isListType)(nullableType)) {
        return visitListValue(value, nullableType.ofType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);
      } else if ((0, graphql_1.isAbstractType)(nullableType)) {
        const finalType = schema.getType(value.__typename);
        const { fields: collectedFields } = (0, collectFields_js_1.collectSubFields)(schema, fragments, variableValues, finalType, fieldNodes);
        return visitObjectValue(value, finalType, collectedFields, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);
      } else if ((0, graphql_1.isObjectType)(nullableType)) {
        const { fields: collectedFields } = (0, collectFields_js_1.collectSubFields)(schema, fragments, variableValues, nullableType, fieldNodes);
        return visitObjectValue(value, nullableType, collectedFields, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);
      }
      const typeVisitorMap = resultVisitorMap === null || resultVisitorMap === void 0 ? void 0 : resultVisitorMap[nullableType.name];
      if (typeVisitorMap == null) {
        return value;
      }
      const visitedValue = typeVisitorMap(value);
      return visitedValue === void 0 ? value : visitedValue;
    }
    function sortErrorsByPathSegment(errors, pathIndex) {
      var _a2;
      const errorMap = /* @__PURE__ */ Object.create(null);
      const unpathedErrors = /* @__PURE__ */ new Set();
      for (const error of errors) {
        const pathSegment = (_a2 = error.path) === null || _a2 === void 0 ? void 0 : _a2[pathIndex];
        if (pathSegment == null) {
          unpathedErrors.add(error);
          continue;
        }
        if (pathSegment in errorMap) {
          errorMap[pathSegment].push(error);
        } else {
          errorMap[pathSegment] = [error];
        }
      }
      return {
        errorMap,
        unpathedErrors
      };
    }
    function addPathSegmentInfo(type, fieldName, pathIndex, errors = [], errorInfo) {
      for (const error of errors) {
        const segmentInfo = {
          type,
          fieldName,
          pathIndex
        };
        const pathSegmentsInfo = errorInfo.segmentInfoMap.get(error);
        if (pathSegmentsInfo == null) {
          errorInfo.segmentInfoMap.set(error, [segmentInfo]);
        } else {
          pathSegmentsInfo.push(segmentInfo);
        }
      }
    }
  }
});

// node_modules/@graphql-tools/utils/cjs/valueMatchesCriteria.js
var require_valueMatchesCriteria = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/valueMatchesCriteria.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.valueMatchesCriteria = void 0;
    function valueMatchesCriteria(value, criteria) {
      if (value == null) {
        return value === criteria;
      } else if (Array.isArray(value)) {
        return Array.isArray(criteria) && value.every((val, index) => valueMatchesCriteria(val, criteria[index]));
      } else if (typeof value === "object") {
        return typeof criteria === "object" && criteria && Object.keys(criteria).every((propertyName) => valueMatchesCriteria(value[propertyName], criteria[propertyName]));
      } else if (criteria instanceof RegExp) {
        return criteria.test(value);
      }
      return value === criteria;
    }
    exports2.valueMatchesCriteria = valueMatchesCriteria;
  }
});

// node_modules/@graphql-tools/utils/cjs/isAsyncIterable.js
var require_isAsyncIterable2 = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/isAsyncIterable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isAsyncIterable = void 0;
    function isAsyncIterable(value) {
      return typeof value === "object" && value != null && Symbol.asyncIterator in value && typeof value[Symbol.asyncIterator] === "function";
    }
    exports2.isAsyncIterable = isAsyncIterable;
  }
});

// node_modules/@graphql-tools/utils/cjs/isDocumentNode.js
var require_isDocumentNode = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/isDocumentNode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isDocumentNode = void 0;
    var graphql_1 = require_graphql2();
    function isDocumentNode2(object) {
      return object && typeof object === "object" && "kind" in object && object.kind === graphql_1.Kind.DOCUMENT;
    }
    exports2.isDocumentNode = isDocumentNode2;
  }
});

// node_modules/@graphql-tools/utils/cjs/executor.js
var require_executor = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/executor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@graphql-tools/utils/cjs/withCancel.js
var require_withCancel = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/withCancel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.withCancel = exports2.getAsyncIterableWithCancel = exports2.getAsyncIteratorWithCancel = void 0;
    var memoize_js_1 = require_memoize();
    async function defaultAsyncIteratorReturn(value) {
      return { value, done: true };
    }
    var proxyMethodFactory = (0, memoize_js_1.memoize2)(function proxyMethodFactory2(target, targetMethod) {
      return function proxyMethod(...args) {
        return Reflect.apply(targetMethod, target, args);
      };
    });
    function getAsyncIteratorWithCancel(asyncIterator, onCancel) {
      return new Proxy(asyncIterator, {
        has(asyncIterator2, prop) {
          if (prop === "return") {
            return true;
          }
          return Reflect.has(asyncIterator2, prop);
        },
        get(asyncIterator2, prop, receiver) {
          const existingPropValue = Reflect.get(asyncIterator2, prop, receiver);
          if (prop === "return") {
            const existingReturn = existingPropValue || defaultAsyncIteratorReturn;
            return async function returnWithCancel(value) {
              const returnValue = await onCancel(value);
              return Reflect.apply(existingReturn, asyncIterator2, [returnValue]);
            };
          } else if (typeof existingPropValue === "function") {
            return proxyMethodFactory(asyncIterator2, existingPropValue);
          }
          return existingPropValue;
        }
      });
    }
    exports2.getAsyncIteratorWithCancel = getAsyncIteratorWithCancel;
    function getAsyncIterableWithCancel(asyncIterable, onCancel) {
      return new Proxy(asyncIterable, {
        get(asyncIterable2, prop, receiver) {
          const existingPropValue = Reflect.get(asyncIterable2, prop, receiver);
          if (Symbol.asyncIterator === prop) {
            return function asyncIteratorFactory() {
              const asyncIterator = Reflect.apply(existingPropValue, asyncIterable2, []);
              return getAsyncIteratorWithCancel(asyncIterator, onCancel);
            };
          } else if (typeof existingPropValue === "function") {
            return proxyMethodFactory(asyncIterable2, existingPropValue);
          }
          return existingPropValue;
        }
      });
    }
    exports2.getAsyncIterableWithCancel = getAsyncIterableWithCancel;
    exports2.withCancel = getAsyncIterableWithCancel;
  }
});

// node_modules/@graphql-tools/utils/cjs/fixSchemaAst.js
var require_fixSchemaAst = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/fixSchemaAst.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fixSchemaAst = void 0;
    var graphql_1 = require_graphql2();
    var print_schema_with_directives_js_1 = require_print_schema_with_directives();
    function buildFixedSchema(schema, options) {
      const document = (0, print_schema_with_directives_js_1.getDocumentNodeFromSchema)(schema);
      return (0, graphql_1.buildASTSchema)(document, {
        ...options || {}
      });
    }
    function fixSchemaAst(schema, options) {
      let schemaWithValidAst = void 0;
      if (!schema.astNode || !schema.extensionASTNodes) {
        schemaWithValidAst = buildFixedSchema(schema, options);
      }
      if (!schema.astNode && (schemaWithValidAst === null || schemaWithValidAst === void 0 ? void 0 : schemaWithValidAst.astNode)) {
        schema.astNode = schemaWithValidAst.astNode;
      }
      if (!schema.extensionASTNodes && (schemaWithValidAst === null || schemaWithValidAst === void 0 ? void 0 : schemaWithValidAst.astNode)) {
        schema.extensionASTNodes = schemaWithValidAst.extensionASTNodes;
      }
      return schema;
    }
    exports2.fixSchemaAst = fixSchemaAst;
  }
});

// node_modules/@graphql-tools/utils/cjs/extractExtensionsFromSchema.js
var require_extractExtensionsFromSchema = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/extractExtensionsFromSchema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extractExtensionsFromSchema = void 0;
    var mapSchema_js_1 = require_mapSchema();
    var Interfaces_js_1 = require_Interfaces();
    function extractExtensionsFromSchema(schema) {
      const result = {
        schemaExtensions: schema.extensions || {},
        types: {}
      };
      (0, mapSchema_js_1.mapSchema)(schema, {
        [Interfaces_js_1.MapperKind.OBJECT_TYPE]: (type) => {
          result.types[type.name] = { fields: {}, type: "object", extensions: type.extensions || {} };
          return type;
        },
        [Interfaces_js_1.MapperKind.INTERFACE_TYPE]: (type) => {
          result.types[type.name] = { fields: {}, type: "interface", extensions: type.extensions || {} };
          return type;
        },
        [Interfaces_js_1.MapperKind.FIELD]: (field, fieldName, typeName) => {
          result.types[typeName].fields[fieldName] = {
            arguments: {},
            extensions: field.extensions || {}
          };
          const args = field.args;
          if (args != null) {
            for (const argName in args) {
              result.types[typeName].fields[fieldName].arguments[argName] = args[argName].extensions || {};
            }
          }
          return field;
        },
        [Interfaces_js_1.MapperKind.ENUM_TYPE]: (type) => {
          result.types[type.name] = { values: {}, type: "enum", extensions: type.extensions || {} };
          return type;
        },
        [Interfaces_js_1.MapperKind.ENUM_VALUE]: (value, typeName, _schema, valueName) => {
          result.types[typeName].values[valueName] = value.extensions || {};
          return value;
        },
        [Interfaces_js_1.MapperKind.SCALAR_TYPE]: (type) => {
          result.types[type.name] = { type: "scalar", extensions: type.extensions || {} };
          return type;
        },
        [Interfaces_js_1.MapperKind.UNION_TYPE]: (type) => {
          result.types[type.name] = { type: "union", extensions: type.extensions || {} };
          return type;
        },
        [Interfaces_js_1.MapperKind.INPUT_OBJECT_TYPE]: (type) => {
          result.types[type.name] = { fields: {}, type: "input", extensions: type.extensions || {} };
          return type;
        },
        [Interfaces_js_1.MapperKind.INPUT_OBJECT_FIELD]: (field, fieldName, typeName) => {
          result.types[typeName].fields[fieldName] = {
            extensions: field.extensions || {}
          };
          return field;
        }
      });
      return result;
    }
    exports2.extractExtensionsFromSchema = extractExtensionsFromSchema;
  }
});

// node_modules/@graphql-tools/utils/cjs/Path.js
var require_Path2 = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/Path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.printPathArray = exports2.pathToArray = exports2.addPath = void 0;
    function addPath(prev, key, typename) {
      return { prev, key, typename };
    }
    exports2.addPath = addPath;
    function pathToArray(path2) {
      const flattened = [];
      let curr = path2;
      while (curr) {
        flattened.push(curr.key);
        curr = curr.prev;
      }
      return flattened.reverse();
    }
    exports2.pathToArray = pathToArray;
    function printPathArray(path2) {
      return path2.map((key) => typeof key === "number" ? "[" + key.toString() + "]" : "." + key).join("");
    }
    exports2.printPathArray = printPathArray;
  }
});

// node_modules/@graphql-tools/utils/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@graphql-tools/utils/cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_loaders(), exports2);
    tslib_1.__exportStar(require_helpers(), exports2);
    tslib_1.__exportStar(require_get_directives(), exports2);
    tslib_1.__exportStar(require_get_fields_with_directives(), exports2);
    tslib_1.__exportStar(require_get_arguments_with_directives(), exports2);
    tslib_1.__exportStar(require_get_implementing_types(), exports2);
    tslib_1.__exportStar(require_print_schema_with_directives(), exports2);
    tslib_1.__exportStar(require_get_fields_with_directives(), exports2);
    tslib_1.__exportStar(require_validate_documents(), exports2);
    tslib_1.__exportStar(require_parse_graphql_json(), exports2);
    tslib_1.__exportStar(require_parse_graphql_sdl(), exports2);
    tslib_1.__exportStar(require_build_operation_for_field(), exports2);
    tslib_1.__exportStar(require_types(), exports2);
    tslib_1.__exportStar(require_filterSchema(), exports2);
    tslib_1.__exportStar(require_heal(), exports2);
    tslib_1.__exportStar(require_getResolversFromSchema(), exports2);
    tslib_1.__exportStar(require_forEachField(), exports2);
    tslib_1.__exportStar(require_forEachDefaultValue(), exports2);
    tslib_1.__exportStar(require_mapSchema(), exports2);
    tslib_1.__exportStar(require_addTypes(), exports2);
    tslib_1.__exportStar(require_rewire(), exports2);
    tslib_1.__exportStar(require_prune(), exports2);
    tslib_1.__exportStar(require_mergeDeep(), exports2);
    tslib_1.__exportStar(require_Interfaces(), exports2);
    tslib_1.__exportStar(require_stub(), exports2);
    tslib_1.__exportStar(require_selectionSets(), exports2);
    tslib_1.__exportStar(require_getResponseKeyFromInfo(), exports2);
    tslib_1.__exportStar(require_fields(), exports2);
    tslib_1.__exportStar(require_renameType(), exports2);
    tslib_1.__exportStar(require_transformInputValue(), exports2);
    tslib_1.__exportStar(require_mapAsyncIterator2(), exports2);
    tslib_1.__exportStar(require_updateArgument(), exports2);
    tslib_1.__exportStar(require_implementsAbstractType(), exports2);
    tslib_1.__exportStar(require_errors(), exports2);
    tslib_1.__exportStar(require_observableToAsyncIterable(), exports2);
    tslib_1.__exportStar(require_visitResult(), exports2);
    tslib_1.__exportStar(require_getArgumentValues(), exports2);
    tslib_1.__exportStar(require_valueMatchesCriteria(), exports2);
    tslib_1.__exportStar(require_isAsyncIterable2(), exports2);
    tslib_1.__exportStar(require_isDocumentNode(), exports2);
    tslib_1.__exportStar(require_astFromValueUntyped(), exports2);
    tslib_1.__exportStar(require_executor(), exports2);
    tslib_1.__exportStar(require_withCancel(), exports2);
    tslib_1.__exportStar(require_AggregateError(), exports2);
    tslib_1.__exportStar(require_rootTypes(), exports2);
    tslib_1.__exportStar(require_comments(), exports2);
    tslib_1.__exportStar(require_collectFields2(), exports2);
    tslib_1.__exportStar(require_inspect2(), exports2);
    tslib_1.__exportStar(require_memoize(), exports2);
    tslib_1.__exportStar(require_fixSchemaAst(), exports2);
    tslib_1.__exportStar(require_getOperationASTFromRequest(), exports2);
    tslib_1.__exportStar(require_extractExtensionsFromSchema(), exports2);
    tslib_1.__exportStar(require_Path2(), exports2);
    tslib_1.__exportStar(require_jsutils(), exports2);
    tslib_1.__exportStar(require_directives2(), exports2);
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/assertResolversPresent.js
var require_assertResolversPresent = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/assertResolversPresent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertResolversPresent = void 0;
    var graphql_1 = require_graphql2();
    var utils_1 = require_cjs();
    function assertResolversPresent2(schema, resolverValidationOptions = {}) {
      const { requireResolversForArgs, requireResolversForNonScalar, requireResolversForAllFields } = resolverValidationOptions;
      if (requireResolversForAllFields && (requireResolversForArgs || requireResolversForNonScalar)) {
        throw new TypeError("requireResolversForAllFields takes precedence over the more specific assertions. Please configure either requireResolversForAllFields or requireResolversForArgs / requireResolversForNonScalar, but not a combination of them.");
      }
      (0, utils_1.forEachField)(schema, (field, typeName, fieldName) => {
        if (requireResolversForAllFields) {
          expectResolver2("requireResolversForAllFields", requireResolversForAllFields, field, typeName, fieldName);
        }
        if (requireResolversForArgs && field.args.length > 0) {
          expectResolver2("requireResolversForArgs", requireResolversForArgs, field, typeName, fieldName);
        }
        if (requireResolversForNonScalar !== "ignore" && !(0, graphql_1.isScalarType)((0, graphql_1.getNamedType)(field.type))) {
          expectResolver2("requireResolversForNonScalar", requireResolversForNonScalar, field, typeName, fieldName);
        }
      });
    }
    exports2.assertResolversPresent = assertResolversPresent2;
    function expectResolver2(validator, behavior, field, typeName, fieldName) {
      if (!field.resolve) {
        const message = `Resolver missing for "${typeName}.${fieldName}".
To disable this validator, use:
  resolverValidationOptions: {
    ${validator}: 'ignore'
  }`;
        if (behavior === "error") {
          throw new Error(message);
        }
        if (behavior === "warn") {
          console.warn(message);
        }
        return;
      }
      if (typeof field.resolve !== "function") {
        throw new Error(`Resolver "${typeName}.${fieldName}" must be a function`);
      }
    }
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/chainResolvers.js
var require_chainResolvers = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/chainResolvers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chainResolvers = void 0;
    var graphql_1 = require_graphql2();
    function chainResolvers(resolvers2) {
      return (root, args, ctx, info) => resolvers2.reduce((prev, curResolver) => {
        if (curResolver != null) {
          return curResolver(prev, args, ctx, info);
        }
        return (0, graphql_1.defaultFieldResolver)(prev, args, ctx, info);
      }, root);
    }
    exports2.chainResolvers = chainResolvers;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/checkForResolveTypeResolver.js
var require_checkForResolveTypeResolver = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/checkForResolveTypeResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkForResolveTypeResolver = void 0;
    var utils_1 = require_cjs();
    function checkForResolveTypeResolver2(schema, requireResolversForResolveType) {
      (0, utils_1.mapSchema)(schema, {
        [utils_1.MapperKind.ABSTRACT_TYPE]: (type) => {
          if (!type.resolveType) {
            const message = `Type "${type.name}" is missing a "__resolveType" resolver. Pass 'ignore' into "resolverValidationOptions.requireResolversForResolveType" to disable this error.`;
            if (requireResolversForResolveType === "error") {
              throw new Error(message);
            }
            if (requireResolversForResolveType === "warn") {
              console.warn(message);
            }
          }
          return void 0;
        }
      });
    }
    exports2.checkForResolveTypeResolver = checkForResolveTypeResolver2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/extendResolversFromInterfaces.js
var require_extendResolversFromInterfaces = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/extendResolversFromInterfaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extendResolversFromInterfaces = void 0;
    function extendResolversFromInterfaces2(schema, resolvers2) {
      const extendedResolvers = {};
      const typeMap = schema.getTypeMap();
      for (const typeName in typeMap) {
        const type = typeMap[typeName];
        if ("getInterfaces" in type) {
          extendedResolvers[typeName] = {};
          for (const iFace of type.getInterfaces()) {
            if (resolvers2[iFace.name]) {
              for (const fieldName in resolvers2[iFace.name]) {
                if (fieldName === "__isTypeOf" || !fieldName.startsWith("__")) {
                  extendedResolvers[typeName][fieldName] = resolvers2[iFace.name][fieldName];
                }
              }
            }
          }
          const typeResolvers = resolvers2[typeName];
          extendedResolvers[typeName] = {
            ...extendedResolvers[typeName],
            ...typeResolvers
          };
        } else {
          const typeResolvers = resolvers2[typeName];
          if (typeResolvers != null) {
            extendedResolvers[typeName] = typeResolvers;
          }
        }
      }
      return extendedResolvers;
    }
    exports2.extendResolversFromInterfaces = extendResolversFromInterfaces2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/addResolversToSchema.js
var require_addResolversToSchema = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/addResolversToSchema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.addResolversToSchema = void 0;
    var graphql_1 = require_graphql2();
    var utils_1 = require_cjs();
    var checkForResolveTypeResolver_js_1 = require_checkForResolveTypeResolver();
    var extendResolversFromInterfaces_js_1 = require_extendResolversFromInterfaces();
    function addResolversToSchema2({ schema, resolvers: inputResolvers, defaultFieldResolver: defaultFieldResolver2, resolverValidationOptions = {}, inheritResolversFromInterfaces = false, updateResolversInPlace = false }) {
      const { requireResolversToMatchSchema = "error", requireResolversForResolveType } = resolverValidationOptions;
      const resolvers2 = inheritResolversFromInterfaces ? (0, extendResolversFromInterfaces_js_1.extendResolversFromInterfaces)(schema, inputResolvers) : inputResolvers;
      for (const typeName in resolvers2) {
        const resolverValue = resolvers2[typeName];
        const resolverType = typeof resolverValue;
        if (resolverType !== "object") {
          throw new Error(`"${typeName}" defined in resolvers, but has invalid value "${resolverValue}". The resolver's value must be of type object.`);
        }
        const type = schema.getType(typeName);
        if (type == null) {
          if (requireResolversToMatchSchema === "ignore") {
            continue;
          }
          throw new Error(`"${typeName}" defined in resolvers, but not in schema`);
        } else if ((0, graphql_1.isSpecifiedScalarType)(type)) {
          for (const fieldName in resolverValue) {
            if (fieldName.startsWith("__")) {
              type[fieldName.substring(2)] = resolverValue[fieldName];
            } else {
              type[fieldName] = resolverValue[fieldName];
            }
          }
        } else if ((0, graphql_1.isEnumType)(type)) {
          const values = type.getValues();
          for (const fieldName in resolverValue) {
            if (!fieldName.startsWith("__") && !values.some((value) => value.name === fieldName) && requireResolversToMatchSchema && requireResolversToMatchSchema !== "ignore") {
              throw new Error(`${type.name}.${fieldName} was defined in resolvers, but not present within ${type.name}`);
            }
          }
        } else if ((0, graphql_1.isUnionType)(type)) {
          for (const fieldName in resolverValue) {
            if (!fieldName.startsWith("__") && requireResolversToMatchSchema && requireResolversToMatchSchema !== "ignore") {
              throw new Error(`${type.name}.${fieldName} was defined in resolvers, but ${type.name} is not an object or interface type`);
            }
          }
        } else if ((0, graphql_1.isObjectType)(type) || (0, graphql_1.isInterfaceType)(type)) {
          for (const fieldName in resolverValue) {
            if (!fieldName.startsWith("__")) {
              const fields = type.getFields();
              const field = fields[fieldName];
              if (field == null) {
                if (requireResolversToMatchSchema && requireResolversToMatchSchema !== "ignore") {
                  throw new Error(`${typeName}.${fieldName} defined in resolvers, but not in schema`);
                }
              } else {
                const fieldResolve = resolverValue[fieldName];
                if (typeof fieldResolve !== "function" && typeof fieldResolve !== "object") {
                  throw new Error(`Resolver ${typeName}.${fieldName} must be object or function`);
                }
              }
            }
          }
        }
      }
      schema = updateResolversInPlace ? addResolversToExistingSchema2(schema, resolvers2, defaultFieldResolver2) : createNewSchemaWithResolvers2(schema, resolvers2, defaultFieldResolver2);
      if (requireResolversForResolveType && requireResolversForResolveType !== "ignore") {
        (0, checkForResolveTypeResolver_js_1.checkForResolveTypeResolver)(schema, requireResolversForResolveType);
      }
      return schema;
    }
    exports2.addResolversToSchema = addResolversToSchema2;
    function addResolversToExistingSchema2(schema, resolvers2, defaultFieldResolver2) {
      var _a2, _b, _c2, _d2, _e2, _f, _g, _h, _j, _k, _l2, _m;
      const typeMap = schema.getTypeMap();
      for (const typeName in resolvers2) {
        const type = schema.getType(typeName);
        const resolverValue = resolvers2[typeName];
        if ((0, graphql_1.isScalarType)(type)) {
          for (const fieldName in resolverValue) {
            if (fieldName.startsWith("__")) {
              type[fieldName.substring(2)] = resolverValue[fieldName];
            } else if (fieldName === "astNode" && type.astNode != null) {
              type.astNode = {
                ...type.astNode,
                description: (_b = (_a2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type.astNode.description,
                directives: ((_c2 = type.astNode.directives) !== null && _c2 !== void 0 ? _c2 : []).concat((_e2 = (_d2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d2 === void 0 ? void 0 : _d2.directives) !== null && _e2 !== void 0 ? _e2 : [])
              };
            } else if (fieldName === "extensionASTNodes" && type.extensionASTNodes != null) {
              type.extensionASTNodes = type.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);
            } else if (fieldName === "extensions" && type.extensions != null && resolverValue.extensions != null) {
              type.extensions = Object.assign(/* @__PURE__ */ Object.create(null), type.extensions, resolverValue.extensions);
            } else {
              type[fieldName] = resolverValue[fieldName];
            }
          }
        } else if ((0, graphql_1.isEnumType)(type)) {
          const config2 = type.toConfig();
          const enumValueConfigMap = config2.values;
          for (const fieldName in resolverValue) {
            if (fieldName.startsWith("__")) {
              config2[fieldName.substring(2)] = resolverValue[fieldName];
            } else if (fieldName === "astNode" && config2.astNode != null) {
              config2.astNode = {
                ...config2.astNode,
                description: (_h = (_g = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _g === void 0 ? void 0 : _g.description) !== null && _h !== void 0 ? _h : config2.astNode.description,
                directives: ((_j = config2.astNode.directives) !== null && _j !== void 0 ? _j : []).concat((_l2 = (_k = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _k === void 0 ? void 0 : _k.directives) !== null && _l2 !== void 0 ? _l2 : [])
              };
            } else if (fieldName === "extensionASTNodes" && config2.extensionASTNodes != null) {
              config2.extensionASTNodes = config2.extensionASTNodes.concat((_m = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _m !== void 0 ? _m : []);
            } else if (fieldName === "extensions" && type.extensions != null && resolverValue.extensions != null) {
              type.extensions = Object.assign(/* @__PURE__ */ Object.create(null), type.extensions, resolverValue.extensions);
            } else if (enumValueConfigMap[fieldName]) {
              enumValueConfigMap[fieldName].value = resolverValue[fieldName];
            }
          }
          typeMap[typeName] = new graphql_1.GraphQLEnumType(config2);
        } else if ((0, graphql_1.isUnionType)(type)) {
          for (const fieldName in resolverValue) {
            if (fieldName.startsWith("__")) {
              type[fieldName.substring(2)] = resolverValue[fieldName];
            }
          }
        } else if ((0, graphql_1.isObjectType)(type) || (0, graphql_1.isInterfaceType)(type)) {
          for (const fieldName in resolverValue) {
            if (fieldName.startsWith("__")) {
              type[fieldName.substring(2)] = resolverValue[fieldName];
              continue;
            }
            const fields = type.getFields();
            const field = fields[fieldName];
            if (field != null) {
              const fieldResolve = resolverValue[fieldName];
              if (typeof fieldResolve === "function") {
                field.resolve = fieldResolve.bind(resolverValue);
              } else {
                setFieldProperties2(field, fieldResolve);
              }
            }
          }
        }
      }
      (0, utils_1.forEachDefaultValue)(schema, utils_1.serializeInputValue);
      (0, utils_1.healSchema)(schema);
      (0, utils_1.forEachDefaultValue)(schema, utils_1.parseInputValue);
      if (defaultFieldResolver2 != null) {
        (0, utils_1.forEachField)(schema, (field) => {
          if (!field.resolve) {
            field.resolve = defaultFieldResolver2;
          }
        });
      }
      return schema;
    }
    function createNewSchemaWithResolvers2(schema, resolvers2, defaultFieldResolver2) {
      schema = (0, utils_1.mapSchema)(schema, {
        [utils_1.MapperKind.SCALAR_TYPE]: (type) => {
          var _a2, _b, _c2, _d2, _e2, _f;
          const config2 = type.toConfig();
          const resolverValue = resolvers2[type.name];
          if (!(0, graphql_1.isSpecifiedScalarType)(type) && resolverValue != null) {
            for (const fieldName in resolverValue) {
              if (fieldName.startsWith("__")) {
                config2[fieldName.substring(2)] = resolverValue[fieldName];
              } else if (fieldName === "astNode" && config2.astNode != null) {
                config2.astNode = {
                  ...config2.astNode,
                  description: (_b = (_a2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : config2.astNode.description,
                  directives: ((_c2 = config2.astNode.directives) !== null && _c2 !== void 0 ? _c2 : []).concat((_e2 = (_d2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d2 === void 0 ? void 0 : _d2.directives) !== null && _e2 !== void 0 ? _e2 : [])
                };
              } else if (fieldName === "extensionASTNodes" && config2.extensionASTNodes != null) {
                config2.extensionASTNodes = config2.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);
              } else if (fieldName === "extensions" && config2.extensions != null && resolverValue.extensions != null) {
                config2.extensions = Object.assign(/* @__PURE__ */ Object.create(null), type.extensions, resolverValue.extensions);
              } else {
                config2[fieldName] = resolverValue[fieldName];
              }
            }
            return new graphql_1.GraphQLScalarType(config2);
          }
        },
        [utils_1.MapperKind.ENUM_TYPE]: (type) => {
          var _a2, _b, _c2, _d2, _e2, _f;
          const resolverValue = resolvers2[type.name];
          const config2 = type.toConfig();
          const enumValueConfigMap = config2.values;
          if (resolverValue != null) {
            for (const fieldName in resolverValue) {
              if (fieldName.startsWith("__")) {
                config2[fieldName.substring(2)] = resolverValue[fieldName];
              } else if (fieldName === "astNode" && config2.astNode != null) {
                config2.astNode = {
                  ...config2.astNode,
                  description: (_b = (_a2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : config2.astNode.description,
                  directives: ((_c2 = config2.astNode.directives) !== null && _c2 !== void 0 ? _c2 : []).concat((_e2 = (_d2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d2 === void 0 ? void 0 : _d2.directives) !== null && _e2 !== void 0 ? _e2 : [])
                };
              } else if (fieldName === "extensionASTNodes" && config2.extensionASTNodes != null) {
                config2.extensionASTNodes = config2.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);
              } else if (fieldName === "extensions" && config2.extensions != null && resolverValue.extensions != null) {
                config2.extensions = Object.assign(/* @__PURE__ */ Object.create(null), type.extensions, resolverValue.extensions);
              } else if (enumValueConfigMap[fieldName]) {
                enumValueConfigMap[fieldName].value = resolverValue[fieldName];
              }
            }
            return new graphql_1.GraphQLEnumType(config2);
          }
        },
        [utils_1.MapperKind.UNION_TYPE]: (type) => {
          const resolverValue = resolvers2[type.name];
          if (resolverValue != null) {
            const config2 = type.toConfig();
            if (resolverValue["__resolveType"]) {
              config2.resolveType = resolverValue["__resolveType"];
            }
            return new graphql_1.GraphQLUnionType(config2);
          }
        },
        [utils_1.MapperKind.OBJECT_TYPE]: (type) => {
          const resolverValue = resolvers2[type.name];
          if (resolverValue != null) {
            const config2 = type.toConfig();
            if (resolverValue["__isTypeOf"]) {
              config2.isTypeOf = resolverValue["__isTypeOf"];
            }
            return new graphql_1.GraphQLObjectType(config2);
          }
        },
        [utils_1.MapperKind.INTERFACE_TYPE]: (type) => {
          const resolverValue = resolvers2[type.name];
          if (resolverValue != null) {
            const config2 = type.toConfig();
            if (resolverValue["__resolveType"]) {
              config2.resolveType = resolverValue["__resolveType"];
            }
            return new graphql_1.GraphQLInterfaceType(config2);
          }
        },
        [utils_1.MapperKind.COMPOSITE_FIELD]: (fieldConfig, fieldName, typeName) => {
          const resolverValue = resolvers2[typeName];
          if (resolverValue != null) {
            const fieldResolve = resolverValue[fieldName];
            if (fieldResolve != null) {
              const newFieldConfig = { ...fieldConfig };
              if (typeof fieldResolve === "function") {
                newFieldConfig.resolve = fieldResolve.bind(resolverValue);
              } else {
                setFieldProperties2(newFieldConfig, fieldResolve);
              }
              return newFieldConfig;
            }
          }
        }
      });
      if (defaultFieldResolver2 != null) {
        schema = (0, utils_1.mapSchema)(schema, {
          [utils_1.MapperKind.OBJECT_FIELD]: (fieldConfig) => ({
            ...fieldConfig,
            resolve: fieldConfig.resolve != null ? fieldConfig.resolve : defaultFieldResolver2
          })
        });
      }
      return schema;
    }
    function setFieldProperties2(field, propertiesObj) {
      for (const propertyName in propertiesObj) {
        field[propertyName] = propertiesObj[propertyName];
      }
    }
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/merge-resolvers.js
var require_merge_resolvers = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/merge-resolvers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeResolvers = void 0;
    var utils_1 = require_cjs();
    function mergeResolvers2(resolversDefinitions, options) {
      if (!resolversDefinitions || Array.isArray(resolversDefinitions) && resolversDefinitions.length === 0) {
        return {};
      }
      if (!Array.isArray(resolversDefinitions)) {
        return resolversDefinitions;
      }
      if (resolversDefinitions.length === 1) {
        return resolversDefinitions[0] || {};
      }
      const resolvers2 = new Array();
      for (let resolversDefinition of resolversDefinitions) {
        if (Array.isArray(resolversDefinition)) {
          resolversDefinition = mergeResolvers2(resolversDefinition);
        }
        if (typeof resolversDefinition === "object" && resolversDefinition) {
          resolvers2.push(resolversDefinition);
        }
      }
      const result = (0, utils_1.mergeDeep)(resolvers2, true);
      if (options === null || options === void 0 ? void 0 : options.exclusions) {
        for (const exclusion of options.exclusions) {
          const [typeName, fieldName] = exclusion.split(".");
          if (!fieldName || fieldName === "*") {
            delete result[typeName];
          } else if (result[typeName]) {
            delete result[typeName][fieldName];
          }
        }
      }
      return result;
    }
    exports2.mergeResolvers = mergeResolvers2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/arguments.js
var require_arguments = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/arguments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeArguments = void 0;
    var utils_1 = require_cjs();
    function mergeArguments3(args1, args2, config2) {
      const result = deduplicateArguments2([...args2, ...args1].filter(utils_1.isSome), config2);
      if (config2 && config2.sort) {
        result.sort(utils_1.compareNodes);
      }
      return result;
    }
    exports2.mergeArguments = mergeArguments3;
    function deduplicateArguments2(args, config2) {
      return args.reduce((acc, current) => {
        const dupIndex = acc.findIndex((arg) => arg.name.value === current.name.value);
        if (dupIndex === -1) {
          return acc.concat([current]);
        } else if (!(config2 === null || config2 === void 0 ? void 0 : config2.reverseArguments)) {
          acc[dupIndex] = current;
        }
        return acc;
      }, []);
    }
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js
var require_directives3 = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeDirective = exports2.mergeDirectives = void 0;
    var graphql_1 = require_graphql2();
    var utils_1 = require_cjs();
    function directiveAlreadyExists2(directivesArr, otherDirective) {
      return !!directivesArr.find((directive) => directive.name.value === otherDirective.name.value);
    }
    function isRepeatableDirective2(directive, directives) {
      var _a2;
      return !!((_a2 = directives === null || directives === void 0 ? void 0 : directives[directive.name.value]) === null || _a2 === void 0 ? void 0 : _a2.repeatable);
    }
    function nameAlreadyExists2(name, namesArr) {
      return namesArr.some(({ value }) => value === name.value);
    }
    function mergeArguments3(a1, a2) {
      const result = [...a2];
      for (const argument of a1) {
        const existingIndex = result.findIndex((a) => a.name.value === argument.name.value);
        if (existingIndex > -1) {
          const existingArg = result[existingIndex];
          if (existingArg.value.kind === "ListValue") {
            const source = existingArg.value.values;
            const target = argument.value.values;
            existingArg.value.values = deduplicateLists2(source, target, (targetVal, source2) => {
              const value = targetVal.value;
              return !value || !source2.some((sourceVal) => sourceVal.value === value);
            });
          } else {
            existingArg.value = argument.value;
          }
        } else {
          result.push(argument);
        }
      }
      return result;
    }
    function deduplicateDirectives2(directives, definitions) {
      return directives.map((directive, i, all) => {
        const firstAt = all.findIndex((d) => d.name.value === directive.name.value);
        if (firstAt !== i && !isRepeatableDirective2(directive, definitions)) {
          const dup = all[firstAt];
          directive.arguments = mergeArguments3(directive.arguments, dup.arguments);
          return null;
        }
        return directive;
      }).filter(utils_1.isSome);
    }
    function mergeDirectives2(d1 = [], d2 = [], config2, directives) {
      const reverseOrder = config2 && config2.reverseDirectives;
      const asNext = reverseOrder ? d1 : d2;
      const asFirst = reverseOrder ? d2 : d1;
      const result = deduplicateDirectives2([...asNext], directives);
      for (const directive of asFirst) {
        if (directiveAlreadyExists2(result, directive) && !isRepeatableDirective2(directive, directives)) {
          const existingDirectiveIndex = result.findIndex((d) => d.name.value === directive.name.value);
          const existingDirective = result[existingDirectiveIndex];
          result[existingDirectiveIndex].arguments = mergeArguments3(directive.arguments || [], existingDirective.arguments || []);
        } else {
          result.push(directive);
        }
      }
      return result;
    }
    exports2.mergeDirectives = mergeDirectives2;
    function validateInputs2(node, existingNode) {
      const printedNode = (0, graphql_1.print)({
        ...node,
        description: void 0
      });
      const printedExistingNode = (0, graphql_1.print)({
        ...existingNode,
        description: void 0
      });
      const leaveInputs = new RegExp("(directive @w*d*)|( on .*$)", "g");
      const sameArguments = printedNode.replace(leaveInputs, "") === printedExistingNode.replace(leaveInputs, "");
      if (!sameArguments) {
        throw new Error(`Unable to merge GraphQL directive "${node.name.value}". 
Existing directive:  
	${printedExistingNode} 
Received directive: 
	${printedNode}`);
      }
    }
    function mergeDirective2(node, existingNode) {
      if (existingNode) {
        validateInputs2(node, existingNode);
        return {
          ...node,
          locations: [
            ...existingNode.locations,
            ...node.locations.filter((name) => !nameAlreadyExists2(name, existingNode.locations))
          ]
        };
      }
      return node;
    }
    exports2.mergeDirective = mergeDirective2;
    function deduplicateLists2(source, target, filterFn) {
      return source.concat(target.filter((val) => filterFn(val, source)));
    }
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/enum-values.js
var require_enum_values = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/enum-values.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeEnumValues = void 0;
    var directives_js_1 = require_directives3();
    var utils_1 = require_cjs();
    function mergeEnumValues2(first, second, config2, directives) {
      if (config2 === null || config2 === void 0 ? void 0 : config2.consistentEnumMerge) {
        const reversed = [];
        if (first) {
          reversed.push(...first);
        }
        first = second;
        second = reversed;
      }
      const enumValueMap = /* @__PURE__ */ new Map();
      if (first) {
        for (const firstValue of first) {
          enumValueMap.set(firstValue.name.value, firstValue);
        }
      }
      if (second) {
        for (const secondValue of second) {
          const enumValue = secondValue.name.value;
          if (enumValueMap.has(enumValue)) {
            const firstValue = enumValueMap.get(enumValue);
            firstValue.description = secondValue.description || firstValue.description;
            firstValue.directives = (0, directives_js_1.mergeDirectives)(secondValue.directives, firstValue.directives, directives);
          } else {
            enumValueMap.set(enumValue, secondValue);
          }
        }
      }
      const result = [...enumValueMap.values()];
      if (config2 && config2.sort) {
        result.sort(utils_1.compareNodes);
      }
      return result;
    }
    exports2.mergeEnumValues = mergeEnumValues2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/enum.js
var require_enum = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/enum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeEnum = void 0;
    var graphql_1 = require_graphql2();
    var directives_js_1 = require_directives3();
    var enum_values_js_1 = require_enum_values();
    function mergeEnum2(e1, e2, config2, directives) {
      if (e2) {
        return {
          name: e1.name,
          description: e1["description"] || e2["description"],
          kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || e1.kind === "EnumTypeDefinition" || e2.kind === "EnumTypeDefinition" ? "EnumTypeDefinition" : "EnumTypeExtension",
          loc: e1.loc,
          directives: (0, directives_js_1.mergeDirectives)(e1.directives, e2.directives, config2, directives),
          values: (0, enum_values_js_1.mergeEnumValues)(e1.values, e2.values, config2)
        };
      }
      return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
        ...e1,
        kind: graphql_1.Kind.ENUM_TYPE_DEFINITION
      } : e1;
    }
    exports2.mergeEnum = mergeEnum2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/utils.js
var require_utils5 = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultStringComparator = exports2.CompareVal = exports2.printTypeNode = exports2.isNonNullTypeNode = exports2.isListTypeNode = exports2.isWrappingTypeNode = exports2.extractType = exports2.isSourceTypes = exports2.isStringTypes = void 0;
    var graphql_1 = require_graphql2();
    function isStringTypes2(types) {
      return typeof types === "string";
    }
    exports2.isStringTypes = isStringTypes2;
    function isSourceTypes2(types) {
      return types instanceof graphql_1.Source;
    }
    exports2.isSourceTypes = isSourceTypes2;
    function extractType2(type) {
      let visitedType = type;
      while (visitedType.kind === graphql_1.Kind.LIST_TYPE || visitedType.kind === "NonNullType") {
        visitedType = visitedType.type;
      }
      return visitedType;
    }
    exports2.extractType = extractType2;
    function isWrappingTypeNode2(type) {
      return type.kind !== graphql_1.Kind.NAMED_TYPE;
    }
    exports2.isWrappingTypeNode = isWrappingTypeNode2;
    function isListTypeNode2(type) {
      return type.kind === graphql_1.Kind.LIST_TYPE;
    }
    exports2.isListTypeNode = isListTypeNode2;
    function isNonNullTypeNode2(type) {
      return type.kind === graphql_1.Kind.NON_NULL_TYPE;
    }
    exports2.isNonNullTypeNode = isNonNullTypeNode2;
    function printTypeNode2(type) {
      if (isListTypeNode2(type)) {
        return `[${printTypeNode2(type.type)}]`;
      }
      if (isNonNullTypeNode2(type)) {
        return `${printTypeNode2(type.type)}!`;
      }
      return type.name.value;
    }
    exports2.printTypeNode = printTypeNode2;
    var CompareVal2;
    (function(CompareVal3) {
      CompareVal3[CompareVal3["A_SMALLER_THAN_B"] = -1] = "A_SMALLER_THAN_B";
      CompareVal3[CompareVal3["A_EQUALS_B"] = 0] = "A_EQUALS_B";
      CompareVal3[CompareVal3["A_GREATER_THAN_B"] = 1] = "A_GREATER_THAN_B";
    })(CompareVal2 = exports2.CompareVal || (exports2.CompareVal = {}));
    function defaultStringComparator2(a, b2) {
      if (a == null && b2 == null) {
        return CompareVal2.A_EQUALS_B;
      }
      if (a == null) {
        return CompareVal2.A_SMALLER_THAN_B;
      }
      if (b2 == null) {
        return CompareVal2.A_GREATER_THAN_B;
      }
      if (a < b2)
        return CompareVal2.A_SMALLER_THAN_B;
      if (a > b2)
        return CompareVal2.A_GREATER_THAN_B;
      return CompareVal2.A_EQUALS_B;
    }
    exports2.defaultStringComparator = defaultStringComparator2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/fields.js
var require_fields2 = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/fields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeFields = void 0;
    var utils_js_1 = require_utils5();
    var directives_js_1 = require_directives3();
    var utils_1 = require_cjs();
    var arguments_js_1 = require_arguments();
    function fieldAlreadyExists2(fieldsArr, otherField) {
      const resultIndex = fieldsArr.findIndex((field) => field.name.value === otherField.name.value);
      return [resultIndex > -1 ? fieldsArr[resultIndex] : null, resultIndex];
    }
    function mergeFields2(type, f1, f2, config2, directives) {
      const result = [];
      if (f2 != null) {
        result.push(...f2);
      }
      if (f1 != null) {
        for (const field of f1) {
          const [existing, existingIndex] = fieldAlreadyExists2(result, field);
          if (existing && !(config2 === null || config2 === void 0 ? void 0 : config2.ignoreFieldConflicts)) {
            const newField = (config2 === null || config2 === void 0 ? void 0 : config2.onFieldTypeConflict) && config2.onFieldTypeConflict(existing, field, type, config2 === null || config2 === void 0 ? void 0 : config2.throwOnConflict) || preventConflicts2(type, existing, field, config2 === null || config2 === void 0 ? void 0 : config2.throwOnConflict);
            newField.arguments = (0, arguments_js_1.mergeArguments)(field["arguments"] || [], existing["arguments"] || [], config2);
            newField.directives = (0, directives_js_1.mergeDirectives)(field.directives, existing.directives, config2, directives);
            newField.description = field.description || existing.description;
            result[existingIndex] = newField;
          } else {
            result.push(field);
          }
        }
      }
      if (config2 && config2.sort) {
        result.sort(utils_1.compareNodes);
      }
      if (config2 && config2.exclusions) {
        const exclusions = config2.exclusions;
        return result.filter((field) => !exclusions.includes(`${type.name.value}.${field.name.value}`));
      }
      return result;
    }
    exports2.mergeFields = mergeFields2;
    function preventConflicts2(type, a, b2, ignoreNullability = false) {
      const aType = (0, utils_js_1.printTypeNode)(a.type);
      const bType = (0, utils_js_1.printTypeNode)(b2.type);
      if (aType !== bType) {
        const t1 = (0, utils_js_1.extractType)(a.type);
        const t2 = (0, utils_js_1.extractType)(b2.type);
        if (t1.name.value !== t2.name.value) {
          throw new Error(`Field "${b2.name.value}" already defined with a different type. Declared as "${t1.name.value}", but you tried to override with "${t2.name.value}"`);
        }
        if (!safeChangeForFieldType2(a.type, b2.type, !ignoreNullability)) {
          throw new Error(`Field '${type.name.value}.${a.name.value}' changed type from '${aType}' to '${bType}'`);
        }
      }
      if ((0, utils_js_1.isNonNullTypeNode)(b2.type) && !(0, utils_js_1.isNonNullTypeNode)(a.type)) {
        a.type = b2.type;
      }
      return a;
    }
    function safeChangeForFieldType2(oldType, newType, ignoreNullability = false) {
      if (!(0, utils_js_1.isWrappingTypeNode)(oldType) && !(0, utils_js_1.isWrappingTypeNode)(newType)) {
        return oldType.toString() === newType.toString();
      }
      if ((0, utils_js_1.isNonNullTypeNode)(newType)) {
        const ofType = (0, utils_js_1.isNonNullTypeNode)(oldType) ? oldType.type : oldType;
        return safeChangeForFieldType2(ofType, newType.type);
      }
      if ((0, utils_js_1.isNonNullTypeNode)(oldType)) {
        return safeChangeForFieldType2(newType, oldType, ignoreNullability);
      }
      if ((0, utils_js_1.isListTypeNode)(oldType)) {
        return (0, utils_js_1.isListTypeNode)(newType) && safeChangeForFieldType2(oldType.type, newType.type) || (0, utils_js_1.isNonNullTypeNode)(newType) && safeChangeForFieldType2(oldType, newType["type"]);
      }
      return false;
    }
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/input-type.js
var require_input_type = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/input-type.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeInputType = void 0;
    var graphql_1 = require_graphql2();
    var fields_js_1 = require_fields2();
    var directives_js_1 = require_directives3();
    function mergeInputType2(node, existingNode, config2, directives) {
      if (existingNode) {
        try {
          return {
            name: node.name,
            description: node["description"] || existingNode["description"],
            kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || node.kind === "InputObjectTypeDefinition" || existingNode.kind === "InputObjectTypeDefinition" ? "InputObjectTypeDefinition" : "InputObjectTypeExtension",
            loc: node.loc,
            fields: (0, fields_js_1.mergeFields)(node, node.fields, existingNode.fields, config2),
            directives: (0, directives_js_1.mergeDirectives)(node.directives, existingNode.directives, config2, directives)
          };
        } catch (e) {
          throw new Error(`Unable to merge GraphQL input type "${node.name.value}": ${e.message}`);
        }
      }
      return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
        ...node,
        kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION
      } : node;
    }
    exports2.mergeInputType = mergeInputType2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-named-type-array.js
var require_merge_named_type_array = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-named-type-array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeNamedTypeArray = void 0;
    var utils_1 = require_cjs();
    function alreadyExists2(arr, other) {
      return !!arr.find((i) => i.name.value === other.name.value);
    }
    function mergeNamedTypeArray2(first = [], second = [], config2 = {}) {
      const result = [...second, ...first.filter((d) => !alreadyExists2(second, d))];
      if (config2 && config2.sort) {
        result.sort(utils_1.compareNodes);
      }
      return result;
    }
    exports2.mergeNamedTypeArray = mergeNamedTypeArray2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/interface.js
var require_interface = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/interface.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeInterface = void 0;
    var graphql_1 = require_graphql2();
    var fields_js_1 = require_fields2();
    var directives_js_1 = require_directives3();
    var merge_named_type_array_js_1 = require_merge_named_type_array();
    function mergeInterface2(node, existingNode, config2, directives) {
      if (existingNode) {
        try {
          return {
            name: node.name,
            description: node["description"] || existingNode["description"],
            kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || node.kind === "InterfaceTypeDefinition" || existingNode.kind === "InterfaceTypeDefinition" ? "InterfaceTypeDefinition" : "InterfaceTypeExtension",
            loc: node.loc,
            fields: (0, fields_js_1.mergeFields)(node, node.fields, existingNode.fields, config2),
            directives: (0, directives_js_1.mergeDirectives)(node.directives, existingNode.directives, config2, directives),
            interfaces: node["interfaces"] ? (0, merge_named_type_array_js_1.mergeNamedTypeArray)(node["interfaces"], existingNode["interfaces"], config2) : void 0
          };
        } catch (e) {
          throw new Error(`Unable to merge GraphQL interface "${node.name.value}": ${e.message}`);
        }
      }
      return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
        ...node,
        kind: graphql_1.Kind.INTERFACE_TYPE_DEFINITION
      } : node;
    }
    exports2.mergeInterface = mergeInterface2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/type.js
var require_type3 = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/type.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeType = void 0;
    var graphql_1 = require_graphql2();
    var fields_js_1 = require_fields2();
    var directives_js_1 = require_directives3();
    var merge_named_type_array_js_1 = require_merge_named_type_array();
    function mergeType2(node, existingNode, config2, directives) {
      if (existingNode) {
        try {
          return {
            name: node.name,
            description: node["description"] || existingNode["description"],
            kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || node.kind === "ObjectTypeDefinition" || existingNode.kind === "ObjectTypeDefinition" ? "ObjectTypeDefinition" : "ObjectTypeExtension",
            loc: node.loc,
            fields: (0, fields_js_1.mergeFields)(node, node.fields, existingNode.fields, config2),
            directives: (0, directives_js_1.mergeDirectives)(node.directives, existingNode.directives, config2, directives),
            interfaces: (0, merge_named_type_array_js_1.mergeNamedTypeArray)(node.interfaces, existingNode.interfaces, config2)
          };
        } catch (e) {
          throw new Error(`Unable to merge GraphQL type "${node.name.value}": ${e.message}`);
        }
      }
      return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
        ...node,
        kind: graphql_1.Kind.OBJECT_TYPE_DEFINITION
      } : node;
    }
    exports2.mergeType = mergeType2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/scalar.js
var require_scalar = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/scalar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeScalar = void 0;
    var graphql_1 = require_graphql2();
    var directives_js_1 = require_directives3();
    function mergeScalar2(node, existingNode, config2, directives) {
      if (existingNode) {
        return {
          name: node.name,
          description: node["description"] || existingNode["description"],
          kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || node.kind === "ScalarTypeDefinition" || existingNode.kind === "ScalarTypeDefinition" ? "ScalarTypeDefinition" : "ScalarTypeExtension",
          loc: node.loc,
          directives: (0, directives_js_1.mergeDirectives)(node.directives, existingNode.directives, config2, directives)
        };
      }
      return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
        ...node,
        kind: graphql_1.Kind.SCALAR_TYPE_DEFINITION
      } : node;
    }
    exports2.mergeScalar = mergeScalar2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/union.js
var require_union = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/union.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeUnion = void 0;
    var graphql_1 = require_graphql2();
    var directives_js_1 = require_directives3();
    var merge_named_type_array_js_1 = require_merge_named_type_array();
    function mergeUnion2(first, second, config2, directives) {
      if (second) {
        return {
          name: first.name,
          description: first["description"] || second["description"],
          // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
          directives: (0, directives_js_1.mergeDirectives)(first.directives, second.directives, config2, directives),
          kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || first.kind === "UnionTypeDefinition" || second.kind === "UnionTypeDefinition" ? graphql_1.Kind.UNION_TYPE_DEFINITION : graphql_1.Kind.UNION_TYPE_EXTENSION,
          loc: first.loc,
          types: (0, merge_named_type_array_js_1.mergeNamedTypeArray)(first.types, second.types, config2)
        };
      }
      return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
        ...first,
        kind: graphql_1.Kind.UNION_TYPE_DEFINITION
      } : first;
    }
    exports2.mergeUnion = mergeUnion2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/schema-def.js
var require_schema_def = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/schema-def.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeSchemaDefs = exports2.DEFAULT_OPERATION_TYPE_NAME_MAP = void 0;
    var graphql_1 = require_graphql2();
    var directives_js_1 = require_directives3();
    exports2.DEFAULT_OPERATION_TYPE_NAME_MAP = {
      query: "Query",
      mutation: "Mutation",
      subscription: "Subscription"
    };
    function mergeOperationTypes2(opNodeList = [], existingOpNodeList = []) {
      const finalOpNodeList = [];
      for (const opNodeType in exports2.DEFAULT_OPERATION_TYPE_NAME_MAP) {
        const opNode = opNodeList.find((n) => n.operation === opNodeType) || existingOpNodeList.find((n) => n.operation === opNodeType);
        if (opNode) {
          finalOpNodeList.push(opNode);
        }
      }
      return finalOpNodeList;
    }
    function mergeSchemaDefs2(node, existingNode, config2, directives) {
      if (existingNode) {
        return {
          kind: node.kind === graphql_1.Kind.SCHEMA_DEFINITION || existingNode.kind === graphql_1.Kind.SCHEMA_DEFINITION ? graphql_1.Kind.SCHEMA_DEFINITION : graphql_1.Kind.SCHEMA_EXTENSION,
          description: node["description"] || existingNode["description"],
          directives: (0, directives_js_1.mergeDirectives)(node.directives, existingNode.directives, config2, directives),
          operationTypes: mergeOperationTypes2(node.operationTypes, existingNode.operationTypes)
        };
      }
      return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
        ...node,
        kind: graphql_1.Kind.SCHEMA_DEFINITION
      } : node;
    }
    exports2.mergeSchemaDefs = mergeSchemaDefs2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-nodes.js
var require_merge_nodes = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-nodes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeGraphQLNodes = exports2.isNamedDefinitionNode = exports2.schemaDefSymbol = void 0;
    var graphql_1 = require_graphql2();
    var type_js_1 = require_type3();
    var enum_js_1 = require_enum();
    var scalar_js_1 = require_scalar();
    var union_js_1 = require_union();
    var input_type_js_1 = require_input_type();
    var interface_js_1 = require_interface();
    var directives_js_1 = require_directives3();
    var schema_def_js_1 = require_schema_def();
    var utils_1 = require_cjs();
    exports2.schemaDefSymbol = "SCHEMA_DEF_SYMBOL";
    function isNamedDefinitionNode2(definitionNode) {
      return "name" in definitionNode;
    }
    exports2.isNamedDefinitionNode = isNamedDefinitionNode2;
    function mergeGraphQLNodes2(nodes, config2, directives = {}) {
      var _a2, _b, _c2;
      const mergedResultMap = directives;
      for (const nodeDefinition of nodes) {
        if (isNamedDefinitionNode2(nodeDefinition)) {
          const name = (_a2 = nodeDefinition.name) === null || _a2 === void 0 ? void 0 : _a2.value;
          if (config2 === null || config2 === void 0 ? void 0 : config2.commentDescriptions) {
            (0, utils_1.collectComment)(nodeDefinition);
          }
          if (name == null) {
            continue;
          }
          if (((_b = config2 === null || config2 === void 0 ? void 0 : config2.exclusions) === null || _b === void 0 ? void 0 : _b.includes(name + ".*")) || ((_c2 = config2 === null || config2 === void 0 ? void 0 : config2.exclusions) === null || _c2 === void 0 ? void 0 : _c2.includes(name))) {
            delete mergedResultMap[name];
          } else {
            switch (nodeDefinition.kind) {
              case graphql_1.Kind.OBJECT_TYPE_DEFINITION:
              case graphql_1.Kind.OBJECT_TYPE_EXTENSION:
                mergedResultMap[name] = (0, type_js_1.mergeType)(nodeDefinition, mergedResultMap[name], config2, directives);
                break;
              case graphql_1.Kind.ENUM_TYPE_DEFINITION:
              case graphql_1.Kind.ENUM_TYPE_EXTENSION:
                mergedResultMap[name] = (0, enum_js_1.mergeEnum)(nodeDefinition, mergedResultMap[name], config2, directives);
                break;
              case graphql_1.Kind.UNION_TYPE_DEFINITION:
              case graphql_1.Kind.UNION_TYPE_EXTENSION:
                mergedResultMap[name] = (0, union_js_1.mergeUnion)(nodeDefinition, mergedResultMap[name], config2, directives);
                break;
              case graphql_1.Kind.SCALAR_TYPE_DEFINITION:
              case graphql_1.Kind.SCALAR_TYPE_EXTENSION:
                mergedResultMap[name] = (0, scalar_js_1.mergeScalar)(nodeDefinition, mergedResultMap[name], config2, directives);
                break;
              case graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION:
              case graphql_1.Kind.INPUT_OBJECT_TYPE_EXTENSION:
                mergedResultMap[name] = (0, input_type_js_1.mergeInputType)(nodeDefinition, mergedResultMap[name], config2, directives);
                break;
              case graphql_1.Kind.INTERFACE_TYPE_DEFINITION:
              case graphql_1.Kind.INTERFACE_TYPE_EXTENSION:
                mergedResultMap[name] = (0, interface_js_1.mergeInterface)(nodeDefinition, mergedResultMap[name], config2, directives);
                break;
              case graphql_1.Kind.DIRECTIVE_DEFINITION:
                mergedResultMap[name] = (0, directives_js_1.mergeDirective)(nodeDefinition, mergedResultMap[name]);
                break;
            }
          }
        } else if (nodeDefinition.kind === graphql_1.Kind.SCHEMA_DEFINITION || nodeDefinition.kind === graphql_1.Kind.SCHEMA_EXTENSION) {
          mergedResultMap[exports2.schemaDefSymbol] = (0, schema_def_js_1.mergeSchemaDefs)(nodeDefinition, mergedResultMap[exports2.schemaDefSymbol], config2);
        }
      }
      return mergedResultMap;
    }
    exports2.mergeGraphQLNodes = mergeGraphQLNodes2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-typedefs.js
var require_merge_typedefs = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-typedefs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeGraphQLTypes = exports2.mergeTypeDefs = void 0;
    var graphql_1 = require_graphql2();
    var utils_js_1 = require_utils5();
    var merge_nodes_js_1 = require_merge_nodes();
    var utils_1 = require_cjs();
    var schema_def_js_1 = require_schema_def();
    function mergeTypeDefs2(typeSource, config2) {
      (0, utils_1.resetComments)();
      const doc = {
        kind: graphql_1.Kind.DOCUMENT,
        definitions: mergeGraphQLTypes2(typeSource, {
          useSchemaDefinition: true,
          forceSchemaDefinition: false,
          throwOnConflict: false,
          commentDescriptions: false,
          ...config2
        })
      };
      let result;
      if (config2 === null || config2 === void 0 ? void 0 : config2.commentDescriptions) {
        result = (0, utils_1.printWithComments)(doc);
      } else {
        result = doc;
      }
      (0, utils_1.resetComments)();
      return result;
    }
    exports2.mergeTypeDefs = mergeTypeDefs2;
    function visitTypeSources2(typeSource, options, allDirectives = [], allNodes = [], visitedTypeSources = /* @__PURE__ */ new Set()) {
      if (typeSource && !visitedTypeSources.has(typeSource)) {
        visitedTypeSources.add(typeSource);
        if (typeof typeSource === "function") {
          visitTypeSources2(typeSource(), options, allDirectives, allNodes, visitedTypeSources);
        } else if (Array.isArray(typeSource)) {
          for (const type of typeSource) {
            visitTypeSources2(type, options, allDirectives, allNodes, visitedTypeSources);
          }
        } else if ((0, graphql_1.isSchema)(typeSource)) {
          const documentNode = (0, utils_1.getDocumentNodeFromSchema)(typeSource, options);
          visitTypeSources2(documentNode.definitions, options, allDirectives, allNodes, visitedTypeSources);
        } else if ((0, utils_js_1.isStringTypes)(typeSource) || (0, utils_js_1.isSourceTypes)(typeSource)) {
          const documentNode = (0, graphql_1.parse)(typeSource, options);
          visitTypeSources2(documentNode.definitions, options, allDirectives, allNodes, visitedTypeSources);
        } else if (typeof typeSource === "object" && (0, graphql_1.isDefinitionNode)(typeSource)) {
          if (typeSource.kind === graphql_1.Kind.DIRECTIVE_DEFINITION) {
            allDirectives.push(typeSource);
          } else {
            allNodes.push(typeSource);
          }
        } else if ((0, utils_1.isDocumentNode)(typeSource)) {
          visitTypeSources2(typeSource.definitions, options, allDirectives, allNodes, visitedTypeSources);
        } else {
          throw new Error(`typeDefs must contain only strings, documents, schemas, or functions, got ${typeof typeSource}`);
        }
      }
      return { allDirectives, allNodes };
    }
    function mergeGraphQLTypes2(typeSource, config2) {
      var _a2, _b, _c2;
      (0, utils_1.resetComments)();
      const { allDirectives, allNodes } = visitTypeSources2(typeSource, config2);
      const mergedDirectives = (0, merge_nodes_js_1.mergeGraphQLNodes)(allDirectives, config2);
      const mergedNodes = (0, merge_nodes_js_1.mergeGraphQLNodes)(allNodes, config2, mergedDirectives);
      if (config2 === null || config2 === void 0 ? void 0 : config2.useSchemaDefinition) {
        const schemaDef = mergedNodes[merge_nodes_js_1.schemaDefSymbol] || {
          kind: graphql_1.Kind.SCHEMA_DEFINITION,
          operationTypes: []
        };
        const operationTypes = schemaDef.operationTypes;
        for (const opTypeDefNodeType in schema_def_js_1.DEFAULT_OPERATION_TYPE_NAME_MAP) {
          const opTypeDefNode = operationTypes.find((operationType) => operationType.operation === opTypeDefNodeType);
          if (!opTypeDefNode) {
            const possibleRootTypeName = schema_def_js_1.DEFAULT_OPERATION_TYPE_NAME_MAP[opTypeDefNodeType];
            const existingPossibleRootType = mergedNodes[possibleRootTypeName];
            if (existingPossibleRootType != null && existingPossibleRootType.name != null) {
              operationTypes.push({
                kind: graphql_1.Kind.OPERATION_TYPE_DEFINITION,
                type: {
                  kind: graphql_1.Kind.NAMED_TYPE,
                  name: existingPossibleRootType.name
                },
                operation: opTypeDefNodeType
              });
            }
          }
        }
        if (((_a2 = schemaDef === null || schemaDef === void 0 ? void 0 : schemaDef.operationTypes) === null || _a2 === void 0 ? void 0 : _a2.length) != null && schemaDef.operationTypes.length > 0) {
          mergedNodes[merge_nodes_js_1.schemaDefSymbol] = schemaDef;
        }
      }
      if ((config2 === null || config2 === void 0 ? void 0 : config2.forceSchemaDefinition) && !((_c2 = (_b = mergedNodes[merge_nodes_js_1.schemaDefSymbol]) === null || _b === void 0 ? void 0 : _b.operationTypes) === null || _c2 === void 0 ? void 0 : _c2.length)) {
        mergedNodes[merge_nodes_js_1.schemaDefSymbol] = {
          kind: graphql_1.Kind.SCHEMA_DEFINITION,
          operationTypes: [
            {
              kind: graphql_1.Kind.OPERATION_TYPE_DEFINITION,
              operation: "query",
              type: {
                kind: graphql_1.Kind.NAMED_TYPE,
                name: {
                  kind: graphql_1.Kind.NAME,
                  value: "Query"
                }
              }
            }
          ]
        };
      }
      const mergedNodeDefinitions = Object.values(mergedNodes);
      if (config2 === null || config2 === void 0 ? void 0 : config2.sort) {
        const sortFn = typeof config2.sort === "function" ? config2.sort : utils_js_1.defaultStringComparator;
        mergedNodeDefinitions.sort((a, b2) => {
          var _a3, _b2;
          return sortFn((_a3 = a.name) === null || _a3 === void 0 ? void 0 : _a3.value, (_b2 = b2.name) === null || _b2 === void 0 ? void 0 : _b2.value);
        });
      }
      return mergedNodeDefinitions;
    }
    exports2.mergeGraphQLTypes = mergeGraphQLTypes2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/index.js
var require_typedefs_mergers = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_arguments(), exports2);
    tslib_1.__exportStar(require_directives3(), exports2);
    tslib_1.__exportStar(require_enum_values(), exports2);
    tslib_1.__exportStar(require_enum(), exports2);
    tslib_1.__exportStar(require_fields2(), exports2);
    tslib_1.__exportStar(require_input_type(), exports2);
    tslib_1.__exportStar(require_interface(), exports2);
    tslib_1.__exportStar(require_merge_named_type_array(), exports2);
    tslib_1.__exportStar(require_merge_nodes(), exports2);
    tslib_1.__exportStar(require_merge_typedefs(), exports2);
    tslib_1.__exportStar(require_scalar(), exports2);
    tslib_1.__exportStar(require_type3(), exports2);
    tslib_1.__exportStar(require_union(), exports2);
    tslib_1.__exportStar(require_utils5(), exports2);
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/extensions.js
var require_extensions = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/extensions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.applyExtensions = exports2.mergeExtensions = exports2.extractExtensionsFromSchema = void 0;
    var utils_1 = require_cjs();
    var utils_2 = require_cjs();
    Object.defineProperty(exports2, "extractExtensionsFromSchema", { enumerable: true, get: function() {
      return utils_2.extractExtensionsFromSchema;
    } });
    function mergeExtensions2(extensions) {
      return (0, utils_1.mergeDeep)(extensions);
    }
    exports2.mergeExtensions = mergeExtensions2;
    function applyExtensionObject2(obj, extensions) {
      if (!obj) {
        return;
      }
      obj.extensions = (0, utils_1.mergeDeep)([obj.extensions || {}, extensions || {}]);
    }
    function applyExtensions2(schema, extensions) {
      applyExtensionObject2(schema, extensions.schemaExtensions);
      for (const [typeName, data] of Object.entries(extensions.types || {})) {
        const type = schema.getType(typeName);
        if (type) {
          applyExtensionObject2(type, data.extensions);
          if (data.type === "object" || data.type === "interface") {
            for (const [fieldName, fieldData] of Object.entries(data.fields)) {
              const field = type.getFields()[fieldName];
              if (field) {
                applyExtensionObject2(field, fieldData.extensions);
                for (const [arg, argData] of Object.entries(fieldData.arguments)) {
                  applyExtensionObject2(field.args.find((a) => a.name === arg), argData);
                }
              }
            }
          } else if (data.type === "input") {
            for (const [fieldName, fieldData] of Object.entries(data.fields)) {
              const field = type.getFields()[fieldName];
              applyExtensionObject2(field, fieldData.extensions);
            }
          } else if (data.type === "enum") {
            for (const [valueName, valueData] of Object.entries(data.values)) {
              const value = type.getValue(valueName);
              applyExtensionObject2(value, valueData);
            }
          }
        }
      }
      return schema;
    }
    exports2.applyExtensions = applyExtensions2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_merge_resolvers(), exports2);
    tslib_1.__exportStar(require_typedefs_mergers(), exports2);
    tslib_1.__exportStar(require_extensions(), exports2);
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/makeExecutableSchema.js
var require_makeExecutableSchema = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/makeExecutableSchema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeExecutableSchema = void 0;
    var graphql_1 = require_graphql2();
    var utils_1 = require_cjs();
    var addResolversToSchema_js_1 = require_addResolversToSchema();
    var assertResolversPresent_js_1 = require_assertResolversPresent();
    var merge_1 = require_cjs2();
    function makeExecutableSchema2({ typeDefs, resolvers: resolvers2 = {}, resolverValidationOptions = {}, inheritResolversFromInterfaces = false, updateResolversInPlace = false, schemaExtensions, ...otherOptions }) {
      if (typeof resolverValidationOptions !== "object") {
        throw new Error("Expected `resolverValidationOptions` to be an object");
      }
      if (!typeDefs) {
        throw new Error("Must provide typeDefs");
      }
      let schema;
      if ((0, graphql_1.isSchema)(typeDefs)) {
        schema = typeDefs;
      } else if (otherOptions === null || otherOptions === void 0 ? void 0 : otherOptions.commentDescriptions) {
        const mergedTypeDefs = (0, merge_1.mergeTypeDefs)(typeDefs, {
          ...otherOptions,
          commentDescriptions: true
        });
        schema = (0, graphql_1.buildSchema)(mergedTypeDefs, otherOptions);
      } else {
        const mergedTypeDefs = (0, merge_1.mergeTypeDefs)(typeDefs, otherOptions);
        schema = (0, graphql_1.buildASTSchema)(mergedTypeDefs, otherOptions);
      }
      schema = (0, addResolversToSchema_js_1.addResolversToSchema)({
        schema,
        resolvers: (0, merge_1.mergeResolvers)(resolvers2),
        resolverValidationOptions,
        inheritResolversFromInterfaces,
        updateResolversInPlace
      });
      if (Object.keys(resolverValidationOptions).length > 0) {
        (0, assertResolversPresent_js_1.assertResolversPresent)(schema, resolverValidationOptions);
      }
      if (schemaExtensions) {
        schemaExtensions = (0, merge_1.mergeExtensions)((0, utils_1.asArray)(schemaExtensions));
        (0, merge_1.applyExtensions)(schema, schemaExtensions);
      }
      return schema;
    }
    exports2.makeExecutableSchema = makeExecutableSchema2;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/types.js
var require_types2 = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/types.js"() {
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/merge-schemas.js
var require_merge_schemas = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/merge-schemas.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeSchemas = void 0;
    var utils_1 = require_cjs();
    var makeExecutableSchema_js_1 = require_makeExecutableSchema();
    function mergeSchemas(config2) {
      const extractedTypeDefs = [];
      const extractedResolvers = [];
      const extractedSchemaExtensions = [];
      if (config2.schemas != null) {
        for (const schema of config2.schemas) {
          extractedTypeDefs.push(schema);
          extractedResolvers.push((0, utils_1.getResolversFromSchema)(schema));
          extractedSchemaExtensions.push((0, utils_1.extractExtensionsFromSchema)(schema));
        }
      }
      if (config2.typeDefs != null) {
        extractedTypeDefs.push(config2.typeDefs);
      }
      if (config2.resolvers != null) {
        const additionalResolvers = (0, utils_1.asArray)(config2.resolvers);
        extractedResolvers.push(...additionalResolvers);
      }
      if (config2.schemaExtensions != null) {
        const additionalSchemaExtensions = (0, utils_1.asArray)(config2.schemaExtensions);
        extractedSchemaExtensions.push(...additionalSchemaExtensions);
      }
      return (0, makeExecutableSchema_js_1.makeExecutableSchema)({
        ...config2,
        typeDefs: extractedTypeDefs,
        resolvers: extractedResolvers,
        schemaExtensions: extractedSchemaExtensions
      });
    }
    exports2.mergeSchemas = mergeSchemas;
  }
});

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/index.js
var require_cjs3 = __commonJS({
  "node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extractExtensionsFromSchema = exports2.extendResolversFromInterfaces = exports2.checkForResolveTypeResolver = exports2.addResolversToSchema = exports2.chainResolvers = exports2.assertResolversPresent = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var assertResolversPresent_js_1 = require_assertResolversPresent();
    Object.defineProperty(exports2, "assertResolversPresent", { enumerable: true, get: function() {
      return assertResolversPresent_js_1.assertResolversPresent;
    } });
    var chainResolvers_js_1 = require_chainResolvers();
    Object.defineProperty(exports2, "chainResolvers", { enumerable: true, get: function() {
      return chainResolvers_js_1.chainResolvers;
    } });
    var addResolversToSchema_js_1 = require_addResolversToSchema();
    Object.defineProperty(exports2, "addResolversToSchema", { enumerable: true, get: function() {
      return addResolversToSchema_js_1.addResolversToSchema;
    } });
    var checkForResolveTypeResolver_js_1 = require_checkForResolveTypeResolver();
    Object.defineProperty(exports2, "checkForResolveTypeResolver", { enumerable: true, get: function() {
      return checkForResolveTypeResolver_js_1.checkForResolveTypeResolver;
    } });
    var extendResolversFromInterfaces_js_1 = require_extendResolversFromInterfaces();
    Object.defineProperty(exports2, "extendResolversFromInterfaces", { enumerable: true, get: function() {
      return extendResolversFromInterfaces_js_1.extendResolversFromInterfaces;
    } });
    tslib_1.__exportStar(require_makeExecutableSchema(), exports2);
    tslib_1.__exportStar(require_types2(), exports2);
    tslib_1.__exportStar(require_merge_schemas(), exports2);
    var utils_1 = require_cjs();
    Object.defineProperty(exports2, "extractExtensionsFromSchema", { enumerable: true, get: function() {
      return utils_1.extractExtensionsFromSchema;
    } });
  }
});

// node_modules/@apollo/server/dist/cjs/utils/resolvable.js
var require_resolvable = __commonJS({
  "node_modules/@apollo/server/dist/cjs/utils/resolvable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.default = () => {
      let resolve;
      let reject;
      const promise = new Promise((_resolve, _reject) => {
        resolve = _resolve;
        reject = _reject;
      });
      promise.resolve = resolve;
      promise.reject = reject;
      return promise;
    };
  }
});

// node_modules/@apollo/server/dist/cjs/cachePolicy.js
var require_cachePolicy = __commonJS({
  "node_modules/@apollo/server/dist/cjs/cachePolicy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.newCachePolicy = void 0;
    function newCachePolicy2() {
      return {
        maxAge: void 0,
        scope: void 0,
        restrict(hint) {
          if (hint.maxAge !== void 0 && (this.maxAge === void 0 || hint.maxAge < this.maxAge)) {
            this.maxAge = hint.maxAge;
          }
          if (hint.scope !== void 0 && this.scope !== "PRIVATE") {
            this.scope = hint.scope;
          }
        },
        replace(hint) {
          if (hint.maxAge !== void 0) {
            this.maxAge = hint.maxAge;
          }
          if (hint.scope !== void 0) {
            this.scope = hint.scope;
          }
        },
        policyIfCacheable() {
          if (this.maxAge === void 0 || this.maxAge === 0) {
            return null;
          }
          return { maxAge: this.maxAge, scope: this.scope ?? "PUBLIC" };
        }
      };
    }
    exports2.newCachePolicy = newCachePolicy2;
  }
});

// node_modules/@apollo/server/dist/cjs/determineApolloConfig.js
var require_determineApolloConfig = __commonJS({
  "node_modules/@apollo/server/dist/cjs/determineApolloConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.determineApolloConfig = void 0;
    var utils_createhash_1 = require_dist3();
    function determineApolloConfig2(input, logger) {
      const apolloConfig = {};
      const { APOLLO_KEY, APOLLO_GRAPH_REF, APOLLO_GRAPH_ID, APOLLO_GRAPH_VARIANT } = process.env;
      if (input?.key) {
        apolloConfig.key = input.key.trim();
      } else if (APOLLO_KEY) {
        apolloConfig.key = APOLLO_KEY.trim();
      }
      if ((input?.key ?? APOLLO_KEY) !== apolloConfig.key) {
        logger.warn("The provided API key has unexpected leading or trailing whitespace. Apollo Server will trim the key value before use.");
      }
      if (apolloConfig.key) {
        assertValidHeaderValue2(apolloConfig.key);
      }
      if (apolloConfig.key) {
        apolloConfig.keyHash = (0, utils_createhash_1.createHash)("sha512").update(apolloConfig.key).digest("hex");
      }
      if (input?.graphRef) {
        apolloConfig.graphRef = input.graphRef;
      } else if (APOLLO_GRAPH_REF) {
        apolloConfig.graphRef = APOLLO_GRAPH_REF;
      }
      const graphId = input?.graphId ?? APOLLO_GRAPH_ID;
      const graphVariant = input?.graphVariant ?? APOLLO_GRAPH_VARIANT;
      if (apolloConfig.graphRef) {
        if (graphId) {
          throw new Error("Cannot specify both graph ref and graph ID. Please use `apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.");
        }
        if (graphVariant) {
          throw new Error("Cannot specify both graph ref and graph variant. Please use `apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph variant.");
        }
      } else if (graphId) {
        apolloConfig.graphRef = graphVariant ? `${graphId}@${graphVariant}` : graphId;
      }
      return apolloConfig;
    }
    exports2.determineApolloConfig = determineApolloConfig2;
    function assertValidHeaderValue2(value) {
      const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/g;
      if (invalidHeaderCharRegex.test(value)) {
        const invalidChars = value.match(invalidHeaderCharRegex);
        throw new Error(`The API key provided to Apollo Server contains characters which are invalid as HTTP header values. The following characters found in the key are invalid: ${invalidChars.join(", ")}. Valid header values may only contain ASCII visible characters. If you think there is an issue with your key, please contact Apollo support.`);
      }
    }
  }
});

// node_modules/@apollo/server/dist/cjs/errors/index.js
var require_errors2 = __commonJS({
  "node_modules/@apollo/server/dist/cjs/errors/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.unwrapResolverError = exports2.ApolloServerValidationErrorCode = exports2.ApolloServerErrorCode = void 0;
    var graphql_1 = require_graphql2();
    var ApolloServerErrorCode2;
    (function(ApolloServerErrorCode3) {
      ApolloServerErrorCode3["INTERNAL_SERVER_ERROR"] = "INTERNAL_SERVER_ERROR";
      ApolloServerErrorCode3["GRAPHQL_PARSE_FAILED"] = "GRAPHQL_PARSE_FAILED";
      ApolloServerErrorCode3["GRAPHQL_VALIDATION_FAILED"] = "GRAPHQL_VALIDATION_FAILED";
      ApolloServerErrorCode3["PERSISTED_QUERY_NOT_FOUND"] = "PERSISTED_QUERY_NOT_FOUND";
      ApolloServerErrorCode3["PERSISTED_QUERY_NOT_SUPPORTED"] = "PERSISTED_QUERY_NOT_SUPPORTED";
      ApolloServerErrorCode3["BAD_USER_INPUT"] = "BAD_USER_INPUT";
      ApolloServerErrorCode3["OPERATION_RESOLUTION_FAILURE"] = "OPERATION_RESOLUTION_FAILURE";
      ApolloServerErrorCode3["BAD_REQUEST"] = "BAD_REQUEST";
    })(ApolloServerErrorCode2 || (exports2.ApolloServerErrorCode = ApolloServerErrorCode2 = {}));
    var ApolloServerValidationErrorCode2;
    (function(ApolloServerValidationErrorCode3) {
      ApolloServerValidationErrorCode3["INTROSPECTION_DISABLED"] = "INTROSPECTION_DISABLED";
    })(ApolloServerValidationErrorCode2 || (exports2.ApolloServerValidationErrorCode = ApolloServerValidationErrorCode2 = {}));
    function unwrapResolverError(error) {
      if (error instanceof graphql_1.GraphQLError && error.path && error.originalError) {
        return error.originalError;
      }
      return error;
    }
    exports2.unwrapResolverError = unwrapResolverError;
  }
});

// node_modules/@apollo/server/dist/cjs/utils/HeaderMap.js
var require_HeaderMap = __commonJS({
  "node_modules/@apollo/server/dist/cjs/utils/HeaderMap.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HeaderMap = void 0;
    var HeaderMap2 = class extends Map {
      constructor() {
        super(...arguments);
        this.__identity = Symbol("HeaderMap");
      }
      set(key, value) {
        return super.set(key.toLowerCase(), value);
      }
      get(key) {
        return super.get(key.toLowerCase());
      }
      delete(key) {
        return super.delete(key.toLowerCase());
      }
      has(key) {
        return super.has(key.toLowerCase());
      }
    };
    exports2.HeaderMap = HeaderMap2;
  }
});

// node_modules/@apollo/server/dist/cjs/internalErrorClasses.js
var require_internalErrorClasses = __commonJS({
  "node_modules/@apollo/server/dist/cjs/internalErrorClasses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BadRequestError = exports2.OperationResolutionError = exports2.UserInputError = exports2.PersistedQueryNotSupportedError = exports2.PersistedQueryNotFoundError = exports2.ValidationError = exports2.SyntaxError = void 0;
    var graphql_1 = require_graphql2();
    var index_js_1 = require_errors2();
    var runHttpQuery_js_1 = require_runHttpQuery();
    var HeaderMap_js_1 = require_HeaderMap();
    var GraphQLErrorWithCode2 = class extends graphql_1.GraphQLError {
      constructor(message, code, options) {
        super(message, {
          ...options,
          extensions: { ...options?.extensions, code }
        });
        this.name = this.constructor.name;
      }
    };
    var SyntaxError3 = class extends GraphQLErrorWithCode2 {
      constructor(graphqlError) {
        super(graphqlError.message, index_js_1.ApolloServerErrorCode.GRAPHQL_PARSE_FAILED, {
          source: graphqlError.source,
          positions: graphqlError.positions,
          extensions: { http: (0, runHttpQuery_js_1.newHTTPGraphQLHead)(400), ...graphqlError.extensions },
          originalError: graphqlError
        });
      }
    };
    exports2.SyntaxError = SyntaxError3;
    var ValidationError2 = class extends GraphQLErrorWithCode2 {
      constructor(graphqlError) {
        super(graphqlError.message, index_js_1.ApolloServerErrorCode.GRAPHQL_VALIDATION_FAILED, {
          nodes: graphqlError.nodes,
          extensions: {
            http: (0, runHttpQuery_js_1.newHTTPGraphQLHead)(400),
            ...graphqlError.extensions
          },
          originalError: graphqlError.originalError ?? graphqlError
        });
      }
    };
    exports2.ValidationError = ValidationError2;
    var getPersistedQueryErrorHttp2 = () => ({
      status: 200,
      headers: new HeaderMap_js_1.HeaderMap([
        ["cache-control", "private, no-cache, must-revalidate"]
      ])
    });
    var PersistedQueryNotFoundError2 = class extends GraphQLErrorWithCode2 {
      constructor() {
        super("PersistedQueryNotFound", index_js_1.ApolloServerErrorCode.PERSISTED_QUERY_NOT_FOUND, { extensions: { http: getPersistedQueryErrorHttp2() } });
      }
    };
    exports2.PersistedQueryNotFoundError = PersistedQueryNotFoundError2;
    var PersistedQueryNotSupportedError2 = class extends GraphQLErrorWithCode2 {
      constructor() {
        super("PersistedQueryNotSupported", index_js_1.ApolloServerErrorCode.PERSISTED_QUERY_NOT_SUPPORTED, { extensions: { http: getPersistedQueryErrorHttp2() } });
      }
    };
    exports2.PersistedQueryNotSupportedError = PersistedQueryNotSupportedError2;
    var UserInputError2 = class extends GraphQLErrorWithCode2 {
      constructor(graphqlError) {
        super(graphqlError.message, index_js_1.ApolloServerErrorCode.BAD_USER_INPUT, {
          nodes: graphqlError.nodes,
          originalError: graphqlError.originalError ?? graphqlError,
          extensions: graphqlError.extensions
        });
      }
    };
    exports2.UserInputError = UserInputError2;
    var OperationResolutionError2 = class extends GraphQLErrorWithCode2 {
      constructor(graphqlError) {
        super(graphqlError.message, index_js_1.ApolloServerErrorCode.OPERATION_RESOLUTION_FAILURE, {
          nodes: graphqlError.nodes,
          originalError: graphqlError.originalError ?? graphqlError,
          extensions: {
            http: (0, runHttpQuery_js_1.newHTTPGraphQLHead)(400),
            ...graphqlError.extensions
          }
        });
      }
    };
    exports2.OperationResolutionError = OperationResolutionError2;
    var BadRequestError2 = class extends GraphQLErrorWithCode2 {
      constructor(message, options) {
        super(message, index_js_1.ApolloServerErrorCode.BAD_REQUEST, {
          ...options,
          extensions: { http: (0, runHttpQuery_js_1.newHTTPGraphQLHead)(400), ...options?.extensions }
        });
      }
    };
    exports2.BadRequestError = BadRequestError2;
  }
});

// node_modules/@apollo/server/dist/cjs/runHttpQuery.js
var require_runHttpQuery = __commonJS({
  "node_modules/@apollo/server/dist/cjs/runHttpQuery.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mergeHTTPGraphQLHead = exports2.newHTTPGraphQLHead = exports2.prettyJSONStringify = exports2.runHttpQuery = void 0;
    var ApolloServer_js_1 = require_ApolloServer();
    var graphql_1 = require_graphql2();
    var internalErrorClasses_js_1 = require_internalErrorClasses();
    var negotiator_1 = __importDefault2(require_negotiator());
    var HeaderMap_js_1 = require_HeaderMap();
    function fieldIfString2(o, fieldName) {
      const value = o[fieldName];
      if (typeof value === "string") {
        return value;
      }
      return void 0;
    }
    function searchParamIfSpecifiedOnce2(searchParams, paramName) {
      const values = searchParams.getAll(paramName);
      switch (values.length) {
        case 0:
          return void 0;
        case 1:
          return values[0];
        default:
          throw new internalErrorClasses_js_1.BadRequestError(`The '${paramName}' search parameter may only be specified once.`);
      }
    }
    function jsonParsedSearchParamIfSpecifiedOnce2(searchParams, fieldName) {
      const value = searchParamIfSpecifiedOnce2(searchParams, fieldName);
      if (value === void 0) {
        return void 0;
      }
      let hopefullyRecord;
      try {
        hopefullyRecord = JSON.parse(value);
      } catch {
        throw new internalErrorClasses_js_1.BadRequestError(`The ${fieldName} search parameter contains invalid JSON.`);
      }
      if (!isStringRecord2(hopefullyRecord)) {
        throw new internalErrorClasses_js_1.BadRequestError(`The ${fieldName} search parameter should contain a JSON-encoded object.`);
      }
      return hopefullyRecord;
    }
    function fieldIfRecord2(o, fieldName) {
      const value = o[fieldName];
      if (isStringRecord2(value)) {
        return value;
      }
      return void 0;
    }
    function isStringRecord2(o) {
      return !!o && typeof o === "object" && !Buffer.isBuffer(o) && !Array.isArray(o);
    }
    function isNonEmptyStringRecord2(o) {
      return isStringRecord2(o) && Object.keys(o).length > 0;
    }
    function ensureQueryIsStringOrMissing2(query) {
      if (!query || typeof query === "string") {
        return;
      }
      if (query.kind === graphql_1.Kind.DOCUMENT) {
        throw new internalErrorClasses_js_1.BadRequestError("GraphQL queries must be strings. It looks like you're sending the internal graphql-js representation of a parsed query in your request instead of a request in the GraphQL query language. You can convert an AST to a string using the `print` function from `graphql`, or use a client like `apollo-client` which converts the internal representation to a string for you.");
      } else {
        throw new internalErrorClasses_js_1.BadRequestError("GraphQL queries must be strings.");
      }
    }
    async function runHttpQuery2({ server, httpRequest, contextValue, schemaDerivedData, internals, sharedResponseHTTPGraphQLHead }) {
      let graphQLRequest;
      switch (httpRequest.method) {
        case "POST": {
          if (!isNonEmptyStringRecord2(httpRequest.body)) {
            throw new internalErrorClasses_js_1.BadRequestError("POST body missing, invalid Content-Type, or JSON object has no keys.");
          }
          ensureQueryIsStringOrMissing2(httpRequest.body.query);
          if (typeof httpRequest.body.variables === "string") {
            throw new internalErrorClasses_js_1.BadRequestError("`variables` in a POST body should be provided as an object, not a recursively JSON-encoded string.");
          }
          if (typeof httpRequest.body.extensions === "string") {
            throw new internalErrorClasses_js_1.BadRequestError("`extensions` in a POST body should be provided as an object, not a recursively JSON-encoded string.");
          }
          if ("extensions" in httpRequest.body && httpRequest.body.extensions !== null && !isStringRecord2(httpRequest.body.extensions)) {
            throw new internalErrorClasses_js_1.BadRequestError("`extensions` in a POST body must be an object if provided.");
          }
          if ("variables" in httpRequest.body && httpRequest.body.variables !== null && !isStringRecord2(httpRequest.body.variables)) {
            throw new internalErrorClasses_js_1.BadRequestError("`variables` in a POST body must be an object if provided.");
          }
          if ("operationName" in httpRequest.body && httpRequest.body.operationName !== null && typeof httpRequest.body.operationName !== "string") {
            throw new internalErrorClasses_js_1.BadRequestError("`operationName` in a POST body must be a string if provided.");
          }
          graphQLRequest = {
            query: fieldIfString2(httpRequest.body, "query"),
            operationName: fieldIfString2(httpRequest.body, "operationName"),
            variables: fieldIfRecord2(httpRequest.body, "variables"),
            extensions: fieldIfRecord2(httpRequest.body, "extensions"),
            http: httpRequest
          };
          break;
        }
        case "GET": {
          const searchParams = new URLSearchParams(httpRequest.search);
          graphQLRequest = {
            query: searchParamIfSpecifiedOnce2(searchParams, "query"),
            operationName: searchParamIfSpecifiedOnce2(searchParams, "operationName"),
            variables: jsonParsedSearchParamIfSpecifiedOnce2(searchParams, "variables"),
            extensions: jsonParsedSearchParamIfSpecifiedOnce2(searchParams, "extensions"),
            http: httpRequest
          };
          break;
        }
        default:
          throw new internalErrorClasses_js_1.BadRequestError("Apollo Server supports only GET/POST requests.", {
            extensions: {
              http: {
                status: 405,
                headers: new HeaderMap_js_1.HeaderMap([["allow", "GET, POST"]])
              }
            }
          });
      }
      const graphQLResponse = await (0, ApolloServer_js_1.internalExecuteOperation)({
        server,
        graphQLRequest,
        internals,
        schemaDerivedData,
        sharedResponseHTTPGraphQLHead
      }, { contextValue });
      if (graphQLResponse.body.kind === "single") {
        if (!graphQLResponse.http.headers.get("content-type")) {
          const contentType = (0, ApolloServer_js_1.chooseContentTypeForSingleResultResponse)(httpRequest);
          if (contentType === null) {
            throw new internalErrorClasses_js_1.BadRequestError(`An 'accept' header was provided for this request which does not accept ${ApolloServer_js_1.MEDIA_TYPES.APPLICATION_JSON} or ${ApolloServer_js_1.MEDIA_TYPES.APPLICATION_GRAPHQL_RESPONSE_JSON}`, { extensions: { http: { status: 406 } } });
          }
          graphQLResponse.http.headers.set("content-type", contentType);
        }
        return {
          ...graphQLResponse.http,
          body: {
            kind: "complete",
            string: await internals.stringifyResult(orderExecutionResultFields2(graphQLResponse.body.singleResult))
          }
        };
      }
      const acceptHeader = httpRequest.headers.get("accept");
      if (!(acceptHeader && new negotiator_1.default({
        headers: { accept: httpRequest.headers.get("accept") }
      }).mediaType([
        ApolloServer_js_1.MEDIA_TYPES.MULTIPART_MIXED_NO_DEFER_SPEC,
        ApolloServer_js_1.MEDIA_TYPES.MULTIPART_MIXED_EXPERIMENTAL
      ]) === ApolloServer_js_1.MEDIA_TYPES.MULTIPART_MIXED_EXPERIMENTAL)) {
        throw new internalErrorClasses_js_1.BadRequestError("Apollo server received an operation that uses incremental delivery (@defer or @stream), but the client does not accept multipart/mixed HTTP responses. To enable incremental delivery support, add the HTTP header 'Accept: multipart/mixed; deferSpec=20220824'.", { extensions: { http: { status: 406 } } });
      }
      graphQLResponse.http.headers.set("content-type", 'multipart/mixed; boundary="-"; deferSpec=20220824');
      return {
        ...graphQLResponse.http,
        body: {
          kind: "chunked",
          asyncIterator: writeMultipartBody2(graphQLResponse.body.initialResult, graphQLResponse.body.subsequentResults)
        }
      };
    }
    exports2.runHttpQuery = runHttpQuery2;
    async function* writeMultipartBody2(initialResult, subsequentResults) {
      yield `\r
---\r
content-type: application/json; charset=utf-8\r
\r
${JSON.stringify(orderInitialIncrementalExecutionResultFields2(initialResult))}\r
---${initialResult.hasNext ? "" : "--"}\r
`;
      for await (const result of subsequentResults) {
        yield `content-type: application/json; charset=utf-8\r
\r
${JSON.stringify(orderSubsequentIncrementalExecutionResultFields2(result))}\r
---${result.hasNext ? "" : "--"}\r
`;
      }
    }
    function orderExecutionResultFields2(result) {
      return {
        errors: result.errors,
        data: result.data,
        extensions: result.extensions
      };
    }
    function orderInitialIncrementalExecutionResultFields2(result) {
      return {
        hasNext: result.hasNext,
        errors: result.errors,
        data: result.data,
        incremental: orderIncrementalResultFields2(result.incremental),
        extensions: result.extensions
      };
    }
    function orderSubsequentIncrementalExecutionResultFields2(result) {
      return {
        hasNext: result.hasNext,
        incremental: orderIncrementalResultFields2(result.incremental),
        extensions: result.extensions
      };
    }
    function orderIncrementalResultFields2(incremental) {
      return incremental?.map((i) => ({
        hasNext: i.hasNext,
        errors: i.errors,
        path: i.path,
        label: i.label,
        data: i.data,
        items: i.items,
        extensions: i.extensions
      }));
    }
    function prettyJSONStringify2(value) {
      return JSON.stringify(value) + "\n";
    }
    exports2.prettyJSONStringify = prettyJSONStringify2;
    function newHTTPGraphQLHead2(status) {
      return {
        status,
        headers: new HeaderMap_js_1.HeaderMap()
      };
    }
    exports2.newHTTPGraphQLHead = newHTTPGraphQLHead2;
    function mergeHTTPGraphQLHead2(target, source) {
      if (source.status) {
        target.status = source.status;
      }
      if (source.headers) {
        for (const [name, value] of source.headers) {
          target.headers.set(name, value);
        }
      }
    }
    exports2.mergeHTTPGraphQLHead = mergeHTTPGraphQLHead2;
  }
});

// node_modules/@apollo/server/dist/cjs/errorNormalize.js
var require_errorNormalize = __commonJS({
  "node_modules/@apollo/server/dist/cjs/errorNormalize.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ensureGraphQLError = exports2.ensureError = exports2.normalizeAndFormatErrors = void 0;
    var graphql_1 = require_graphql2();
    var index_js_1 = require_errors2();
    var runHttpQuery_js_1 = require_runHttpQuery();
    var HeaderMap_js_1 = require_HeaderMap();
    function normalizeAndFormatErrors2(errors, options = {}) {
      const formatError2 = options.formatError ?? ((error) => error);
      const httpFromErrors = (0, runHttpQuery_js_1.newHTTPGraphQLHead)();
      return {
        httpFromErrors,
        formattedErrors: errors.map((error) => {
          try {
            return formatError2(enrichError(error), error);
          } catch (formattingError) {
            if (options.includeStacktraceInErrorResponses) {
              return enrichError(formattingError);
            } else {
              return {
                message: "Internal server error",
                extensions: { code: index_js_1.ApolloServerErrorCode.INTERNAL_SERVER_ERROR }
              };
            }
          }
        })
      };
      function enrichError(maybeError) {
        const graphqlError = ensureGraphQLError2(maybeError);
        const extensions = {
          ...graphqlError.extensions,
          code: graphqlError.extensions.code ?? index_js_1.ApolloServerErrorCode.INTERNAL_SERVER_ERROR
        };
        if (isPartialHTTPGraphQLHead2(extensions.http)) {
          (0, runHttpQuery_js_1.mergeHTTPGraphQLHead)(httpFromErrors, {
            headers: new HeaderMap_js_1.HeaderMap(),
            ...extensions.http
          });
          delete extensions.http;
        }
        if (options.includeStacktraceInErrorResponses) {
          extensions.stacktrace = graphqlError.stack?.split("\n");
        }
        return { ...graphqlError.toJSON(), extensions };
      }
    }
    exports2.normalizeAndFormatErrors = normalizeAndFormatErrors2;
    function ensureError2(maybeError) {
      return maybeError instanceof Error ? maybeError : new graphql_1.GraphQLError("Unexpected error value: " + String(maybeError));
    }
    exports2.ensureError = ensureError2;
    function ensureGraphQLError2(maybeError, messagePrefixIfNotGraphQLError = "") {
      const error = ensureError2(maybeError);
      return error instanceof graphql_1.GraphQLError ? error : new graphql_1.GraphQLError(messagePrefixIfNotGraphQLError + error.message, {
        originalError: error
      });
    }
    exports2.ensureGraphQLError = ensureGraphQLError2;
    function isPartialHTTPGraphQLHead2(x2) {
      return !!x2 && typeof x2 === "object" && (!("status" in x2) || typeof x2.status === "number") && (!("headers" in x2) || x2.headers instanceof Map);
    }
  }
});

// node_modules/@apollo/server/dist/cjs/httpBatching.js
var require_httpBatching = __commonJS({
  "node_modules/@apollo/server/dist/cjs/httpBatching.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runPotentiallyBatchedHttpQuery = void 0;
    var runHttpQuery_js_1 = require_runHttpQuery();
    var internalErrorClasses_js_1 = require_internalErrorClasses();
    async function runBatchedHttpQuery2({ server, batchRequest, body, contextValue, schemaDerivedData, internals }) {
      if (body.length === 0) {
        throw new internalErrorClasses_js_1.BadRequestError("No operations found in request.");
      }
      const sharedResponseHTTPGraphQLHead = (0, runHttpQuery_js_1.newHTTPGraphQLHead)();
      const responseBodies = await Promise.all(body.map(async (bodyPiece) => {
        const singleRequest = {
          ...batchRequest,
          body: bodyPiece
        };
        const response = await (0, runHttpQuery_js_1.runHttpQuery)({
          server,
          httpRequest: singleRequest,
          contextValue,
          schemaDerivedData,
          internals,
          sharedResponseHTTPGraphQLHead
        });
        if (response.body.kind === "chunked") {
          throw Error("Incremental delivery is not implemented for batch requests");
        }
        return response.body.string;
      }));
      return {
        ...sharedResponseHTTPGraphQLHead,
        body: { kind: "complete", string: `[${responseBodies.join(",")}]` }
      };
    }
    async function runPotentiallyBatchedHttpQuery2(server, httpGraphQLRequest, contextValue, schemaDerivedData, internals) {
      if (!(httpGraphQLRequest.method === "POST" && Array.isArray(httpGraphQLRequest.body))) {
        return await (0, runHttpQuery_js_1.runHttpQuery)({
          server,
          httpRequest: httpGraphQLRequest,
          contextValue,
          schemaDerivedData,
          internals,
          sharedResponseHTTPGraphQLHead: null
        });
      }
      if (internals.allowBatchedHttpRequests) {
        return await runBatchedHttpQuery2({
          server,
          batchRequest: httpGraphQLRequest,
          body: httpGraphQLRequest.body,
          contextValue,
          schemaDerivedData,
          internals
        });
      }
      throw new internalErrorClasses_js_1.BadRequestError("Operation batching disabled.");
    }
    exports2.runPotentiallyBatchedHttpQuery = runPotentiallyBatchedHttpQuery2;
  }
});

// node_modules/@apollo/server/dist/cjs/internalPlugin.js
var require_internalPlugin = __commonJS({
  "node_modules/@apollo/server/dist/cjs/internalPlugin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pluginIsInternal = exports2.internalPlugin = void 0;
    function internalPlugin2(p) {
      return p;
    }
    exports2.internalPlugin = internalPlugin2;
    function pluginIsInternal2(plugin) {
      return "__internal_plugin_id__" in plugin;
    }
    exports2.pluginIsInternal = pluginIsInternal2;
  }
});

// node_modules/@apollo/server/dist/cjs/preventCsrf.js
var require_preventCsrf = __commonJS({
  "node_modules/@apollo/server/dist/cjs/preventCsrf.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.preventCsrf = exports2.recommendedCsrfPreventionRequestHeaders = void 0;
    var whatwg_mimetype_1 = __importDefault2(require_mime_type());
    var internalErrorClasses_js_1 = require_internalErrorClasses();
    exports2.recommendedCsrfPreventionRequestHeaders = [
      "x-apollo-operation-name",
      "apollo-require-preflight"
    ];
    var NON_PREFLIGHTED_CONTENT_TYPES2 = [
      "application/x-www-form-urlencoded",
      "multipart/form-data",
      "text/plain"
    ];
    function preventCsrf2(headers, csrfPreventionRequestHeaders) {
      const contentType = headers.get("content-type");
      if (contentType !== void 0) {
        const contentTypeParsed = whatwg_mimetype_1.default.parse(contentType);
        if (contentTypeParsed === null) {
          return;
        }
        if (!NON_PREFLIGHTED_CONTENT_TYPES2.includes(contentTypeParsed.essence)) {
          return;
        }
      }
      if (csrfPreventionRequestHeaders.some((header) => {
        const value = headers.get(header);
        return value !== void 0 && value.length > 0;
      })) {
        return;
      }
      throw new internalErrorClasses_js_1.BadRequestError(`This operation has been blocked as a potential Cross-Site Request Forgery (CSRF). Please either specify a 'content-type' header (with a type that is not one of ${NON_PREFLIGHTED_CONTENT_TYPES2.join(", ")}) or provide a non-empty value for one of the following headers: ${csrfPreventionRequestHeaders.join(", ")}
`);
    }
    exports2.preventCsrf = preventCsrf2;
  }
});

// node_modules/@apollo/server/dist/cjs/utils/schemaInstrumentation.js
var require_schemaInstrumentation = __commonJS({
  "node_modules/@apollo/server/dist/cjs/utils/schemaInstrumentation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.whenResultIsFinished = exports2.pluginsEnabledForSchemaResolvers = exports2.enablePluginsForSchemaResolvers = exports2.symbolUserFieldResolver = exports2.symbolExecutionDispatcherWillResolveField = void 0;
    var graphql_1 = require_graphql2();
    exports2.symbolExecutionDispatcherWillResolveField = Symbol("apolloServerExecutionDispatcherWillResolveField");
    exports2.symbolUserFieldResolver = Symbol("apolloServerUserFieldResolver");
    var symbolPluginsEnabled2 = Symbol("apolloServerPluginsEnabled");
    function enablePluginsForSchemaResolvers2(schema) {
      if (pluginsEnabledForSchemaResolvers2(schema)) {
        return schema;
      }
      Object.defineProperty(schema, symbolPluginsEnabled2, {
        value: true
      });
      const typeMap = schema.getTypeMap();
      Object.values(typeMap).forEach((type) => {
        if (!(0, graphql_1.getNamedType)(type).name.startsWith("__") && type instanceof graphql_1.GraphQLObjectType) {
          const fields = type.getFields();
          Object.values(fields).forEach((field) => {
            wrapField2(field);
          });
        }
      });
      return schema;
    }
    exports2.enablePluginsForSchemaResolvers = enablePluginsForSchemaResolvers2;
    function pluginsEnabledForSchemaResolvers2(schema) {
      return !!schema[symbolPluginsEnabled2];
    }
    exports2.pluginsEnabledForSchemaResolvers = pluginsEnabledForSchemaResolvers2;
    function wrapField2(field) {
      const originalFieldResolve = field.resolve;
      field.resolve = (source, args, contextValue, info) => {
        const willResolveField = contextValue?.[exports2.symbolExecutionDispatcherWillResolveField];
        const userFieldResolver = contextValue?.[exports2.symbolUserFieldResolver];
        const didResolveField = typeof willResolveField === "function" && willResolveField({ source, args, contextValue, info });
        const fieldResolver = originalFieldResolve || userFieldResolver || graphql_1.defaultFieldResolver;
        try {
          const result = fieldResolver(source, args, contextValue, info);
          if (typeof didResolveField === "function") {
            whenResultIsFinished2(result, didResolveField);
          }
          return result;
        } catch (error) {
          if (typeof didResolveField === "function") {
            didResolveField(error);
          }
          throw error;
        }
      };
    }
    function isPromise2(x2) {
      return x2 && typeof x2.then === "function";
    }
    function whenResultIsFinished2(result, callback) {
      if (isPromise2(result)) {
        result.then((r) => whenResultIsFinished2(r, callback), (err) => callback(err));
      } else if (Array.isArray(result)) {
        if (result.some(isPromise2)) {
          Promise.all(result).then((r) => callback(null, r), (err) => callback(err));
        } else {
          callback(null, result);
        }
      } else {
        callback(null, result);
      }
    }
    exports2.whenResultIsFinished = whenResultIsFinished2;
  }
});

// node_modules/@apollo/server/dist/cjs/utils/isDefined.js
var require_isDefined = __commonJS({
  "node_modules/@apollo/server/dist/cjs/utils/isDefined.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isDefined = void 0;
    function isDefined2(t) {
      return t != null;
    }
    exports2.isDefined = isDefined2;
  }
});

// node_modules/@apollo/server/dist/cjs/utils/invokeHooks.js
var require_invokeHooks = __commonJS({
  "node_modules/@apollo/server/dist/cjs/utils/invokeHooks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.invokeHooksUntilDefinedAndNonNull = exports2.invokeSyncDidStartHook = exports2.invokeDidStartHook = void 0;
    var isDefined_js_1 = require_isDefined();
    async function invokeDidStartHook2(targets, hook) {
      const didEndHooks = (await Promise.all(targets.map((target) => hook(target)))).filter(isDefined_js_1.isDefined);
      didEndHooks.reverse();
      return async (...args) => {
        for (const didEndHook of didEndHooks) {
          didEndHook(...args);
        }
      };
    }
    exports2.invokeDidStartHook = invokeDidStartHook2;
    function invokeSyncDidStartHook2(targets, hook) {
      const didEndHooks = targets.map((target) => hook(target)).filter(isDefined_js_1.isDefined);
      didEndHooks.reverse();
      return (...args) => {
        for (const didEndHook of didEndHooks) {
          didEndHook(...args);
        }
      };
    }
    exports2.invokeSyncDidStartHook = invokeSyncDidStartHook2;
    async function invokeHooksUntilDefinedAndNonNull2(targets, hook) {
      for (const target of targets) {
        const value = await hook(target);
        if (value != null) {
          return value;
        }
      }
      return null;
    }
    exports2.invokeHooksUntilDefinedAndNonNull = invokeHooksUntilDefinedAndNonNull2;
  }
});

// node_modules/@apollo/server/dist/cjs/utils/makeGatewayGraphQLRequestContext.js
var require_makeGatewayGraphQLRequestContext = __commonJS({
  "node_modules/@apollo/server/dist/cjs/utils/makeGatewayGraphQLRequestContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeGatewayGraphQLRequestContext = void 0;
    function makeGatewayGraphQLRequestContext2(as4RequestContext, server, internals) {
      const request = {};
      if ("query" in as4RequestContext.request) {
        request.query = as4RequestContext.request.query;
      }
      if ("operationName" in as4RequestContext.request) {
        request.operationName = as4RequestContext.request.operationName;
      }
      if ("variables" in as4RequestContext.request) {
        request.variables = as4RequestContext.request.variables;
      }
      if ("extensions" in as4RequestContext.request) {
        request.extensions = as4RequestContext.request.extensions;
      }
      if (as4RequestContext.request.http) {
        const as4http = as4RequestContext.request.http;
        const needQuestion = as4http.search !== "" && !as4http.search.startsWith("?");
        request.http = {
          method: as4http.method,
          url: `https://unknown-url.invalid/${needQuestion ? "?" : ""}${as4http.search}`,
          headers: new FetcherHeadersForHeaderMap2(as4http.headers)
        };
      }
      const response = {
        http: {
          headers: new FetcherHeadersForHeaderMap2(as4RequestContext.response.http.headers),
          get status() {
            return as4RequestContext.response.http.status;
          },
          set status(newStatus) {
            as4RequestContext.response.http.status = newStatus;
          }
        }
      };
      return {
        request,
        response,
        logger: server.logger,
        schema: as4RequestContext.schema,
        schemaHash: "schemaHash no longer exists in Apollo Server 4",
        context: as4RequestContext.contextValue,
        cache: server.cache,
        queryHash: as4RequestContext.queryHash,
        document: as4RequestContext.document,
        source: as4RequestContext.source,
        operationName: as4RequestContext.operationName,
        operation: as4RequestContext.operation,
        errors: as4RequestContext.errors,
        metrics: as4RequestContext.metrics,
        debug: internals.includeStacktraceInErrorResponses,
        overallCachePolicy: as4RequestContext.overallCachePolicy,
        requestIsBatched: as4RequestContext.requestIsBatched
      };
    }
    exports2.makeGatewayGraphQLRequestContext = makeGatewayGraphQLRequestContext2;
    var FetcherHeadersForHeaderMap2 = class {
      constructor(map) {
        this.map = map;
      }
      append(name, value) {
        if (this.map.has(name)) {
          this.map.set(name, this.map.get(name) + ", " + value);
        } else {
          this.map.set(name, value);
        }
      }
      delete(name) {
        this.map.delete(name);
      }
      get(name) {
        return this.map.get(name) ?? null;
      }
      has(name) {
        return this.map.has(name);
      }
      set(name, value) {
        this.map.set(name, value);
      }
      entries() {
        return this.map.entries();
      }
      keys() {
        return this.map.keys();
      }
      values() {
        return this.map.values();
      }
      [Symbol.iterator]() {
        return this.map.entries();
      }
    };
  }
});

// node_modules/@apollo/server/dist/cjs/incrementalDeliveryPolyfill.js
var require_incrementalDeliveryPolyfill = __commonJS({
  "node_modules/@apollo/server/dist/cjs/incrementalDeliveryPolyfill.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m2[k2];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule) return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k2 in mod2) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k2)) __createBinding2(result, mod2, k2);
      }
      __setModuleDefault2(result, mod2);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.executeIncrementally = void 0;
    var graphql_1 = require_graphql2();
    var graphqlExperimentalExecuteIncrementally2 = void 0;
    async function tryToLoadGraphQL172() {
      if (graphqlExperimentalExecuteIncrementally2 !== void 0) {
        return;
      }
      const graphql = await Promise.resolve().then(() => __importStar2(require_graphql2()));
      if ("experimentalExecuteIncrementally" in graphql) {
        graphqlExperimentalExecuteIncrementally2 = graphql.experimentalExecuteIncrementally;
      } else {
        graphqlExperimentalExecuteIncrementally2 = null;
      }
    }
    async function executeIncrementally2(args) {
      await tryToLoadGraphQL172();
      if (graphqlExperimentalExecuteIncrementally2) {
        return graphqlExperimentalExecuteIncrementally2(args);
      }
      return (0, graphql_1.execute)(args);
    }
    exports2.executeIncrementally = executeIncrementally2;
  }
});

// node_modules/@apollo/server/dist/cjs/requestPipeline.js
var require_requestPipeline = __commonJS({
  "node_modules/@apollo/server/dist/cjs/requestPipeline.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.processGraphQLRequest = exports2.APQ_CACHE_PREFIX = void 0;
    var utils_createhash_1 = require_dist3();
    var graphql_1 = require_graphql2();
    var schemaInstrumentation_js_1 = require_schemaInstrumentation();
    var internalErrorClasses_js_1 = require_internalErrorClasses();
    var errorNormalize_js_1 = require_errorNormalize();
    var invokeHooks_js_1 = require_invokeHooks();
    var makeGatewayGraphQLRequestContext_js_1 = require_makeGatewayGraphQLRequestContext();
    var runHttpQuery_js_1 = require_runHttpQuery();
    var isDefined_js_1 = require_isDefined();
    var incrementalDeliveryPolyfill_js_1 = require_incrementalDeliveryPolyfill();
    var HeaderMap_js_1 = require_HeaderMap();
    exports2.APQ_CACHE_PREFIX = "apq:";
    function computeQueryHash2(query) {
      return (0, utils_createhash_1.createHash)("sha256").update(query).digest("hex");
    }
    function isBadUserInputGraphQLError2(error) {
      return error.nodes?.length === 1 && error.nodes[0].kind === graphql_1.Kind.VARIABLE_DEFINITION && (error.message.startsWith(`Variable "$${error.nodes[0].variable.name.value}" got invalid value `) || error.message.startsWith(`Variable "$${error.nodes[0].variable.name.value}" of required type `) || error.message.startsWith(`Variable "$${error.nodes[0].variable.name.value}" of non-null type `));
    }
    async function processGraphQLRequest2(schemaDerivedData, server, internals, requestContext) {
      const requestListeners = (await Promise.all(internals.plugins.map((p) => p.requestDidStart?.(requestContext)))).filter(isDefined_js_1.isDefined);
      const request = requestContext.request;
      let { query, extensions } = request;
      let queryHash;
      requestContext.metrics.persistedQueryHit = false;
      requestContext.metrics.persistedQueryRegister = false;
      if (extensions?.persistedQuery) {
        if (!internals.persistedQueries) {
          return await sendErrorResponse([new internalErrorClasses_js_1.PersistedQueryNotSupportedError()]);
        } else if (extensions.persistedQuery.version !== 1) {
          return await sendErrorResponse([
            new graphql_1.GraphQLError("Unsupported persisted query version", {
              extensions: { http: (0, runHttpQuery_js_1.newHTTPGraphQLHead)(400) }
            })
          ]);
        }
        queryHash = extensions.persistedQuery.sha256Hash;
        if (query === void 0) {
          query = await internals.persistedQueries.cache.get(queryHash);
          if (query) {
            requestContext.metrics.persistedQueryHit = true;
          } else {
            return await sendErrorResponse([new internalErrorClasses_js_1.PersistedQueryNotFoundError()]);
          }
        } else {
          const computedQueryHash = computeQueryHash2(query);
          if (queryHash !== computedQueryHash) {
            return await sendErrorResponse([
              new graphql_1.GraphQLError("provided sha does not match query", {
                extensions: { http: (0, runHttpQuery_js_1.newHTTPGraphQLHead)(400) }
              })
            ]);
          }
          requestContext.metrics.persistedQueryRegister = true;
        }
      } else if (query) {
        queryHash = computeQueryHash2(query);
      } else {
        return await sendErrorResponse([
          new internalErrorClasses_js_1.BadRequestError("GraphQL operations must contain a non-empty `query` or a `persistedQuery` extension.")
        ]);
      }
      requestContext.queryHash = queryHash;
      requestContext.source = query;
      await Promise.all(requestListeners.map((l) => l.didResolveSource?.(requestContext)));
      if (schemaDerivedData.documentStore) {
        try {
          requestContext.document = await schemaDerivedData.documentStore.get(schemaDerivedData.documentStoreKeyPrefix + queryHash);
        } catch (err) {
          server.logger.warn("An error occurred while attempting to read from the documentStore. " + (0, errorNormalize_js_1.ensureError)(err).message);
        }
      }
      if (!requestContext.document) {
        const parsingDidEnd = await (0, invokeHooks_js_1.invokeDidStartHook)(requestListeners, async (l) => l.parsingDidStart?.(requestContext));
        try {
          requestContext.document = (0, graphql_1.parse)(query, internals.parseOptions);
        } catch (syntaxMaybeError) {
          const error = (0, errorNormalize_js_1.ensureError)(syntaxMaybeError);
          await parsingDidEnd(error);
          return await sendErrorResponse([
            new internalErrorClasses_js_1.SyntaxError((0, errorNormalize_js_1.ensureGraphQLError)(error))
          ]);
        }
        await parsingDidEnd();
        if (internals.dangerouslyDisableValidation !== true) {
          const validationDidEnd = await (0, invokeHooks_js_1.invokeDidStartHook)(requestListeners, async (l) => l.validationDidStart?.(requestContext));
          const validationErrors = (0, graphql_1.validate)(schemaDerivedData.schema, requestContext.document, [...graphql_1.specifiedRules, ...internals.validationRules]);
          if (validationErrors.length === 0) {
            await validationDidEnd();
          } else {
            await validationDidEnd(validationErrors);
            return await sendErrorResponse(validationErrors.map((error) => new internalErrorClasses_js_1.ValidationError(error)));
          }
        }
        if (schemaDerivedData.documentStore) {
          Promise.resolve(schemaDerivedData.documentStore.set(schemaDerivedData.documentStoreKeyPrefix + queryHash, requestContext.document)).catch((err) => server.logger.warn("Could not store validated document. " + err?.message || err));
        }
      }
      const operation = (0, graphql_1.getOperationAST)(requestContext.document, request.operationName);
      requestContext.operation = operation || void 0;
      requestContext.operationName = operation?.name?.value || null;
      if (request.http?.method === "GET" && operation?.operation && operation.operation !== "query") {
        return await sendErrorResponse([
          new internalErrorClasses_js_1.BadRequestError(`GET requests only support query operations, not ${operation.operation} operations`, {
            extensions: {
              http: { status: 405, headers: new HeaderMap_js_1.HeaderMap([["allow", "POST"]]) }
            }
          })
        ]);
      }
      try {
        await Promise.all(requestListeners.map((l) => l.didResolveOperation?.(requestContext)));
      } catch (err) {
        return await sendErrorResponse([(0, errorNormalize_js_1.ensureGraphQLError)(err)]);
      }
      if (requestContext.metrics.persistedQueryRegister && internals.persistedQueries) {
        const ttl = internals.persistedQueries?.ttl;
        Promise.resolve(internals.persistedQueries.cache.set(queryHash, query, ttl !== void 0 ? { ttl: internals.persistedQueries?.ttl } : void 0)).catch(server.logger.warn);
      }
      const responseFromPlugin = await (0, invokeHooks_js_1.invokeHooksUntilDefinedAndNonNull)(requestListeners, async (l) => await l.responseForOperation?.(requestContext));
      if (responseFromPlugin !== null) {
        requestContext.response.body = responseFromPlugin.body;
        (0, runHttpQuery_js_1.mergeHTTPGraphQLHead)(requestContext.response.http, responseFromPlugin.http);
      } else {
        const executionListeners = (await Promise.all(requestListeners.map((l) => l.executionDidStart?.(requestContext)))).filter(isDefined_js_1.isDefined);
        executionListeners.reverse();
        if (executionListeners.some((l) => l.willResolveField)) {
          const invokeWillResolveField = (...args) => (0, invokeHooks_js_1.invokeSyncDidStartHook)(executionListeners, (l) => l.willResolveField?.(...args));
          Object.defineProperty(requestContext.contextValue, schemaInstrumentation_js_1.symbolExecutionDispatcherWillResolveField, { value: invokeWillResolveField });
          if (internals.fieldResolver) {
            Object.defineProperty(requestContext.contextValue, schemaInstrumentation_js_1.symbolUserFieldResolver, {
              value: internals.fieldResolver
            });
          }
          (0, schemaInstrumentation_js_1.enablePluginsForSchemaResolvers)(schemaDerivedData.schema);
        }
        try {
          const fullResult = await execute2(requestContext);
          const result = "singleResult" in fullResult ? fullResult.singleResult : fullResult.initialResult;
          if (!requestContext.operation) {
            if (!result.errors?.length) {
              throw new Error("Unexpected error: Apollo Server did not resolve an operation but execute did not return errors");
            }
            throw new internalErrorClasses_js_1.OperationResolutionError(result.errors[0]);
          }
          const resultErrors = result.errors?.map((e) => {
            if (isBadUserInputGraphQLError2(e) && e.extensions?.code == null) {
              return new internalErrorClasses_js_1.UserInputError(e);
            }
            return e;
          });
          if (resultErrors) {
            await didEncounterErrors(resultErrors);
          }
          const { formattedErrors, httpFromErrors } = resultErrors ? formatErrors(resultErrors) : { formattedErrors: void 0, httpFromErrors: (0, runHttpQuery_js_1.newHTTPGraphQLHead)() };
          if (internals.status400ForVariableCoercionErrors && resultErrors?.length && result.data === void 0 && !httpFromErrors.status) {
            httpFromErrors.status = 400;
          }
          (0, runHttpQuery_js_1.mergeHTTPGraphQLHead)(requestContext.response.http, httpFromErrors);
          if ("singleResult" in fullResult) {
            requestContext.response.body = {
              kind: "single",
              singleResult: {
                ...result,
                errors: formattedErrors
              }
            };
          } else {
            requestContext.response.body = {
              kind: "incremental",
              initialResult: {
                ...fullResult.initialResult,
                errors: formattedErrors
              },
              subsequentResults: fullResult.subsequentResults
            };
          }
        } catch (executionMaybeError) {
          const executionError = (0, errorNormalize_js_1.ensureError)(executionMaybeError);
          await Promise.all(executionListeners.map((l) => l.executionDidEnd?.(executionError)));
          return await sendErrorResponse([(0, errorNormalize_js_1.ensureGraphQLError)(executionError)]);
        }
        await Promise.all(executionListeners.map((l) => l.executionDidEnd?.()));
      }
      await invokeWillSendResponse();
      if (!requestContext.response.body) {
        throw Error("got to end of processGraphQLRequest without setting body?");
      }
      return requestContext.response;
      async function execute2(requestContext2) {
        const { request: request2, document } = requestContext2;
        if (internals.__testing_incrementalExecutionResults) {
          return internals.__testing_incrementalExecutionResults;
        } else if (internals.gatewayExecutor) {
          const result = await internals.gatewayExecutor((0, makeGatewayGraphQLRequestContext_js_1.makeGatewayGraphQLRequestContext)(requestContext2, server, internals));
          return { singleResult: result };
        } else {
          const resultOrResults = await (0, incrementalDeliveryPolyfill_js_1.executeIncrementally)({
            schema: schemaDerivedData.schema,
            document,
            rootValue: typeof internals.rootValue === "function" ? internals.rootValue(document) : internals.rootValue,
            contextValue: requestContext2.contextValue,
            variableValues: request2.variables,
            operationName: request2.operationName,
            fieldResolver: internals.fieldResolver
          });
          if ("initialResult" in resultOrResults) {
            return {
              initialResult: resultOrResults.initialResult,
              subsequentResults: formatErrorsInSubsequentResults(resultOrResults.subsequentResults)
            };
          } else {
            return { singleResult: resultOrResults };
          }
        }
      }
      async function* formatErrorsInSubsequentResults(results) {
        for await (const result of results) {
          const payload = result.incremental ? {
            ...result,
            incremental: await seriesAsyncMap2(result.incremental, async (incrementalResult) => {
              const { errors } = incrementalResult;
              if (errors) {
                await Promise.all(requestListeners.map((l) => l.didEncounterSubsequentErrors?.(requestContext, errors)));
                return {
                  ...incrementalResult,
                  errors: formatErrors(errors).formattedErrors
                };
              }
              return incrementalResult;
            })
          } : result;
          await Promise.all(requestListeners.map((l) => l.willSendSubsequentPayload?.(requestContext, payload)));
          yield payload;
        }
      }
      async function invokeWillSendResponse() {
        await Promise.all(requestListeners.map((l) => l.willSendResponse?.(requestContext)));
      }
      async function didEncounterErrors(errors) {
        requestContext.errors = errors;
        return await Promise.all(requestListeners.map((l) => l.didEncounterErrors?.(requestContext)));
      }
      async function sendErrorResponse(errors) {
        await didEncounterErrors(errors);
        const { formattedErrors, httpFromErrors } = formatErrors(errors);
        requestContext.response.body = {
          kind: "single",
          singleResult: {
            errors: formattedErrors
          }
        };
        (0, runHttpQuery_js_1.mergeHTTPGraphQLHead)(requestContext.response.http, httpFromErrors);
        if (!requestContext.response.http.status) {
          requestContext.response.http.status = 500;
        }
        await invokeWillSendResponse();
        return requestContext.response;
      }
      function formatErrors(errors) {
        return (0, errorNormalize_js_1.normalizeAndFormatErrors)(errors, {
          formatError: internals.formatError,
          includeStacktraceInErrorResponses: internals.includeStacktraceInErrorResponses
        });
      }
    }
    exports2.processGraphQLRequest = processGraphQLRequest2;
    async function seriesAsyncMap2(ts2, fn2) {
      const us2 = [];
      for (const t of ts2) {
        const u = await fn2(t);
        us2.push(u);
      }
      return us2;
    }
  }
});

// node_modules/@apollo/server/dist/cjs/utils/UnreachableCaseError.js
var require_UnreachableCaseError = __commonJS({
  "node_modules/@apollo/server/dist/cjs/utils/UnreachableCaseError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnreachableCaseError = void 0;
    var UnreachableCaseError2 = class extends Error {
      constructor(val) {
        super(`Unreachable case: ${val}`);
      }
    };
    exports2.UnreachableCaseError = UnreachableCaseError2;
  }
});

// node_modules/@apollo/server/dist/cjs/utils/computeCoreSchemaHash.js
var require_computeCoreSchemaHash = __commonJS({
  "node_modules/@apollo/server/dist/cjs/utils/computeCoreSchemaHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.computeCoreSchemaHash = void 0;
    var utils_createhash_1 = require_dist3();
    function computeCoreSchemaHash2(schema) {
      return (0, utils_createhash_1.createHash)("sha256").update(schema).digest("hex");
    }
    exports2.computeCoreSchemaHash = computeCoreSchemaHash2;
  }
});

// node_modules/@apollo/server/dist/cjs/utils/schemaManager.js
var require_schemaManager = __commonJS({
  "node_modules/@apollo/server/dist/cjs/utils/schemaManager.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SchemaManager = void 0;
    var SchemaManager2 = class {
      constructor(options) {
        this.onSchemaLoadOrUpdateListeners = /* @__PURE__ */ new Set();
        this.isStopped = false;
        this.logger = options.logger;
        this.schemaDerivedDataProvider = options.schemaDerivedDataProvider;
        if ("gateway" in options) {
          this.modeSpecificState = {
            mode: "gateway",
            gateway: options.gateway,
            apolloConfig: options.apolloConfig
          };
        } else {
          this.modeSpecificState = {
            mode: "schema",
            apiSchema: options.apiSchema,
            schemaDerivedData: options.schemaDerivedDataProvider(options.apiSchema)
          };
        }
      }
      async start() {
        if (this.modeSpecificState.mode === "gateway") {
          const gateway = this.modeSpecificState.gateway;
          if (gateway.onSchemaLoadOrUpdate) {
            this.modeSpecificState.unsubscribeFromGateway = gateway.onSchemaLoadOrUpdate((schemaContext) => {
              this.processSchemaLoadOrUpdateEvent(schemaContext);
            });
          } else {
            throw new Error("Unexpectedly couldn't find onSchemaLoadOrUpdate on gateway");
          }
          const config2 = await this.modeSpecificState.gateway.load({
            apollo: this.modeSpecificState.apolloConfig
          });
          return config2.executor;
        } else {
          this.processSchemaLoadOrUpdateEvent({
            apiSchema: this.modeSpecificState.apiSchema
          }, this.modeSpecificState.schemaDerivedData);
          return null;
        }
      }
      onSchemaLoadOrUpdate(callback) {
        if (!this.schemaContext) {
          throw new Error("You must call start() before onSchemaLoadOrUpdate()");
        }
        if (!this.isStopped) {
          try {
            callback(this.schemaContext);
          } catch (e) {
            throw new Error(`An error was thrown from an 'onSchemaLoadOrUpdate' listener: ${e.message}`);
          }
        }
        this.onSchemaLoadOrUpdateListeners.add(callback);
        return () => {
          this.onSchemaLoadOrUpdateListeners.delete(callback);
        };
      }
      getSchemaDerivedData() {
        if (!this.schemaDerivedData) {
          throw new Error("You must call start() before getSchemaDerivedData()");
        }
        return this.schemaDerivedData;
      }
      async stop() {
        this.isStopped = true;
        if (this.modeSpecificState.mode === "gateway") {
          this.modeSpecificState.unsubscribeFromGateway?.();
          await this.modeSpecificState.gateway.stop?.();
        }
      }
      processSchemaLoadOrUpdateEvent(schemaContext, schemaDerivedData) {
        if (!this.isStopped) {
          this.schemaDerivedData = schemaDerivedData ?? this.schemaDerivedDataProvider(schemaContext.apiSchema);
          this.schemaContext = schemaContext;
          this.onSchemaLoadOrUpdateListeners.forEach((listener) => {
            try {
              listener(schemaContext);
            } catch (e) {
              this.logger.error("An error was thrown from an 'onSchemaLoadOrUpdate' listener");
              this.logger.error(e);
            }
          });
        }
      }
    };
    exports2.SchemaManager = SchemaManager2;
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/cacheControl/index.js
var require_cacheControl = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/cacheControl/index.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApolloServerPluginCacheControl = void 0;
    var graphql_1 = require_graphql2();
    var cachePolicy_js_1 = require_cachePolicy();
    var internalPlugin_js_1 = require_internalPlugin();
    var lru_cache_1 = __importDefault2(require_lru_cache());
    function ApolloServerPluginCacheControl2(options = /* @__PURE__ */ Object.create(null)) {
      let typeAnnotationCache;
      let fieldAnnotationCache;
      return (0, internalPlugin_js_1.internalPlugin)({
        __internal_plugin_id__: "CacheControl",
        __is_disabled_plugin__: false,
        async serverWillStart({ schema }) {
          typeAnnotationCache = new lru_cache_1.default({
            max: Object.values(schema.getTypeMap()).filter(graphql_1.isCompositeType).length
          });
          fieldAnnotationCache = new lru_cache_1.default({
            max: Object.values(schema.getTypeMap()).filter(graphql_1.isObjectType).flatMap((t) => Object.values(t.getFields())).length + Object.values(schema.getTypeMap()).filter(graphql_1.isInterfaceType).flatMap((t) => Object.values(t.getFields())).length
          });
          return void 0;
        },
        async requestDidStart(requestContext) {
          function memoizedCacheAnnotationFromType(t) {
            const existing = typeAnnotationCache.get(t);
            if (existing) {
              return existing;
            }
            const annotation = cacheAnnotationFromType2(t);
            typeAnnotationCache.set(t, annotation);
            return annotation;
          }
          function memoizedCacheAnnotationFromField(field) {
            const existing = fieldAnnotationCache.get(field);
            if (existing) {
              return existing;
            }
            const annotation = cacheAnnotationFromField2(field);
            fieldAnnotationCache.set(field, annotation);
            return annotation;
          }
          const defaultMaxAge = options.defaultMaxAge ?? 0;
          const calculateHttpHeaders = options.calculateHttpHeaders ?? true;
          const { __testing__cacheHints } = options;
          return {
            async executionDidStart() {
              if (isRestricted2(requestContext.overallCachePolicy)) {
                const fakeFieldPolicy = (0, cachePolicy_js_1.newCachePolicy)();
                return {
                  willResolveField({ info }) {
                    info.cacheControl = {
                      setCacheHint: (dynamicHint) => {
                        fakeFieldPolicy.replace(dynamicHint);
                      },
                      cacheHint: fakeFieldPolicy,
                      cacheHintFromType: memoizedCacheAnnotationFromType
                    };
                  }
                };
              }
              return {
                willResolveField({ info }) {
                  const fieldPolicy = (0, cachePolicy_js_1.newCachePolicy)();
                  let inheritMaxAge = false;
                  const targetType = (0, graphql_1.getNamedType)(info.returnType);
                  if ((0, graphql_1.isCompositeType)(targetType)) {
                    const typeAnnotation = memoizedCacheAnnotationFromType(targetType);
                    fieldPolicy.replace(typeAnnotation);
                    inheritMaxAge = !!typeAnnotation.inheritMaxAge;
                  }
                  const fieldAnnotation = memoizedCacheAnnotationFromField(info.parentType.getFields()[info.fieldName]);
                  if (fieldAnnotation.inheritMaxAge && fieldPolicy.maxAge === void 0) {
                    inheritMaxAge = true;
                    if (fieldAnnotation.scope) {
                      fieldPolicy.replace({ scope: fieldAnnotation.scope });
                    }
                  } else {
                    fieldPolicy.replace(fieldAnnotation);
                  }
                  info.cacheControl = {
                    setCacheHint: (dynamicHint) => {
                      fieldPolicy.replace(dynamicHint);
                    },
                    cacheHint: fieldPolicy,
                    cacheHintFromType: memoizedCacheAnnotationFromType
                  };
                  return () => {
                    if (fieldPolicy.maxAge === void 0 && ((0, graphql_1.isCompositeType)(targetType) && !inheritMaxAge || !info.path.prev)) {
                      fieldPolicy.restrict({ maxAge: defaultMaxAge });
                    }
                    if (__testing__cacheHints && isRestricted2(fieldPolicy)) {
                      const path2 = (0, graphql_1.responsePathAsArray)(info.path).join(".");
                      if (__testing__cacheHints.has(path2)) {
                        throw Error("shouldn't happen: addHint should only be called once per path");
                      }
                      __testing__cacheHints.set(path2, {
                        maxAge: fieldPolicy.maxAge,
                        scope: fieldPolicy.scope
                      });
                    }
                    requestContext.overallCachePolicy.restrict(fieldPolicy);
                  };
                }
              };
            },
            async willSendResponse(requestContext2) {
              if (!calculateHttpHeaders) {
                return;
              }
              const { response, overallCachePolicy } = requestContext2;
              const existingCacheControlHeader = parseExistingCacheControlHeader2(response.http.headers.get("cache-control"));
              if (existingCacheControlHeader.kind === "unparsable") {
                return;
              }
              const cachePolicy = (0, cachePolicy_js_1.newCachePolicy)();
              cachePolicy.replace(overallCachePolicy);
              if (existingCacheControlHeader.kind === "parsable-and-cacheable") {
                cachePolicy.restrict(existingCacheControlHeader.hint);
              }
              const policyIfCacheable = cachePolicy.policyIfCacheable();
              if (policyIfCacheable && existingCacheControlHeader.kind !== "uncacheable" && response.body.kind === "single" && !response.body.singleResult.errors) {
                response.http.headers.set("cache-control", `max-age=${policyIfCacheable.maxAge}, ${policyIfCacheable.scope.toLowerCase()}`);
              } else if (calculateHttpHeaders !== "if-cacheable") {
                response.http.headers.set("cache-control", CACHE_CONTROL_HEADER_UNCACHEABLE2);
              }
            }
          };
        }
      });
    }
    exports2.ApolloServerPluginCacheControl = ApolloServerPluginCacheControl2;
    var CACHE_CONTROL_HEADER_CACHEABLE_REGEXP2 = /^max-age=(\d+), (public|private)$/;
    var CACHE_CONTROL_HEADER_UNCACHEABLE2 = "no-store";
    function parseExistingCacheControlHeader2(header) {
      if (!header) {
        return { kind: "no-header" };
      }
      if (header === CACHE_CONTROL_HEADER_UNCACHEABLE2) {
        return { kind: "uncacheable" };
      }
      const match = CACHE_CONTROL_HEADER_CACHEABLE_REGEXP2.exec(header);
      if (!match) {
        return { kind: "unparsable" };
      }
      return {
        kind: "parsable-and-cacheable",
        hint: {
          maxAge: +match[1],
          scope: match[2] === "public" ? "PUBLIC" : "PRIVATE"
        }
      };
    }
    function cacheAnnotationFromDirectives2(directives) {
      if (!directives)
        return void 0;
      const cacheControlDirective = directives.find((directive) => directive.name.value === "cacheControl");
      if (!cacheControlDirective)
        return void 0;
      if (!cacheControlDirective.arguments)
        return void 0;
      const maxAgeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === "maxAge");
      const scopeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === "scope");
      const inheritMaxAgeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === "inheritMaxAge");
      const scopeString = scopeArgument?.value?.kind === "EnumValue" ? scopeArgument.value.value : void 0;
      const scope = scopeString === "PUBLIC" || scopeString === "PRIVATE" ? scopeString : void 0;
      if (inheritMaxAgeArgument?.value?.kind === "BooleanValue" && inheritMaxAgeArgument.value.value) {
        return { inheritMaxAge: true, scope };
      }
      return {
        maxAge: maxAgeArgument?.value?.kind === "IntValue" ? parseInt(maxAgeArgument.value.value) : void 0,
        scope
      };
    }
    function cacheAnnotationFromType2(t) {
      if (t.astNode) {
        const hint = cacheAnnotationFromDirectives2(t.astNode.directives);
        if (hint) {
          return hint;
        }
      }
      if (t.extensionASTNodes) {
        for (const node of t.extensionASTNodes) {
          const hint = cacheAnnotationFromDirectives2(node.directives);
          if (hint) {
            return hint;
          }
        }
      }
      return {};
    }
    function cacheAnnotationFromField2(field) {
      if (field.astNode) {
        const hint = cacheAnnotationFromDirectives2(field.astNode.directives);
        if (hint) {
          return hint;
        }
      }
      return {};
    }
    function isRestricted2(hint) {
      return hint.maxAge !== void 0 || hint.scope !== void 0;
    }
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/traceTreeBuilder.js
var require_traceTreeBuilder = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/traceTreeBuilder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dateToProtoTimestamp = exports2.TraceTreeBuilder = void 0;
    var graphql_1 = require_graphql2();
    var usage_reporting_protobuf_1 = require_protobuf();
    var UnreachableCaseError_js_1 = require_UnreachableCaseError();
    function internalError2(message) {
      return new Error(`[internal apollo-server error] ${message}`);
    }
    var TraceTreeBuilder2 = class {
      constructor(options) {
        this.rootNode = new usage_reporting_protobuf_1.Trace.Node();
        this.trace = new usage_reporting_protobuf_1.Trace({
          root: this.rootNode,
          fieldExecutionWeight: 1
        });
        this.stopped = false;
        this.nodes = /* @__PURE__ */ new Map([
          [responsePathAsString2(), this.rootNode]
        ]);
        const { sendErrors, maskedBy } = options;
        if (!sendErrors || "masked" in sendErrors) {
          this.transformError = () => new graphql_1.GraphQLError("<masked>", {
            extensions: { maskedBy }
          });
        } else if ("transform" in sendErrors) {
          this.transformError = sendErrors.transform;
        } else if ("unmodified" in sendErrors) {
          this.transformError = null;
        } else {
          throw new UnreachableCaseError_js_1.UnreachableCaseError(sendErrors);
        }
      }
      startTiming() {
        if (this.startHrTime) {
          throw internalError2("startTiming called twice!");
        }
        if (this.stopped) {
          throw internalError2("startTiming called after stopTiming!");
        }
        this.trace.startTime = dateToProtoTimestamp2(/* @__PURE__ */ new Date());
        this.startHrTime = process.hrtime();
      }
      stopTiming() {
        if (!this.startHrTime) {
          throw internalError2("stopTiming called before startTiming!");
        }
        if (this.stopped) {
          throw internalError2("stopTiming called twice!");
        }
        this.trace.durationNs = durationHrTimeToNanos2(process.hrtime(this.startHrTime));
        this.trace.endTime = dateToProtoTimestamp2(/* @__PURE__ */ new Date());
        this.stopped = true;
      }
      willResolveField(info) {
        if (!this.startHrTime) {
          throw internalError2("willResolveField called before startTiming!");
        }
        if (this.stopped) {
          return () => {
          };
        }
        const path2 = info.path;
        const node = this.newNode(path2);
        node.type = info.returnType.toString();
        node.parentType = info.parentType.toString();
        node.startTime = durationHrTimeToNanos2(process.hrtime(this.startHrTime));
        if (typeof path2.key === "string" && path2.key !== info.fieldName) {
          node.originalFieldName = info.fieldName;
        }
        return () => {
          node.endTime = durationHrTimeToNanos2(process.hrtime(this.startHrTime));
        };
      }
      didEncounterErrors(errors) {
        errors.forEach((err) => {
          if (err.extensions?.serviceName) {
            return;
          }
          const errorForReporting = this.transformAndNormalizeError(err);
          if (errorForReporting === null) {
            return;
          }
          this.addProtobufError(errorForReporting.path, errorToProtobufError2(errorForReporting));
        });
      }
      addProtobufError(path2, error) {
        if (!this.startHrTime) {
          throw internalError2("addProtobufError called before startTiming!");
        }
        if (this.stopped) {
          throw internalError2("addProtobufError called after stopTiming!");
        }
        let node = this.rootNode;
        if (Array.isArray(path2)) {
          const specificNode = this.nodes.get(path2.join("."));
          if (specificNode) {
            node = specificNode;
          } else {
            const responsePath = responsePathFromArray2(path2, this.rootNode);
            if (!responsePath) {
              throw internalError2("addProtobufError called with invalid path!");
            }
            node = this.newNode(responsePath);
          }
        }
        node.error.push(error);
      }
      newNode(path2) {
        const node = new usage_reporting_protobuf_1.Trace.Node();
        const id2 = path2.key;
        if (typeof id2 === "number") {
          node.index = id2;
        } else {
          node.responseName = id2;
        }
        this.nodes.set(responsePathAsString2(path2), node);
        const parentNode = this.ensureParentNode(path2);
        parentNode.child.push(node);
        return node;
      }
      ensureParentNode(path2) {
        const parentPath = responsePathAsString2(path2.prev);
        const parentNode = this.nodes.get(parentPath);
        if (parentNode) {
          return parentNode;
        }
        return this.newNode(path2.prev);
      }
      transformAndNormalizeError(err) {
        if (this.transformError) {
          const clonedError = Object.assign(Object.create(Object.getPrototypeOf(err)), err);
          const rewrittenError = this.transformError(clonedError);
          if (rewrittenError === null) {
            return null;
          }
          if (!(rewrittenError instanceof graphql_1.GraphQLError)) {
            return err;
          }
          return new graphql_1.GraphQLError(rewrittenError.message, {
            nodes: err.nodes,
            source: err.source,
            positions: err.positions,
            path: err.path,
            originalError: err.originalError,
            extensions: rewrittenError.extensions || err.extensions
          });
        }
        return err;
      }
    };
    exports2.TraceTreeBuilder = TraceTreeBuilder2;
    function durationHrTimeToNanos2(hrtime) {
      return hrtime[0] * 1e9 + hrtime[1];
    }
    function responsePathAsString2(p) {
      if (p === void 0) {
        return "";
      }
      let res = String(p.key);
      while ((p = p.prev) !== void 0) {
        res = `${p.key}.${res}`;
      }
      return res;
    }
    function responsePathFromArray2(path2, node) {
      let responsePath;
      let nodePtr = node;
      for (const key of path2) {
        nodePtr = nodePtr?.child?.find((child) => child.responseName === key);
        responsePath = {
          key,
          prev: responsePath,
          typename: nodePtr?.type ?? void 0
        };
      }
      return responsePath;
    }
    function errorToProtobufError2(error) {
      return new usage_reporting_protobuf_1.Trace.Error({
        message: error.message,
        location: (error.locations || []).map(({ line, column }) => new usage_reporting_protobuf_1.Trace.Location({ line, column })),
        json: JSON.stringify(error)
      });
    }
    function dateToProtoTimestamp2(date) {
      const totalMillis = +date;
      const millis = totalMillis % 1e3;
      return new usage_reporting_protobuf_1.google.protobuf.Timestamp({
        seconds: (totalMillis - millis) / 1e3,
        nanos: millis * 1e6
      });
    }
    exports2.dateToProtoTimestamp = dateToProtoTimestamp2;
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/usageReporting/iterateOverTrace.js
var require_iterateOverTrace = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/usageReporting/iterateOverTrace.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.iterateOverTrace = void 0;
    function iterateOverTrace2(trace, f, includePath) {
      const rootPath = includePath ? new RootCollectingPathsResponseNamePath2() : notCollectingPathsResponseNamePath2;
      if (trace.root) {
        if (iterateOverTraceNode2(trace.root, rootPath, f))
          return;
      }
      if (trace.queryPlan) {
        if (iterateOverQueryPlan2(trace.queryPlan, rootPath, f))
          return;
      }
    }
    exports2.iterateOverTrace = iterateOverTrace2;
    function iterateOverQueryPlan2(node, rootPath, f) {
      if (!node)
        return false;
      if (node.fetch?.trace?.root && node.fetch.serviceName) {
        return iterateOverTraceNode2(node.fetch.trace.root, rootPath.child(`service:${node.fetch.serviceName}`), f);
      }
      if (node.flatten?.node) {
        return iterateOverQueryPlan2(node.flatten.node, rootPath, f);
      }
      if (node.parallel?.nodes) {
        return node.parallel.nodes.some((node2) => iterateOverQueryPlan2(node2, rootPath, f));
      }
      if (node.sequence?.nodes) {
        return node.sequence.nodes.some((node2) => iterateOverQueryPlan2(node2, rootPath, f));
      }
      return false;
    }
    function iterateOverTraceNode2(node, path2, f) {
      if (f(node, path2)) {
        return true;
      }
      return node.child?.some((child) => {
        const childPath = child.responseName ? path2.child(child.responseName) : path2;
        return iterateOverTraceNode2(child, childPath, f);
      }) ?? false;
    }
    var notCollectingPathsResponseNamePath2 = {
      toArray() {
        throw Error("not collecting paths!");
      },
      child() {
        return this;
      }
    };
    var RootCollectingPathsResponseNamePath2 = class {
      toArray() {
        return [];
      }
      child(responseName) {
        return new ChildCollectingPathsResponseNamePath2(responseName, this);
      }
    };
    var ChildCollectingPathsResponseNamePath2 = class _ChildCollectingPathsResponseNamePath {
      constructor(responseName, prev) {
        this.responseName = responseName;
        this.prev = prev;
      }
      toArray() {
        const out = [];
        let curr = this;
        while (curr instanceof _ChildCollectingPathsResponseNamePath) {
          out.push(curr.responseName);
          curr = curr.prev;
        }
        return out.reverse();
      }
      child(responseName) {
        return new _ChildCollectingPathsResponseNamePath(responseName, this);
      }
    };
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/usageReporting/durationHistogram.js
var require_durationHistogram = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/usageReporting/durationHistogram.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DurationHistogram = void 0;
    var DurationHistogram2 = class _DurationHistogram {
      toArray() {
        let bufferedZeroes = 0;
        const outputArray = [];
        for (const value of this.buckets) {
          if (value === 0) {
            bufferedZeroes++;
          } else {
            if (bufferedZeroes === 1) {
              outputArray.push(0);
            } else if (bufferedZeroes !== 0) {
              outputArray.push(-bufferedZeroes);
            }
            outputArray.push(Math.floor(value));
            bufferedZeroes = 0;
          }
        }
        return outputArray;
      }
      static durationToBucket(durationNs) {
        const log = Math.log(durationNs / 1e3);
        const unboundedBucket = Math.ceil(log / _DurationHistogram.EXPONENT_LOG);
        return unboundedBucket <= 0 || Number.isNaN(unboundedBucket) ? 0 : unboundedBucket >= _DurationHistogram.BUCKET_COUNT ? _DurationHistogram.BUCKET_COUNT - 1 : unboundedBucket;
      }
      incrementDuration(durationNs, value = 1) {
        this.incrementBucket(_DurationHistogram.durationToBucket(durationNs), value);
        return this;
      }
      incrementBucket(bucket, value = 1) {
        if (bucket >= _DurationHistogram.BUCKET_COUNT) {
          throw Error("Bucket is out of bounds of the buckets array");
        }
        if (bucket >= this.buckets.length) {
          const oldLength = this.buckets.length;
          this.buckets.length = bucket + 1;
          this.buckets.fill(0, oldLength);
        }
        this.buckets[bucket] += value;
      }
      combine(otherHistogram) {
        for (let i = 0; i < otherHistogram.buckets.length; i++) {
          this.incrementBucket(i, otherHistogram.buckets[i]);
        }
      }
      constructor(options) {
        const initSize = options?.initSize || 74;
        const buckets = options?.buckets;
        const arrayInitSize = Math.max(buckets?.length || 0, initSize);
        this.buckets = Array(arrayInitSize).fill(0);
        if (buckets) {
          buckets.forEach((val, index) => this.buckets[index] = val);
        }
      }
    };
    exports2.DurationHistogram = DurationHistogram2;
    DurationHistogram2.BUCKET_COUNT = 384;
    DurationHistogram2.EXPONENT_LOG = Math.log(1.1);
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/usageReporting/defaultSendOperationsAsTrace.js
var require_defaultSendOperationsAsTrace = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/usageReporting/defaultSendOperationsAsTrace.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultSendOperationsAsTrace = void 0;
    var lru_cache_1 = __importDefault2(require_lru_cache());
    var iterateOverTrace_js_1 = require_iterateOverTrace();
    var durationHistogram_js_1 = require_durationHistogram();
    function defaultSendOperationsAsTrace2() {
      const cache = new lru_cache_1.default({
        maxSize: Math.pow(2, 20),
        sizeCalculation: (_val, key) => {
          return key && Buffer.byteLength(key) || 0;
        }
      });
      return (trace, statsReportKey) => {
        const endTimeSeconds = trace.endTime?.seconds;
        if (endTimeSeconds == null) {
          throw Error("programming error: endTime not set on trace");
        }
        const hasErrors = traceHasErrors2(trace);
        const cacheKey = JSON.stringify([
          statsReportKey,
          durationHistogram_js_1.DurationHistogram.durationToBucket(trace.durationNs),
          Math.floor(endTimeSeconds / 60),
          hasErrors ? Math.floor(endTimeSeconds / 5) : ""
        ]);
        if (cache.get(cacheKey)) {
          return false;
        }
        cache.set(cacheKey, true);
        return true;
      };
    }
    exports2.defaultSendOperationsAsTrace = defaultSendOperationsAsTrace2;
    function traceHasErrors2(trace) {
      let hasErrors = false;
      function traceNodeStats(node) {
        if ((node.error?.length ?? 0) > 0) {
          hasErrors = true;
        }
        return hasErrors;
      }
      (0, iterateOverTrace_js_1.iterateOverTrace)(trace, traceNodeStats, false);
      return hasErrors;
    }
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/usageReporting/operationDerivedDataCache.js
var require_operationDerivedDataCache = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/usageReporting/operationDerivedDataCache.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.operationDerivedDataCacheKey = exports2.createOperationDerivedDataCache = void 0;
    var lru_cache_1 = __importDefault2(require_lru_cache());
    function createOperationDerivedDataCache2({ logger }) {
      let lastWarn;
      let lastDisposals = 0;
      return new lru_cache_1.default({
        sizeCalculation(obj) {
          return Buffer.byteLength(JSON.stringify(obj), "utf8");
        },
        maxSize: Math.pow(2, 20) * 10,
        dispose() {
          lastDisposals++;
          if (!lastWarn || (/* @__PURE__ */ new Date()).getTime() - lastWarn.getTime() > 6e4) {
            lastWarn = /* @__PURE__ */ new Date();
            logger.warn([
              "This server is processing a high number of unique operations.  ",
              `A total of ${lastDisposals} records have been `,
              "ejected from the ApolloServerPluginUsageReporting signature cache in the past ",
              "interval.  If you see this warning frequently, please open an ",
              "issue on the Apollo Server repository."
            ].join(""));
            lastDisposals = 0;
          }
        }
      });
    }
    exports2.createOperationDerivedDataCache = createOperationDerivedDataCache2;
    function operationDerivedDataCacheKey2(queryHash, operationName) {
      return `${queryHash}${operationName && ":" + operationName}`;
    }
    exports2.operationDerivedDataCacheKey = operationDerivedDataCacheKey2;
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/usageReporting/stats.js
var require_stats = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/usageReporting/stats.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OurContextualizedStats = exports2.OurReport = exports2.SizeEstimator = void 0;
    var usage_reporting_protobuf_1 = require_protobuf();
    var durationHistogram_js_1 = require_durationHistogram();
    var iterateOverTrace_js_1 = require_iterateOverTrace();
    var SizeEstimator2 = class {
      constructor() {
        this.bytes = 0;
      }
    };
    exports2.SizeEstimator = SizeEstimator2;
    var OurReport2 = class {
      constructor(header) {
        this.header = header;
        this.tracesPreAggregated = false;
        this.tracesPerQuery = /* @__PURE__ */ Object.create(null);
        this.endTime = null;
        this.operationCount = 0;
        this.sizeEstimator = new SizeEstimator2();
      }
      ensureCountsAreIntegers() {
        for (const tracesAndStats of Object.values(this.tracesPerQuery)) {
          tracesAndStats.ensureCountsAreIntegers();
        }
      }
      addTrace({ statsReportKey, trace, asTrace, referencedFieldsByType, maxTraceBytes = 10 * 1024 * 1024, nonFtv1ErrorPaths }) {
        const tracesAndStats = this.getTracesAndStats({
          statsReportKey,
          referencedFieldsByType
        });
        if (asTrace) {
          const encodedTrace = usage_reporting_protobuf_1.Trace.encode(trace).finish();
          if (!isNaN(maxTraceBytes) && encodedTrace.length > maxTraceBytes) {
            tracesAndStats.statsWithContext.addTrace(trace, this.sizeEstimator, nonFtv1ErrorPaths);
          } else {
            tracesAndStats.trace.push(encodedTrace);
            this.sizeEstimator.bytes += 2 + encodedTrace.length;
          }
        } else {
          tracesAndStats.statsWithContext.addTrace(trace, this.sizeEstimator, nonFtv1ErrorPaths);
        }
      }
      getTracesAndStats({ statsReportKey, referencedFieldsByType }) {
        const existing = this.tracesPerQuery[statsReportKey];
        if (existing) {
          return existing;
        }
        this.sizeEstimator.bytes += estimatedBytesForString2(statsReportKey);
        for (const [typeName, referencedFieldsForType] of Object.entries(referencedFieldsByType)) {
          this.sizeEstimator.bytes += 2 + 2;
          if (referencedFieldsForType.isInterface) {
            this.sizeEstimator.bytes += 2;
          }
          this.sizeEstimator.bytes += estimatedBytesForString2(typeName);
          for (const fieldName of referencedFieldsForType.fieldNames) {
            this.sizeEstimator.bytes += estimatedBytesForString2(fieldName);
          }
        }
        return this.tracesPerQuery[statsReportKey] = new OurTracesAndStats2(referencedFieldsByType);
      }
    };
    exports2.OurReport = OurReport2;
    var OurTracesAndStats2 = class {
      constructor(referencedFieldsByType) {
        this.referencedFieldsByType = referencedFieldsByType;
        this.trace = [];
        this.statsWithContext = new StatsByContext2();
        this.internalTracesContributingToStats = [];
      }
      ensureCountsAreIntegers() {
        this.statsWithContext.ensureCountsAreIntegers();
      }
    };
    var StatsByContext2 = class {
      constructor() {
        this.map = /* @__PURE__ */ Object.create(null);
      }
      toArray() {
        return Object.values(this.map);
      }
      ensureCountsAreIntegers() {
        for (const contextualizedStats of Object.values(this.map)) {
          contextualizedStats.ensureCountsAreIntegers();
        }
      }
      addTrace(trace, sizeEstimator, nonFtv1ErrorPaths) {
        this.getContextualizedStats(trace, sizeEstimator).addTrace(trace, sizeEstimator, nonFtv1ErrorPaths);
      }
      getContextualizedStats(trace, sizeEstimator) {
        const statsContext = {
          clientName: trace.clientName,
          clientVersion: trace.clientVersion
        };
        const statsContextKey = JSON.stringify(statsContext);
        const existing = this.map[statsContextKey];
        if (existing) {
          return existing;
        }
        sizeEstimator.bytes += 20 + estimatedBytesForString2(trace.clientName) + estimatedBytesForString2(trace.clientVersion);
        const contextualizedStats = new OurContextualizedStats2(statsContext);
        this.map[statsContextKey] = contextualizedStats;
        return contextualizedStats;
      }
    };
    var OurContextualizedStats2 = class {
      constructor(context2) {
        this.context = context2;
        this.queryLatencyStats = new OurQueryLatencyStats2();
        this.perTypeStat = /* @__PURE__ */ Object.create(null);
      }
      ensureCountsAreIntegers() {
        for (const typeStat of Object.values(this.perTypeStat)) {
          typeStat.ensureCountsAreIntegers();
        }
      }
      addTrace(trace, sizeEstimator, nonFtv1ErrorPaths = []) {
        const { fieldExecutionWeight } = trace;
        if (!fieldExecutionWeight) {
          this.queryLatencyStats.requestsWithoutFieldInstrumentation++;
        }
        this.queryLatencyStats.requestCount++;
        if (trace.fullQueryCacheHit) {
          this.queryLatencyStats.cacheLatencyCount.incrementDuration(trace.durationNs);
          this.queryLatencyStats.cacheHits++;
        } else {
          this.queryLatencyStats.latencyCount.incrementDuration(trace.durationNs);
        }
        if (!trace.fullQueryCacheHit && trace.cachePolicy?.maxAgeNs != null) {
          switch (trace.cachePolicy.scope) {
            case usage_reporting_protobuf_1.Trace.CachePolicy.Scope.PRIVATE:
              this.queryLatencyStats.privateCacheTtlCount.incrementDuration(trace.cachePolicy.maxAgeNs);
              break;
            case usage_reporting_protobuf_1.Trace.CachePolicy.Scope.PUBLIC:
              this.queryLatencyStats.publicCacheTtlCount.incrementDuration(trace.cachePolicy.maxAgeNs);
              break;
          }
        }
        if (trace.persistedQueryHit) {
          this.queryLatencyStats.persistedQueryHits++;
        }
        if (trace.persistedQueryRegister) {
          this.queryLatencyStats.persistedQueryMisses++;
        }
        if (trace.forbiddenOperation) {
          this.queryLatencyStats.forbiddenOperationCount++;
        }
        if (trace.registeredOperation) {
          this.queryLatencyStats.registeredOperationCount++;
        }
        let hasError = false;
        const errorPathStats = /* @__PURE__ */ new Set();
        const traceNodeStats = (node, path2) => {
          if (node.error?.length) {
            hasError = true;
            let currPathErrorStats = this.queryLatencyStats.rootErrorStats;
            path2.toArray().forEach((subPath) => {
              currPathErrorStats = currPathErrorStats.getChild(subPath, sizeEstimator);
            });
            errorPathStats.add(currPathErrorStats);
            currPathErrorStats.errorsCount += node.error.length;
          }
          if (fieldExecutionWeight) {
            const fieldName = node.originalFieldName || node.responseName;
            if (node.parentType && fieldName && node.type && node.endTime != null && node.startTime != null && node.endTime >= node.startTime) {
              const typeStat = this.getTypeStat(node.parentType, sizeEstimator);
              const fieldStat = typeStat.getFieldStat(fieldName, node.type, sizeEstimator);
              fieldStat.errorsCount += node.error?.length ?? 0;
              fieldStat.observedExecutionCount++;
              fieldStat.estimatedExecutionCount += fieldExecutionWeight;
              fieldStat.requestsWithErrorsCount += (node.error?.length ?? 0) > 0 ? 1 : 0;
              fieldStat.latencyCount.incrementDuration(node.endTime - node.startTime, fieldExecutionWeight);
            }
          }
          return false;
        };
        (0, iterateOverTrace_js_1.iterateOverTrace)(trace, traceNodeStats, true);
        for (const { subgraph, path: path2 } of nonFtv1ErrorPaths) {
          hasError = true;
          if (path2) {
            let currPathErrorStats = this.queryLatencyStats.rootErrorStats.getChild(`service:${subgraph}`, sizeEstimator);
            path2.forEach((subPath) => {
              if (typeof subPath === "string") {
                currPathErrorStats = currPathErrorStats.getChild(subPath, sizeEstimator);
              }
            });
            errorPathStats.add(currPathErrorStats);
            currPathErrorStats.errorsCount += 1;
          }
        }
        for (const errorPath of errorPathStats) {
          errorPath.requestsWithErrorsCount += 1;
        }
        if (hasError) {
          this.queryLatencyStats.requestsWithErrorsCount++;
        }
      }
      getTypeStat(parentType, sizeEstimator) {
        const existing = this.perTypeStat[parentType];
        if (existing) {
          return existing;
        }
        sizeEstimator.bytes += estimatedBytesForString2(parentType);
        const typeStat = new OurTypeStat2();
        this.perTypeStat[parentType] = typeStat;
        return typeStat;
      }
    };
    exports2.OurContextualizedStats = OurContextualizedStats2;
    var OurQueryLatencyStats2 = class {
      constructor() {
        this.latencyCount = new durationHistogram_js_1.DurationHistogram();
        this.requestCount = 0;
        this.requestsWithoutFieldInstrumentation = 0;
        this.cacheHits = 0;
        this.persistedQueryHits = 0;
        this.persistedQueryMisses = 0;
        this.cacheLatencyCount = new durationHistogram_js_1.DurationHistogram();
        this.rootErrorStats = new OurPathErrorStats2();
        this.requestsWithErrorsCount = 0;
        this.publicCacheTtlCount = new durationHistogram_js_1.DurationHistogram();
        this.privateCacheTtlCount = new durationHistogram_js_1.DurationHistogram();
        this.registeredOperationCount = 0;
        this.forbiddenOperationCount = 0;
      }
    };
    var OurPathErrorStats2 = class _OurPathErrorStats {
      constructor() {
        this.children = /* @__PURE__ */ Object.create(null);
        this.errorsCount = 0;
        this.requestsWithErrorsCount = 0;
      }
      getChild(subPath, sizeEstimator) {
        const existing = this.children[subPath];
        if (existing) {
          return existing;
        }
        const child = new _OurPathErrorStats();
        this.children[subPath] = child;
        sizeEstimator.bytes += estimatedBytesForString2(subPath) + 4;
        return child;
      }
    };
    var OurTypeStat2 = class {
      constructor() {
        this.perFieldStat = /* @__PURE__ */ Object.create(null);
      }
      getFieldStat(fieldName, returnType, sizeEstimator) {
        const existing = this.perFieldStat[fieldName];
        if (existing) {
          return existing;
        }
        sizeEstimator.bytes += estimatedBytesForString2(fieldName) + estimatedBytesForString2(returnType) + 10;
        const fieldStat = new OurFieldStat2(returnType);
        this.perFieldStat[fieldName] = fieldStat;
        return fieldStat;
      }
      ensureCountsAreIntegers() {
        for (const fieldStat of Object.values(this.perFieldStat)) {
          fieldStat.ensureCountsAreIntegers();
        }
      }
    };
    var OurFieldStat2 = class {
      constructor(returnType) {
        this.returnType = returnType;
        this.errorsCount = 0;
        this.observedExecutionCount = 0;
        this.estimatedExecutionCount = 0;
        this.requestsWithErrorsCount = 0;
        this.latencyCount = new durationHistogram_js_1.DurationHistogram();
      }
      ensureCountsAreIntegers() {
        this.estimatedExecutionCount = Math.floor(this.estimatedExecutionCount);
      }
    };
    function estimatedBytesForString2(s) {
      return 2 + Buffer.byteLength(s);
    }
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/usageReporting/traceDetails.js
var require_traceDetails = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/usageReporting/traceDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeTraceDetails = void 0;
    var usage_reporting_protobuf_1 = require_protobuf();
    function makeTraceDetails2(variables, sendVariableValues, operationString) {
      const details = new usage_reporting_protobuf_1.Trace.Details();
      const variablesToRecord = (() => {
        if (sendVariableValues && "transform" in sendVariableValues) {
          const originalKeys = Object.keys(variables);
          try {
            const modifiedVariables = sendVariableValues.transform({
              variables,
              operationString
            });
            return cleanModifiedVariables2(originalKeys, modifiedVariables);
          } catch (e) {
            return handleVariableValueTransformError2(originalKeys);
          }
        } else {
          return variables;
        }
      })();
      Object.keys(variablesToRecord).forEach((name) => {
        if (!sendVariableValues || "none" in sendVariableValues && sendVariableValues.none || "all" in sendVariableValues && !sendVariableValues.all || "exceptNames" in sendVariableValues && sendVariableValues.exceptNames.includes(name) || "onlyNames" in sendVariableValues && !sendVariableValues.onlyNames.includes(name)) {
          details.variablesJson[name] = "";
        } else {
          try {
            details.variablesJson[name] = typeof variablesToRecord[name] === "undefined" ? "" : JSON.stringify(variablesToRecord[name]);
          } catch (e) {
            details.variablesJson[name] = JSON.stringify("[Unable to convert value to JSON]");
          }
        }
      });
      return details;
    }
    exports2.makeTraceDetails = makeTraceDetails2;
    function handleVariableValueTransformError2(variableNames) {
      const modifiedVariables = /* @__PURE__ */ Object.create(null);
      variableNames.forEach((name) => {
        modifiedVariables[name] = "[PREDICATE_FUNCTION_ERROR]";
      });
      return modifiedVariables;
    }
    function cleanModifiedVariables2(originalKeys, modifiedVariables) {
      const cleanedVariables = /* @__PURE__ */ Object.create(null);
      originalKeys.forEach((name) => {
        cleanedVariables[name] = modifiedVariables[name];
      });
      return cleanedVariables;
    }
  }
});

// node_modules/@apollo/server/dist/cjs/generated/packageVersion.js
var require_packageVersion = __commonJS({
  "node_modules/@apollo/server/dist/cjs/generated/packageVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.packageVersion = void 0;
    exports2.packageVersion = "4.11.2";
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/schemaIsSubgraph.js
var require_schemaIsSubgraph = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/schemaIsSubgraph.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.schemaIsSubgraph = void 0;
    var graphql_1 = require_graphql2();
    function schemaIsSubgraph2(schema) {
      const serviceType = schema.getType("_Service");
      if (!(0, graphql_1.isObjectType)(serviceType)) {
        return false;
      }
      const sdlField = serviceType.getFields().sdl;
      if (!sdlField) {
        return false;
      }
      let sdlFieldType = sdlField.type;
      if ((0, graphql_1.isNonNullType)(sdlFieldType)) {
        sdlFieldType = sdlFieldType.ofType;
      }
      if (!(0, graphql_1.isScalarType)(sdlFieldType)) {
        return false;
      }
      return sdlFieldType.name == "String";
    }
    exports2.schemaIsSubgraph = schemaIsSubgraph2;
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/usageReporting/plugin.js
var require_plugin = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/usageReporting/plugin.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeHTTPRequestHeaders = exports2.ApolloServerPluginUsageReporting = void 0;
    var usage_reporting_protobuf_1 = require_protobuf();
    var utils_usagereporting_1 = require_dist9();
    var async_retry_1 = __importDefault2(require_lib());
    var graphql_1 = require_graphql2();
    var node_abort_controller_1 = require_node_abort_controller();
    var node_fetch_1 = __importDefault2(require_lib3());
    var os_1 = __importDefault2(require("os"));
    var zlib_1 = require("zlib");
    var internalPlugin_js_1 = require_internalPlugin();
    var traceTreeBuilder_js_1 = require_traceTreeBuilder();
    var defaultSendOperationsAsTrace_js_1 = require_defaultSendOperationsAsTrace();
    var operationDerivedDataCache_js_1 = require_operationDerivedDataCache();
    var stats_js_1 = require_stats();
    var traceDetails_js_1 = require_traceDetails();
    var packageVersion_js_1 = require_packageVersion();
    var computeCoreSchemaHash_js_1 = require_computeCoreSchemaHash();
    var schemaIsSubgraph_js_1 = require_schemaIsSubgraph();
    var reportHeaderDefaults2 = {
      hostname: os_1.default.hostname(),
      agentVersion: `@apollo/server@${packageVersion_js_1.packageVersion}`,
      runtimeVersion: `node ${process.version}`,
      uname: `${os_1.default.platform()}, ${os_1.default.type()}, ${os_1.default.release()}, ${os_1.default.arch()})`
    };
    function ApolloServerPluginUsageReporting2(options = /* @__PURE__ */ Object.create(null)) {
      const fieldLevelInstrumentationOption = options.fieldLevelInstrumentation;
      const fieldLevelInstrumentation = typeof fieldLevelInstrumentationOption === "number" ? async () => Math.random() < fieldLevelInstrumentationOption ? 1 / fieldLevelInstrumentationOption : 0 : fieldLevelInstrumentationOption ? fieldLevelInstrumentationOption : async () => true;
      let requestDidStartHandler = null;
      return (0, internalPlugin_js_1.internalPlugin)({
        __internal_plugin_id__: "UsageReporting",
        __is_disabled_plugin__: false,
        async requestDidStart(requestContext) {
          if (requestDidStartHandler) {
            return requestDidStartHandler(requestContext);
          }
          return {};
        },
        async serverWillStart({ logger: serverLogger, apollo, startedInBackground, schema }) {
          const logger = options.logger ?? serverLogger;
          const { key, graphRef } = apollo;
          if (!(key && graphRef)) {
            throw new Error("You've enabled usage reporting via ApolloServerPluginUsageReporting, but you also need to provide your Apollo API key and graph ref, via the APOLLO_KEY/APOLLO_GRAPH_REF environment variables or via `new ApolloServer({apollo: {key, graphRef})`.");
          }
          if ((0, schemaIsSubgraph_js_1.schemaIsSubgraph)(schema)) {
            if (options.__onlyIfSchemaIsNotSubgraph) {
              logger.warn("You have specified an Apollo API key and graph ref but this server appears to be a subgraph. Typically usage reports are sent to Apollo by your Router or Gateway, not directly from your subgraph; usage reporting is disabled. To enable usage reporting anyway, explicitly install `ApolloServerPluginUsageReporting`. To disable this warning, install `ApolloServerPluginUsageReportingDisabled`.");
              return {};
            } else {
              logger.warn("You have installed `ApolloServerPluginUsageReporting` but this server appears to be a subgraph. Typically usage reports are sent to Apollo by your Router or Gateway, not directly from your subgraph. If this was unintentional, remove `ApolloServerPluginUsageReporting` from your server's `plugins` array.");
            }
          }
          logger.info(`Apollo usage reporting starting! See your graph at https://studio.apollographql.com/graph/${encodeURI(graphRef)}/`);
          const sendReportsImmediately = options.sendReportsImmediately ?? startedInBackground;
          let operationDerivedDataCache = null;
          const reportByExecutableSchemaId = /* @__PURE__ */ new Map();
          const getReportWhichMustBeUsedImmediately = (executableSchemaId) => {
            const existing = reportByExecutableSchemaId.get(executableSchemaId);
            if (existing) {
              return existing;
            }
            const report = new stats_js_1.OurReport(new usage_reporting_protobuf_1.ReportHeader({
              ...reportHeaderDefaults2,
              executableSchemaId,
              graphRef
            }));
            reportByExecutableSchemaId.set(executableSchemaId, report);
            return report;
          };
          const getAndDeleteReport = (executableSchemaId) => {
            const report = reportByExecutableSchemaId.get(executableSchemaId);
            if (report) {
              reportByExecutableSchemaId.delete(executableSchemaId);
              return report;
            }
            return null;
          };
          const overriddenExecutableSchemaId = options.overrideReportedSchema ? (0, computeCoreSchemaHash_js_1.computeCoreSchemaHash)(options.overrideReportedSchema) : void 0;
          let lastSeenExecutableSchemaToId;
          let reportTimer;
          if (!sendReportsImmediately) {
            reportTimer = setInterval(() => sendAllReportsAndReportErrors(), options.reportIntervalMs || 10 * 1e3);
          }
          let sendTraces = options.sendTraces ?? true;
          const sendOperationAsTrace = options.experimental_sendOperationAsTrace ?? (0, defaultSendOperationsAsTrace_js_1.defaultSendOperationsAsTrace)();
          let stopped = false;
          function executableSchemaIdForSchema(schema2) {
            if (lastSeenExecutableSchemaToId?.executableSchema === schema2) {
              return lastSeenExecutableSchemaToId.executableSchemaId;
            }
            const id2 = (0, computeCoreSchemaHash_js_1.computeCoreSchemaHash)((0, graphql_1.printSchema)(schema2));
            lastSeenExecutableSchemaToId = {
              executableSchema: schema2,
              executableSchemaId: id2
            };
            return id2;
          }
          async function sendAllReportsAndReportErrors() {
            await Promise.all([...reportByExecutableSchemaId.keys()].map((executableSchemaId) => sendReportAndReportErrors(executableSchemaId)));
          }
          async function sendReportAndReportErrors(executableSchemaId) {
            return sendReport(executableSchemaId).catch((err) => {
              if (options.reportErrorFunction) {
                options.reportErrorFunction(err);
              } else {
                logger.error(err.message);
              }
            });
          }
          const sendReport = async (executableSchemaId) => {
            let report = getAndDeleteReport(executableSchemaId);
            if (!report || Object.keys(report.tracesPerQuery).length === 0 && report.operationCount === 0) {
              return;
            }
            report.endTime = (0, traceTreeBuilder_js_1.dateToProtoTimestamp)(/* @__PURE__ */ new Date());
            report.ensureCountsAreIntegers();
            const protobufError = usage_reporting_protobuf_1.Report.verify(report);
            if (protobufError) {
              throw new Error(`Error verifying report: ${protobufError}`);
            }
            let message = usage_reporting_protobuf_1.Report.encode(report).finish();
            report = null;
            if (options.debugPrintReports) {
              const decodedReport = usage_reporting_protobuf_1.Report.decode(message);
              logger.info(`Apollo usage report: ${JSON.stringify(decodedReport.toJSON())}`);
            }
            const compressed = await new Promise((resolve, reject) => {
              (0, zlib_1.gzip)(message, (error, result) => {
                error ? reject(error) : resolve(result);
              });
            });
            message = null;
            const fetcher = options.fetcher ?? node_fetch_1.default;
            const response = await (0, async_retry_1.default)(async () => {
              const controller = new node_abort_controller_1.AbortController();
              const abortTimeout = setTimeout(() => {
                controller.abort();
              }, options.requestTimeoutMs ?? 3e4);
              let curResponse;
              try {
                curResponse = await fetcher((options.endpointUrl || "https://usage-reporting.api.apollographql.com") + "/api/ingress/traces", {
                  method: "POST",
                  headers: {
                    "user-agent": "ApolloServerPluginUsageReporting",
                    "x-api-key": key,
                    "content-encoding": "gzip",
                    accept: "application/json"
                  },
                  body: compressed,
                  signal: controller.signal
                });
              } finally {
                clearTimeout(abortTimeout);
              }
              if (curResponse.status >= 500 && curResponse.status < 600) {
                throw new Error(`HTTP status ${curResponse.status}, ${await curResponse.text() || "(no body)"}`);
              } else {
                return curResponse;
              }
            }, {
              retries: (options.maxAttempts || 5) - 1,
              minTimeout: options.minimumRetryDelayMs || 100,
              factor: 2
            }).catch((err) => {
              throw new Error(`Error sending report to Apollo servers: ${err.message}`);
            });
            if (response.status < 200 || response.status >= 300) {
              throw new Error(`Error sending report to Apollo servers: HTTP status ${response.status}, ${await response.text() || "(no body)"}`);
            }
            if (sendTraces && response.status === 200 && response.headers.get("content-type")?.match(/^\s*application\/json\s*(?:;|$)/i)) {
              const body = await response.text();
              let parsedBody;
              try {
                parsedBody = JSON.parse(body);
              } catch (e) {
                throw new Error(`Error parsing response from Apollo servers: ${e}`);
              }
              if (parsedBody.tracesIgnored === true) {
                logger.debug("This graph's organization does not have access to traces; sending all subsequent operations as stats.");
                sendTraces = false;
              }
            }
            if (options.debugPrintReports) {
              logger.info(`Apollo usage report: status ${response.status}`);
            }
          };
          requestDidStartHandler = ({ metrics, schema: schema2, request: { http, variables } }) => {
            const treeBuilder = new traceTreeBuilder_js_1.TraceTreeBuilder({
              maskedBy: "ApolloServerPluginUsageReporting",
              sendErrors: options.sendErrors
            });
            treeBuilder.startTiming();
            metrics.startHrTime = treeBuilder.startHrTime;
            let graphqlValidationFailure = false;
            let graphqlUnknownOperationName = false;
            let includeOperationInUsageReporting = null;
            if (http) {
              treeBuilder.trace.http = new usage_reporting_protobuf_1.Trace.HTTP({
                method: usage_reporting_protobuf_1.Trace.HTTP.Method[http.method] || usage_reporting_protobuf_1.Trace.HTTP.Method.UNKNOWN
              });
              if (options.sendHeaders) {
                makeHTTPRequestHeaders2(treeBuilder.trace.http, http.headers, options.sendHeaders);
              }
            }
            async function maybeCallIncludeRequestHook(requestContext) {
              if (includeOperationInUsageReporting !== null)
                return;
              if (typeof options.includeRequest !== "function") {
                includeOperationInUsageReporting = true;
                return;
              }
              includeOperationInUsageReporting = await options.includeRequest(requestContext);
              if (typeof includeOperationInUsageReporting !== "boolean") {
                logger.warn("The 'includeRequest' async predicate function must return a boolean value.");
                includeOperationInUsageReporting = true;
              }
            }
            let didResolveSource = false;
            return {
              async didResolveSource(requestContext) {
                didResolveSource = true;
                if (metrics.persistedQueryHit) {
                  treeBuilder.trace.persistedQueryHit = true;
                }
                if (metrics.persistedQueryRegister) {
                  treeBuilder.trace.persistedQueryRegister = true;
                }
                if (variables) {
                  treeBuilder.trace.details = (0, traceDetails_js_1.makeTraceDetails)(variables, options.sendVariableValues, requestContext.source);
                }
                const clientInfo = (options.generateClientInfo || defaultGenerateClientInfo2)(requestContext);
                if (clientInfo) {
                  const { clientName, clientVersion } = clientInfo;
                  treeBuilder.trace.clientVersion = clientVersion || "";
                  treeBuilder.trace.clientName = clientName || "";
                }
              },
              async validationDidStart() {
                return async (validationErrors) => {
                  graphqlValidationFailure = validationErrors ? validationErrors.length !== 0 : false;
                };
              },
              async didResolveOperation(requestContext) {
                graphqlUnknownOperationName = requestContext.operation === void 0;
                await maybeCallIncludeRequestHook(requestContext);
                if (includeOperationInUsageReporting && !graphqlUnknownOperationName) {
                  if (metrics.captureTraces === void 0) {
                    const rawWeight = await fieldLevelInstrumentation(requestContext);
                    treeBuilder.trace.fieldExecutionWeight = typeof rawWeight === "number" ? rawWeight : rawWeight ? 1 : 0;
                    metrics.captureTraces = !!treeBuilder.trace.fieldExecutionWeight;
                  }
                }
              },
              async executionDidStart() {
                if (!metrics.captureTraces)
                  return;
                return {
                  willResolveField({ info }) {
                    return treeBuilder.willResolveField(info);
                  }
                };
              },
              async didEncounterSubsequentErrors(_requestContext, errors) {
                treeBuilder.didEncounterErrors(errors);
              },
              async willSendSubsequentPayload(requestContext, payload) {
                if (!payload.hasNext) {
                  await operationFinished(requestContext);
                }
              },
              async willSendResponse(requestContext) {
                if (!didResolveSource)
                  return;
                if (requestContext.errors) {
                  treeBuilder.didEncounterErrors(requestContext.errors);
                }
                if (requestContext.response.body.kind === "single") {
                  await operationFinished(requestContext);
                }
              }
            };
            async function operationFinished(requestContext) {
              const resolvedOperation = !!requestContext.operation;
              await maybeCallIncludeRequestHook(requestContext);
              treeBuilder.stopTiming();
              const executableSchemaId = overriddenExecutableSchemaId ?? executableSchemaIdForSchema(schema2);
              if (includeOperationInUsageReporting === false) {
                if (resolvedOperation) {
                  getReportWhichMustBeUsedImmediately(executableSchemaId).operationCount++;
                }
                return;
              }
              treeBuilder.trace.fullQueryCacheHit = !!metrics.responseCacheHit;
              treeBuilder.trace.forbiddenOperation = !!metrics.forbiddenOperation;
              treeBuilder.trace.registeredOperation = !!metrics.registeredOperation;
              const policyIfCacheable = requestContext.overallCachePolicy.policyIfCacheable();
              if (policyIfCacheable) {
                treeBuilder.trace.cachePolicy = new usage_reporting_protobuf_1.Trace.CachePolicy({
                  scope: policyIfCacheable.scope === "PRIVATE" ? usage_reporting_protobuf_1.Trace.CachePolicy.Scope.PRIVATE : policyIfCacheable.scope === "PUBLIC" ? usage_reporting_protobuf_1.Trace.CachePolicy.Scope.PUBLIC : usage_reporting_protobuf_1.Trace.CachePolicy.Scope.UNKNOWN,
                  maxAgeNs: policyIfCacheable.maxAge * 1e9
                });
              }
              if (metrics.queryPlanTrace) {
                treeBuilder.trace.queryPlan = metrics.queryPlanTrace;
              }
              addTrace().catch(logger.error);
              async function addTrace() {
                if (stopped) {
                  return;
                }
                await new Promise((res) => setImmediate(res));
                const executableSchemaId2 = overriddenExecutableSchemaId ?? executableSchemaIdForSchema(schema2);
                const { trace } = treeBuilder;
                let statsReportKey = void 0;
                let referencedFieldsByType;
                if (!requestContext.document) {
                  statsReportKey = `## GraphQLParseFailure
`;
                } else if (graphqlValidationFailure) {
                  statsReportKey = `## GraphQLValidationFailure
`;
                } else if (graphqlUnknownOperationName) {
                  statsReportKey = `## GraphQLUnknownOperationName
`;
                }
                const isExecutable = statsReportKey === void 0;
                if (statsReportKey) {
                  if (options.sendUnexecutableOperationDocuments) {
                    trace.unexecutedOperationBody = requestContext.source;
                    trace.unexecutedOperationName = requestContext.request.operationName || "";
                  }
                  referencedFieldsByType = /* @__PURE__ */ Object.create(null);
                } else {
                  const operationDerivedData = getOperationDerivedData();
                  statsReportKey = `# ${requestContext.operationName || "-"}
${operationDerivedData.signature}`;
                  referencedFieldsByType = operationDerivedData.referencedFieldsByType;
                }
                const protobufError = usage_reporting_protobuf_1.Trace.verify(trace);
                if (protobufError) {
                  throw new Error(`Error encoding trace: ${protobufError}`);
                }
                if (resolvedOperation) {
                  getReportWhichMustBeUsedImmediately(executableSchemaId2).operationCount++;
                }
                getReportWhichMustBeUsedImmediately(executableSchemaId2).addTrace({
                  statsReportKey,
                  trace,
                  asTrace: sendTraces && (!isExecutable || !!metrics.captureTraces) && !metrics.nonFtv1ErrorPaths?.length && sendOperationAsTrace(trace, statsReportKey),
                  referencedFieldsByType,
                  nonFtv1ErrorPaths: metrics.nonFtv1ErrorPaths ?? []
                });
                if (sendReportsImmediately || getReportWhichMustBeUsedImmediately(executableSchemaId2).sizeEstimator.bytes >= (options.maxUncompressedReportSize || 4 * 1024 * 1024)) {
                  await sendReportAndReportErrors(executableSchemaId2);
                }
              }
              function getOperationDerivedData() {
                if (!requestContext.document) {
                  throw new Error("No document?");
                }
                const cacheKey = (0, operationDerivedDataCache_js_1.operationDerivedDataCacheKey)(requestContext.queryHash, requestContext.operationName || "");
                if (!operationDerivedDataCache || operationDerivedDataCache.forSchema !== schema2) {
                  operationDerivedDataCache = {
                    forSchema: schema2,
                    cache: (0, operationDerivedDataCache_js_1.createOperationDerivedDataCache)({ logger })
                  };
                }
                const cachedOperationDerivedData = operationDerivedDataCache.cache.get(cacheKey);
                if (cachedOperationDerivedData) {
                  return cachedOperationDerivedData;
                }
                const generatedSignature = (options.calculateSignature || utils_usagereporting_1.usageReportingSignature)(requestContext.document, requestContext.operationName || "");
                const generatedOperationDerivedData = {
                  signature: generatedSignature,
                  referencedFieldsByType: (0, utils_usagereporting_1.calculateReferencedFieldsByType)({
                    document: requestContext.document,
                    schema: schema2,
                    resolvedOperationName: requestContext.operationName ?? null
                  })
                };
                operationDerivedDataCache.cache.set(cacheKey, generatedOperationDerivedData);
                return generatedOperationDerivedData;
              }
            }
          };
          return {
            async serverWillStop() {
              if (reportTimer) {
                clearInterval(reportTimer);
                reportTimer = void 0;
              }
              stopped = true;
              await sendAllReportsAndReportErrors();
            }
          };
        }
      });
    }
    exports2.ApolloServerPluginUsageReporting = ApolloServerPluginUsageReporting2;
    function makeHTTPRequestHeaders2(http, headers, sendHeaders) {
      if (!sendHeaders || "none" in sendHeaders && sendHeaders.none || "all" in sendHeaders && !sendHeaders.all) {
        return;
      }
      for (const [key, value] of headers) {
        if ("exceptNames" in sendHeaders && sendHeaders.exceptNames.some((exceptHeader) => {
          return exceptHeader.toLowerCase() === key;
        }) || "onlyNames" in sendHeaders && !sendHeaders.onlyNames.some((header) => {
          return header.toLowerCase() === key;
        })) {
          continue;
        }
        switch (key) {
          case "authorization":
          case "cookie":
          case "set-cookie":
            break;
          default:
            http.requestHeaders[key] = new usage_reporting_protobuf_1.Trace.HTTP.Values({
              value: [value]
            });
        }
      }
    }
    exports2.makeHTTPRequestHeaders = makeHTTPRequestHeaders2;
    function defaultGenerateClientInfo2({ request }) {
      const clientNameHeaderKey = "apollographql-client-name";
      const clientVersionHeaderKey = "apollographql-client-version";
      if (request.http?.headers?.get(clientNameHeaderKey) || request.http?.headers?.get(clientVersionHeaderKey)) {
        return {
          clientName: request.http?.headers?.get(clientNameHeaderKey),
          clientVersion: request.http?.headers?.get(clientVersionHeaderKey)
        };
      } else if (request.extensions?.clientInfo) {
        return request.extensions.clientInfo;
      } else {
        return {};
      }
    }
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/usageReporting/index.js
var require_usageReporting = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/usageReporting/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApolloServerPluginUsageReporting = void 0;
    var plugin_js_1 = require_plugin();
    Object.defineProperty(exports2, "ApolloServerPluginUsageReporting", { enumerable: true, get: function() {
      return plugin_js_1.ApolloServerPluginUsageReporting;
    } });
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/schemaReporting/schemaReporter.js
var require_schemaReporter = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/schemaReporting/schemaReporter.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SchemaReporter = exports2.schemaReportGql = void 0;
    var node_fetch_1 = __importDefault2(require_lib3());
    var packageVersion_js_1 = require_packageVersion();
    exports2.schemaReportGql = `#graphql
  mutation SchemaReport($report: SchemaReport!, $coreSchema: String) {
    reportSchema(report: $report, coreSchema: $coreSchema) {
      __typename
      ... on ReportSchemaError {
        message
        code
      }
      ... on ReportSchemaResponse {
        inSeconds
        withCoreSchema
      }
    }
  }
`;
    var SchemaReporter2 = class {
      constructor(options) {
        this.headers = {
          "Content-Type": "application/json",
          "x-api-key": options.apiKey,
          "apollographql-client-name": "ApolloServerPluginSchemaReporting",
          "apollographql-client-version": packageVersion_js_1.packageVersion
        };
        this.endpointUrl = options.endpointUrl || "https://schema-reporting.api.apollographql.com/api/graphql";
        this.schemaReport = options.schemaReport;
        this.coreSchema = options.coreSchema;
        this.isStopped = false;
        this.logger = options.logger;
        this.initialReportingDelayInMs = options.initialReportingDelayInMs;
        this.fallbackReportingDelayInMs = options.fallbackReportingDelayInMs;
        this.fetcher = options.fetcher ?? node_fetch_1.default;
      }
      stopped() {
        return this.isStopped;
      }
      start() {
        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.initialReportingDelayInMs);
      }
      stop() {
        this.isStopped = true;
        if (this.pollTimer) {
          clearTimeout(this.pollTimer);
          this.pollTimer = void 0;
        }
      }
      async sendOneReportAndScheduleNext(sendNextWithCoreSchema) {
        this.pollTimer = void 0;
        if (this.stopped())
          return;
        try {
          const result = await this.reportSchema(sendNextWithCoreSchema);
          if (!result) {
            return;
          }
          if (!this.stopped()) {
            this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(result.withCoreSchema), result.inSeconds * 1e3);
          }
          return;
        } catch (error) {
          this.logger.error(`Error reporting server info to Apollo during schema reporting: ${error}`);
          if (!this.stopped()) {
            this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.fallbackReportingDelayInMs);
          }
        }
      }
      async reportSchema(withCoreSchema) {
        const { data, errors } = await this.apolloQuery({
          report: this.schemaReport,
          coreSchema: withCoreSchema ? this.coreSchema : null
        });
        if (errors) {
          throw new Error(errors.map((x2) => x2.message).join("\n"));
        }
        function msgForUnexpectedResponse(data2) {
          return [
            "Unexpected response shape from Apollo when",
            "reporting schema. If this continues, please reach",
            "out to support@apollographql.com.",
            "Received response:",
            JSON.stringify(data2)
          ].join(" ");
        }
        if (!data || !data.reportSchema) {
          throw new Error(msgForUnexpectedResponse(data));
        }
        if (data.reportSchema.__typename === "ReportSchemaResponse") {
          return data.reportSchema;
        } else if (data.reportSchema.__typename === "ReportSchemaError") {
          this.logger.error([
            "Received input validation error from Apollo:",
            data.reportSchema.message,
            "Stopping reporting. Please fix the input errors."
          ].join(" "));
          this.stop();
          return null;
        }
        throw new Error(msgForUnexpectedResponse(data));
      }
      async apolloQuery(variables) {
        const request = {
          query: exports2.schemaReportGql,
          variables
        };
        const httpResponse = await this.fetcher(this.endpointUrl, {
          method: "POST",
          headers: this.headers,
          body: JSON.stringify(request)
        });
        if (!httpResponse.ok) {
          throw new Error([
            `An unexpected HTTP status code (${httpResponse.status}) was`,
            "encountered during schema reporting."
          ].join(" "));
        }
        try {
          return await httpResponse.json();
        } catch (error) {
          throw new Error([
            "Couldn't report schema to Apollo.",
            "Parsing response as JSON failed.",
            "If this continues please reach out to support@apollographql.com",
            error
          ].join(" "));
        }
      }
    };
    exports2.SchemaReporter = SchemaReporter2;
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/schemaReporting/index.js
var require_schemaReporting = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/schemaReporting/index.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApolloServerPluginSchemaReporting = void 0;
    var os_1 = __importDefault2(require("os"));
    var internalPlugin_js_1 = require_internalPlugin();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports2));
    var graphql_1 = require_graphql2();
    var schemaReporter_js_1 = require_schemaReporter();
    var schemaIsSubgraph_js_1 = require_schemaIsSubgraph();
    var packageVersion_js_1 = require_packageVersion();
    var computeCoreSchemaHash_js_1 = require_computeCoreSchemaHash();
    function ApolloServerPluginSchemaReporting2({ initialDelayMaxMs, overrideReportedSchema, endpointUrl, fetcher } = /* @__PURE__ */ Object.create(null)) {
      const bootId = (0, uuid_1.v4)();
      return (0, internalPlugin_js_1.internalPlugin)({
        __internal_plugin_id__: "SchemaReporting",
        __is_disabled_plugin__: false,
        async serverWillStart({ apollo, schema, logger }) {
          const { key, graphRef } = apollo;
          if (!key) {
            throw Error("To use ApolloServerPluginSchemaReporting, you must provide an Apollo API key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`");
          }
          if (!graphRef) {
            throw Error("To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, 'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment variable or passing `new ApolloServer({apollo: {graphRef}})`.");
          }
          if (overrideReportedSchema) {
            try {
              const validationErrors = (0, graphql_1.validateSchema)((0, graphql_1.buildSchema)(overrideReportedSchema, { noLocation: true }));
              if (validationErrors.length) {
                throw new Error(validationErrors.map((error) => error.message).join("\n"));
              }
            } catch (err) {
              throw new Error(`The schema provided to overrideReportedSchema failed to parse or validate: ${err.message}`);
            }
          }
          if ((0, schemaIsSubgraph_js_1.schemaIsSubgraph)(schema)) {
            throw Error([
              "Schema reporting is not yet compatible with Apollo Federation subgraphs.",
              "If you're interested in using schema reporting with subgraphs,",
              "please contact Apollo support. To set up managed federation, see",
              "https://go.apollo.dev/s/managed-federation"
            ].join(" "));
          }
          if (endpointUrl !== void 0) {
            logger.info(`Apollo schema reporting: schema reporting URL override: ${endpointUrl}`);
          }
          const baseSchemaReport = {
            bootId,
            graphRef,
            platform: process.env.APOLLO_SERVER_PLATFORM || "local",
            runtimeVersion: `node ${process.version}`,
            userVersion: process.env.APOLLO_SERVER_USER_VERSION,
            serverId: process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || os_1.default.hostname(),
            libraryVersion: `@apollo/server@${packageVersion_js_1.packageVersion}`
          };
          let currentSchemaReporter;
          return {
            schemaDidLoadOrUpdate({ apiSchema, coreSupergraphSdl }) {
              if (overrideReportedSchema !== void 0) {
                if (currentSchemaReporter) {
                  return;
                } else {
                  logger.info("Apollo schema reporting: schema to report has been overridden");
                }
              }
              const coreSchema = overrideReportedSchema ?? coreSupergraphSdl ?? (0, graphql_1.printSchema)(apiSchema);
              const coreSchemaHash = (0, computeCoreSchemaHash_js_1.computeCoreSchemaHash)(coreSchema);
              const schemaReport = {
                ...baseSchemaReport,
                coreSchemaHash
              };
              currentSchemaReporter?.stop();
              currentSchemaReporter = new schemaReporter_js_1.SchemaReporter({
                schemaReport,
                coreSchema,
                apiKey: key,
                endpointUrl,
                logger,
                initialReportingDelayInMs: Math.floor(Math.random() * (initialDelayMaxMs ?? 1e4)),
                fallbackReportingDelayInMs: 2e4,
                fetcher
              });
              currentSchemaReporter.start();
              logger.info(`Apollo schema reporting: reporting a new schema to Studio! See your graph at https://studio.apollographql.com/graph/${encodeURI(graphRef)}/ with server info ${JSON.stringify(schemaReport)}`);
            },
            async serverWillStop() {
              currentSchemaReporter?.stop();
            }
          };
        }
      });
    }
    exports2.ApolloServerPluginSchemaReporting = ApolloServerPluginSchemaReporting2;
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/inlineTrace/index.js
var require_inlineTrace = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/inlineTrace/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApolloServerPluginInlineTrace = void 0;
    var usage_reporting_protobuf_1 = require_protobuf();
    var traceTreeBuilder_js_1 = require_traceTreeBuilder();
    var internalPlugin_js_1 = require_internalPlugin();
    var schemaIsSubgraph_js_1 = require_schemaIsSubgraph();
    function ApolloServerPluginInlineTrace2(options = /* @__PURE__ */ Object.create(null)) {
      let enabled = options.__onlyIfSchemaIsSubgraph ? null : true;
      return (0, internalPlugin_js_1.internalPlugin)({
        __internal_plugin_id__: "InlineTrace",
        __is_disabled_plugin__: false,
        async serverWillStart({ schema, logger }) {
          if (enabled === null) {
            enabled = (0, schemaIsSubgraph_js_1.schemaIsSubgraph)(schema);
            if (enabled) {
              logger.info("Enabling inline tracing for this subgraph. To disable, use ApolloServerPluginInlineTraceDisabled.");
            }
          }
        },
        async requestDidStart({ request: { http }, metrics }) {
          if (!enabled) {
            return;
          }
          const treeBuilder = new traceTreeBuilder_js_1.TraceTreeBuilder({
            maskedBy: "ApolloServerPluginInlineTrace",
            sendErrors: options.includeErrors
          });
          if (http?.headers.get("apollo-federation-include-trace") !== "ftv1") {
            return;
          }
          if (metrics.captureTraces === false) {
            return;
          }
          metrics.captureTraces = true;
          treeBuilder.startTiming();
          return {
            async executionDidStart() {
              return {
                willResolveField({ info }) {
                  return treeBuilder.willResolveField(info);
                }
              };
            },
            async didEncounterErrors({ errors }) {
              treeBuilder.didEncounterErrors(errors);
            },
            async willSendResponse({ response }) {
              treeBuilder.stopTiming();
              if (response.body.kind === "incremental") {
                return;
              }
              if (metrics.queryPlanTrace) {
                treeBuilder.trace.queryPlan = metrics.queryPlanTrace;
              }
              const encodedUint8Array = usage_reporting_protobuf_1.Trace.encode(treeBuilder.trace).finish();
              const encodedBuffer = Buffer.from(encodedUint8Array, encodedUint8Array.byteOffset, encodedUint8Array.byteLength);
              const extensions = response.body.singleResult.extensions || (response.body.singleResult.extensions = /* @__PURE__ */ Object.create(null));
              if (typeof extensions.ftv1 !== "undefined") {
                throw new Error("The `ftv1` extension was already present.");
              }
              extensions.ftv1 = encodedBuffer.toString("base64");
            }
          };
        }
      });
    }
    exports2.ApolloServerPluginInlineTrace = ApolloServerPluginInlineTrace2;
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/landingPage/default/getEmbeddedHTML.js
var require_getEmbeddedHTML = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/landingPage/default/getEmbeddedHTML.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEmbeddedSandboxHTML = exports2.getEmbeddedExplorerHTML = void 0;
    function getConfigStringForHtml2(config2) {
      return JSON.stringify(config2).replace("<", "\\u003c").replace(">", "\\u003e").replace("&", "\\u0026").replace("'", "\\u0027");
    }
    var getEmbeddedExplorerHTML2 = (explorerCdnVersion, config2, apolloServerVersion, nonce) => {
      const productionLandingPageEmbedConfigOrDefault = {
        displayOptions: {},
        persistExplorerState: false,
        runTelemetry: true,
        ...typeof config2.embed === "boolean" ? {} : config2.embed
      };
      const embeddedExplorerParams = {
        graphRef: config2.graphRef,
        target: "#embeddableExplorer",
        initialState: {
          ..."document" in config2 || "headers" in config2 || "variables" in config2 ? {
            document: config2.document,
            headers: config2.headers,
            variables: config2.variables
          } : {},
          ..."collectionId" in config2 ? {
            collectionId: config2.collectionId,
            operationId: config2.operationId
          } : {},
          displayOptions: {
            ...productionLandingPageEmbedConfigOrDefault.displayOptions
          }
        },
        persistExplorerState: productionLandingPageEmbedConfigOrDefault.persistExplorerState,
        includeCookies: config2.includeCookies,
        runtime: apolloServerVersion,
        runTelemetry: productionLandingPageEmbedConfigOrDefault.runTelemetry,
        allowDynamicStyles: false
      };
      return `
<div class="fallback">
  <h1>Welcome to Apollo Server</h1>
  <p>Apollo Explorer cannot be loaded; it appears that you might be offline.</p>
</div>
<style nonce=${nonce}>
  iframe {
    background-color: white;
    height: 100%;
    width: 100%;
    border: none;
  }
  #embeddableExplorer {
    width: 100vw;
    height: 100vh;
    position: absolute;
    top: 0;
  }
</style>
<div id="embeddableExplorer"></div>
<script nonce="${nonce}" src="https://embeddable-explorer.cdn.apollographql.com/${encodeURIComponent(explorerCdnVersion)}/embeddable-explorer.umd.production.min.js?runtime=${encodeURIComponent(apolloServerVersion)}"></script>
<script nonce="${nonce}">
  var endpointUrl = window.location.href;
  var embeddedExplorerConfig = ${getConfigStringForHtml2(embeddedExplorerParams)};
  new window.EmbeddedExplorer({
    ...embeddedExplorerConfig,
    endpointUrl,
  });
</script>
`;
    };
    exports2.getEmbeddedExplorerHTML = getEmbeddedExplorerHTML2;
    var getEmbeddedSandboxHTML2 = (sandboxCdnVersion, config2, apolloServerVersion, nonce) => {
      const localDevelopmentEmbedConfigOrDefault = {
        runTelemetry: true,
        endpointIsEditable: false,
        initialState: {},
        ...typeof config2.embed === "boolean" ? {} : config2.embed ?? {}
      };
      const embeddedSandboxConfig = {
        target: "#embeddableSandbox",
        initialState: {
          ..."document" in config2 || "headers" in config2 || "variables" in config2 ? {
            document: config2.document,
            variables: config2.variables,
            headers: config2.headers
          } : {},
          ..."collectionId" in config2 ? {
            collectionId: config2.collectionId,
            operationId: config2.operationId
          } : {},
          includeCookies: config2.includeCookies,
          ...localDevelopmentEmbedConfigOrDefault.initialState
        },
        hideCookieToggle: false,
        endpointIsEditable: localDevelopmentEmbedConfigOrDefault.endpointIsEditable,
        runtime: apolloServerVersion,
        runTelemetry: localDevelopmentEmbedConfigOrDefault.runTelemetry,
        allowDynamicStyles: false
      };
      return `
<div class="fallback">
  <h1>Welcome to Apollo Server</h1>
  <p>Apollo Sandbox cannot be loaded; it appears that you might be offline.</p>
</div>
<style nonce=${nonce}>
  iframe {
    background-color: white;
    height: 100%;
    width: 100%;
    border: none;
  }
  #embeddableSandbox {
    width: 100vw;
    height: 100vh;
    position: absolute;
    top: 0;
  }
</style>
<div id="embeddableSandbox"></div>
<script nonce="${nonce}" src="https://embeddable-sandbox.cdn.apollographql.com/${encodeURIComponent(sandboxCdnVersion)}/embeddable-sandbox.umd.production.min.js?runtime=${encodeURIComponent(apolloServerVersion)}"></script>
<script nonce="${nonce}">
  var initialEndpoint = window.location.href;
  var embeddedSandboxConfig = ${getConfigStringForHtml2(embeddedSandboxConfig)};
  new window.EmbeddedSandbox(
    {
      ...embeddedSandboxConfig,
      initialEndpoint,
    }
  );
</script>
`;
    };
    exports2.getEmbeddedSandboxHTML = getEmbeddedSandboxHTML2;
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/landingPage/default/index.js
var require_default3 = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/landingPage/default/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION = exports2.DEFAULT_EMBEDDED_SANDBOX_VERSION = exports2.DEFAULT_EMBEDDED_EXPLORER_VERSION = exports2.ApolloServerPluginLandingPageProductionDefault = exports2.ApolloServerPluginLandingPageLocalDefault = void 0;
    var getEmbeddedHTML_js_1 = require_getEmbeddedHTML();
    var packageVersion_js_1 = require_packageVersion();
    var utils_createhash_1 = require_dist3();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports2));
    function ApolloServerPluginLandingPageLocalDefault2(options = {}) {
      const { version: version2, __internal_apolloStudioEnv__, ...rest } = {
        embed: true,
        ...options
      };
      return ApolloServerPluginLandingPageDefault2(version2, {
        isProd: false,
        apolloStudioEnv: __internal_apolloStudioEnv__,
        ...rest
      });
    }
    exports2.ApolloServerPluginLandingPageLocalDefault = ApolloServerPluginLandingPageLocalDefault2;
    function ApolloServerPluginLandingPageProductionDefault2(options = {}) {
      const { version: version2, __internal_apolloStudioEnv__, ...rest } = options;
      return ApolloServerPluginLandingPageDefault2(version2, {
        isProd: true,
        apolloStudioEnv: __internal_apolloStudioEnv__,
        ...rest
      });
    }
    exports2.ApolloServerPluginLandingPageProductionDefault = ApolloServerPluginLandingPageProductionDefault2;
    function encodeConfig2(config2) {
      return JSON.stringify(encodeURIComponent(JSON.stringify(config2)));
    }
    var getNonEmbeddedLandingPageHTML2 = (cdnVersion, config2, apolloServerVersion, nonce) => {
      const encodedConfig = encodeConfig2(config2);
      return `
 <div class="fallback">
  <h1>Welcome to Apollo Server</h1>
  <p>The full landing page cannot be loaded; it appears that you might be offline.</p>
</div>
<script nonce="${nonce}">window.landingPage = ${encodedConfig};</script>
<script nonce="${nonce}" src="https://apollo-server-landing-page.cdn.apollographql.com/${encodeURIComponent(cdnVersion)}/static/js/main.js?runtime=${apolloServerVersion}"></script>`;
    };
    exports2.DEFAULT_EMBEDDED_EXPLORER_VERSION = "v3";
    exports2.DEFAULT_EMBEDDED_SANDBOX_VERSION = "v2";
    exports2.DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION = "_latest";
    function ApolloServerPluginLandingPageDefault2(maybeVersion, config2) {
      const explorerVersion = maybeVersion ?? exports2.DEFAULT_EMBEDDED_EXPLORER_VERSION;
      const sandboxVersion = maybeVersion ?? exports2.DEFAULT_EMBEDDED_SANDBOX_VERSION;
      const apolloServerLandingPageVersion = maybeVersion ?? exports2.DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION;
      const apolloServerVersion = `@apollo/server@${packageVersion_js_1.packageVersion}`;
      const scriptSafeList = [
        "https://apollo-server-landing-page.cdn.apollographql.com",
        "https://embeddable-sandbox.cdn.apollographql.com",
        "https://embeddable-explorer.cdn.apollographql.com"
      ].join(" ");
      const styleSafeList = [
        "https://apollo-server-landing-page.cdn.apollographql.com",
        "https://embeddable-sandbox.cdn.apollographql.com",
        "https://embeddable-explorer.cdn.apollographql.com",
        "https://fonts.googleapis.com"
      ].join(" ");
      const iframeSafeList = [
        "https://explorer.embed.apollographql.com",
        "https://sandbox.embed.apollographql.com",
        "https://embed.apollo.local:3000"
      ].join(" ");
      return {
        __internal_installed_implicitly__: false,
        async serverWillStart(server) {
          if (config2.precomputedNonce) {
            server.logger.warn("The `precomputedNonce` landing page configuration option is deprecated. Removing this option is strictly an improvement to Apollo Server's landing page Content Security Policy (CSP) implementation for preventing XSS attacks.");
          }
          return {
            async renderLandingPage() {
              const encodedASLandingPageVersion = encodeURIComponent(apolloServerLandingPageVersion);
              async function html() {
                const nonce = config2.precomputedNonce ?? (0, utils_createhash_1.createHash)("sha256").update((0, uuid_1.v4)()).digest("hex");
                const scriptCsp = `script-src 'self' 'nonce-${nonce}' ${scriptSafeList}`;
                const styleCsp = `style-src 'nonce-${nonce}' ${styleSafeList}`;
                const imageCsp = `img-src https://apollo-server-landing-page.cdn.apollographql.com`;
                const manifestCsp = `manifest-src https://apollo-server-landing-page.cdn.apollographql.com`;
                const frameCsp = `frame-src ${iframeSafeList}`;
                return `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Security-Policy" content="${scriptCsp}; ${styleCsp}; ${imageCsp}; ${manifestCsp}; ${frameCsp}" />
    <link
      rel="icon"
      href="https://apollo-server-landing-page.cdn.apollographql.com/${encodedASLandingPageVersion}/assets/favicon.png"
    />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="preconnect" href="https://fonts.gstatic.com" />
    <link
      href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap"
      rel="stylesheet"
    />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Apollo server landing page" />
    <link
      rel="apple-touch-icon"
      href="https://apollo-server-landing-page.cdn.apollographql.com/${encodedASLandingPageVersion}/assets/favicon.png"
    />
    <link
      rel="manifest"
      href="https://apollo-server-landing-page.cdn.apollographql.com/${encodedASLandingPageVersion}/manifest.json"
    />
    <title>Apollo Server</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="react-root">
      <style nonce=${nonce}>
        body {
          margin: 0;
          overflow-x: hidden;
          overflow-y: hidden;
        }
        .fallback {
          opacity: 0;
          animation: fadeIn 1s 1s;
          animation-iteration-count: 1;
          animation-fill-mode: forwards;
          padding: 1em;
        }
        @keyframes fadeIn {
          0% {opacity:0;}
          100% {opacity:1; }
        }
      </style>
    ${config2.embed ? "graphRef" in config2 && config2.graphRef ? (0, getEmbeddedHTML_js_1.getEmbeddedExplorerHTML)(explorerVersion, config2, apolloServerVersion, nonce) : !("graphRef" in config2) ? (0, getEmbeddedHTML_js_1.getEmbeddedSandboxHTML)(sandboxVersion, config2, apolloServerVersion, nonce) : getNonEmbeddedLandingPageHTML2(apolloServerLandingPageVersion, config2, apolloServerVersion, nonce) : getNonEmbeddedLandingPageHTML2(apolloServerLandingPageVersion, config2, apolloServerVersion, nonce)}
    </div>
  </body>
</html>
          `;
              }
              return { html };
            }
          };
        }
      };
    }
  }
});

// node_modules/@apollo/server/dist/cjs/plugin/disableSuggestions/index.js
var require_disableSuggestions = __commonJS({
  "node_modules/@apollo/server/dist/cjs/plugin/disableSuggestions/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApolloServerPluginDisableSuggestions = void 0;
    var internalPlugin_js_1 = require_internalPlugin();
    function ApolloServerPluginDisableSuggestions2() {
      return (0, internalPlugin_js_1.internalPlugin)({
        __internal_plugin_id__: "DisableSuggestions",
        __is_disabled_plugin__: false,
        async requestDidStart() {
          return {
            async validationDidStart() {
              return async (validationErrors) => {
                validationErrors?.forEach((error) => {
                  error.message = error.message.replace(/ ?Did you mean(.+?)\?$/, "");
                });
              };
            }
          };
        }
      });
    }
    exports2.ApolloServerPluginDisableSuggestions = ApolloServerPluginDisableSuggestions2;
  }
});

// node_modules/@apollo/server/dist/cjs/ApolloServer.js
var require_ApolloServer = __commonJS({
  "node_modules/@apollo/server/dist/cjs/ApolloServer.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m2[k2];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule) return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k2 in mod2) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k2)) __createBinding2(result, mod2, k2);
      }
      __setModuleDefault2(result, mod2);
      return result;
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chooseContentTypeForSingleResultResponse = exports2.MEDIA_TYPES = exports2.isImplicitlyInstallablePlugin = exports2.internalExecuteOperation = exports2.ApolloServer = void 0;
    var utils_isnodelike_1 = require_dist();
    var utils_keyvaluecache_1 = require_dist2();
    var schema_1 = require_cjs3();
    var resolvable_js_1 = __importDefault2(require_resolvable());
    var graphql_1 = require_graphql2();
    var loglevel_1 = __importDefault2(require_loglevel());
    var negotiator_1 = __importDefault2(require_negotiator());
    var cachePolicy_js_1 = require_cachePolicy();
    var determineApolloConfig_js_1 = require_determineApolloConfig();
    var errorNormalize_js_1 = require_errorNormalize();
    var index_js_1 = require_errors2();
    var httpBatching_js_1 = require_httpBatching();
    var internalPlugin_js_1 = require_internalPlugin();
    var preventCsrf_js_1 = require_preventCsrf();
    var requestPipeline_js_1 = require_requestPipeline();
    var runHttpQuery_js_1 = require_runHttpQuery();
    var HeaderMap_js_1 = require_HeaderMap();
    var UnreachableCaseError_js_1 = require_UnreachableCaseError();
    var computeCoreSchemaHash_js_1 = require_computeCoreSchemaHash();
    var isDefined_js_1 = require_isDefined();
    var schemaManager_js_1 = require_schemaManager();
    var NoIntrospection2 = (context2) => ({
      Field(node) {
        if (node.name.value === "__schema" || node.name.value === "__type") {
          context2.reportError(new graphql_1.GraphQLError("GraphQL introspection is not allowed by Apollo Server, but the query contained __schema or __type. To enable introspection, pass introspection: true to ApolloServer in production", {
            nodes: [node],
            extensions: {
              validationErrorCode: index_js_1.ApolloServerValidationErrorCode.INTROSPECTION_DISABLED
            }
          }));
        }
      }
    });
    function defaultLogger2() {
      const loglevelLogger = loglevel_1.default.getLogger("apollo-server");
      loglevelLogger.setLevel(loglevel_1.default.levels.INFO);
      return loglevelLogger;
    }
    var ApolloServer2 = class _ApolloServer {
      constructor(config2) {
        const nodeEnv = config2.nodeEnv ?? process.env.NODE_ENV ?? "";
        this.logger = config2.logger ?? defaultLogger2();
        const apolloConfig = (0, determineApolloConfig_js_1.determineApolloConfig)(config2.apollo, this.logger);
        const isDev = nodeEnv !== "production";
        if (config2.cache && config2.cache !== "bounded" && utils_keyvaluecache_1.PrefixingKeyValueCache.prefixesAreUnnecessaryForIsolation(config2.cache)) {
          throw new Error("You cannot pass a cache returned from `PrefixingKeyValueCache.cacheDangerouslyDoesNotNeedPrefixesForIsolation`to `new ApolloServer({ cache })`, because Apollo Server may use it for multiple features whose cache keys must be distinct from each other.");
        }
        const state = config2.gateway ? {
          phase: "initialized",
          schemaManager: new schemaManager_js_1.SchemaManager({
            gateway: config2.gateway,
            apolloConfig,
            schemaDerivedDataProvider: (schema) => _ApolloServer.generateSchemaDerivedData(schema, config2.documentStore),
            logger: this.logger
          })
        } : {
          phase: "initialized",
          schemaManager: new schemaManager_js_1.SchemaManager({
            apiSchema: _ApolloServer.constructSchema(config2),
            schemaDerivedDataProvider: (schema) => _ApolloServer.generateSchemaDerivedData(schema, config2.documentStore),
            logger: this.logger
          })
        };
        const introspectionEnabled = config2.introspection ?? isDev;
        const hideSchemaDetailsFromClientErrors = config2.hideSchemaDetailsFromClientErrors ?? false;
        this.cache = config2.cache === void 0 || config2.cache === "bounded" ? new utils_keyvaluecache_1.InMemoryLRUCache() : config2.cache;
        this.internals = {
          formatError: config2.formatError,
          rootValue: config2.rootValue,
          validationRules: [
            ...config2.validationRules ?? [],
            ...introspectionEnabled ? [] : [NoIntrospection2]
          ],
          hideSchemaDetailsFromClientErrors,
          dangerouslyDisableValidation: config2.dangerouslyDisableValidation ?? false,
          fieldResolver: config2.fieldResolver,
          includeStacktraceInErrorResponses: config2.includeStacktraceInErrorResponses ?? (nodeEnv !== "production" && nodeEnv !== "test"),
          persistedQueries: config2.persistedQueries === false ? void 0 : {
            ...config2.persistedQueries,
            cache: new utils_keyvaluecache_1.PrefixingKeyValueCache(config2.persistedQueries?.cache ?? this.cache, requestPipeline_js_1.APQ_CACHE_PREFIX)
          },
          nodeEnv,
          allowBatchedHttpRequests: config2.allowBatchedHttpRequests ?? false,
          apolloConfig,
          plugins: config2.plugins ?? [],
          parseOptions: config2.parseOptions ?? {},
          state,
          stopOnTerminationSignals: config2.stopOnTerminationSignals,
          gatewayExecutor: null,
          csrfPreventionRequestHeaders: config2.csrfPrevention === true || config2.csrfPrevention === void 0 ? preventCsrf_js_1.recommendedCsrfPreventionRequestHeaders : config2.csrfPrevention === false ? null : config2.csrfPrevention.requestHeaders ?? preventCsrf_js_1.recommendedCsrfPreventionRequestHeaders,
          status400ForVariableCoercionErrors: config2.status400ForVariableCoercionErrors ?? false,
          __testing_incrementalExecutionResults: config2.__testing_incrementalExecutionResults,
          stringifyResult: config2.stringifyResult ?? runHttpQuery_js_1.prettyJSONStringify
        };
      }
      async start() {
        return await this._start(false);
      }
      startInBackgroundHandlingStartupErrorsByLoggingAndFailingAllRequests() {
        this._start(true).catch((e) => this.logStartupError(e));
      }
      async _start(startedInBackground) {
        if (this.internals.state.phase !== "initialized") {
          throw new Error(`You should only call 'start()' or 'startInBackgroundHandlingStartupErrorsByLoggingAndFailingAllRequests()' once on your ApolloServer.`);
        }
        const schemaManager = this.internals.state.schemaManager;
        const barrier = (0, resolvable_js_1.default)();
        this.internals.state = {
          phase: "starting",
          barrier,
          schemaManager,
          startedInBackground
        };
        try {
          await this.addDefaultPlugins();
          const toDispose = [];
          const executor = await schemaManager.start();
          if (executor) {
            this.internals.gatewayExecutor = executor;
          }
          toDispose.push(async () => {
            await schemaManager.stop();
          });
          const schemaDerivedData = schemaManager.getSchemaDerivedData();
          const service = {
            logger: this.logger,
            cache: this.cache,
            schema: schemaDerivedData.schema,
            apollo: this.internals.apolloConfig,
            startedInBackground
          };
          const taggedServerListeners = (await Promise.all(this.internals.plugins.map(async (plugin) => ({
            serverListener: plugin.serverWillStart && await plugin.serverWillStart(service),
            installedImplicitly: isImplicitlyInstallablePlugin2(plugin) && plugin.__internal_installed_implicitly__
          })))).filter((maybeTaggedServerListener) => typeof maybeTaggedServerListener.serverListener === "object");
          taggedServerListeners.forEach(({ serverListener: { schemaDidLoadOrUpdate } }) => {
            if (schemaDidLoadOrUpdate) {
              schemaManager.onSchemaLoadOrUpdate(schemaDidLoadOrUpdate);
            }
          });
          const serverWillStops = taggedServerListeners.map((l) => l.serverListener.serverWillStop).filter(isDefined_js_1.isDefined);
          if (serverWillStops.length) {
            toDispose.push(async () => {
              await Promise.all(serverWillStops.map((serverWillStop) => serverWillStop()));
            });
          }
          const drainServerCallbacks = taggedServerListeners.map((l) => l.serverListener.drainServer).filter(isDefined_js_1.isDefined);
          const drainServers = drainServerCallbacks.length ? async () => {
            await Promise.all(drainServerCallbacks.map((drainServer) => drainServer()));
          } : null;
          let taggedServerListenersWithRenderLandingPage = taggedServerListeners.filter((l) => l.serverListener.renderLandingPage);
          if (taggedServerListenersWithRenderLandingPage.length > 1) {
            taggedServerListenersWithRenderLandingPage = taggedServerListenersWithRenderLandingPage.filter((l) => !l.installedImplicitly);
          }
          let landingPage = null;
          if (taggedServerListenersWithRenderLandingPage.length > 1) {
            throw Error("Only one plugin can implement renderLandingPage.");
          } else if (taggedServerListenersWithRenderLandingPage.length) {
            landingPage = await taggedServerListenersWithRenderLandingPage[0].serverListener.renderLandingPage();
          }
          const toDisposeLast = this.maybeRegisterTerminationSignalHandlers(["SIGINT", "SIGTERM"], startedInBackground);
          this.internals.state = {
            phase: "started",
            schemaManager,
            drainServers,
            landingPage,
            toDispose,
            toDisposeLast
          };
        } catch (maybeError) {
          const error = (0, errorNormalize_js_1.ensureError)(maybeError);
          try {
            await Promise.all(this.internals.plugins.map(async (plugin) => plugin.startupDidFail?.({ error })));
          } catch (pluginError) {
            this.logger.error(`startupDidFail hook threw: ${pluginError}`);
          }
          this.internals.state = {
            phase: "failed to start",
            error
          };
          throw error;
        } finally {
          barrier.resolve();
        }
      }
      maybeRegisterTerminationSignalHandlers(signals, startedInBackground) {
        const toDisposeLast = [];
        if (this.internals.stopOnTerminationSignals === false || this.internals.stopOnTerminationSignals === void 0 && !(utils_isnodelike_1.isNodeLike && this.internals.nodeEnv !== "test" && !startedInBackground)) {
          return toDisposeLast;
        }
        let receivedSignal = false;
        const signalHandler = async (signal) => {
          if (receivedSignal) {
            return;
          }
          receivedSignal = true;
          try {
            await this.stop();
          } catch (e) {
            this.logger.error(`stop() threw during ${signal} shutdown`);
            this.logger.error(e);
            process.exit(1);
          }
          process.kill(process.pid, signal);
        };
        signals.forEach((signal) => {
          process.on(signal, signalHandler);
          toDisposeLast.push(async () => {
            process.removeListener(signal, signalHandler);
          });
        });
        return toDisposeLast;
      }
      async _ensureStarted() {
        while (true) {
          switch (this.internals.state.phase) {
            case "initialized":
              throw new Error("You need to call `server.start()` before using your Apollo Server.");
            case "starting":
              await this.internals.state.barrier;
              break;
            case "failed to start":
              this.logStartupError(this.internals.state.error);
              throw new Error("This data graph is missing a valid configuration. More details may be available in the server logs.");
            case "started":
            case "draining":
              return this.internals.state;
            case "stopping":
            case "stopped":
              this.logger.warn("A GraphQL operation was received during server shutdown. The operation will fail. Consider draining the HTTP server on shutdown; see https://go.apollo.dev/s/drain for details.");
              throw new Error(`Cannot execute GraphQL operations ${this.internals.state.phase === "stopping" ? "while the server is stopping" : "after the server has stopped"}.'`);
            default:
              throw new UnreachableCaseError_js_1.UnreachableCaseError(this.internals.state);
          }
        }
      }
      assertStarted(expressionForError) {
        if (this.internals.state.phase !== "started" && this.internals.state.phase !== "draining" && !(this.internals.state.phase === "starting" && this.internals.state.startedInBackground)) {
          throw new Error("You must `await server.start()` before calling `" + expressionForError + "`");
        }
      }
      logStartupError(err) {
        this.logger.error("An error occurred during Apollo Server startup. All GraphQL requests will now fail. The startup error was: " + (err?.message || err));
      }
      static constructSchema(config2) {
        if (config2.schema) {
          return config2.schema;
        }
        const { typeDefs, resolvers: resolvers2 } = config2;
        const augmentedTypeDefs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];
        return (0, schema_1.makeExecutableSchema)({
          typeDefs: augmentedTypeDefs,
          resolvers: resolvers2
        });
      }
      static generateSchemaDerivedData(schema, providedDocumentStore) {
        (0, graphql_1.assertValidSchema)(schema);
        return {
          schema,
          documentStore: providedDocumentStore === void 0 ? new utils_keyvaluecache_1.InMemoryLRUCache() : providedDocumentStore,
          documentStoreKeyPrefix: providedDocumentStore ? `${(0, computeCoreSchemaHash_js_1.computeCoreSchemaHash)((0, graphql_1.printSchema)(schema))}:` : ""
        };
      }
      async stop() {
        switch (this.internals.state.phase) {
          case "initialized":
          case "starting":
          case "failed to start":
            throw Error("apolloServer.stop() should only be called after `await apolloServer.start()` has succeeded");
          case "stopped":
            if (this.internals.state.stopError) {
              throw this.internals.state.stopError;
            }
            return;
          case "stopping":
          case "draining": {
            await this.internals.state.barrier;
            const state = this.internals.state;
            if (state.phase !== "stopped") {
              throw Error(`Surprising post-stopping state ${state.phase}`);
            }
            if (state.stopError) {
              throw state.stopError;
            }
            return;
          }
          case "started":
            break;
          default:
            throw new UnreachableCaseError_js_1.UnreachableCaseError(this.internals.state);
        }
        const barrier = (0, resolvable_js_1.default)();
        const { schemaManager, drainServers, landingPage, toDispose, toDisposeLast } = this.internals.state;
        this.internals.state = {
          phase: "draining",
          barrier,
          schemaManager,
          landingPage
        };
        try {
          await drainServers?.();
          this.internals.state = { phase: "stopping", barrier };
          await Promise.all([...toDispose].map((dispose) => dispose()));
          await Promise.all([...toDisposeLast].map((dispose) => dispose()));
        } catch (stopError) {
          this.internals.state = {
            phase: "stopped",
            stopError
          };
          barrier.resolve();
          throw stopError;
        }
        this.internals.state = { phase: "stopped", stopError: null };
      }
      async addDefaultPlugins() {
        const { plugins, apolloConfig, nodeEnv, hideSchemaDetailsFromClientErrors } = this.internals;
        const isDev = nodeEnv !== "production";
        const alreadyHavePluginWithInternalId = (id2) => plugins.some((p) => (0, internalPlugin_js_1.pluginIsInternal)(p) && p.__internal_plugin_id__ === id2);
        const pluginsByInternalID = /* @__PURE__ */ new Map();
        for (const p of plugins) {
          if ((0, internalPlugin_js_1.pluginIsInternal)(p)) {
            const id2 = p.__internal_plugin_id__;
            if (!pluginsByInternalID.has(id2)) {
              pluginsByInternalID.set(id2, {
                sawDisabled: false,
                sawNonDisabled: false
              });
            }
            const seen = pluginsByInternalID.get(id2);
            if (p.__is_disabled_plugin__) {
              seen.sawDisabled = true;
            } else {
              seen.sawNonDisabled = true;
            }
            if (seen.sawDisabled && seen.sawNonDisabled) {
              throw new Error(`You have tried to install both ApolloServerPlugin${id2} and ApolloServerPlugin${id2}Disabled in your server. Please choose whether or not you want to disable the feature and install the appropriate plugin for your use case.`);
            }
          }
        }
        {
          if (!alreadyHavePluginWithInternalId("CacheControl")) {
            const { ApolloServerPluginCacheControl: ApolloServerPluginCacheControl2 } = await Promise.resolve().then(() => __importStar2(require_cacheControl()));
            plugins.push(ApolloServerPluginCacheControl2());
          }
        }
        {
          const alreadyHavePlugin2 = alreadyHavePluginWithInternalId("UsageReporting");
          if (!alreadyHavePlugin2 && apolloConfig.key) {
            if (apolloConfig.graphRef) {
              const { ApolloServerPluginUsageReporting: ApolloServerPluginUsageReporting2 } = await Promise.resolve().then(() => __importStar2(require_usageReporting()));
              plugins.unshift(ApolloServerPluginUsageReporting2({
                __onlyIfSchemaIsNotSubgraph: true
              }));
            } else {
              this.logger.warn("You have specified an Apollo key but have not specified a graph ref; usage reporting is disabled. To enable usage reporting, set the `APOLLO_GRAPH_REF` environment variable to `your-graph-id@your-graph-variant`. To disable this warning, install `ApolloServerPluginUsageReportingDisabled`.");
            }
          }
        }
        {
          const alreadyHavePlugin2 = alreadyHavePluginWithInternalId("SchemaReporting");
          const enabledViaEnvVar = process.env.APOLLO_SCHEMA_REPORTING === "true";
          if (!alreadyHavePlugin2 && enabledViaEnvVar) {
            if (apolloConfig.key) {
              const { ApolloServerPluginSchemaReporting: ApolloServerPluginSchemaReporting2 } = await Promise.resolve().then(() => __importStar2(require_schemaReporting()));
              plugins.push(ApolloServerPluginSchemaReporting2());
            } else {
              throw new Error("You've enabled schema reporting by setting the APOLLO_SCHEMA_REPORTING environment variable to true, but you also need to provide your Apollo API key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})");
            }
          }
        }
        {
          const alreadyHavePlugin2 = alreadyHavePluginWithInternalId("InlineTrace");
          if (!alreadyHavePlugin2) {
            const { ApolloServerPluginInlineTrace: ApolloServerPluginInlineTrace2 } = await Promise.resolve().then(() => __importStar2(require_inlineTrace()));
            plugins.push(ApolloServerPluginInlineTrace2({ __onlyIfSchemaIsSubgraph: true }));
          }
        }
        const alreadyHavePlugin = alreadyHavePluginWithInternalId("LandingPageDisabled");
        if (!alreadyHavePlugin) {
          const { ApolloServerPluginLandingPageLocalDefault: ApolloServerPluginLandingPageLocalDefault2, ApolloServerPluginLandingPageProductionDefault: ApolloServerPluginLandingPageProductionDefault2 } = await Promise.resolve().then(() => __importStar2(require_default3()));
          const plugin = isDev ? ApolloServerPluginLandingPageLocalDefault2() : ApolloServerPluginLandingPageProductionDefault2();
          if (!isImplicitlyInstallablePlugin2(plugin)) {
            throw Error("default landing page plugin should be implicitly installable?");
          }
          plugin.__internal_installed_implicitly__ = true;
          plugins.push(plugin);
        }
        {
          const alreadyHavePlugin2 = alreadyHavePluginWithInternalId("DisableSuggestions");
          if (hideSchemaDetailsFromClientErrors && !alreadyHavePlugin2) {
            const { ApolloServerPluginDisableSuggestions: ApolloServerPluginDisableSuggestions2 } = await Promise.resolve().then(() => __importStar2(require_disableSuggestions()));
            plugins.push(ApolloServerPluginDisableSuggestions2());
          }
        }
      }
      addPlugin(plugin) {
        if (this.internals.state.phase !== "initialized") {
          throw new Error("Can't add plugins after the server has started");
        }
        this.internals.plugins.push(plugin);
      }
      async executeHTTPGraphQLRequest({ httpGraphQLRequest, context: context2 }) {
        try {
          let runningServerState;
          try {
            runningServerState = await this._ensureStarted();
          } catch (error) {
            return await this.errorResponse(error, httpGraphQLRequest);
          }
          if (runningServerState.landingPage && this.prefersHTML(httpGraphQLRequest)) {
            let renderedHtml;
            if (typeof runningServerState.landingPage.html === "string") {
              renderedHtml = runningServerState.landingPage.html;
            } else {
              try {
                renderedHtml = await runningServerState.landingPage.html();
              } catch (maybeError) {
                const error = (0, errorNormalize_js_1.ensureError)(maybeError);
                this.logger.error(`Landing page \`html\` function threw: ${error}`);
                return await this.errorResponse(error, httpGraphQLRequest);
              }
            }
            return {
              headers: new HeaderMap_js_1.HeaderMap([["content-type", "text/html"]]),
              body: {
                kind: "complete",
                string: renderedHtml
              }
            };
          }
          if (this.internals.csrfPreventionRequestHeaders) {
            (0, preventCsrf_js_1.preventCsrf)(httpGraphQLRequest.headers, this.internals.csrfPreventionRequestHeaders);
          }
          let contextValue;
          try {
            contextValue = await context2();
          } catch (maybeError) {
            const error = (0, errorNormalize_js_1.ensureError)(maybeError);
            try {
              await Promise.all(this.internals.plugins.map(async (plugin) => plugin.contextCreationDidFail?.({
                error
              })));
            } catch (pluginError) {
              this.logger.error(`contextCreationDidFail hook threw: ${pluginError}`);
            }
            return await this.errorResponse((0, errorNormalize_js_1.ensureGraphQLError)(error, "Context creation failed: "), httpGraphQLRequest);
          }
          return await (0, httpBatching_js_1.runPotentiallyBatchedHttpQuery)(this, httpGraphQLRequest, contextValue, runningServerState.schemaManager.getSchemaDerivedData(), this.internals);
        } catch (maybeError_) {
          const maybeError = maybeError_;
          if (maybeError instanceof graphql_1.GraphQLError && maybeError.extensions.code === index_js_1.ApolloServerErrorCode.BAD_REQUEST) {
            try {
              await Promise.all(this.internals.plugins.map(async (plugin) => plugin.invalidRequestWasReceived?.({ error: maybeError })));
            } catch (pluginError) {
              this.logger.error(`invalidRequestWasReceived hook threw: ${pluginError}`);
            }
          }
          return await this.errorResponse(maybeError, httpGraphQLRequest);
        }
      }
      async errorResponse(error, requestHead) {
        const { formattedErrors, httpFromErrors } = (0, errorNormalize_js_1.normalizeAndFormatErrors)([error], {
          includeStacktraceInErrorResponses: this.internals.includeStacktraceInErrorResponses,
          formatError: this.internals.formatError
        });
        return {
          status: httpFromErrors.status ?? 500,
          headers: new HeaderMap_js_1.HeaderMap([
            ...httpFromErrors.headers,
            [
              "content-type",
              chooseContentTypeForSingleResultResponse2(requestHead) ?? exports2.MEDIA_TYPES.APPLICATION_JSON
            ]
          ]),
          body: {
            kind: "complete",
            string: await this.internals.stringifyResult({
              errors: formattedErrors
            })
          }
        };
      }
      prefersHTML(request) {
        const acceptHeader = request.headers.get("accept");
        return request.method === "GET" && !!acceptHeader && new negotiator_1.default({
          headers: { accept: acceptHeader }
        }).mediaType([
          exports2.MEDIA_TYPES.APPLICATION_JSON,
          exports2.MEDIA_TYPES.APPLICATION_GRAPHQL_RESPONSE_JSON,
          exports2.MEDIA_TYPES.MULTIPART_MIXED_EXPERIMENTAL,
          exports2.MEDIA_TYPES.MULTIPART_MIXED_NO_DEFER_SPEC,
          exports2.MEDIA_TYPES.TEXT_HTML
        ]) === exports2.MEDIA_TYPES.TEXT_HTML;
      }
      async executeOperation(request, options = {}) {
        if (this.internals.state.phase === "initialized") {
          await this.start();
        }
        const schemaDerivedData = (await this._ensureStarted()).schemaManager.getSchemaDerivedData();
        const graphQLRequest = {
          ...request,
          query: request.query && typeof request.query !== "string" ? (0, graphql_1.print)(request.query) : request.query
        };
        const response = await internalExecuteOperation2({
          server: this,
          graphQLRequest,
          internals: this.internals,
          schemaDerivedData,
          sharedResponseHTTPGraphQLHead: null
        }, options);
        return response;
      }
    };
    exports2.ApolloServer = ApolloServer2;
    async function internalExecuteOperation2({ server, graphQLRequest, internals, schemaDerivedData, sharedResponseHTTPGraphQLHead }, options) {
      const requestContext = {
        logger: server.logger,
        cache: server.cache,
        schema: schemaDerivedData.schema,
        request: graphQLRequest,
        response: {
          http: sharedResponseHTTPGraphQLHead ?? (0, runHttpQuery_js_1.newHTTPGraphQLHead)()
        },
        contextValue: cloneObject2(options?.contextValue ?? {}),
        metrics: {},
        overallCachePolicy: (0, cachePolicy_js_1.newCachePolicy)(),
        requestIsBatched: sharedResponseHTTPGraphQLHead !== null
      };
      try {
        return await (0, requestPipeline_js_1.processGraphQLRequest)(schemaDerivedData, server, internals, requestContext);
      } catch (maybeError) {
        const error = (0, errorNormalize_js_1.ensureError)(maybeError);
        await Promise.all(internals.plugins.map(async (plugin) => plugin.unexpectedErrorProcessingRequest?.({
          requestContext,
          error
        })));
        server.logger.error(`Unexpected error processing request: ${error}`);
        throw new Error("Internal server error");
      }
    }
    exports2.internalExecuteOperation = internalExecuteOperation2;
    function isImplicitlyInstallablePlugin2(p) {
      return "__internal_installed_implicitly__" in p;
    }
    exports2.isImplicitlyInstallablePlugin = isImplicitlyInstallablePlugin2;
    exports2.MEDIA_TYPES = {
      APPLICATION_JSON: "application/json; charset=utf-8",
      APPLICATION_JSON_GRAPHQL_CALLBACK: "application/json; callbackSpec=1.0; charset=utf-8",
      APPLICATION_GRAPHQL_RESPONSE_JSON: "application/graphql-response+json; charset=utf-8",
      MULTIPART_MIXED_NO_DEFER_SPEC: "multipart/mixed",
      MULTIPART_MIXED_EXPERIMENTAL: "multipart/mixed; deferSpec=20220824",
      TEXT_HTML: "text/html"
    };
    function chooseContentTypeForSingleResultResponse2(head) {
      const acceptHeader = head.headers.get("accept");
      if (!acceptHeader) {
        return exports2.MEDIA_TYPES.APPLICATION_JSON;
      } else {
        const preferred = new negotiator_1.default({
          headers: { accept: head.headers.get("accept") }
        }).mediaType([
          exports2.MEDIA_TYPES.APPLICATION_JSON,
          exports2.MEDIA_TYPES.APPLICATION_GRAPHQL_RESPONSE_JSON,
          exports2.MEDIA_TYPES.APPLICATION_JSON_GRAPHQL_CALLBACK
        ]);
        if (preferred) {
          return preferred;
        } else {
          return null;
        }
      }
    }
    exports2.chooseContentTypeForSingleResultResponse = chooseContentTypeForSingleResultResponse2;
    function cloneObject2(object) {
      return Object.assign(Object.create(Object.getPrototypeOf(object)), object);
    }
  }
});

// node_modules/@apollo/server/dist/cjs/externalTypes/index.js
var require_externalTypes = __commonJS({
  "node_modules/@apollo/server/dist/cjs/externalTypes/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@apollo/server/dist/cjs/index.js
var require_cjs4 = __commonJS({
  "node_modules/@apollo/server/dist/cjs/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m2[k2];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m2, exports3) {
      for (var p in m2) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m2, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HeaderMap = exports2.ApolloServer = void 0;
    var ApolloServer_js_1 = require_ApolloServer();
    Object.defineProperty(exports2, "ApolloServer", { enumerable: true, get: function() {
      return ApolloServer_js_1.ApolloServer;
    } });
    var HeaderMap_js_1 = require_HeaderMap();
    Object.defineProperty(exports2, "HeaderMap", { enumerable: true, get: function() {
      return HeaderMap_js_1.HeaderMap;
    } });
    __exportStar2(require_externalTypes(), exports2);
  }
});

// node_modules/@as-integrations/next/dist/lib/getHeaders.js
var require_getHeaders = __commonJS({
  "node_modules/@as-integrations/next/dist/lib/getHeaders.js"(exports2) {
    "use strict";
    var __values2 = exports2 && exports2.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m2 = s && o[s], i = 0;
      if (m2) return m2.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read2 = exports2 && exports2.__read || function(o, n) {
      var m2 = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m2) return o;
      var i = m2.call(o), r, ar2 = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar2.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m2 = i["return"])) m2.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar2;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHeaders = void 0;
    var isNextApiRequest_1 = require_isNextApiRequest();
    var server_1 = require_cjs4();
    var getHeaders = function(req) {
      var e_1, _a2;
      var headers = new server_1.HeaderMap();
      if ((0, isNextApiRequest_1.isNextApiRequest)(req)) {
        try {
          for (var _b = __values2(Object.entries(req.headers)), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
            var _d2 = __read2(_c2.value, 2), key = _d2[0], value = _d2[1];
            if (typeof value === "string") {
              headers.set(key, value);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a2 = _b.return)) _a2.call(_b);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      } else {
        req.headers.forEach(function(value2, key2) {
          headers.set(key2, value2);
        });
      }
      return headers;
    };
    exports2.getHeaders = getHeaders;
  }
});

// node_modules/@as-integrations/next/dist/startServerAndCreateNextHandler.js
var require_startServerAndCreateNextHandler = __commonJS({
  "node_modules/@as-integrations/next/dist/startServerAndCreateNextHandler.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator2 = exports2 && exports2.__generator || function(thisArg, body) {
      var _5 = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y2, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
      return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op2) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op2[0] && (_5 = 0)), _5) try {
          if (f = 1, y2 && (t = op2[0] & 2 ? y2["return"] : op2[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op2[1])).done) return t;
          if (y2 = 0, t) op2 = [op2[0] & 2, t.value];
          switch (op2[0]) {
            case 0:
            case 1:
              t = op2;
              break;
            case 4:
              _5.label++;
              return { value: op2[1], done: false };
            case 5:
              _5.label++;
              y2 = op2[1];
              op2 = [0];
              continue;
            case 7:
              op2 = _5.ops.pop();
              _5.trys.pop();
              continue;
            default:
              if (!(t = _5.trys, t = t.length > 0 && t[t.length - 1]) && (op2[0] === 6 || op2[0] === 2)) {
                _5 = 0;
                continue;
              }
              if (op2[0] === 3 && (!t || op2[1] > t[0] && op2[1] < t[3])) {
                _5.label = op2[1];
                break;
              }
              if (op2[0] === 6 && _5.label < t[1]) {
                _5.label = t[1];
                t = op2;
                break;
              }
              if (t && _5.label < t[2]) {
                _5.label = t[2];
                _5.ops.push(op2);
                break;
              }
              if (t[2]) _5.ops.pop();
              _5.trys.pop();
              continue;
          }
          op2 = body.call(thisArg, _5);
        } catch (e) {
          op2 = [6, e];
          y2 = 0;
        } finally {
          f = t = 0;
        }
        if (op2[0] & 5) throw op2[1];
        return { value: op2[0] ? op2[1] : void 0, done: true };
      }
    };
    var __values2 = exports2 && exports2.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m2 = s && o[s], i = 0;
      if (m2) return m2.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read2 = exports2 && exports2.__read || function(o, n) {
      var m2 = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m2) return o;
      var i = m2.call(o), r, ar2 = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar2.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m2 = i["return"])) m2.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar2;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.startServerAndCreateNextHandler = startServerAndCreateNextHandler2;
    var getBody_1 = require_getBody();
    var getHeaders_1 = require_getHeaders();
    var isNextApiRequest_1 = require_isNextApiRequest();
    var stream_1 = require("stream");
    var url_1 = require("url");
    var defaultContext = function() {
      return __awaiter2(void 0, void 0, void 0, function() {
        return __generator2(this, function(_a2) {
          return [2, {}];
        });
      });
    };
    function startServerAndCreateNextHandler2(server, options) {
      server.startInBackgroundHandlingStartupErrorsByLoggingAndFailingAllRequests();
      var contextFunction = (options === null || options === void 0 ? void 0 : options.context) || defaultContext;
      function handler(req, res) {
        return __awaiter2(this, void 0, void 0, function() {
          var httpGraphQLResponse, _a2, _b, _c2, _d2, _e2, key, value, headers, _f, _g, _h, key, value;
          var _j, _k, e_1, _l2, e_2, _m;
          return __generator2(this, function(_o2) {
            switch (_o2.label) {
              case 0:
                _b = (_a2 = server).executeHTTPGraphQLRequest;
                _j = {
                  context: function() {
                    return contextFunction(req, res);
                  }
                };
                _k = {};
                return [4, (0, getBody_1.getBody)(req)];
              case 1:
                return [4, _b.apply(_a2, [(_j.httpGraphQLRequest = (_k.body = _o2.sent(), _k.headers = (0, getHeaders_1.getHeaders)(req), _k.method = req.method || "POST", _k.search = req.url ? (0, url_1.parse)(req.url).search || "" : "", _k), _j)])];
              case 2:
                httpGraphQLResponse = _o2.sent();
                if ((0, isNextApiRequest_1.isNextApiRequest)(req)) {
                  if (!res) {
                    throw new Error("API Routes require you to pass both the req and res object.");
                  }
                  try {
                    for (_c2 = __values2(httpGraphQLResponse.headers), _d2 = _c2.next(); !_d2.done; _d2 = _c2.next()) {
                      _e2 = __read2(_d2.value, 2), key = _e2[0], value = _e2[1];
                      res.setHeader(key, value);
                    }
                  } catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                  } finally {
                    try {
                      if (_d2 && !_d2.done && (_l2 = _c2.return)) _l2.call(_c2);
                    } finally {
                      if (e_1) throw e_1.error;
                    }
                  }
                  res.statusCode = httpGraphQLResponse.status || 200;
                  if (httpGraphQLResponse.body.kind === "complete") {
                    res.send(httpGraphQLResponse.body.string);
                    res.end();
                  } else {
                    res.send(stream_1.Readable.from(httpGraphQLResponse.body.asyncIterator));
                  }
                  return [
                    2
                    /*return*/
                  ];
                }
                headers = {};
                try {
                  for (_f = __values2(httpGraphQLResponse.headers), _g = _f.next(); !_g.done; _g = _f.next()) {
                    _h = __read2(_g.value, 2), key = _h[0], value = _h[1];
                    headers[key] = value;
                  }
                } catch (e_2_1) {
                  e_2 = { error: e_2_1 };
                } finally {
                  try {
                    if (_g && !_g.done && (_m = _f.return)) _m.call(_f);
                  } finally {
                    if (e_2) throw e_2.error;
                  }
                }
                return [2, new Response(httpGraphQLResponse.body.kind === "complete" ? httpGraphQLResponse.body.string : new ReadableStream({
                  pull: function(controller) {
                    return __awaiter2(this, void 0, void 0, function() {
                      var _a3, value2, done;
                      return __generator2(this, function(_b2) {
                        switch (_b2.label) {
                          case 0:
                            if (!(httpGraphQLResponse.body.kind === "chunked")) return [3, 2];
                            return [4, httpGraphQLResponse.body.asyncIterator.next()];
                          case 1:
                            _a3 = _b2.sent(), value2 = _a3.value, done = _a3.done;
                            if (done) {
                              controller.close();
                            } else {
                              controller.enqueue(value2);
                            }
                            _b2.label = 2;
                          case 2:
                            return [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  }
                }), { headers, status: httpGraphQLResponse.status || 200 })];
            }
          });
        });
      }
      return handler;
    }
  }
});

// node_modules/@as-integrations/next/dist/index.js
var require_dist10 = __commonJS({
  "node_modules/@as-integrations/next/dist/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o[k22] = m2[k2];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m2, exports3) {
      for (var p in m2) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m2, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_startServerAndCreateNextHandler(), exports2);
  }
});

// serverless.ts
var serverless_exports = {};
__export(serverless_exports, {
  default: () => serverless_default
});
module.exports = __toCommonJS(serverless_exports);

// prisma/prisma-client.ts
var import_client = __toESM(require_default2());
var import_sql_formatter = __toESM(require_sqlFormatter());
var highlightSql = require_igniculus()();
var parseSqlParams = (str) => {
  if (str.length === 0) {
    return [];
  }
  const result = str.slice(1, -1).split(",");
  return ["", ...result];
};
var createPrismaClient = (queryLoggingEnabled) => {
  const prisma2 = new import_client.PrismaClient({
    log: [
      ...queryLoggingEnabled ? [{ emit: "event", level: "query" }] : [],
      "info",
      "warn",
      "error"
    ]
  });
  if (queryLoggingEnabled) {
    prisma2.$on("query", (e) => {
      console.info(
        `${e.duration}ms`,
        highlightSql(
          (0, import_sql_formatter.format)(e.query, {
            language: "postgresql",
            uppercase: true,
            params: parseSqlParams(e.params)
          })
        ),
        "\n"
      );
    });
  }
  return prisma2;
};

// utils/date-iso.ts
var DateFns = __toESM(require_date_fns());
var _ = __toESM(require_lodash());
var import_lodash = __toESM(require_lodash());
var import_util = require("util");
var VALID_REGEX = /^(\d{4})-(\d{2})-(\d{2})$/;
function validateAndParse(date) {
  if (process.env.NODE_ENV !== "production" && !VALID_REGEX.test(date)) {
    throw new Error(`Invalid IsoDate ${date}`);
  }
  return DateFns.parseISO(date);
}
var parseToDate = validateAndParse;
var differenceInDays = (a, b2) => DateFns.differenceInCalendarDays(validateAndParse(a), validateAndParse(b2));
var differenceInMonths2 = (a, b2) => DateFns.differenceInMonths(validateAndParse(a), validateAndParse(b2));
var lastDayOfMonth2 = (a) => toIsoDate(DateFns.lastDayOfMonth(validateAndParse(a)));
var today = () => toIsoDate(/* @__PURE__ */ new Date());
var toDate = (x2) => (0, import_util.isString)(x2) ? DateFns.parseISO(x2) : x2;
var toIsoDate = (x2) => DateFns.format(toDate(x2), "yyyy-MM-dd");
var isValid2 = (x2) => DateFns.isValid(toDate(x2));
var getYearFromIsoDate = (x2) => DateFns.format(validateAndParse(x2), "yyyy");
var getMonthFromIsoDate = (x2) => DateFns.format(validateAndParse(x2), "M");
var get0BasedMonthFromIsoDate = (x2) => DateFns.getMonth(validateAndParse(x2));
function getWeekDayFromIsoDate(date) {
  return DateFns.getDay(validateAndParse(date));
}
function addMonths2(date, numMonths) {
  return toIsoDate(DateFns.addMonths(validateAndParse(date), numMonths));
}
function addDays2(date, numDays) {
  return toIsoDate(DateFns.addDays(validateAndParse(date), numDays));
}
var isoStringToIsoDate = (x2) => {
  if (typeof x2 === "string") {
    const d = x2.substr(0, 10);
    if (isValid2(d)) {
      return d;
    }
  } else {
    const d = x2.toISOString().substr(0, 10);
    if (isValid2(d)) {
      return d;
    }
  }
  throw new Error(`Cannot convert ${x2} to DateIso!`);
};
var getWeekGroups = (dateRange) => {
  const year = Number.parseInt(getYearFromIsoDate(dateRange.start));
  const month = getMonthFromIsoDate(dateRange.start);
  const date = new Date(year, Number.parseInt(month) - 1, 1);
  const weekCount = DateFns.getWeeksInMonth(date);
  const last = DateFns.lastDayOfMonth(date);
  return _.compact(
    _.range(0, weekCount).map((weekNumber) => {
      const start = DateFns.addWeeks(date, weekNumber);
      const end = DateFns.addDays(DateFns.addWeeks(date, weekNumber + 1), -1);
      if (DateFns.isAfter(start, last)) {
        return;
      }
      return {
        groupIndex: weekNumber + 1,
        start: toIsoDate(start),
        end: DateFns.isAfter(end, last) ? toIsoDate(last) : toIsoDate(end)
      };
    })
  );
};
var getWeekDayGroups = (dateRange) => {
  return _.compact(
    _.range(0, 7).map((weekDayNumber) => {
      const date = addDays2(dateRange.start, weekDayNumber);
      return {
        groupIndex: weekDayNumber + 1,
        start: toIsoDate(date),
        end: toIsoDate(date)
      };
    })
  );
};
var getFirstDayOfFirstMonth = (date) => toIsoDate(`${date.substr(0, 7)}-01`);
var getMonthGroups = (dateRange) => {
  const firstDayOfFirstMonth = toIsoDate(`${dateRange.start.substr(0, 7)}-01`);
  const startMonth = get0BasedMonthFromIsoDate(dateRange.start);
  const endMonth = get0BasedMonthFromIsoDate(dateRange.end);
  const monthCount = endMonth - startMonth + 1;
  return _.compact(
    _.range(0, monthCount).map((monthNumber) => {
      const start = addMonths2(firstDayOfFirstMonth, monthNumber);
      const end = lastDayOfMonth2(start);
      return {
        groupIndex: monthNumber + 1,
        start,
        end: toIsoDate(end)
      };
    })
  );
};
var getYearGroups = (dateRange) => {
  const startYear = Number.parseInt(getYearFromIsoDate(dateRange.start));
  const endYear = Number.parseInt(getYearFromIsoDate(dateRange.end));
  const yearCount = endYear - startYear + 1;
  return _.compact(
    _.range(0, yearCount).map((yearNumber) => {
      const start = `${startYear + yearNumber}-01-01`;
      const end = `${startYear + yearNumber}-12-31`;
      return {
        groupIndex: yearNumber + 1,
        start: toIsoDate(start),
        end: toIsoDate(end)
      };
    })
  );
};
function getPreviousDateRange(dateRange) {
  const firstDoM = getFirstDayOfFirstMonth(dateRange.start);
  const lastDoM = lastDayOfMonth2(dateRange.start);
  const isMonth = firstDoM === dateRange.start && lastDoM === dateRange.end;
  const isWeek = getWeekDayFromIsoDate(dateRange.start) === 0 && getWeekDayFromIsoDate(dateRange.end) === 6;
  if (isMonth) {
    const start2 = addMonths2(firstDoM, -1);
    const end2 = lastDayOfMonth2(addMonths2(firstDoM, -1));
    return { start: start2, end: end2 };
  }
  if (isWeek) {
    const start2 = addDays2(dateRange.start, -7);
    const end2 = addDays2(dateRange.end, -7);
    return { start: start2, end: end2 };
  }
  const dayDifference = differenceInDays(
    toIsoDate(dateRange.end),
    toIsoDate(dateRange.start)
  );
  const start = addDays2(toIsoDate(dateRange.start), -dayDifference);
  const end = addDays2(toIsoDate(dateRange.start), -1);
  return { start, end };
}

// utils/date-time-iso.ts
var DateFns2 = __toESM(require_date_fns());
function toIsoDateTime(dateTime) {
  if (typeof dateTime === "string" && !/([+-]\d{2})|([Z]$)/.test(dateTime)) {
    console.warn(`\u2622\uFE0F You called toIsoDateTime with a date string that will be interpreted as local time. This value will be converted to UTC.
    You _probably_ didn\u2019t mean to do this.
    If you\u2019re writing a test that involves dates, e.g. "2012-01-01", you probably want to use "2012-01-01Z or "2012:01-01:{UTC OFFSET}"
    If you\u2019re writing a test that involves times, e.g. "2012-01-01T12-59-59", you probably want to use "2012-01-01T12:59:59Z" or "2012-01-01T12:59:59:{UTC OFFSET}"`);
  }
  dateTime = typeof dateTime === "string" ? DateFns2.parseISO(dateTime) : dateTime;
  return dateTime.toISOString();
}

// utils/data-loaders.ts
var import_dataloader = __toESM(require_dataloader());
var import_json_stable_stringify = __toESM(require_json_stable_stringify());
var _2 = __toESM(require_lodash());
var cacheKeyFn = import_json_stable_stringify.default;
var buildModel = () => {
  const model = {
    Entity: {
      findById: new import_dataloader.default(
        async (options) => {
          const results = await prisma.entity.findMany({
            where: { id: { in: [...options] } }
          });
          const keyed = _2.keyBy(results, (r) => r.id);
          return options.map((option) => keyed[option]);
        },
        { cacheKeyFn }
      ),
      findFirst: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.entity.findFirst(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      ),
      findMany: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.entity.findMany(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      )
    },
    Institution: {
      findById: new import_dataloader.default(
        async (options) => {
          const results = await prisma.institution.findMany({
            where: { id: { in: [...options] } }
          });
          const keyed = _2.keyBy(results, (r) => r.id);
          return options.map((option) => keyed[option]);
        },
        { cacheKeyFn }
      ),
      findFirst: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.institution.findFirst(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      ),
      findMany: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.institution.findMany(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      )
    },
    Vendor: {
      findById: new import_dataloader.default(
        async (options) => {
          const results = await prisma.vendor.findMany({
            where: { id: { in: [...options] } }
          });
          const keyed = _2.keyBy(results, (r) => r.id);
          return options.map((option) => keyed[option]);
        },
        { cacheKeyFn }
      ),
      findFirst: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.vendor.findFirst(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      ),
      findMany: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.vendor.findMany(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      )
    },
    Category: {
      findById: new import_dataloader.default(
        async (options) => {
          const results = await prisma.category.findMany({
            where: { id: { in: [...options] } }
          });
          const keyed = _2.keyBy(results, (r) => r.id);
          return options.map((option) => keyed[option]);
        },
        { cacheKeyFn }
      ),
      findFirst: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.category.findFirst(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      ),
      findMany: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.category.findMany(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      )
    },
    Account: {
      findById: new import_dataloader.default(
        async (options) => {
          const results = await prisma.account.findMany({
            where: { id: { in: [...options] } }
          });
          const keyed = _2.keyBy(results, (r) => r.id);
          return options.map((option) => keyed[option]);
        },
        { cacheKeyFn }
      ),
      findFirst: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.account.findFirst(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      ),
      findMany: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.account.findMany(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      )
    },
    Transaction: {
      findById: new import_dataloader.default(
        async (options) => {
          const results = await prisma.transaction.findMany({
            where: { id: { in: [...options] } }
          });
          const keyed = _2.keyBy(results, (r) => r.id);
          return options.map((option) => keyed[option]);
        },
        { cacheKeyFn }
      ),
      findFirst: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.transaction.findFirst(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      ),
      findMany: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.transaction.findMany(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      )
    },
    Budget: {
      findById: new import_dataloader.default(
        async (options) => {
          const results = await prisma.budget.findMany({
            where: { id: { in: [...options] } }
          });
          const keyed = _2.keyBy(results, (r) => r.id);
          return options.map((option) => keyed[option]);
        },
        { cacheKeyFn }
      ),
      findFirst: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.budget.findFirst(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      ),
      findMany: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.budget.findMany(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      )
    },
    BudgetAmount: {
      findById: new import_dataloader.default(
        async (options) => {
          const results = await prisma.budgetAmount.findMany({
            where: { id: { in: [...options] } }
          });
          const keyed = _2.keyBy(results, (r) => r.id);
          return options.map((option) => keyed[option]);
        },
        { cacheKeyFn }
      ),
      findFirst: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.budgetAmount.findFirst(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      ),
      findMany: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.budgetAmount.findMany(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      )
    },
    Property: {
      findById: new import_dataloader.default(
        async (options) => {
          const results = await prisma.property.findMany({
            where: { id: { in: [...options] } }
          });
          const keyed = _2.keyBy(results, (r) => r.id);
          return options.map((option) => keyed[option]);
        },
        { cacheKeyFn }
      ),
      findFirst: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.property.findFirst(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      ),
      findMany: new import_dataloader.default(
        async (options) => {
          const results = await Promise.all(
            options.map((option) => {
              return prisma.property.findMany(option);
            })
          );
          return results;
        },
        { cacheKeyFn }
      )
    },
    RefreshLog: {
      lastRefreshed: new import_dataloader.default(async (requests) => {
        const results = await prisma.refreshLog.aggregate({
          _max: {
            refreshedAt: true
          }
        });
        return requests.map((option) => {
          const lastRefreshed = results._max.refreshedAt;
          return lastRefreshed ? toIsoDateTime(lastRefreshed) : null;
        });
      }),
      accountLastRefreshed: new import_dataloader.default(async (options) => {
        const results = await prisma.refreshLog.groupBy({
          by: ["accountId"],
          _max: {
            refreshedAt: true
          },
          where: { accountId: { in: [...options] } }
        });
        const keyed = _2.keyBy(results, (r) => r.accountId);
        return options.map((option) => {
          const lastRefreshed = keyed[option]?._max.refreshedAt;
          return lastRefreshed ? toIsoDateTime(lastRefreshed) : null;
        });
      })
    }
  };
  return model;
};

// resolvers/helpers.ts
var _3 = __toESM(require_lodash());
var asId = (idObj) => {
  return idObj.id;
};
var asIds = (idObjs) => {
  return idObjs.map((obj) => obj.id);
};
var scopeKey = (scope, extra) => {
  const prefix = `${_3.orderBy(Object.keys(scope)).filter((key) => !!scope[key]).map((key) => `${key}("${JSON.stringify(scope[key])}")`).join(".")}`;
  return `${prefix}${extra ? `${prefix ? "." : ""}${extra}` : ""}`;
};
var narrowScope = (existingScope, newScope = {}) => {
  return {
    ...existingScope,
    ...newScope
  };
};
function withScope(values, scope, id2) {
  if (Array.isArray(values)) {
    return values.map((value) => ({
      ...value,
      scope: { ...scope, ...id2(value) }
    }));
  }
  if (!values.id) {
    return null;
  }
  return {
    ...values,
    scope: { ...scope, ...id2(values.id) }
  };
}
var whereDateRange = (dateRange) => {
  if (dateRange?.start && dateRange?.end) {
    return {
      AND: [
        { date: { gte: parseToDate(toIsoDate(dateRange.start)) } },
        { date: { lte: parseToDate(toIsoDate(dateRange.end)) } }
      ]
    };
  }
  if (dateRange?.start) {
    return { date: { gte: parseToDate(toIsoDate(dateRange.start)) } };
  }
  if (dateRange?.end) {
    return { date: { lte: parseToDate(toIsoDate(dateRange.end)) } };
  }
  return {};
};

// utils/core.ts
var required = (value) => {
  if (value === null || value === void 0) {
    throw new Error("Value must be defined");
  }
  return value;
};
var optional = (value) => {
  if (value === null) {
    return void 0;
  }
  return value;
};

// utils/transaction-utils.ts
var _4 = __toESM(require_lodash());

// node_modules/uuid/dist/esm-node/rng.js
var import_crypto = __toESM(require("crypto"));
var rnds8Pool = new Uint8Array(256);
var poolPtr = rnds8Pool.length;
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}

// node_modules/uuid/dist/esm-node/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-node/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).substr(1));
}
function stringify2(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var stringify_default = stringify2;

// node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default = v4;

// utils/transaction-utils.ts
var getDailyBalance = async (context2, scope, args) => {
  const daysBetween = differenceInDays(
    toIsoDate(args.dateRange.end),
    toIsoDate(args.dateRange.start)
  );
  const datesBetween = _4.range(0, daysBetween + 1).map(
    (index) => addDays2(toIsoDate(args.dateRange.start), index)
  );
  const dailyBalance = await Promise.all(
    datesBetween.map(async (date) => {
      const accountBalances = await Promise.all(
        args.accountIds.map(async (accountId) => {
          const accountType = required(
            await context2.model.Account.findById.load(accountId)
          )?.accountType;
          if (accountType === "Credit") {
            const balance = await context2.prisma.balance.findFirst({
              select: { balance: true },
              where: {
                addedAt: { lte: parseToDate(date) },
                accountId
              },
              orderBy: [{ addedAt: "desc" }],
              take: 1
            });
            return balance?.balance.toNumber() || 0;
          }
          const transaction = await context2.model.Transaction.findFirst.load({
            select: { availableBalance: true },
            where: {
              date: { lte: parseToDate(date) },
              accountId
            },
            orderBy: [{ date: "desc" }, { addedAt: "asc" }],
            take: 1
          });
          return transaction ? transaction.availableBalance.toNumber() : 0;
        })
      );
      return {
        id: scopeKey(scope, `date("${date}")`),
        date,
        balance: _4.sum(accountBalances)
      };
    })
  );
  return dailyBalance;
};
var getMonthlyBalance = async (context2, scope, args) => {
  const monthsBetweenNumber = differenceInMonths2(
    toIsoDate(args.dateRange.end),
    toIsoDate(args.dateRange.start)
  );
  const monthsBetween = _4.range(0, monthsBetweenNumber + 1).map(
    (index) => lastDayOfMonth2(addMonths2(toIsoDate(args.dateRange.start), index))
  );
  const monthlyBalance = await Promise.all(
    monthsBetween.map(async (date) => {
      const accountBalances = await Promise.all(
        args.accountIds.map(async (accountId) => {
          const transaction = await context2.model.Transaction.findFirst.load({
            select: { availableBalance: true },
            where: {
              date: { lte: parseToDate(date) },
              accountId
            },
            orderBy: [{ date: "desc" }, { addedAt: "asc" }],
            take: 1
          });
          return transaction ? transaction.availableBalance.toNumber() : 0;
        })
      );
      return {
        id: scopeKey(scope, `date("${date}")`),
        month: date.substr(0, 7),
        balance: _4.sum(accountBalances)
      };
    })
  );
  return monthlyBalance;
};
var getTransactions = async (context2, scope, args) => {
  const accountIds = scope.accountId ? [scope.accountId] : scope.entityId ? asIds(
    await context2.model.Account.findMany.load({
      select: { id: true },
      where: {
        id: scope.accountId,
        entityId: scope.entityId
      },
      orderBy: [{ id: "asc" }]
    })
  ) : asIds(
    await context2.model.Account.findMany.load({
      select: { id: true },
      orderBy: [{ id: "asc" }]
    })
  );
  return withScope(
    await context2.model.Transaction.findMany.load({
      select: { id: true },
      where: {
        accountId: { in: accountIds },
        vendorId: scope.vendorId,
        categoryId: scope.categoryId,
        propertyId: scope.propertyId,
        ...whereDateRange(args.dateRange)
      },
      orderBy: [{ date: "desc" }, { addedAt: "asc" }],
      skip: args.pagination?.offset,
      take: args.pagination?.limit
    }),
    scope,
    (transaction) => ({ transactionId: transaction.id })
  );
};
var getTotal = async (context2, scope, args) => {
  const accountIds = scope.accountId ? [scope.accountId] : scope.entityId ? asIds(
    await context2.model.Account.findMany.load({
      select: { id: true },
      where: {
        id: scope.accountId,
        entityId: scope.entityId
      },
      orderBy: [{ id: "asc" }]
    })
  ) : asIds(
    await context2.model.Account.findMany.load({
      select: { id: true },
      orderBy: [{ id: "asc" }]
    })
  );
  return (await prisma.transaction.aggregate({
    _sum: { amount: true },
    where: {
      accountId: { in: accountIds },
      vendorId: scope.vendorId,
      categoryId: scope.categoryId,
      propertyId: scope.propertyId,
      ...whereDateRange(args.dateRange)
    },
    orderBy: [{ date: "desc" }, { addedAt: "asc" }]
  }))._sum.amount?.toNumber() || 0;
};
var getTotalExpenses = async (context2, scope, args) => {
  const accountIds = scope.accountId ? [scope.accountId] : scope.entityId ? asIds(
    await context2.model.Account.findMany.load({
      select: { id: true },
      where: {
        id: scope.accountId,
        entityId: scope.entityId
      },
      orderBy: [{ id: "asc" }]
    })
  ) : asIds(
    await context2.model.Account.findMany.load({
      select: { id: true },
      orderBy: [{ id: "asc" }]
    })
  );
  return (await prisma.transaction.aggregate({
    _sum: { amount: true },
    where: {
      accountId: { in: accountIds },
      vendorId: scope.vendorId,
      categoryId: scope.categoryId,
      propertyId: scope.propertyId,
      category: {
        categoryType: "Expense"
      },
      ...whereDateRange(args.dateRange)
    },
    orderBy: [{ date: "desc" }, { addedAt: "asc" }]
  }))._sum.amount?.toNumber() || 0;
};
var getTotalIncome = async (context2, scope, args) => {
  const accountIds = scope.accountId ? [scope.accountId] : scope.entityId ? asIds(
    await context2.model.Account.findMany.load({
      select: { id: true },
      where: {
        id: scope.accountId,
        entityId: scope.entityId
      },
      orderBy: [{ id: "asc" }]
    })
  ) : asIds(
    await context2.model.Account.findMany.load({
      select: { id: true },
      orderBy: [{ id: "asc" }]
    })
  );
  return (await prisma.transaction.aggregate({
    _sum: { amount: true },
    where: {
      accountId: { in: accountIds },
      vendorId: scope.vendorId,
      categoryId: scope.categoryId,
      propertyId: scope.propertyId,
      category: {
        categoryType: "Income"
      },
      ...whereDateRange(args.dateRange)
    },
    orderBy: [{ date: "desc" }, { addedAt: "asc" }]
  }))._sum.amount?.toNumber() || 0;
};
var getCount = async (context2, scope, args) => {
  const accountIds = scope.accountId ? [scope.accountId] : scope.entityId ? asIds(
    await context2.model.Account.findMany.load({
      select: { id: true },
      where: {
        id: scope.accountId,
        entityId: scope.entityId
      },
      orderBy: [{ id: "asc" }]
    })
  ) : asIds(
    await context2.model.Account.findMany.load({
      select: { id: true },
      orderBy: [{ id: "asc" }]
    })
  );
  return await prisma.transaction.count({
    where: {
      accountId: { in: accountIds },
      vendorId: scope.vendorId,
      categoryId: scope.categoryId,
      propertyId: scope.propertyId,
      ...whereDateRange(args.dateRange)
    },
    orderBy: [{ date: "desc" }, { addedAt: "asc" }]
  }) || 0;
};
var getTransactionGroups = (scope, dateRange) => {
  const getGroups = () => {
    switch (required(scope.groupBy)) {
      case "Year" /* Year */:
        return getYearGroups(dateRange);
      case "Month" /* Month */:
        return getMonthGroups(dateRange);
      case "Week" /* Week */:
        return getWeekGroups(dateRange);
      case "WeekDay" /* WeekDay */:
        return getWeekDayGroups(dateRange);
      default:
        throw new Error("Invalid GroupBy");
    }
  };
  const groups = getGroups().map((group) => ({ ...group, id: v4_default() }));
  return withScope(groups, scope, (group) => ({
    groupIndex: group.groupIndex,
    dateRange: { start: group.start, end: group.end }
  }));
};
var getChangePercent = async (context2, scope, previousDateRange) => {
  const currentTotal = await context2.utilities.getTotal(context2, scope, {
    dateRange: required(scope.dateRange)
  });
  const { start, end } = previousDateRange || getPreviousDateRange(required(scope.dateRange));
  const previousTotal = await context2.utilities.getTotal(context2, scope, {
    dateRange: { start, end }
  });
  const current = Math.abs(currentTotal);
  const previous = Math.abs(previousTotal);
  if (current === 0 && previous === 0) {
    return 0;
  }
  if (previous === 0) {
    return null;
  }
  return current / previous - 1;
};
var getCategories = async (context2, scope, where) => {
  const categories = await context2.model.Category.findMany.load({
    select: { id: true },
    orderBy: [{ id: "asc" }]
  });
  const taggedCategories = await Promise.all(
    categories.map(async (category) => {
      const changePercent = await context2.utilities.getChangePercent(context2, {
        ...scope,
        categoryId: category.id
      });
      if (where?.changeThreshold) {
        if (changePercent === null) {
          return { category, include: true };
        }
        if (Math.abs(changePercent) >= where.changeThreshold) {
          return { category, include: true };
        }
        return { category, include: false };
      }
      return { category, include: true };
    })
  );
  return taggedCategories.filter((taggedCategory) => taggedCategory.include).map((taggedCategory) => taggedCategory.category);
};
var utilities = {
  getDailyBalance,
  getMonthlyBalance,
  getTotal,
  getCount,
  getTransactions,
  getTransactionGroups,
  getChangePercent,
  getCategories,
  getTotalIncome,
  getTotalExpenses
};

// context.ts
var prisma = createPrismaClient(true);
var context = () => {
  const requestId = v4_default();
  return {
    requestId,
    prisma,
    utilities,
    model: buildModel(),
    scope: {}
  };
};

// resolvers/AccountResolvers.ts
var accountResolvers = {
  id: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(scope.accountId);
  },
  externalId: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Account.findById.load(required(scope.accountId))
    ).externalId;
  },
  name: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Account.findById.load(required(scope.accountId))
    ).name;
  },
  number: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Account.findById.load(required(scope.accountId))
    ).number;
  },
  institution: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      {
        id: required(
          await context2.model.Account.findById.load(required(scope.accountId))
        ).institutionId
      },
      scope,
      (id2) => ({ institutionId: id2 })
    );
  },
  lastRefreshed: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const date = await context2.model.RefreshLog.accountLastRefreshed.load(
      required(scope.accountId)
    );
    if (!date) {
      return null;
    }
    return toIsoDateTime(date);
  },
  transactions: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, {
      categoryId: optional(args.categoryId),
      vendorId: optional(args.vendorId)
    });
    return context2.utilities.getTransactions(context2, scope, {
      dateRange: required(args.dateRange),
      pagination: optional(args.pagination)
    });
  },
  entity: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      {
        id: required(
          await context2.model.Account.findById.load(required(scope.accountId))
        ).entityId
      },
      scope,
      (id2) => ({ entityId: id2 })
    );
  },
  currentBalance: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const accountType = required(
      await context2.model.Account.findById.load(required(scope.accountId))
    )?.accountType;
    if (accountType === "Credit") {
      const balance2 = await context2.prisma.balance.findFirst({
        select: { balance: true },
        where: {
          accountId: required(scope.accountId)
        },
        orderBy: [{ addedAt: "desc" }],
        take: 1
      });
      return balance2?.balance.toNumber() || 0;
    }
    const balance = await context2.utilities.getDailyBalance(context2, scope, {
      accountIds: [required(scope.accountId)],
      dateRange: { start: today(), end: today() }
    });
    return balance.length > 0 ? balance[0].balance : 0;
  },
  accountType: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Account.findById.load(required(scope.accountId))
    ).accountType;
  },
  monthlyBalance: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const balances = await context2.utilities.getMonthlyBalance(context2, scope, {
      accountIds: [required(scope.accountId)],
      dateRange: args.dateRange
    });
    return withScope(balances, scope, (balance) => ({
      monthlyBalanceId: balance.id
    }));
  },
  dailyBalance: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const balances = await context2.utilities.getDailyBalance(context2, scope, {
      accountIds: [required(scope.accountId)],
      dateRange: args.dateRange
    });
    return withScope(balances, scope, (balance) => ({
      dailyBalanceId: balance.id
    }));
  },
  transactionGroups: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, {
      groupBy: required(args.groupBy)
    });
    return context2.utilities.getTransactionGroups(scope, args.dateRange);
  }
};

// resolvers/BudgetResolvers.ts
var budgetResolvers = {
  id: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(scope.budgetId);
  },
  entity: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      {
        id: required(
          await context2.model.Budget.findById.load(required(scope.budgetId))
        ).entityId
      },
      scope,
      (id2) => ({ entityId: id2 })
    );
  },
  category: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      {
        id: required(
          await context2.model.Budget.findById.load(required(scope.budgetId))
        ).categoryId
      },
      scope,
      (id2) => ({ categoryId: id2 })
    );
  },
  performance: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, { groupBy: args.groupBy });
    const groups = context2.utilities.getTransactionGroups(
      scope,
      required(scope.dateRange)
    );
    return groups;
  },
  currentBudgeted: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return 0;
  }
};

// resolvers/CategoryChangeResolvers.ts
var categoryChangeResolvers = {
  id: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return scopeKey(scope, "change");
  },
  category: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      {
        id: required(scope.categoryId)
      },
      scope,
      (id2) => ({})
    );
  },
  currentDateRange: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      {
        id: v4_default(),
        start: required(scope.dateRange?.start),
        end: required(scope.dateRange?.end)
      },
      scope,
      (id2) => ({})
    );
  },
  previousDateRange: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const dateRange = getPreviousDateRange(required(scope.dateRange));
    return withScope(
      {
        id: v4_default(),
        start: required(dateRange.start),
        end: required(dateRange.end)
      },
      scope,
      (id2) => ({})
    );
  },
  currentTotal: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const proratedPeviousDateRange = getProratedPreviousDateRange(scope);
    return Math.abs(
      await context2.utilities.getTotal(context2, scope, {
        dateRange: required(scope.dateRange)
      })
    );
  },
  previousTotal: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const { start, end } = getPreviousDateRange(required(scope.dateRange));
    return Math.abs(
      await context2.utilities.getTotal(context2, scope, {
        dateRange: { start, end }
      })
    );
  },
  changePercent: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return context2.utilities.getChangePercent(context2, scope);
  },
  proratedPreviousTotal: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const { start, end } = getProratedPreviousDateRange(scope);
    return Math.abs(
      await context2.utilities.getTotal(context2, scope, {
        dateRange: { start, end }
      })
    );
  },
  proratedPreviousDateRange: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      {
        id: "TBD",
        ...getProratedPreviousDateRange(scope)
      },
      scope,
      (id2) => ({})
    );
  },
  proratedChangePercent: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const proratedPeviousDateRange = getProratedPreviousDateRange(scope);
    return context2.utilities.getChangePercent(
      context2,
      scope,
      proratedPeviousDateRange
    );
  }
};
var getProratedPreviousDateRange = (scope) => {
  const previousDateRange = getPreviousDateRange(required(scope.dateRange));
  const daysInMonth = differenceInDays(
    required(scope.dateRange?.end),
    required(scope.dateRange?.start)
  ) + 1;
  const daysSoFar = differenceInDays(today(), required(scope.dateRange?.start));
  const daysInPreviousMonth = differenceInDays(previousDateRange.end, previousDateRange.start) + 1;
  const percentageThroughMonth = daysSoFar * 1 / daysInMonth;
  const daysToConsiderInPreviousMonth = daysInPreviousMonth * percentageThroughMonth;
  const dateRangeToConsiderInPreviousMonth = {
    start: previousDateRange.start,
    end: addDays2(previousDateRange.start, daysToConsiderInPreviousMonth)
  };
  return previousDateRange;
};

// resolvers/CategoryResolvers.ts
var categoryResolvers = {
  id: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return scopeKey(scope);
  },
  categoryId: async (parent, args, context2, info) => {
    return required(parent.scope.categoryId);
  },
  name: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Category.findById.load(required(scope.categoryId))
    ).name;
  },
  transactions: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return context2.utilities.getTransactions(context2, scope, {
      dateRange: required(scope.dateRange),
      pagination: optional(args.pagination)
    });
  },
  total: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return context2.utilities.getTotal(context2, scope, {
      dateRange: required(scope.dateRange)
    });
  },
  count: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return context2.utilities.getCount(context2, scope, {
      dateRange: required(scope.dateRange)
    });
  },
  budget: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const budget = await context2.model.Budget.findFirst.load({
      select: { id: true },
      where: {
        entityId: scope.entityId,
        categoryId: required(scope.categoryId)
      },
      orderBy: [{ id: "asc" }]
    });
    if (!budget) {
      return null;
    }
    return withScope(budget, scope, () => ({ budgetId: budget.id }));
  },
  transactionGroups: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, {
      groupBy: required(args.groupBy)
    });
    return context2.utilities.getTransactionGroups(
      scope,
      required(scope.dateRange)
    );
  },
  change: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, {});
    return withScope(
      {
        id: required(scope.categoryId)
      },
      scope,
      (id2) => ({})
    );
  },
  categoryType: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, {});
    return required(
      await context2.model.Category.findById.load(required(scope.categoryId))
    ).categoryType;
  }
};

// resolvers/EntityResolvers.ts
var entityResolvers = {
  id: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(scope.entityId);
  },
  name: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return (await required(
      await context2.model.Entity.findById.load(required(scope.entityId))
    )).name;
  },
  accounts: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      await context2.model.Account.findMany.load({
        select: { id: true },
        where: { entityId: required(scope.entityId) },
        orderBy: [{ id: "asc" }]
      }),
      scope,
      (account) => ({ accountId: account.id })
    );
  },
  transactions: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, {
      categoryId: optional(args.categoryId),
      vendorId: optional(args.vendorId)
    });
    const result = context2.utilities.getTransactions(context2, scope, {
      dateRange: required(args.dateRange),
      pagination: optional(args.pagination)
    });
    console.table(result);
    return result;
  },
  transactionGroups: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, {
      groupBy: required(args.groupBy)
    });
    return context2.utilities.getTransactionGroups(scope, args.dateRange);
  },
  category: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, {
      dateRange: required(args.dateRange),
      categoryId: args.categoryId
    });
    return withScope(
      {
        id: args.categoryId
      },
      scope,
      (category) => ({ categoryId: args.categoryId })
    );
  },
  categories: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, {
      dateRange: required(args.dateRange)
    });
    return withScope(
      await context2.utilities.getCategories(context2, scope, {
        changeThreshold: optional(args.changeThreshold)
      }),
      scope,
      (category) => ({ categoryId: category.id })
    );
  },
  currentBalance: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const accountIds = (await context2.model.Account.findMany.load({
      select: { id: true },
      where: {
        entityId: required(scope.entityId)
      },
      orderBy: [{ id: "asc" }]
    })).map(asId);
    const balance = await context2.utilities.getDailyBalance(context2, scope, {
      accountIds,
      dateRange: { start: today(), end: today() }
    });
    return balance.length > 0 ? balance[0].balance : 0;
  },
  monthlyBalance: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const accountIds = (await context2.model.Account.findMany.load({
      select: { id: true },
      where: {
        entityId: required(scope.entityId)
      },
      orderBy: [{ id: "asc" }]
    })).map(asId);
    const balances = await context2.utilities.getMonthlyBalance(context2, scope, {
      accountIds,
      dateRange: args.dateRange
    });
    return withScope(balances, scope, (balance) => ({
      monthlyBalanceId: balance.id
    }));
  },
  dailyBalance: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const accountIds = (await context2.model.Account.findMany.load({
      select: { id: true },
      where: {
        entityId: required(scope.entityId)
      },
      orderBy: [{ id: "asc" }]
    })).map(asId);
    const balances = await context2.utilities.getDailyBalance(context2, scope, {
      accountIds,
      dateRange: args.dateRange
    });
    return withScope(balances, scope, (balance) => ({
      dailyBalanceId: balance.id
    }));
  },
  properties: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      await context2.model.Property.findMany.load({
        select: { id: true },
        where: { entityId: required(scope.entityId) },
        orderBy: [{ id: "asc" }]
      }),
      scope,
      (property) => ({ propertyId: property.id })
    );
  }
};

// resolvers/InstitutionResolvers.ts
var institutionResolvers = {
  id: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(scope.institutionId);
  },
  name: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Institution.findById.load(
        required(scope.institutionId)
      )
    ).name;
  },
  accounts: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      await context2.model.Account.findMany.load({
        select: { id: true },
        where: { institutionId: required(scope.institutionId) },
        orderBy: [{ id: "asc" }]
      }),
      scope,
      (account) => ({ accountId: account.id })
    );
  }
};

// resolvers/MutationResolvers.ts
var mutationResolvers = {
  addVendor: async (parent, args, context2, info) => {
    const id2 = v4_default();
    await context2.prisma.vendor.create({
      data: {
        id: id2,
        name: args.name
      }
    });
    return {
      id: id2,
      scope: {
        vendorId: id2
      }
    };
  },
  addCategory: async (parent, args, context2, info) => {
    const id2 = v4_default();
    await context2.prisma.category.create({
      data: {
        id: id2,
        name: args.name
      }
    });
    return {
      id: id2,
      scope: {
        categoryId: id2
      }
    };
  },
  setCategory: async (parent, args, context2, info) => {
    const categoryId = args.categoryId;
    await context2.prisma.transaction.update({
      where: {
        id: args.transactionId
      },
      data: {
        ...categoryId ? {
          categoryId
        } : {
          category: {
            disconnect: true
          }
        }
      }
    });
    return {
      id: args.transactionId,
      scope: {
        transactionId: args.transactionId
      }
    };
  },
  setVendor: async (parent, args, context2, info) => {
    await context2.prisma.transaction.update({
      where: {
        id: args.transactionId
      },
      data: {
        vendorId: args.vendorId || null
      }
    });
    return {
      id: args.transactionId,
      scope: {
        transactionId: args.transactionId
      }
    };
  }
};

// resolvers/PerformanceResolvers.ts
var performanceResolvers = {
  id: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(scope.budgetId);
  },
  month: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(scope.dateRange?.start);
  },
  spent: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return Math.abs(
      await context2.utilities.getTotal(context2, scope, {
        dateRange: required(scope.dateRange)
      })
    );
  },
  budgeted: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const budgetAmount = await context2.model.BudgetAmount.findFirst.load({
      select: { amount: true },
      where: {
        startingAt: { lte: parseToDate(required(scope.dateRange?.end)) },
        budgetId: required(scope.budgetId)
      },
      orderBy: [{ startingAt: "desc" }],
      take: 1
    });
    return budgetAmount?.amount.toNumber() || 0;
  }
};

// resolvers/PropertyResolvers.ts
var propertyResolvers = {
  id: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(scope.propertyId);
  },
  externalId: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Property.findById.load(required(scope.propertyId))
    ).externalId;
  },
  entity: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      {
        id: required(
          await context2.model.Property.findById.load(required(scope.propertyId))
        ).entityId
      },
      scope,
      (id2) => ({ entityId: id2 })
    );
  },
  address: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Property.findById.load(required(scope.propertyId))
    ).address;
  },
  city: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Property.findById.load(required(scope.propertyId))
    ).city;
  },
  state: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Property.findById.load(required(scope.propertyId))
    ).state;
  },
  zip: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Property.findById.load(required(scope.propertyId))
    ).zip;
  },
  propertyType: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Property.findById.load(required(scope.propertyId))
    ).propertyType;
  },
  propertyPurpose: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Property.findById.load(required(scope.propertyId))
    ).propertyPurpose;
  },
  latitude: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Property.findById.load(required(scope.propertyId))
    ).latitude.toNumber();
  },
  longitude: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Property.findById.load(required(scope.propertyId))
    ).longitude.toNumber();
  },
  acquired: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const date = required(
      await context2.model.Property.findById.load(required(scope.propertyId))
    ).acquired;
    if (!date) {
      return null;
    }
    return toIsoDate(date);
  },
  dispositioned: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const date = required(
      await context2.model.Property.findById.load(required(scope.propertyId))
    ).dispositioned;
    if (!date) {
      return null;
    }
    return toIsoDate(date);
  },
  transactions: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, {
      categoryId: optional(args.categoryId),
      vendorId: optional(args.vendorId)
    });
    return context2.utilities.getTransactions(context2, scope, {
      dateRange: required(args.dateRange),
      pagination: optional(args.pagination)
    });
  },
  transactionGroups: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, {
      groupBy: required(args.groupBy)
    });
    return context2.utilities.getTransactionGroups(scope, args.dateRange);
  },
  categories: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, {
      dateRange: required(args.dateRange)
    });
    return withScope(
      await context2.utilities.getCategories(context2, scope, {
        changeThreshold: optional(args.changeThreshold)
      }),
      scope,
      (category) => ({ categoryId: category.id })
    );
  }
};

// resolvers/QueryResolvers.ts
var queryResolvers = {
  lastRefreshed: async (parent, args, context2, info) => {
    const lastRefreshed = await context2.model.RefreshLog.lastRefreshed.load(
      "overall"
    );
    return lastRefreshed;
  },
  entity: async (parent, args, context2, info) => {
    if (args.entityId) {
      const scope = narrowScope(context2.scope, {
        entityId: args.entityId
      });
      return { id: args.entityId, scope };
    }
    if (args.name) {
      const entity = await context2.model.Entity.findFirst.load({
        where: { name: args.name }
      });
      if (!entity) {
        return null;
      }
      const scope = narrowScope(context2.scope, {
        entityId: entity.id
      });
      return { id: entity.id, scope };
    }
    return null;
  },
  institution: async (parent, args, context2, info) => {
    if (args.institutionId) {
      const scope = narrowScope(context2.scope, {
        institutionId: args.institutionId
      });
      return { id: args.institutionId, scope };
    }
    if (args.name) {
      const institution = await context2.model.Institution.findFirst.load({
        where: { name: args.name }
      });
      if (!institution) {
        return null;
      }
      const scope = narrowScope(context2.scope, {
        institutionId: institution.id
      });
      return { id: institution.id, scope };
    }
    return null;
  },
  category: async (parent, args, context2, info) => {
    if (args.categoryId) {
      const scope = narrowScope(context2.scope, {
        categoryId: args.categoryId,
        dateRange: args.dateRange || void 0
      });
      return { id: args.categoryId, scope };
    }
    if (args.name) {
      const category = await context2.model.Category.findFirst.load({
        where: { name: args.name }
      });
      if (!category) {
        return null;
      }
      const scope = narrowScope(context2.scope, {
        categoryId: category.id
      });
      return { id: category.id, scope };
    }
    return null;
  },
  vendor: async (parent, args, context2, info) => {
    if (args.vendorId) {
      const scope = narrowScope(context2.scope, {
        vendorId: args.vendorId
      });
      return { id: args.vendorId, scope };
    }
    if (args.name) {
      const vendor = await context2.model.Vendor.findFirst.load({
        where: { name: args.name }
      });
      if (!vendor) {
        return null;
      }
      const scope = narrowScope(context2.scope, {
        vendorId: vendor.id
      });
      return { id: vendor.id, scope };
    }
    return null;
  },
  account: async (parent, args, context2, info) => {
    if (args.accountId) {
      const scope = narrowScope(context2.scope, {
        accountId: args.accountId
      });
      return { id: args.accountId, scope };
    }
    if (args.name) {
      const account = await context2.model.Account.findFirst.load({
        where: { name: args.name }
      });
      if (!account) {
        return null;
      }
      const scope = narrowScope(context2.scope, {
        accountId: account.id
      });
      return { id: account.id, scope };
    }
    return null;
  },
  transaction: async (parent, args, context2, info) => {
    const scope = narrowScope(context2.scope, {
      transactionId: args.transactionId
    });
    return { id: args.transactionId, scope };
  },
  property: async (parent, args, context2, info) => {
    if (args.propertyId) {
      const scope = narrowScope(context2.scope, {
        propertyId: args.propertyId
      });
      return { id: args.propertyId, scope };
    }
    if (args.address) {
      const property = await context2.model.Property.findFirst.load({
        where: { address: args.address }
      });
      if (!property) {
        return null;
      }
      const scope = narrowScope(context2.scope, {
        propertyId: property.id
      });
      return { id: property.id, scope };
    }
    return null;
  },
  entities: async (parent, args, context2, info) => {
    const scope = narrowScope(context2.scope, {});
    return withScope(
      await context2.model.Entity.findMany.load({
        select: { id: true },
        orderBy: [{ id: "asc" }]
      }),
      scope,
      (entity) => ({ entityId: entity.id })
    );
  },
  institutions: async (parent, args, context2, info) => {
    const scope = narrowScope(context2.scope, {});
    return withScope(
      await context2.model.Institution.findMany.load({
        select: { id: true },
        orderBy: [{ id: "asc" }]
      }),
      scope,
      (institution) => ({ institutionId: institution.id })
    );
  },
  categories: async (parent, args, context2, info) => {
    const scope = narrowScope(context2.scope, {
      dateRange: required(args.dateRange)
    });
    return withScope(
      await context2.utilities.getCategories(context2, scope, {
        changeThreshold: optional(args.changeThreshold)
      }),
      scope,
      (category) => ({ categoryId: category.id })
    );
  },
  vendors: async (parent, args, context2, info) => {
    const scope = narrowScope(context2.scope, {});
    return withScope(
      await context2.model.Vendor.findMany.load({
        select: { id: true },
        orderBy: [{ id: "asc" }]
      }),
      scope,
      (vendor) => ({ vendorId: vendor.id })
    );
  },
  accounts: async (parent, args, context2, info) => {
    const scope = narrowScope(context2.scope, {});
    return withScope(
      await context2.model.Account.findMany.load({
        select: { id: true },
        orderBy: [{ id: "asc" }]
      }),
      scope,
      (account) => ({ accountId: account.id })
    );
  },
  transactions: async (parent, args, context2, info) => {
    const scope = narrowScope(context2.scope, {
      entityId: optional(args.entityId),
      accountId: optional(args.accountId)
    });
    return context2.utilities.getTransactions(context2, scope, {
      dateRange: required(args.dateRange),
      pagination: optional(args.pagination)
    });
  },
  properties: async (parent, args, context2, info) => {
    const scope = narrowScope(context2.scope, {});
    return withScope(
      await context2.model.Property.findMany.load({
        orderBy: [{ id: "asc" }]
      }),
      scope,
      (property) => ({ propertyId: property.id })
    );
  },
  currentBalance: async (parent, args, context2, info) => {
    const scope = narrowScope(context2.scope, {});
    const accountIds = (await context2.model.Account.findMany.load({
      select: { id: true },
      where: {
        entity: {
          includeInOverall: true
        }
      },
      orderBy: [{ id: "asc" }]
    })).map(asId);
    const balance = await context2.utilities.getDailyBalance(context2, scope, {
      accountIds,
      dateRange: { start: today(), end: today() }
    });
    return balance.length > 0 ? balance[0].balance : 0;
  },
  monthlyBalance: async (parent, args, context2, info) => {
    const scope = narrowScope(context2.scope, {});
    const accountIds = (await context2.model.Account.findMany.load({
      select: { id: true },
      orderBy: [{ id: "asc" }]
    })).map(asId);
    const balances = await context2.utilities.getMonthlyBalance(context2, scope, {
      accountIds,
      dateRange: args.dateRange
    });
    return withScope(balances, scope, (balance) => ({
      monthlyBalanceId: balance.id
    }));
  },
  dailyBalance: async (parent, args, context2, info) => {
    const scope = narrowScope(context2.scope, {});
    const accountIds = (await context2.model.Account.findMany.load({
      select: { id: true },
      orderBy: [{ id: "asc" }]
    })).map(asId);
    const balances = await context2.utilities.getDailyBalance(context2, scope, {
      accountIds,
      dateRange: args.dateRange
    });
    return withScope(balances, scope, (balance) => ({
      dailyBalanceId: balance.id
    }));
  },
  transactionGroups: async (parent, args, context2, info) => {
    const scope = narrowScope(context2.scope, {
      groupBy: required(args.groupBy)
    });
    return context2.utilities.getTransactionGroups(scope, args.dateRange);
  }
};

// resolvers/TransactionGroupResolvers.ts
var transactionGroupResolvers = {
  id: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return scopeKey(scope);
  },
  groupedBy: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(scope.groupBy);
  },
  groupIndex: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(scope.groupIndex);
  },
  groupIdentifier: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return scopeKey(scope);
  },
  start: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(scope.dateRange?.start);
  },
  end: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(scope.dateRange?.end);
  },
  transactions: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, {
      ...args.categoryId ? { categoryId: optional(args.categoryId) } : {},
      ...args.vendorId ? { vendorId: optional(args.vendorId) } : {}
    });
    return context2.utilities.getTransactions(context2, scope, {
      dateRange: required(scope.dateRange),
      pagination: optional(args.pagination)
    });
  },
  total: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return context2.utilities.getTotal(context2, scope, {
      dateRange: required(scope.dateRange)
    });
  },
  count: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return context2.utilities.getCount(context2, scope, {
      dateRange: required(scope.dateRange)
    });
  },
  totalIncome: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return context2.utilities.getTotalIncome(context2, scope, {
      dateRange: required(scope.dateRange)
    });
  },
  totalExpenses: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return context2.utilities.getTotalExpenses(context2, scope, {
      dateRange: required(scope.dateRange)
    });
  }
};

// resolvers/TransactionResolvers.ts
var transactionResolvers = {
  id: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(scope.transactionId);
  },
  account: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      {
        id: required(
          await context2.model.Transaction.findById.load(
            required(scope.transactionId)
          )
        ).accountId
      },
      scope,
      (id2) => ({ accountId: id2 })
    );
  },
  date: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return isoStringToIsoDate(
      required(
        await context2.model.Transaction.findById.load(
          required(scope.transactionId)
        )
      ).date
    );
  },
  category: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      {
        id: required(
          await context2.model.Transaction.findById.load(
            required(scope.transactionId)
          )
        ).categoryId
      },
      scope,
      (id2) => ({ categoryId: id2 })
    );
  },
  description: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Transaction.findById.load(
        required(scope.transactionId)
      )
    ).description;
  },
  amount: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Transaction.findById.load(
        required(scope.transactionId)
      )
    ).amount.toNumber();
  },
  addedAt: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Transaction.findById.load(
        required(scope.transactionId)
      )
    ).addedAt;
  },
  property: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      {
        id: required(
          await context2.model.Transaction.findById.load(
            required(scope.transactionId)
          )
        ).propertyId
      },
      scope,
      (id2) => ({ propertyId: id2 })
    );
  },
  vendor: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return withScope(
      {
        id: required(
          await context2.model.Transaction.findById.load(
            required(scope.transactionId)
          )
        ).vendorId
      },
      scope,
      (id2) => ({ vendorId: id2 })
    );
  },
  pending: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Transaction.findById.load(
        required(scope.transactionId)
      )
    ).pending || false;
  }
};

// resolvers/VendorResolvers.ts
var vendorResolvers = {
  id: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(scope.vendorId);
  },
  name: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return required(
      await context2.model.Vendor.findById.load(required(scope.vendorId))
    ).name;
  },
  image: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    const buffer = required(
      await context2.model.Vendor.findById.load(required(scope.vendorId))
    ).image;
    if (buffer instanceof Uint8Array) {
      return Buffer.from(buffer).toString("base64");
    }
    return null;
  },
  transactions: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return context2.utilities.getTransactions(context2, scope, {
      dateRange: required(args.dateRange),
      pagination: optional(args.pagination)
    });
  },
  total: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope);
    return context2.utilities.getTotal(context2, scope, {
      dateRange: args.dateRange
    });
  },
  transactionGroups: async (parent, args, context2, info) => {
    const scope = narrowScope(parent.scope, {
      groupBy: required(args.groupBy)
    });
    return context2.utilities.getTransactionGroups(scope, args.dateRange);
  }
};

// resolvers/index.ts
var resolvers = {
  Query: queryResolvers,
  Entity: entityResolvers,
  Institution: institutionResolvers,
  Vendor: vendorResolvers,
  Category: categoryResolvers,
  CategoryChange: categoryChangeResolvers,
  Account: accountResolvers,
  Transaction: transactionResolvers,
  TransactionGroup: transactionGroupResolvers,
  Budget: budgetResolvers,
  Property: propertyResolvers,
  Performance: performanceResolvers,
  Mutation: mutationResolvers
};

// schema/schema.gql
var schema_default = "enum AccountType {\n  Checking\n  Savings\n  Retirement\n  Credit\n}\n\nenum PropertyType {\n  SingleFamily\n  Duplex\n}\n\nenum PropertyPurpose {\n  Rental\n  LandContract\n  Lender\n  Wholesale\n}\n\nscalar DateIso\nscalar DateTimeIso\n\ntype Entity {\n  id: ID!\n  name: String!\n  accounts: [Account!]!\n  properties: [Property!]!\n  transactions(\n    dateRange: DateRange!\n    pagination: Pagination\n    categoryId: ID\n    vendorId: ID\n  ): [Transaction!]!\n  transactionGroups(\n    dateRange: DateRange!\n    groupBy: GroupBy!\n  ): [TransactionGroup!]!\n  category(dateRange: DateRange!, categoryId: ID!): Category!\n  categories(dateRange: DateRange!, changeThreshold: Float): [Category!]!\n  currentBalance: Float!\n  monthlyBalance(dateRange: DateRange!): [MonthlyBalance!]!\n  dailyBalance(dateRange: DateRange!): [DailyBalance!]!\n}\n\ntype Institution {\n  id: ID!\n  name: String!\n  accounts: [Account!]!\n}\n\nscalar Base64Url\n\ntype Vendor {\n  id: ID!\n  name: String!\n  image: Base64Url\n  transactions(dateRange: DateRange!, pagination: Pagination): [Transaction!]!\n  transactionGroups(\n    dateRange: DateRange!\n    groupBy: GroupBy!\n  ): [TransactionGroup!]!\n  total(dateRange: DateRange!): Float!\n}\n\ntype CategoryChange {\n  id: ID!\n  category: Category!\n  currentDateRange: DateRangeValue!\n  currentTotal: Float!\n  previousTotal: Float!\n  previousDateRange: DateRangeValue!\n  changePercent: Float\n\n  proratedPreviousTotal: Float!\n  proratedPreviousDateRange: DateRangeValue!\n  proratedChangePercent: Float\n}\n\nenum CategoryType {\n  Expense\n  Income\n}\n\ntype Category {\n  id: ID!\n  categoryId: ID!\n  name: String!\n  transactions(pagination: Pagination): [Transaction!]!\n  transactionGroups(groupBy: GroupBy!): [TransactionGroup!]!\n  total: Float!\n  count: Int!\n\n  budget: Budget\n  change: CategoryChange!\n  categoryType: CategoryType!\n}\n\ntype Budget {\n  id: ID!\n  entity: Entity!\n  category: Category!\n  performance(groupBy: GroupBy!): [Performance!]!\n  currentBudgeted: Float!\n}\n\ntype Performance {\n  id: ID!\n  month: String!\n  spent: Float!\n  budgeted: Float!\n}\n\ntype MonthlyBalance {\n  id: ID!\n  month: String!\n  balance: Float!\n}\n\ntype DailyBalance {\n  id: ID!\n  date: DateIso!\n  balance: Float!\n}\n\ntype Account {\n  id: ID!\n  externalId: String\n  name: String!\n  number: String!\n  institution: Institution!\n  lastRefreshed: DateTimeIso\n  transactions(\n    dateRange: DateRange!\n    pagination: Pagination\n    categoryId: ID\n    vendorId: ID\n  ): [Transaction!]!\n  transactionGroups(\n    dateRange: DateRange!\n    groupBy: GroupBy!\n  ): [TransactionGroup!]!\n  entity: Entity!\n  currentBalance: Float!\n  accountType: AccountType!\n  monthlyBalance(dateRange: DateRange!): [MonthlyBalance!]!\n  dailyBalance(dateRange: DateRange!): [DailyBalance!]!\n}\n\ntype TransactionGroup {\n  id: ID!\n  groupedBy: GroupBy!\n  groupIdentifier: String!\n  groupIndex: Int!\n  start: DateIso!\n  end: DateIso!\n  total: Float!\n  count: Int!\n\n  totalIncome: Float!\n  totalExpenses: Float!\n\n  transactions(\n    pagination: Pagination\n    categoryId: ID\n    vendorId: ID\n  ): [Transaction!]!\n}\n\ntype Transaction {\n  id: ID!\n  account: Account!\n  date: DateIso!\n  category: Category\n  description: String!\n  amount: Float!\n  property: Property\n  addedAt: DateTimeIso!\n  vendor: Vendor\n  pending: Boolean!\n}\n\ntype Property {\n  id: ID!\n  externalId: String\n  entity: Entity!\n  address: String!\n  city: String!\n  state: String!\n  zip: String!\n  propertyType: PropertyType!\n  propertyPurpose: PropertyPurpose!\n  latitude: Float!\n  longitude: Float!\n  acquired: DateIso\n  dispositioned: DateIso\n  categories(dateRange: DateRange!, changeThreshold: Float): [Category!]!\n  transactions(\n    dateRange: DateRange!\n    pagination: Pagination\n    categoryId: ID\n    vendorId: ID\n  ): [Transaction!]!\n  transactionGroups(\n    dateRange: DateRange!\n    groupBy: GroupBy!\n  ): [TransactionGroup!]!\n}\n\ninput Pagination {\n  limit: Int!\n  offset: Int!\n}\n\nenum GroupBy {\n  WeekDay\n  Year\n  Month\n  Week\n}\n\ntype DateRangeValue {\n  id: ID!\n  start: DateIso!\n  end: DateIso!\n}\n\ninput DateRange {\n  start: DateIso!\n  end: DateIso!\n}\n\ninput IdOrName {\n  id: ID\n  name: String\n}\n\ninput IdOrAddress {\n  id: ID\n  address: String\n}\n\ninput IdOnly {\n  id: ID!\n}\n\ninput Scope {\n  entityId: ID\n  institutionId: ID\n  vendorId: ID\n  categoryId: ID\n  accountId: ID\n  transactionId: ID\n  budgetId: ID\n  propertyId: ID\n}\n\ntype Query {\n  entity(entityId: ID, name: String): Entity\n  institution(institutionId: ID, name: String): Institution\n  vendor(vendorId: ID, name: String): Vendor\n  category(categoryId: ID, name: String, dateRange: DateRange): Category\n  account(accountId: ID, name: String): Account\n  transaction(transactionId: ID!): Transaction\n  property(propertyId: ID, address: String): Property\n\n  currentBalance: Float!\n  monthlyBalance(dateRange: DateRange!): [MonthlyBalance!]!\n  dailyBalance(dateRange: DateRange!): [DailyBalance!]!\n\n  lastRefreshed: DateIso!\n\n  entities: [Entity!]!\n  institutions: [Institution!]!\n  categories(dateRange: DateRange!, changeThreshold: Float): [Category!]!\n  vendors: [Vendor!]!\n  accounts: [Account!]!\n  transactions(\n    dateRange: DateRange!\n    pagination: Pagination\n    entityId: ID\n    accountId: ID\n  ): [Transaction!]!\n  transactionGroups(\n    dateRange: DateRange!\n    groupBy: GroupBy!\n  ): [TransactionGroup!]!\n  properties: [Property!]!\n  budget(entityId: ID!, categoryId: ID!): Budget\n}\n\ntype Mutation {\n  setCategory(transactionId: ID!, categoryId: ID): Transaction\n  setVendor(transactionId: ID!, vendorId: ID): Transaction\n\n  addCategory(name: String!): Category!\n  addVendor(name: String!): Vendor!\n}\n";

// schema/schema.ts
var getTypeDefs = async () => {
  const typeDefs = schema_default;
  return typeDefs;
};

// node_modules/@apollo/server/dist/esm/ApolloServer.js
var import_utils21 = __toESM(require_dist(), 1);
var import_utils22 = __toESM(require_dist2(), 1);

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/assertResolversPresent.js
var import_graphql15 = __toESM(require_graphql2(), 1);

// node_modules/@graphql-tools/utils/esm/helpers.js
var asArray = (fns) => Array.isArray(fns) ? fns : fns ? [fns] : [];
function compareStrings(a, b2) {
  if (String(a) < String(b2)) {
    return -1;
  }
  if (String(a) > String(b2)) {
    return 1;
  }
  return 0;
}
function nodeToString(a) {
  var _a2, _b;
  let name;
  if ("alias" in a) {
    name = (_a2 = a.alias) === null || _a2 === void 0 ? void 0 : _a2.value;
  }
  if (name == null && "name" in a) {
    name = (_b = a.name) === null || _b === void 0 ? void 0 : _b.value;
  }
  if (name == null) {
    name = a.kind;
  }
  return name;
}
function compareNodes(a, b2, customFn) {
  const aStr = nodeToString(a);
  const bStr = nodeToString(b2);
  if (typeof customFn === "function") {
    return customFn(aStr, bStr);
  }
  return compareStrings(aStr, bStr);
}
function isSome(input) {
  return input != null;
}

// node_modules/@graphql-tools/utils/esm/inspect.js
var import_graphql = __toESM(require_graphql2(), 1);

// node_modules/@graphql-tools/utils/esm/AggregateError.js
var AggregateErrorImpl;
if (typeof AggregateError === "undefined") {
  class AggregateErrorClass extends Error {
    constructor(errors, message = "") {
      super(message);
      this.errors = errors;
      this.name = "AggregateError";
      Error.captureStackTrace(this, AggregateErrorClass);
    }
  }
  AggregateErrorImpl = function(errors, message) {
    return new AggregateErrorClass(errors, message);
  };
} else {
  AggregateErrorImpl = AggregateError;
}
function isAggregateError(error) {
  return "errors" in error && Array.isArray(error["errors"]);
}

// node_modules/@graphql-tools/utils/esm/inspect.js
var MAX_RECURSIVE_DEPTH = 3;
function inspect(value) {
  return formatValue(value, []);
}
function formatValue(value, seenValues) {
  switch (typeof value) {
    case "string":
      return JSON.stringify(value);
    case "function":
      return value.name ? `[function ${value.name}]` : "[function]";
    case "object":
      return formatObjectValue(value, seenValues);
    default:
      return String(value);
  }
}
function formatError(value) {
  if (value instanceof import_graphql.GraphQLError) {
    return value.toString();
  }
  return `${value.name}: ${value.message};
 ${value.stack}`;
}
function formatObjectValue(value, previouslySeenValues) {
  if (value === null) {
    return "null";
  }
  if (value instanceof Error) {
    if (isAggregateError(value)) {
      return formatError(value) + "\n" + formatArray(value.errors, previouslySeenValues);
    }
    return formatError(value);
  }
  if (previouslySeenValues.includes(value)) {
    return "[Circular]";
  }
  const seenValues = [...previouslySeenValues, value];
  if (isJSONable(value)) {
    const jsonValue = value.toJSON();
    if (jsonValue !== value) {
      return typeof jsonValue === "string" ? jsonValue : formatValue(jsonValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray(value, seenValues);
  }
  return formatObject(value, seenValues);
}
function isJSONable(value) {
  return typeof value.toJSON === "function";
}
function formatObject(object, seenValues) {
  const entries = Object.entries(object);
  if (entries.length === 0) {
    return "{}";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[" + getObjectTag(object) + "]";
  }
  const properties = entries.map(([key, value]) => key + ": " + formatValue(value, seenValues));
  return "{ " + properties.join(", ") + " }";
}
function formatArray(array, seenValues) {
  if (array.length === 0) {
    return "[]";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[Array]";
  }
  const len = array.length;
  const items = [];
  for (let i = 0; i < len; ++i) {
    items.push(formatValue(array[i], seenValues));
  }
  return "[" + items.join(", ") + "]";
}
function getObjectTag(object) {
  const tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
  if (tag === "Object" && typeof object.constructor === "function") {
    const name = object.constructor.name;
    if (typeof name === "string" && name !== "") {
      return name;
    }
  }
  return tag;
}

// node_modules/@graphql-tools/utils/esm/get-directives.js
function getDirectivesInExtensions(node, pathToDirectivesInExtensions = ["directives"]) {
  return pathToDirectivesInExtensions.reduce((acc, pathSegment) => acc == null ? acc : acc[pathSegment], node === null || node === void 0 ? void 0 : node.extensions);
}

// node_modules/@graphql-tools/utils/esm/print-schema-with-directives.js
var import_graphql4 = __toESM(require_graphql2(), 1);

// node_modules/@graphql-tools/utils/esm/astFromType.js
var import_graphql2 = __toESM(require_graphql2(), 1);
function astFromType(type) {
  if ((0, import_graphql2.isNonNullType)(type)) {
    const innerType = astFromType(type.ofType);
    if (innerType.kind === import_graphql2.Kind.NON_NULL_TYPE) {
      throw new Error(`Invalid type node ${inspect(type)}. Inner type of non-null type cannot be a non-null type.`);
    }
    return {
      kind: import_graphql2.Kind.NON_NULL_TYPE,
      type: innerType
    };
  } else if ((0, import_graphql2.isListType)(type)) {
    return {
      kind: import_graphql2.Kind.LIST_TYPE,
      type: astFromType(type.ofType)
    };
  }
  return {
    kind: import_graphql2.Kind.NAMED_TYPE,
    name: {
      kind: import_graphql2.Kind.NAME,
      value: type.name
    }
  };
}

// node_modules/@graphql-tools/utils/esm/astFromValueUntyped.js
var import_graphql3 = __toESM(require_graphql2(), 1);
function astFromValueUntyped(value) {
  if (value === null) {
    return { kind: import_graphql3.Kind.NULL };
  }
  if (value === void 0) {
    return null;
  }
  if (Array.isArray(value)) {
    const valuesNodes = [];
    for (const item of value) {
      const itemNode = astFromValueUntyped(item);
      if (itemNode != null) {
        valuesNodes.push(itemNode);
      }
    }
    return { kind: import_graphql3.Kind.LIST, values: valuesNodes };
  }
  if (typeof value === "object") {
    const fieldNodes = [];
    for (const fieldName in value) {
      const fieldValue = value[fieldName];
      const ast = astFromValueUntyped(fieldValue);
      if (ast) {
        fieldNodes.push({
          kind: import_graphql3.Kind.OBJECT_FIELD,
          name: { kind: import_graphql3.Kind.NAME, value: fieldName },
          value: ast
        });
      }
    }
    return { kind: import_graphql3.Kind.OBJECT, fields: fieldNodes };
  }
  if (typeof value === "boolean") {
    return { kind: import_graphql3.Kind.BOOLEAN, value };
  }
  if (typeof value === "number" && isFinite(value)) {
    const stringNum = String(value);
    return integerStringRegExp.test(stringNum) ? { kind: import_graphql3.Kind.INT, value: stringNum } : { kind: import_graphql3.Kind.FLOAT, value: stringNum };
  }
  if (typeof value === "string") {
    return { kind: import_graphql3.Kind.STRING, value };
  }
  throw new TypeError(`Cannot convert value to AST: ${value}.`);
}
var integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;

// node_modules/@graphql-tools/utils/esm/memoize.js
function memoize1(fn2) {
  const memoize1cache = /* @__PURE__ */ new WeakMap();
  return function memoized(a1) {
    const cachedValue = memoize1cache.get(a1);
    if (cachedValue === void 0) {
      const newValue = fn2(a1);
      memoize1cache.set(a1, newValue);
      return newValue;
    }
    return cachedValue;
  };
}

// node_modules/@graphql-tools/utils/esm/rootTypes.js
var getRootTypeNames = memoize1(function getRootTypeNames2(schema) {
  const rootTypes = getRootTypes(schema);
  return new Set([...rootTypes].map((type) => type.name));
});
var getRootTypes = memoize1(function getRootTypes2(schema) {
  const rootTypeMap = getRootTypeMap(schema);
  return new Set(rootTypeMap.values());
});
var getRootTypeMap = memoize1(function getRootTypeMap2(schema) {
  const rootTypeMap = /* @__PURE__ */ new Map();
  const queryType = schema.getQueryType();
  if (queryType) {
    rootTypeMap.set("query", queryType);
  }
  const mutationType = schema.getMutationType();
  if (mutationType) {
    rootTypeMap.set("mutation", mutationType);
  }
  const subscriptionType = schema.getSubscriptionType();
  if (subscriptionType) {
    rootTypeMap.set("subscription", subscriptionType);
  }
  return rootTypeMap;
});

// node_modules/@graphql-tools/utils/esm/print-schema-with-directives.js
function getDocumentNodeFromSchema(schema, options = {}) {
  const pathToDirectivesInExtensions = options.pathToDirectivesInExtensions;
  const typesMap = schema.getTypeMap();
  const schemaNode = astFromSchema(schema, pathToDirectivesInExtensions);
  const definitions = schemaNode != null ? [schemaNode] : [];
  const directives = schema.getDirectives();
  for (const directive of directives) {
    if ((0, import_graphql4.isSpecifiedDirective)(directive)) {
      continue;
    }
    definitions.push(astFromDirective(directive, schema, pathToDirectivesInExtensions));
  }
  for (const typeName in typesMap) {
    const type = typesMap[typeName];
    const isPredefinedScalar = (0, import_graphql4.isSpecifiedScalarType)(type);
    const isIntrospection = (0, import_graphql4.isIntrospectionType)(type);
    if (isPredefinedScalar || isIntrospection) {
      continue;
    }
    if ((0, import_graphql4.isObjectType)(type)) {
      definitions.push(astFromObjectType(type, schema, pathToDirectivesInExtensions));
    } else if ((0, import_graphql4.isInterfaceType)(type)) {
      definitions.push(astFromInterfaceType(type, schema, pathToDirectivesInExtensions));
    } else if ((0, import_graphql4.isUnionType)(type)) {
      definitions.push(astFromUnionType(type, schema, pathToDirectivesInExtensions));
    } else if ((0, import_graphql4.isInputObjectType)(type)) {
      definitions.push(astFromInputObjectType(type, schema, pathToDirectivesInExtensions));
    } else if ((0, import_graphql4.isEnumType)(type)) {
      definitions.push(astFromEnumType(type, schema, pathToDirectivesInExtensions));
    } else if ((0, import_graphql4.isScalarType)(type)) {
      definitions.push(astFromScalarType(type, schema, pathToDirectivesInExtensions));
    } else {
      throw new Error(`Unknown type ${type}.`);
    }
  }
  return {
    kind: import_graphql4.Kind.DOCUMENT,
    definitions
  };
}
function astFromSchema(schema, pathToDirectivesInExtensions) {
  var _a2, _b;
  const operationTypeMap = /* @__PURE__ */ new Map([
    ["query", void 0],
    ["mutation", void 0],
    ["subscription", void 0]
  ]);
  const nodes = [];
  if (schema.astNode != null) {
    nodes.push(schema.astNode);
  }
  if (schema.extensionASTNodes != null) {
    for (const extensionASTNode of schema.extensionASTNodes) {
      nodes.push(extensionASTNode);
    }
  }
  for (const node of nodes) {
    if (node.operationTypes) {
      for (const operationTypeDefinitionNode of node.operationTypes) {
        operationTypeMap.set(operationTypeDefinitionNode.operation, operationTypeDefinitionNode);
      }
    }
  }
  const rootTypeMap = getRootTypeMap(schema);
  for (const [operationTypeNode, operationTypeDefinitionNode] of operationTypeMap) {
    const rootType = rootTypeMap.get(operationTypeNode);
    if (rootType != null) {
      const rootTypeAST = astFromType(rootType);
      if (operationTypeDefinitionNode != null) {
        operationTypeDefinitionNode.type = rootTypeAST;
      } else {
        operationTypeMap.set(operationTypeNode, {
          kind: import_graphql4.Kind.OPERATION_TYPE_DEFINITION,
          operation: operationTypeNode,
          type: rootTypeAST
        });
      }
    }
  }
  const operationTypes = [...operationTypeMap.values()].filter(isSome);
  const directives = getDirectiveNodes(schema, schema, pathToDirectivesInExtensions);
  if (!operationTypes.length && !directives.length) {
    return null;
  }
  const schemaNode = {
    kind: operationTypes != null ? import_graphql4.Kind.SCHEMA_DEFINITION : import_graphql4.Kind.SCHEMA_EXTENSION,
    operationTypes,
    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
    directives
  };
  schemaNode.description = ((_b = (_a2 = schema.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : schema.description != null) ? {
    kind: import_graphql4.Kind.STRING,
    value: schema.description,
    block: true
  } : void 0;
  return schemaNode;
}
function astFromDirective(directive, schema, pathToDirectivesInExtensions) {
  var _a2, _b, _c2, _d2;
  return {
    kind: import_graphql4.Kind.DIRECTIVE_DEFINITION,
    description: (_b = (_a2 = directive.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : directive.description ? {
      kind: import_graphql4.Kind.STRING,
      value: directive.description
    } : void 0,
    name: {
      kind: import_graphql4.Kind.NAME,
      value: directive.name
    },
    arguments: (_c2 = directive.args) === null || _c2 === void 0 ? void 0 : _c2.map((arg) => astFromArg(arg, schema, pathToDirectivesInExtensions)),
    repeatable: directive.isRepeatable,
    locations: ((_d2 = directive.locations) === null || _d2 === void 0 ? void 0 : _d2.map((location) => ({
      kind: import_graphql4.Kind.NAME,
      value: location
    }))) || []
  };
}
function getDirectiveNodes(entity, schema, pathToDirectivesInExtensions) {
  const directivesInExtensions = getDirectivesInExtensions(entity, pathToDirectivesInExtensions);
  let nodes = [];
  if (entity.astNode != null) {
    nodes.push(entity.astNode);
  }
  if ("extensionASTNodes" in entity && entity.extensionASTNodes != null) {
    nodes = nodes.concat(entity.extensionASTNodes);
  }
  let directives;
  if (directivesInExtensions != null) {
    directives = makeDirectiveNodes(schema, directivesInExtensions);
  } else {
    directives = [];
    for (const node of nodes) {
      if (node.directives) {
        directives.push(...node.directives);
      }
    }
  }
  return directives;
}
function getDeprecatableDirectiveNodes(entity, schema, pathToDirectivesInExtensions) {
  var _a2, _b;
  let directiveNodesBesidesDeprecated = [];
  let deprecatedDirectiveNode = null;
  const directivesInExtensions = getDirectivesInExtensions(entity, pathToDirectivesInExtensions);
  let directives;
  if (directivesInExtensions != null) {
    directives = makeDirectiveNodes(schema, directivesInExtensions);
  } else {
    directives = (_a2 = entity.astNode) === null || _a2 === void 0 ? void 0 : _a2.directives;
  }
  if (directives != null) {
    directiveNodesBesidesDeprecated = directives.filter((directive) => directive.name.value !== "deprecated");
    if (entity.deprecationReason != null) {
      deprecatedDirectiveNode = (_b = directives.filter((directive) => directive.name.value === "deprecated")) === null || _b === void 0 ? void 0 : _b[0];
    }
  }
  if (entity.deprecationReason != null && deprecatedDirectiveNode == null) {
    deprecatedDirectiveNode = makeDeprecatedDirective(entity.deprecationReason);
  }
  return deprecatedDirectiveNode == null ? directiveNodesBesidesDeprecated : [deprecatedDirectiveNode].concat(directiveNodesBesidesDeprecated);
}
function astFromArg(arg, schema, pathToDirectivesInExtensions) {
  var _a2, _b, _c2;
  return {
    kind: import_graphql4.Kind.INPUT_VALUE_DEFINITION,
    description: (_b = (_a2 = arg.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : arg.description ? {
      kind: import_graphql4.Kind.STRING,
      value: arg.description,
      block: true
    } : void 0,
    name: {
      kind: import_graphql4.Kind.NAME,
      value: arg.name
    },
    type: astFromType(arg.type),
    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
    defaultValue: arg.defaultValue !== void 0 ? (_c2 = (0, import_graphql4.astFromValue)(arg.defaultValue, arg.type)) !== null && _c2 !== void 0 ? _c2 : void 0 : void 0,
    directives: getDeprecatableDirectiveNodes(arg, schema, pathToDirectivesInExtensions)
  };
}
function astFromObjectType(type, schema, pathToDirectivesInExtensions) {
  var _a2, _b;
  return {
    kind: import_graphql4.Kind.OBJECT_TYPE_DEFINITION,
    description: (_b = (_a2 = type.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type.description ? {
      kind: import_graphql4.Kind.STRING,
      value: type.description,
      block: true
    } : void 0,
    name: {
      kind: import_graphql4.Kind.NAME,
      value: type.name
    },
    fields: Object.values(type.getFields()).map((field) => astFromField(field, schema, pathToDirectivesInExtensions)),
    interfaces: Object.values(type.getInterfaces()).map((iFace) => astFromType(iFace)),
    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions)
  };
}
function astFromInterfaceType(type, schema, pathToDirectivesInExtensions) {
  var _a2, _b;
  const node = {
    kind: import_graphql4.Kind.INTERFACE_TYPE_DEFINITION,
    description: (_b = (_a2 = type.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type.description ? {
      kind: import_graphql4.Kind.STRING,
      value: type.description,
      block: true
    } : void 0,
    name: {
      kind: import_graphql4.Kind.NAME,
      value: type.name
    },
    fields: Object.values(type.getFields()).map((field) => astFromField(field, schema, pathToDirectivesInExtensions)),
    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions)
  };
  if ("getInterfaces" in type) {
    node.interfaces = Object.values(type.getInterfaces()).map((iFace) => astFromType(iFace));
  }
  return node;
}
function astFromUnionType(type, schema, pathToDirectivesInExtensions) {
  var _a2, _b;
  return {
    kind: import_graphql4.Kind.UNION_TYPE_DEFINITION,
    description: (_b = (_a2 = type.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type.description ? {
      kind: import_graphql4.Kind.STRING,
      value: type.description,
      block: true
    } : void 0,
    name: {
      kind: import_graphql4.Kind.NAME,
      value: type.name
    },
    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),
    types: type.getTypes().map((type2) => astFromType(type2))
  };
}
function astFromInputObjectType(type, schema, pathToDirectivesInExtensions) {
  var _a2, _b;
  return {
    kind: import_graphql4.Kind.INPUT_OBJECT_TYPE_DEFINITION,
    description: (_b = (_a2 = type.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type.description ? {
      kind: import_graphql4.Kind.STRING,
      value: type.description,
      block: true
    } : void 0,
    name: {
      kind: import_graphql4.Kind.NAME,
      value: type.name
    },
    fields: Object.values(type.getFields()).map((field) => astFromInputField(field, schema, pathToDirectivesInExtensions)),
    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions)
  };
}
function astFromEnumType(type, schema, pathToDirectivesInExtensions) {
  var _a2, _b;
  return {
    kind: import_graphql4.Kind.ENUM_TYPE_DEFINITION,
    description: (_b = (_a2 = type.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type.description ? {
      kind: import_graphql4.Kind.STRING,
      value: type.description,
      block: true
    } : void 0,
    name: {
      kind: import_graphql4.Kind.NAME,
      value: type.name
    },
    values: Object.values(type.getValues()).map((value) => astFromEnumValue(value, schema, pathToDirectivesInExtensions)),
    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions)
  };
}
function astFromScalarType(type, schema, pathToDirectivesInExtensions) {
  var _a2, _b, _c2;
  const directivesInExtensions = getDirectivesInExtensions(type, pathToDirectivesInExtensions);
  const directives = directivesInExtensions ? makeDirectiveNodes(schema, directivesInExtensions) : ((_a2 = type.astNode) === null || _a2 === void 0 ? void 0 : _a2.directives) || [];
  const specifiedByValue = type["specifiedByUrl"] || type["specifiedByURL"];
  if (specifiedByValue && !directives.some((directiveNode) => directiveNode.name.value === "specifiedBy")) {
    const specifiedByArgs = {
      url: specifiedByValue
    };
    directives.push(makeDirectiveNode("specifiedBy", specifiedByArgs));
  }
  return {
    kind: import_graphql4.Kind.SCALAR_TYPE_DEFINITION,
    description: (_c2 = (_b = type.astNode) === null || _b === void 0 ? void 0 : _b.description) !== null && _c2 !== void 0 ? _c2 : type.description ? {
      kind: import_graphql4.Kind.STRING,
      value: type.description,
      block: true
    } : void 0,
    name: {
      kind: import_graphql4.Kind.NAME,
      value: type.name
    },
    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
    directives
  };
}
function astFromField(field, schema, pathToDirectivesInExtensions) {
  var _a2, _b;
  return {
    kind: import_graphql4.Kind.FIELD_DEFINITION,
    description: (_b = (_a2 = field.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : field.description ? {
      kind: import_graphql4.Kind.STRING,
      value: field.description,
      block: true
    } : void 0,
    name: {
      kind: import_graphql4.Kind.NAME,
      value: field.name
    },
    arguments: field.args.map((arg) => astFromArg(arg, schema, pathToDirectivesInExtensions)),
    type: astFromType(field.type),
    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
    directives: getDeprecatableDirectiveNodes(field, schema, pathToDirectivesInExtensions)
  };
}
function astFromInputField(field, schema, pathToDirectivesInExtensions) {
  var _a2, _b, _c2;
  return {
    kind: import_graphql4.Kind.INPUT_VALUE_DEFINITION,
    description: (_b = (_a2 = field.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : field.description ? {
      kind: import_graphql4.Kind.STRING,
      value: field.description,
      block: true
    } : void 0,
    name: {
      kind: import_graphql4.Kind.NAME,
      value: field.name
    },
    type: astFromType(field.type),
    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
    directives: getDeprecatableDirectiveNodes(field, schema, pathToDirectivesInExtensions),
    defaultValue: (_c2 = (0, import_graphql4.astFromValue)(field.defaultValue, field.type)) !== null && _c2 !== void 0 ? _c2 : void 0
  };
}
function astFromEnumValue(value, schema, pathToDirectivesInExtensions) {
  var _a2, _b;
  return {
    kind: import_graphql4.Kind.ENUM_VALUE_DEFINITION,
    description: (_b = (_a2 = value.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : value.description ? {
      kind: import_graphql4.Kind.STRING,
      value: value.description,
      block: true
    } : void 0,
    name: {
      kind: import_graphql4.Kind.NAME,
      value: value.name
    },
    // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
    directives: getDeprecatableDirectiveNodes(value, schema, pathToDirectivesInExtensions)
  };
}
function makeDeprecatedDirective(deprecationReason) {
  return makeDirectiveNode("deprecated", { reason: deprecationReason }, import_graphql4.GraphQLDeprecatedDirective);
}
function makeDirectiveNode(name, args, directive) {
  const directiveArguments = [];
  if (directive != null) {
    for (const arg of directive.args) {
      const argName = arg.name;
      const argValue = args[argName];
      if (argValue !== void 0) {
        const value = (0, import_graphql4.astFromValue)(argValue, arg.type);
        if (value) {
          directiveArguments.push({
            kind: import_graphql4.Kind.ARGUMENT,
            name: {
              kind: import_graphql4.Kind.NAME,
              value: argName
            },
            value
          });
        }
      }
    }
  } else {
    for (const argName in args) {
      const argValue = args[argName];
      const value = astFromValueUntyped(argValue);
      if (value) {
        directiveArguments.push({
          kind: import_graphql4.Kind.ARGUMENT,
          name: {
            kind: import_graphql4.Kind.NAME,
            value: argName
          },
          value
        });
      }
    }
  }
  return {
    kind: import_graphql4.Kind.DIRECTIVE,
    name: {
      kind: import_graphql4.Kind.NAME,
      value: name
    },
    arguments: directiveArguments
  };
}
function makeDirectiveNodes(schema, directiveValues) {
  const directiveNodes = [];
  for (const directiveName in directiveValues) {
    const arrayOrSingleValue = directiveValues[directiveName];
    const directive = schema === null || schema === void 0 ? void 0 : schema.getDirective(directiveName);
    if (Array.isArray(arrayOrSingleValue)) {
      for (const value of arrayOrSingleValue) {
        directiveNodes.push(makeDirectiveNode(directiveName, value, directive));
      }
    } else {
      directiveNodes.push(makeDirectiveNode(directiveName, arrayOrSingleValue, directive));
    }
  }
  return directiveNodes;
}

// node_modules/@graphql-tools/utils/esm/comments.js
var import_graphql5 = __toESM(require_graphql2(), 1);
var MAX_LINE_LENGTH = 80;
var commentsRegistry = {};
function resetComments() {
  commentsRegistry = {};
}
function collectComment(node) {
  var _a2;
  const entityName = (_a2 = node.name) === null || _a2 === void 0 ? void 0 : _a2.value;
  if (entityName == null) {
    return;
  }
  pushComment(node, entityName);
  switch (node.kind) {
    case "EnumTypeDefinition":
      if (node.values) {
        for (const value of node.values) {
          pushComment(value, entityName, value.name.value);
        }
      }
      break;
    case "ObjectTypeDefinition":
    case "InputObjectTypeDefinition":
    case "InterfaceTypeDefinition":
      if (node.fields) {
        for (const field of node.fields) {
          pushComment(field, entityName, field.name.value);
          if (isFieldDefinitionNode(field) && field.arguments) {
            for (const arg of field.arguments) {
              pushComment(arg, entityName, field.name.value, arg.name.value);
            }
          }
        }
      }
      break;
  }
}
function pushComment(node, entity, field, argument) {
  const comment = getComment(node);
  if (typeof comment !== "string" || comment.length === 0) {
    return;
  }
  const keys = [entity];
  if (field) {
    keys.push(field);
    if (argument) {
      keys.push(argument);
    }
  }
  const path2 = keys.join(".");
  if (!commentsRegistry[path2]) {
    commentsRegistry[path2] = [];
  }
  commentsRegistry[path2].push(comment);
}
function printComment(comment) {
  return "\n# " + comment.replace(/\n/g, "\n# ");
}
function join2(maybeArray, separator) {
  return maybeArray ? maybeArray.filter((x2) => x2).join(separator || "") : "";
}
function hasMultilineItems(maybeArray) {
  var _a2;
  return (_a2 = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some((str) => str.includes("\n"))) !== null && _a2 !== void 0 ? _a2 : false;
}
function addDescription(cb) {
  return (node, _key, _parent, path2, ancestors) => {
    var _a2;
    const keys = [];
    const parent = path2.reduce((prev, key2) => {
      if (["fields", "arguments", "values"].includes(key2) && prev.name) {
        keys.push(prev.name.value);
      }
      return prev[key2];
    }, ancestors[0]);
    const key = [...keys, (_a2 = parent === null || parent === void 0 ? void 0 : parent.name) === null || _a2 === void 0 ? void 0 : _a2.value].filter(Boolean).join(".");
    const items = [];
    if (node.kind.includes("Definition") && commentsRegistry[key]) {
      items.push(...commentsRegistry[key]);
    }
    return join2([...items.map(printComment), node.description, cb(node, _key, _parent, path2, ancestors)], "\n");
  };
}
function indent(maybeString) {
  return maybeString && `  ${maybeString.replace(/\n/g, "\n  ")}`;
}
function block(array) {
  return array && array.length !== 0 ? `{
${indent(join2(array, "\n"))}
}` : "";
}
function wrap(start, maybeString, end) {
  return maybeString ? start + maybeString + (end || "") : "";
}
function printBlockString(value, isDescription = false) {
  const escaped = value.replace(/"""/g, '\\"""');
  return (value[0] === " " || value[0] === "	") && value.indexOf("\n") === -1 ? `"""${escaped.replace(/"$/, '"\n')}"""` : `"""
${isDescription ? escaped : indent(escaped)}
"""`;
}
var printDocASTReducer = {
  Name: { leave: (node) => node.value },
  Variable: { leave: (node) => "$" + node.name },
  // Document
  Document: {
    leave: (node) => join2(node.definitions, "\n\n")
  },
  OperationDefinition: {
    leave: (node) => {
      const varDefs = wrap("(", join2(node.variableDefinitions, ", "), ")");
      const prefix = join2([node.operation, join2([node.name, varDefs]), join2(node.directives, " ")], " ");
      return prefix + " " + node.selectionSet;
    }
  },
  VariableDefinition: {
    leave: ({ variable, type, defaultValue, directives }) => variable + ": " + type + wrap(" = ", defaultValue) + wrap(" ", join2(directives, " "))
  },
  SelectionSet: { leave: ({ selections }) => block(selections) },
  Field: {
    leave({ alias, name, arguments: args, directives, selectionSet }) {
      const prefix = wrap("", alias, ": ") + name;
      let argsLine = prefix + wrap("(", join2(args, ", "), ")");
      if (argsLine.length > MAX_LINE_LENGTH) {
        argsLine = prefix + wrap("(\n", indent(join2(args, "\n")), "\n)");
      }
      return join2([argsLine, join2(directives, " "), selectionSet], " ");
    }
  },
  Argument: { leave: ({ name, value }) => name + ": " + value },
  // Fragments
  FragmentSpread: {
    leave: ({ name, directives }) => "..." + name + wrap(" ", join2(directives, " "))
  },
  InlineFragment: {
    leave: ({ typeCondition, directives, selectionSet }) => join2(["...", wrap("on ", typeCondition), join2(directives, " "), selectionSet], " ")
  },
  FragmentDefinition: {
    leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => (
      // Note: fragment variable definitions are experimental and may be changed
      // or removed in the future.
      `fragment ${name}${wrap("(", join2(variableDefinitions, ", "), ")")} on ${typeCondition} ${wrap("", join2(directives, " "), " ")}` + selectionSet
    )
  },
  // Value
  IntValue: { leave: ({ value }) => value },
  FloatValue: { leave: ({ value }) => value },
  StringValue: {
    leave: ({ value, block: isBlockString }) => {
      if (isBlockString) {
        return printBlockString(value);
      }
      return JSON.stringify(value);
    }
  },
  BooleanValue: { leave: ({ value }) => value ? "true" : "false" },
  NullValue: { leave: () => "null" },
  EnumValue: { leave: ({ value }) => value },
  ListValue: { leave: ({ values }) => "[" + join2(values, ", ") + "]" },
  ObjectValue: { leave: ({ fields }) => "{" + join2(fields, ", ") + "}" },
  ObjectField: { leave: ({ name, value }) => name + ": " + value },
  // Directive
  Directive: {
    leave: ({ name, arguments: args }) => "@" + name + wrap("(", join2(args, ", "), ")")
  },
  // Type
  NamedType: { leave: ({ name }) => name },
  ListType: { leave: ({ type }) => "[" + type + "]" },
  NonNullType: { leave: ({ type }) => type + "!" },
  // Type System Definitions
  SchemaDefinition: {
    leave: ({ directives, operationTypes }) => join2(["schema", join2(directives, " "), block(operationTypes)], " ")
  },
  OperationTypeDefinition: {
    leave: ({ operation, type }) => operation + ": " + type
  },
  ScalarTypeDefinition: {
    leave: ({ name, directives }) => join2(["scalar", name, join2(directives, " ")], " ")
  },
  ObjectTypeDefinition: {
    leave: ({ name, interfaces, directives, fields }) => join2(["type", name, wrap("implements ", join2(interfaces, " & ")), join2(directives, " "), block(fields)], " ")
  },
  FieldDefinition: {
    leave: ({ name, arguments: args, type, directives }) => name + (hasMultilineItems(args) ? wrap("(\n", indent(join2(args, "\n")), "\n)") : wrap("(", join2(args, ", "), ")")) + ": " + type + wrap(" ", join2(directives, " "))
  },
  InputValueDefinition: {
    leave: ({ name, type, defaultValue, directives }) => join2([name + ": " + type, wrap("= ", defaultValue), join2(directives, " ")], " ")
  },
  InterfaceTypeDefinition: {
    leave: ({ name, interfaces, directives, fields }) => join2(["interface", name, wrap("implements ", join2(interfaces, " & ")), join2(directives, " "), block(fields)], " ")
  },
  UnionTypeDefinition: {
    leave: ({ name, directives, types }) => join2(["union", name, join2(directives, " "), wrap("= ", join2(types, " | "))], " ")
  },
  EnumTypeDefinition: {
    leave: ({ name, directives, values }) => join2(["enum", name, join2(directives, " "), block(values)], " ")
  },
  EnumValueDefinition: {
    leave: ({ name, directives }) => join2([name, join2(directives, " ")], " ")
  },
  InputObjectTypeDefinition: {
    leave: ({ name, directives, fields }) => join2(["input", name, join2(directives, " "), block(fields)], " ")
  },
  DirectiveDefinition: {
    leave: ({ name, arguments: args, repeatable, locations }) => "directive @" + name + (hasMultilineItems(args) ? wrap("(\n", indent(join2(args, "\n")), "\n)") : wrap("(", join2(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join2(locations, " | ")
  },
  SchemaExtension: {
    leave: ({ directives, operationTypes }) => join2(["extend schema", join2(directives, " "), block(operationTypes)], " ")
  },
  ScalarTypeExtension: {
    leave: ({ name, directives }) => join2(["extend scalar", name, join2(directives, " ")], " ")
  },
  ObjectTypeExtension: {
    leave: ({ name, interfaces, directives, fields }) => join2(["extend type", name, wrap("implements ", join2(interfaces, " & ")), join2(directives, " "), block(fields)], " ")
  },
  InterfaceTypeExtension: {
    leave: ({ name, interfaces, directives, fields }) => join2(["extend interface", name, wrap("implements ", join2(interfaces, " & ")), join2(directives, " "), block(fields)], " ")
  },
  UnionTypeExtension: {
    leave: ({ name, directives, types }) => join2(["extend union", name, join2(directives, " "), wrap("= ", join2(types, " | "))], " ")
  },
  EnumTypeExtension: {
    leave: ({ name, directives, values }) => join2(["extend enum", name, join2(directives, " "), block(values)], " ")
  },
  InputObjectTypeExtension: {
    leave: ({ name, directives, fields }) => join2(["extend input", name, join2(directives, " "), block(fields)], " ")
  }
};
var printDocASTReducerWithComments = Object.keys(printDocASTReducer).reduce((prev, key) => ({
  ...prev,
  [key]: {
    leave: addDescription(printDocASTReducer[key].leave)
  }
}), {});
function printWithComments(ast) {
  return (0, import_graphql5.visit)(ast, printDocASTReducerWithComments);
}
function isFieldDefinitionNode(node) {
  return node.kind === "FieldDefinition";
}
function getComment(node) {
  const rawValue = getLeadingCommentBlock(node);
  if (rawValue !== void 0) {
    return dedentBlockStringValue(`
${rawValue}`);
  }
}
function getLeadingCommentBlock(node) {
  const loc = node.loc;
  if (!loc) {
    return;
  }
  const comments = [];
  let token = loc.startToken.prev;
  while (token != null && token.kind === import_graphql5.TokenKind.COMMENT && token.next != null && token.prev != null && token.line + 1 === token.next.line && token.line !== token.prev.line) {
    const value = String(token.value);
    comments.push(value);
    token = token.prev;
  }
  return comments.length > 0 ? comments.reverse().join("\n") : void 0;
}
function dedentBlockStringValue(rawString) {
  const lines = rawString.split(/\r\n|[\n\r]/g);
  const commonIndent = getBlockStringIndentation(lines);
  if (commonIndent !== 0) {
    for (let i = 1; i < lines.length; i++) {
      lines[i] = lines[i].slice(commonIndent);
    }
  }
  while (lines.length > 0 && isBlank(lines[0])) {
    lines.shift();
  }
  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {
    lines.pop();
  }
  return lines.join("\n");
}
function getBlockStringIndentation(lines) {
  let commonIndent = null;
  for (let i = 1; i < lines.length; i++) {
    const line = lines[i];
    const indent2 = leadingWhitespace(line);
    if (indent2 === line.length) {
      continue;
    }
    if (commonIndent === null || indent2 < commonIndent) {
      commonIndent = indent2;
      if (commonIndent === 0) {
        break;
      }
    }
  }
  return commonIndent === null ? 0 : commonIndent;
}
function leadingWhitespace(str) {
  let i = 0;
  while (i < str.length && (str[i] === " " || str[i] === "	")) {
    i++;
  }
  return i;
}
function isBlank(str) {
  return leadingWhitespace(str) === str.length;
}

// node_modules/@graphql-tools/utils/esm/Interfaces.js
var MapperKind;
(function(MapperKind2) {
  MapperKind2["TYPE"] = "MapperKind.TYPE";
  MapperKind2["SCALAR_TYPE"] = "MapperKind.SCALAR_TYPE";
  MapperKind2["ENUM_TYPE"] = "MapperKind.ENUM_TYPE";
  MapperKind2["COMPOSITE_TYPE"] = "MapperKind.COMPOSITE_TYPE";
  MapperKind2["OBJECT_TYPE"] = "MapperKind.OBJECT_TYPE";
  MapperKind2["INPUT_OBJECT_TYPE"] = "MapperKind.INPUT_OBJECT_TYPE";
  MapperKind2["ABSTRACT_TYPE"] = "MapperKind.ABSTRACT_TYPE";
  MapperKind2["UNION_TYPE"] = "MapperKind.UNION_TYPE";
  MapperKind2["INTERFACE_TYPE"] = "MapperKind.INTERFACE_TYPE";
  MapperKind2["ROOT_OBJECT"] = "MapperKind.ROOT_OBJECT";
  MapperKind2["QUERY"] = "MapperKind.QUERY";
  MapperKind2["MUTATION"] = "MapperKind.MUTATION";
  MapperKind2["SUBSCRIPTION"] = "MapperKind.SUBSCRIPTION";
  MapperKind2["DIRECTIVE"] = "MapperKind.DIRECTIVE";
  MapperKind2["FIELD"] = "MapperKind.FIELD";
  MapperKind2["COMPOSITE_FIELD"] = "MapperKind.COMPOSITE_FIELD";
  MapperKind2["OBJECT_FIELD"] = "MapperKind.OBJECT_FIELD";
  MapperKind2["ROOT_FIELD"] = "MapperKind.ROOT_FIELD";
  MapperKind2["QUERY_ROOT_FIELD"] = "MapperKind.QUERY_ROOT_FIELD";
  MapperKind2["MUTATION_ROOT_FIELD"] = "MapperKind.MUTATION_ROOT_FIELD";
  MapperKind2["SUBSCRIPTION_ROOT_FIELD"] = "MapperKind.SUBSCRIPTION_ROOT_FIELD";
  MapperKind2["INTERFACE_FIELD"] = "MapperKind.INTERFACE_FIELD";
  MapperKind2["INPUT_OBJECT_FIELD"] = "MapperKind.INPUT_OBJECT_FIELD";
  MapperKind2["ARGUMENT"] = "MapperKind.ARGUMENT";
  MapperKind2["ENUM_VALUE"] = "MapperKind.ENUM_VALUE";
})(MapperKind || (MapperKind = {}));

// node_modules/@graphql-tools/utils/esm/mapSchema.js
var import_graphql10 = __toESM(require_graphql2(), 1);

// node_modules/@graphql-tools/utils/esm/getObjectTypeFromTypeMap.js
var import_graphql6 = __toESM(require_graphql2(), 1);
function getObjectTypeFromTypeMap(typeMap, type) {
  if (type) {
    const maybeObjectType = typeMap[type.name];
    if ((0, import_graphql6.isObjectType)(maybeObjectType)) {
      return maybeObjectType;
    }
  }
}

// node_modules/@graphql-tools/utils/esm/rewire.js
var import_graphql8 = __toESM(require_graphql2(), 1);

// node_modules/@graphql-tools/utils/esm/stub.js
var import_graphql7 = __toESM(require_graphql2(), 1);
function isNamedStub(type) {
  if ("getFields" in type) {
    const fields = type.getFields();
    for (const fieldName in fields) {
      const field = fields[fieldName];
      return field.name === "_fake";
    }
  }
  return false;
}
function getBuiltInForStub(type) {
  switch (type.name) {
    case import_graphql7.GraphQLInt.name:
      return import_graphql7.GraphQLInt;
    case import_graphql7.GraphQLFloat.name:
      return import_graphql7.GraphQLFloat;
    case import_graphql7.GraphQLString.name:
      return import_graphql7.GraphQLString;
    case import_graphql7.GraphQLBoolean.name:
      return import_graphql7.GraphQLBoolean;
    case import_graphql7.GraphQLID.name:
      return import_graphql7.GraphQLID;
    default:
      return type;
  }
}

// node_modules/@graphql-tools/utils/esm/rewire.js
function rewireTypes(originalTypeMap, directives) {
  const referenceTypeMap = /* @__PURE__ */ Object.create(null);
  for (const typeName in originalTypeMap) {
    referenceTypeMap[typeName] = originalTypeMap[typeName];
  }
  const newTypeMap = /* @__PURE__ */ Object.create(null);
  for (const typeName in referenceTypeMap) {
    const namedType = referenceTypeMap[typeName];
    if (namedType == null || typeName.startsWith("__")) {
      continue;
    }
    const newName = namedType.name;
    if (newName.startsWith("__")) {
      continue;
    }
    if (newTypeMap[newName] != null) {
      console.warn(`Duplicate schema type name ${newName} found; keeping the existing one found in the schema`);
      continue;
    }
    newTypeMap[newName] = namedType;
  }
  for (const typeName in newTypeMap) {
    newTypeMap[typeName] = rewireNamedType(newTypeMap[typeName]);
  }
  const newDirectives = directives.map((directive) => rewireDirective(directive));
  return {
    typeMap: newTypeMap,
    directives: newDirectives
  };
  function rewireDirective(directive) {
    if ((0, import_graphql8.isSpecifiedDirective)(directive)) {
      return directive;
    }
    const directiveConfig = directive.toConfig();
    directiveConfig.args = rewireArgs(directiveConfig.args);
    return new import_graphql8.GraphQLDirective(directiveConfig);
  }
  function rewireArgs(args) {
    const rewiredArgs = {};
    for (const argName in args) {
      const arg = args[argName];
      const rewiredArgType = rewireType(arg.type);
      if (rewiredArgType != null) {
        arg.type = rewiredArgType;
        rewiredArgs[argName] = arg;
      }
    }
    return rewiredArgs;
  }
  function rewireNamedType(type) {
    if ((0, import_graphql8.isObjectType)(type)) {
      const config2 = type.toConfig();
      const newConfig = {
        ...config2,
        fields: () => rewireFields(config2.fields),
        interfaces: () => rewireNamedTypes(config2.interfaces)
      };
      return new import_graphql8.GraphQLObjectType(newConfig);
    } else if ((0, import_graphql8.isInterfaceType)(type)) {
      const config2 = type.toConfig();
      const newConfig = {
        ...config2,
        fields: () => rewireFields(config2.fields)
      };
      if ("interfaces" in newConfig) {
        newConfig.interfaces = () => rewireNamedTypes(config2.interfaces);
      }
      return new import_graphql8.GraphQLInterfaceType(newConfig);
    } else if ((0, import_graphql8.isUnionType)(type)) {
      const config2 = type.toConfig();
      const newConfig = {
        ...config2,
        types: () => rewireNamedTypes(config2.types)
      };
      return new import_graphql8.GraphQLUnionType(newConfig);
    } else if ((0, import_graphql8.isInputObjectType)(type)) {
      const config2 = type.toConfig();
      const newConfig = {
        ...config2,
        fields: () => rewireInputFields(config2.fields)
      };
      return new import_graphql8.GraphQLInputObjectType(newConfig);
    } else if ((0, import_graphql8.isEnumType)(type)) {
      const enumConfig = type.toConfig();
      return new import_graphql8.GraphQLEnumType(enumConfig);
    } else if ((0, import_graphql8.isScalarType)(type)) {
      if ((0, import_graphql8.isSpecifiedScalarType)(type)) {
        return type;
      }
      const scalarConfig = type.toConfig();
      return new import_graphql8.GraphQLScalarType(scalarConfig);
    }
    throw new Error(`Unexpected schema type: ${type}`);
  }
  function rewireFields(fields) {
    const rewiredFields = {};
    for (const fieldName in fields) {
      const field = fields[fieldName];
      const rewiredFieldType = rewireType(field.type);
      if (rewiredFieldType != null && field.args) {
        field.type = rewiredFieldType;
        field.args = rewireArgs(field.args);
        rewiredFields[fieldName] = field;
      }
    }
    return rewiredFields;
  }
  function rewireInputFields(fields) {
    const rewiredFields = {};
    for (const fieldName in fields) {
      const field = fields[fieldName];
      const rewiredFieldType = rewireType(field.type);
      if (rewiredFieldType != null) {
        field.type = rewiredFieldType;
        rewiredFields[fieldName] = field;
      }
    }
    return rewiredFields;
  }
  function rewireNamedTypes(namedTypes) {
    const rewiredTypes = [];
    for (const namedType of namedTypes) {
      const rewiredType = rewireType(namedType);
      if (rewiredType != null) {
        rewiredTypes.push(rewiredType);
      }
    }
    return rewiredTypes;
  }
  function rewireType(type) {
    if ((0, import_graphql8.isListType)(type)) {
      const rewiredType = rewireType(type.ofType);
      return rewiredType != null ? new import_graphql8.GraphQLList(rewiredType) : null;
    } else if ((0, import_graphql8.isNonNullType)(type)) {
      const rewiredType = rewireType(type.ofType);
      return rewiredType != null ? new import_graphql8.GraphQLNonNull(rewiredType) : null;
    } else if ((0, import_graphql8.isNamedType)(type)) {
      let rewiredType = referenceTypeMap[type.name];
      if (rewiredType === void 0) {
        rewiredType = isNamedStub(type) ? getBuiltInForStub(type) : rewireNamedType(type);
        newTypeMap[rewiredType.name] = referenceTypeMap[type.name] = rewiredType;
      }
      return rewiredType != null ? newTypeMap[rewiredType.name] : null;
    }
    return null;
  }
}

// node_modules/@graphql-tools/utils/esm/transformInputValue.js
var import_graphql9 = __toESM(require_graphql2(), 1);
function transformInputValue(type, value, inputLeafValueTransformer = null, inputObjectValueTransformer = null) {
  if (value == null) {
    return value;
  }
  const nullableType = (0, import_graphql9.getNullableType)(type);
  if ((0, import_graphql9.isLeafType)(nullableType)) {
    return inputLeafValueTransformer != null ? inputLeafValueTransformer(nullableType, value) : value;
  } else if ((0, import_graphql9.isListType)(nullableType)) {
    return asArray(value).map((listMember) => transformInputValue(nullableType.ofType, listMember, inputLeafValueTransformer, inputObjectValueTransformer));
  } else if ((0, import_graphql9.isInputObjectType)(nullableType)) {
    const fields = nullableType.getFields();
    const newValue = {};
    for (const key in value) {
      const field = fields[key];
      if (field != null) {
        newValue[key] = transformInputValue(field.type, value[key], inputLeafValueTransformer, inputObjectValueTransformer);
      }
    }
    return inputObjectValueTransformer != null ? inputObjectValueTransformer(nullableType, newValue) : newValue;
  }
}
function serializeInputValue(type, value) {
  return transformInputValue(type, value, (t, v) => {
    try {
      return t.serialize(v);
    } catch (_a2) {
      return v;
    }
  });
}
function parseInputValue(type, value) {
  return transformInputValue(type, value, (t, v) => {
    try {
      return t.parseValue(v);
    } catch (_a2) {
      return v;
    }
  });
}

// node_modules/@graphql-tools/utils/esm/mapSchema.js
function mapSchema(schema, schemaMapper = {}) {
  const newTypeMap = mapArguments(mapFields(mapTypes(mapDefaultValues(mapEnumValues(mapTypes(mapDefaultValues(schema.getTypeMap(), schema, serializeInputValue), schema, schemaMapper, (type) => (0, import_graphql10.isLeafType)(type)), schema, schemaMapper), schema, parseInputValue), schema, schemaMapper, (type) => !(0, import_graphql10.isLeafType)(type)), schema, schemaMapper), schema, schemaMapper);
  const originalDirectives = schema.getDirectives();
  const newDirectives = mapDirectives(originalDirectives, schema, schemaMapper);
  const { typeMap, directives } = rewireTypes(newTypeMap, newDirectives);
  return new import_graphql10.GraphQLSchema({
    ...schema.toConfig(),
    query: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema.getQueryType())),
    mutation: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema.getMutationType())),
    subscription: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema.getSubscriptionType())),
    types: Object.values(typeMap),
    directives
  });
}
function mapTypes(originalTypeMap, schema, schemaMapper, testFn = () => true) {
  const newTypeMap = {};
  for (const typeName in originalTypeMap) {
    if (!typeName.startsWith("__")) {
      const originalType = originalTypeMap[typeName];
      if (originalType == null || !testFn(originalType)) {
        newTypeMap[typeName] = originalType;
        continue;
      }
      const typeMapper = getTypeMapper(schema, schemaMapper, typeName);
      if (typeMapper == null) {
        newTypeMap[typeName] = originalType;
        continue;
      }
      const maybeNewType = typeMapper(originalType, schema);
      if (maybeNewType === void 0) {
        newTypeMap[typeName] = originalType;
        continue;
      }
      newTypeMap[typeName] = maybeNewType;
    }
  }
  return newTypeMap;
}
function mapEnumValues(originalTypeMap, schema, schemaMapper) {
  const enumValueMapper = getEnumValueMapper(schemaMapper);
  if (!enumValueMapper) {
    return originalTypeMap;
  }
  return mapTypes(originalTypeMap, schema, {
    [MapperKind.ENUM_TYPE]: (type) => {
      const config2 = type.toConfig();
      const originalEnumValueConfigMap = config2.values;
      const newEnumValueConfigMap = {};
      for (const externalValue in originalEnumValueConfigMap) {
        const originalEnumValueConfig = originalEnumValueConfigMap[externalValue];
        const mappedEnumValue = enumValueMapper(originalEnumValueConfig, type.name, schema, externalValue);
        if (mappedEnumValue === void 0) {
          newEnumValueConfigMap[externalValue] = originalEnumValueConfig;
        } else if (Array.isArray(mappedEnumValue)) {
          const [newExternalValue, newEnumValueConfig] = mappedEnumValue;
          newEnumValueConfigMap[newExternalValue] = newEnumValueConfig === void 0 ? originalEnumValueConfig : newEnumValueConfig;
        } else if (mappedEnumValue !== null) {
          newEnumValueConfigMap[externalValue] = mappedEnumValue;
        }
      }
      return correctASTNodes(new import_graphql10.GraphQLEnumType({
        ...config2,
        values: newEnumValueConfigMap
      }));
    }
  }, (type) => (0, import_graphql10.isEnumType)(type));
}
function mapDefaultValues(originalTypeMap, schema, fn2) {
  const newTypeMap = mapArguments(originalTypeMap, schema, {
    [MapperKind.ARGUMENT]: (argumentConfig) => {
      if (argumentConfig.defaultValue === void 0) {
        return argumentConfig;
      }
      const maybeNewType = getNewType(originalTypeMap, argumentConfig.type);
      if (maybeNewType != null) {
        return {
          ...argumentConfig,
          defaultValue: fn2(maybeNewType, argumentConfig.defaultValue)
        };
      }
    }
  });
  return mapFields(newTypeMap, schema, {
    [MapperKind.INPUT_OBJECT_FIELD]: (inputFieldConfig) => {
      if (inputFieldConfig.defaultValue === void 0) {
        return inputFieldConfig;
      }
      const maybeNewType = getNewType(newTypeMap, inputFieldConfig.type);
      if (maybeNewType != null) {
        return {
          ...inputFieldConfig,
          defaultValue: fn2(maybeNewType, inputFieldConfig.defaultValue)
        };
      }
    }
  });
}
function getNewType(newTypeMap, type) {
  if ((0, import_graphql10.isListType)(type)) {
    const newType = getNewType(newTypeMap, type.ofType);
    return newType != null ? new import_graphql10.GraphQLList(newType) : null;
  } else if ((0, import_graphql10.isNonNullType)(type)) {
    const newType = getNewType(newTypeMap, type.ofType);
    return newType != null ? new import_graphql10.GraphQLNonNull(newType) : null;
  } else if ((0, import_graphql10.isNamedType)(type)) {
    const newType = newTypeMap[type.name];
    return newType != null ? newType : null;
  }
  return null;
}
function mapFields(originalTypeMap, schema, schemaMapper) {
  const newTypeMap = {};
  for (const typeName in originalTypeMap) {
    if (!typeName.startsWith("__")) {
      const originalType = originalTypeMap[typeName];
      if (!(0, import_graphql10.isObjectType)(originalType) && !(0, import_graphql10.isInterfaceType)(originalType) && !(0, import_graphql10.isInputObjectType)(originalType)) {
        newTypeMap[typeName] = originalType;
        continue;
      }
      const fieldMapper = getFieldMapper(schema, schemaMapper, typeName);
      if (fieldMapper == null) {
        newTypeMap[typeName] = originalType;
        continue;
      }
      const config2 = originalType.toConfig();
      const originalFieldConfigMap = config2.fields;
      const newFieldConfigMap = {};
      for (const fieldName in originalFieldConfigMap) {
        const originalFieldConfig = originalFieldConfigMap[fieldName];
        const mappedField = fieldMapper(originalFieldConfig, fieldName, typeName, schema);
        if (mappedField === void 0) {
          newFieldConfigMap[fieldName] = originalFieldConfig;
        } else if (Array.isArray(mappedField)) {
          const [newFieldName, newFieldConfig] = mappedField;
          if (newFieldConfig.astNode != null) {
            newFieldConfig.astNode = {
              ...newFieldConfig.astNode,
              name: {
                ...newFieldConfig.astNode.name,
                value: newFieldName
              }
            };
          }
          newFieldConfigMap[newFieldName] = newFieldConfig === void 0 ? originalFieldConfig : newFieldConfig;
        } else if (mappedField !== null) {
          newFieldConfigMap[fieldName] = mappedField;
        }
      }
      if ((0, import_graphql10.isObjectType)(originalType)) {
        newTypeMap[typeName] = correctASTNodes(new import_graphql10.GraphQLObjectType({
          ...config2,
          fields: newFieldConfigMap
        }));
      } else if ((0, import_graphql10.isInterfaceType)(originalType)) {
        newTypeMap[typeName] = correctASTNodes(new import_graphql10.GraphQLInterfaceType({
          ...config2,
          fields: newFieldConfigMap
        }));
      } else {
        newTypeMap[typeName] = correctASTNodes(new import_graphql10.GraphQLInputObjectType({
          ...config2,
          fields: newFieldConfigMap
        }));
      }
    }
  }
  return newTypeMap;
}
function mapArguments(originalTypeMap, schema, schemaMapper) {
  const newTypeMap = {};
  for (const typeName in originalTypeMap) {
    if (!typeName.startsWith("__")) {
      const originalType = originalTypeMap[typeName];
      if (!(0, import_graphql10.isObjectType)(originalType) && !(0, import_graphql10.isInterfaceType)(originalType)) {
        newTypeMap[typeName] = originalType;
        continue;
      }
      const argumentMapper = getArgumentMapper(schemaMapper);
      if (argumentMapper == null) {
        newTypeMap[typeName] = originalType;
        continue;
      }
      const config2 = originalType.toConfig();
      const originalFieldConfigMap = config2.fields;
      const newFieldConfigMap = {};
      for (const fieldName in originalFieldConfigMap) {
        const originalFieldConfig = originalFieldConfigMap[fieldName];
        const originalArgumentConfigMap = originalFieldConfig.args;
        if (originalArgumentConfigMap == null) {
          newFieldConfigMap[fieldName] = originalFieldConfig;
          continue;
        }
        const argumentNames = Object.keys(originalArgumentConfigMap);
        if (!argumentNames.length) {
          newFieldConfigMap[fieldName] = originalFieldConfig;
          continue;
        }
        const newArgumentConfigMap = {};
        for (const argumentName of argumentNames) {
          const originalArgumentConfig = originalArgumentConfigMap[argumentName];
          const mappedArgument = argumentMapper(originalArgumentConfig, fieldName, typeName, schema);
          if (mappedArgument === void 0) {
            newArgumentConfigMap[argumentName] = originalArgumentConfig;
          } else if (Array.isArray(mappedArgument)) {
            const [newArgumentName, newArgumentConfig] = mappedArgument;
            newArgumentConfigMap[newArgumentName] = newArgumentConfig;
          } else if (mappedArgument !== null) {
            newArgumentConfigMap[argumentName] = mappedArgument;
          }
        }
        newFieldConfigMap[fieldName] = {
          ...originalFieldConfig,
          args: newArgumentConfigMap
        };
      }
      if ((0, import_graphql10.isObjectType)(originalType)) {
        newTypeMap[typeName] = new import_graphql10.GraphQLObjectType({
          ...config2,
          fields: newFieldConfigMap
        });
      } else if ((0, import_graphql10.isInterfaceType)(originalType)) {
        newTypeMap[typeName] = new import_graphql10.GraphQLInterfaceType({
          ...config2,
          fields: newFieldConfigMap
        });
      } else {
        newTypeMap[typeName] = new import_graphql10.GraphQLInputObjectType({
          ...config2,
          fields: newFieldConfigMap
        });
      }
    }
  }
  return newTypeMap;
}
function mapDirectives(originalDirectives, schema, schemaMapper) {
  const directiveMapper = getDirectiveMapper(schemaMapper);
  if (directiveMapper == null) {
    return originalDirectives.slice();
  }
  const newDirectives = [];
  for (const directive of originalDirectives) {
    const mappedDirective = directiveMapper(directive, schema);
    if (mappedDirective === void 0) {
      newDirectives.push(directive);
    } else if (mappedDirective !== null) {
      newDirectives.push(mappedDirective);
    }
  }
  return newDirectives;
}
function getTypeSpecifiers(schema, typeName) {
  var _a2, _b, _c2;
  const type = schema.getType(typeName);
  const specifiers = [MapperKind.TYPE];
  if ((0, import_graphql10.isObjectType)(type)) {
    specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.OBJECT_TYPE);
    if (typeName === ((_a2 = schema.getQueryType()) === null || _a2 === void 0 ? void 0 : _a2.name)) {
      specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.QUERY);
    } else if (typeName === ((_b = schema.getMutationType()) === null || _b === void 0 ? void 0 : _b.name)) {
      specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.MUTATION);
    } else if (typeName === ((_c2 = schema.getSubscriptionType()) === null || _c2 === void 0 ? void 0 : _c2.name)) {
      specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.SUBSCRIPTION);
    }
  } else if ((0, import_graphql10.isInputObjectType)(type)) {
    specifiers.push(MapperKind.INPUT_OBJECT_TYPE);
  } else if ((0, import_graphql10.isInterfaceType)(type)) {
    specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.ABSTRACT_TYPE, MapperKind.INTERFACE_TYPE);
  } else if ((0, import_graphql10.isUnionType)(type)) {
    specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.ABSTRACT_TYPE, MapperKind.UNION_TYPE);
  } else if ((0, import_graphql10.isEnumType)(type)) {
    specifiers.push(MapperKind.ENUM_TYPE);
  } else if ((0, import_graphql10.isScalarType)(type)) {
    specifiers.push(MapperKind.SCALAR_TYPE);
  }
  return specifiers;
}
function getTypeMapper(schema, schemaMapper, typeName) {
  const specifiers = getTypeSpecifiers(schema, typeName);
  let typeMapper;
  const stack = [...specifiers];
  while (!typeMapper && stack.length > 0) {
    const next = stack.pop();
    typeMapper = schemaMapper[next];
  }
  return typeMapper != null ? typeMapper : null;
}
function getFieldSpecifiers(schema, typeName) {
  var _a2, _b, _c2;
  const type = schema.getType(typeName);
  const specifiers = [MapperKind.FIELD];
  if ((0, import_graphql10.isObjectType)(type)) {
    specifiers.push(MapperKind.COMPOSITE_FIELD, MapperKind.OBJECT_FIELD);
    if (typeName === ((_a2 = schema.getQueryType()) === null || _a2 === void 0 ? void 0 : _a2.name)) {
      specifiers.push(MapperKind.ROOT_FIELD, MapperKind.QUERY_ROOT_FIELD);
    } else if (typeName === ((_b = schema.getMutationType()) === null || _b === void 0 ? void 0 : _b.name)) {
      specifiers.push(MapperKind.ROOT_FIELD, MapperKind.MUTATION_ROOT_FIELD);
    } else if (typeName === ((_c2 = schema.getSubscriptionType()) === null || _c2 === void 0 ? void 0 : _c2.name)) {
      specifiers.push(MapperKind.ROOT_FIELD, MapperKind.SUBSCRIPTION_ROOT_FIELD);
    }
  } else if ((0, import_graphql10.isInterfaceType)(type)) {
    specifiers.push(MapperKind.COMPOSITE_FIELD, MapperKind.INTERFACE_FIELD);
  } else if ((0, import_graphql10.isInputObjectType)(type)) {
    specifiers.push(MapperKind.INPUT_OBJECT_FIELD);
  }
  return specifiers;
}
function getFieldMapper(schema, schemaMapper, typeName) {
  const specifiers = getFieldSpecifiers(schema, typeName);
  let fieldMapper;
  const stack = [...specifiers];
  while (!fieldMapper && stack.length > 0) {
    const next = stack.pop();
    fieldMapper = schemaMapper[next];
  }
  return fieldMapper !== null && fieldMapper !== void 0 ? fieldMapper : null;
}
function getArgumentMapper(schemaMapper) {
  const argumentMapper = schemaMapper[MapperKind.ARGUMENT];
  return argumentMapper != null ? argumentMapper : null;
}
function getDirectiveMapper(schemaMapper) {
  const directiveMapper = schemaMapper[MapperKind.DIRECTIVE];
  return directiveMapper != null ? directiveMapper : null;
}
function getEnumValueMapper(schemaMapper) {
  const enumValueMapper = schemaMapper[MapperKind.ENUM_VALUE];
  return enumValueMapper != null ? enumValueMapper : null;
}
function correctASTNodes(type) {
  if ((0, import_graphql10.isObjectType)(type)) {
    const config2 = type.toConfig();
    if (config2.astNode != null) {
      const fields = [];
      for (const fieldName in config2.fields) {
        const fieldConfig = config2.fields[fieldName];
        if (fieldConfig.astNode != null) {
          fields.push(fieldConfig.astNode);
        }
      }
      config2.astNode = {
        ...config2.astNode,
        kind: import_graphql10.Kind.OBJECT_TYPE_DEFINITION,
        fields
      };
    }
    if (config2.extensionASTNodes != null) {
      config2.extensionASTNodes = config2.extensionASTNodes.map((node) => ({
        ...node,
        kind: import_graphql10.Kind.OBJECT_TYPE_EXTENSION,
        fields: void 0
      }));
    }
    return new import_graphql10.GraphQLObjectType(config2);
  } else if ((0, import_graphql10.isInterfaceType)(type)) {
    const config2 = type.toConfig();
    if (config2.astNode != null) {
      const fields = [];
      for (const fieldName in config2.fields) {
        const fieldConfig = config2.fields[fieldName];
        if (fieldConfig.astNode != null) {
          fields.push(fieldConfig.astNode);
        }
      }
      config2.astNode = {
        ...config2.astNode,
        kind: import_graphql10.Kind.INTERFACE_TYPE_DEFINITION,
        fields
      };
    }
    if (config2.extensionASTNodes != null) {
      config2.extensionASTNodes = config2.extensionASTNodes.map((node) => ({
        ...node,
        kind: import_graphql10.Kind.INTERFACE_TYPE_EXTENSION,
        fields: void 0
      }));
    }
    return new import_graphql10.GraphQLInterfaceType(config2);
  } else if ((0, import_graphql10.isInputObjectType)(type)) {
    const config2 = type.toConfig();
    if (config2.astNode != null) {
      const fields = [];
      for (const fieldName in config2.fields) {
        const fieldConfig = config2.fields[fieldName];
        if (fieldConfig.astNode != null) {
          fields.push(fieldConfig.astNode);
        }
      }
      config2.astNode = {
        ...config2.astNode,
        kind: import_graphql10.Kind.INPUT_OBJECT_TYPE_DEFINITION,
        fields
      };
    }
    if (config2.extensionASTNodes != null) {
      config2.extensionASTNodes = config2.extensionASTNodes.map((node) => ({
        ...node,
        kind: import_graphql10.Kind.INPUT_OBJECT_TYPE_EXTENSION,
        fields: void 0
      }));
    }
    return new import_graphql10.GraphQLInputObjectType(config2);
  } else if ((0, import_graphql10.isEnumType)(type)) {
    const config2 = type.toConfig();
    if (config2.astNode != null) {
      const values = [];
      for (const enumKey in config2.values) {
        const enumValueConfig = config2.values[enumKey];
        if (enumValueConfig.astNode != null) {
          values.push(enumValueConfig.astNode);
        }
      }
      config2.astNode = {
        ...config2.astNode,
        values
      };
    }
    if (config2.extensionASTNodes != null) {
      config2.extensionASTNodes = config2.extensionASTNodes.map((node) => ({
        ...node,
        values: void 0
      }));
    }
    return new import_graphql10.GraphQLEnumType(config2);
  } else {
    return type;
  }
}

// node_modules/@graphql-tools/utils/esm/heal.js
var import_graphql11 = __toESM(require_graphql2(), 1);
function healSchema(schema) {
  healTypes(schema.getTypeMap(), schema.getDirectives());
  return schema;
}
function healTypes(originalTypeMap, directives) {
  const actualNamedTypeMap = /* @__PURE__ */ Object.create(null);
  for (const typeName in originalTypeMap) {
    const namedType = originalTypeMap[typeName];
    if (namedType == null || typeName.startsWith("__")) {
      continue;
    }
    const actualName = namedType.name;
    if (actualName.startsWith("__")) {
      continue;
    }
    if (actualNamedTypeMap[actualName] != null) {
      console.warn(`Duplicate schema type name ${actualName} found; keeping the existing one found in the schema`);
      continue;
    }
    actualNamedTypeMap[actualName] = namedType;
  }
  for (const typeName in actualNamedTypeMap) {
    const namedType = actualNamedTypeMap[typeName];
    originalTypeMap[typeName] = namedType;
  }
  for (const decl of directives) {
    decl.args = decl.args.filter((arg) => {
      arg.type = healType(arg.type);
      return arg.type !== null;
    });
  }
  for (const typeName in originalTypeMap) {
    const namedType = originalTypeMap[typeName];
    if (!typeName.startsWith("__") && typeName in actualNamedTypeMap) {
      if (namedType != null) {
        healNamedType(namedType);
      }
    }
  }
  for (const typeName in originalTypeMap) {
    if (!typeName.startsWith("__") && !(typeName in actualNamedTypeMap)) {
      delete originalTypeMap[typeName];
    }
  }
  function healNamedType(type) {
    if ((0, import_graphql11.isObjectType)(type)) {
      healFields(type);
      healInterfaces(type);
      return;
    } else if ((0, import_graphql11.isInterfaceType)(type)) {
      healFields(type);
      if ("getInterfaces" in type) {
        healInterfaces(type);
      }
      return;
    } else if ((0, import_graphql11.isUnionType)(type)) {
      healUnderlyingTypes(type);
      return;
    } else if ((0, import_graphql11.isInputObjectType)(type)) {
      healInputFields(type);
      return;
    } else if ((0, import_graphql11.isLeafType)(type)) {
      return;
    }
    throw new Error(`Unexpected schema type: ${type}`);
  }
  function healFields(type) {
    const fieldMap = type.getFields();
    for (const [key, field] of Object.entries(fieldMap)) {
      field.args.map((arg) => {
        arg.type = healType(arg.type);
        return arg.type === null ? null : arg;
      }).filter(Boolean);
      field.type = healType(field.type);
      if (field.type === null) {
        delete fieldMap[key];
      }
    }
  }
  function healInterfaces(type) {
    if ("getInterfaces" in type) {
      const interfaces = type.getInterfaces();
      interfaces.push(...interfaces.splice(0).map((iface) => healType(iface)).filter(Boolean));
    }
  }
  function healInputFields(type) {
    const fieldMap = type.getFields();
    for (const [key, field] of Object.entries(fieldMap)) {
      field.type = healType(field.type);
      if (field.type === null) {
        delete fieldMap[key];
      }
    }
  }
  function healUnderlyingTypes(type) {
    const types = type.getTypes();
    types.push(...types.splice(0).map((t) => healType(t)).filter(Boolean));
  }
  function healType(type) {
    if ((0, import_graphql11.isListType)(type)) {
      const healedType = healType(type.ofType);
      return healedType != null ? new import_graphql11.GraphQLList(healedType) : null;
    } else if ((0, import_graphql11.isNonNullType)(type)) {
      const healedType = healType(type.ofType);
      return healedType != null ? new import_graphql11.GraphQLNonNull(healedType) : null;
    } else if ((0, import_graphql11.isNamedType)(type)) {
      const officialType = originalTypeMap[type.name];
      if (officialType && type !== officialType) {
        return officialType;
      }
    }
    return type;
  }
}

// node_modules/@graphql-tools/utils/esm/forEachField.js
var import_graphql12 = __toESM(require_graphql2(), 1);
function forEachField(schema, fn2) {
  const typeMap = schema.getTypeMap();
  for (const typeName in typeMap) {
    const type = typeMap[typeName];
    if (!(0, import_graphql12.getNamedType)(type).name.startsWith("__") && (0, import_graphql12.isObjectType)(type)) {
      const fields = type.getFields();
      for (const fieldName in fields) {
        const field = fields[fieldName];
        fn2(field, typeName, fieldName);
      }
    }
  }
}

// node_modules/@graphql-tools/utils/esm/forEachDefaultValue.js
var import_graphql13 = __toESM(require_graphql2(), 1);
function forEachDefaultValue(schema, fn2) {
  const typeMap = schema.getTypeMap();
  for (const typeName in typeMap) {
    const type = typeMap[typeName];
    if (!(0, import_graphql13.getNamedType)(type).name.startsWith("__")) {
      if ((0, import_graphql13.isObjectType)(type)) {
        const fields = type.getFields();
        for (const fieldName in fields) {
          const field = fields[fieldName];
          for (const arg of field.args) {
            arg.defaultValue = fn2(arg.type, arg.defaultValue);
          }
        }
      } else if ((0, import_graphql13.isInputObjectType)(type)) {
        const fields = type.getFields();
        for (const fieldName in fields) {
          const field = fields[fieldName];
          field.defaultValue = fn2(field.type, field.defaultValue);
        }
      }
    }
  }
}

// node_modules/@graphql-tools/utils/esm/mergeDeep.js
function mergeDeep(sources, respectPrototype = false) {
  const target = sources[0] || {};
  const output = {};
  if (respectPrototype) {
    Object.setPrototypeOf(output, Object.create(Object.getPrototypeOf(target)));
  }
  for (const source of sources) {
    if (isObject(target) && isObject(source)) {
      if (respectPrototype) {
        const outputPrototype = Object.getPrototypeOf(output);
        const sourcePrototype = Object.getPrototypeOf(source);
        if (sourcePrototype) {
          for (const key of Object.getOwnPropertyNames(sourcePrototype)) {
            const descriptor = Object.getOwnPropertyDescriptor(sourcePrototype, key);
            if (isSome(descriptor)) {
              Object.defineProperty(outputPrototype, key, descriptor);
            }
          }
        }
      }
      for (const key in source) {
        if (isObject(source[key])) {
          if (!(key in output)) {
            Object.assign(output, { [key]: source[key] });
          } else {
            output[key] = mergeDeep([output[key], source[key]], respectPrototype);
          }
        } else {
          Object.assign(output, { [key]: source[key] });
        }
      }
    }
  }
  return output;
}
function isObject(item) {
  return item && typeof item === "object" && !Array.isArray(item);
}

// node_modules/@graphql-tools/utils/esm/isDocumentNode.js
var import_graphql14 = __toESM(require_graphql2(), 1);
function isDocumentNode(object) {
  return object && typeof object === "object" && "kind" in object && object.kind === import_graphql14.Kind.DOCUMENT;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/assertResolversPresent.js
function assertResolversPresent(schema, resolverValidationOptions = {}) {
  const { requireResolversForArgs, requireResolversForNonScalar, requireResolversForAllFields } = resolverValidationOptions;
  if (requireResolversForAllFields && (requireResolversForArgs || requireResolversForNonScalar)) {
    throw new TypeError("requireResolversForAllFields takes precedence over the more specific assertions. Please configure either requireResolversForAllFields or requireResolversForArgs / requireResolversForNonScalar, but not a combination of them.");
  }
  forEachField(schema, (field, typeName, fieldName) => {
    if (requireResolversForAllFields) {
      expectResolver("requireResolversForAllFields", requireResolversForAllFields, field, typeName, fieldName);
    }
    if (requireResolversForArgs && field.args.length > 0) {
      expectResolver("requireResolversForArgs", requireResolversForArgs, field, typeName, fieldName);
    }
    if (requireResolversForNonScalar !== "ignore" && !(0, import_graphql15.isScalarType)((0, import_graphql15.getNamedType)(field.type))) {
      expectResolver("requireResolversForNonScalar", requireResolversForNonScalar, field, typeName, fieldName);
    }
  });
}
function expectResolver(validator, behavior, field, typeName, fieldName) {
  if (!field.resolve) {
    const message = `Resolver missing for "${typeName}.${fieldName}".
To disable this validator, use:
  resolverValidationOptions: {
    ${validator}: 'ignore'
  }`;
    if (behavior === "error") {
      throw new Error(message);
    }
    if (behavior === "warn") {
      console.warn(message);
    }
    return;
  }
  if (typeof field.resolve !== "function") {
    throw new Error(`Resolver "${typeName}.${fieldName}" must be a function`);
  }
}

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/addResolversToSchema.js
var import_graphql16 = __toESM(require_graphql2(), 1);

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/checkForResolveTypeResolver.js
function checkForResolveTypeResolver(schema, requireResolversForResolveType) {
  mapSchema(schema, {
    [MapperKind.ABSTRACT_TYPE]: (type) => {
      if (!type.resolveType) {
        const message = `Type "${type.name}" is missing a "__resolveType" resolver. Pass 'ignore' into "resolverValidationOptions.requireResolversForResolveType" to disable this error.`;
        if (requireResolversForResolveType === "error") {
          throw new Error(message);
        }
        if (requireResolversForResolveType === "warn") {
          console.warn(message);
        }
      }
      return void 0;
    }
  });
}

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/extendResolversFromInterfaces.js
function extendResolversFromInterfaces(schema, resolvers2) {
  const extendedResolvers = {};
  const typeMap = schema.getTypeMap();
  for (const typeName in typeMap) {
    const type = typeMap[typeName];
    if ("getInterfaces" in type) {
      extendedResolvers[typeName] = {};
      for (const iFace of type.getInterfaces()) {
        if (resolvers2[iFace.name]) {
          for (const fieldName in resolvers2[iFace.name]) {
            if (fieldName === "__isTypeOf" || !fieldName.startsWith("__")) {
              extendedResolvers[typeName][fieldName] = resolvers2[iFace.name][fieldName];
            }
          }
        }
      }
      const typeResolvers = resolvers2[typeName];
      extendedResolvers[typeName] = {
        ...extendedResolvers[typeName],
        ...typeResolvers
      };
    } else {
      const typeResolvers = resolvers2[typeName];
      if (typeResolvers != null) {
        extendedResolvers[typeName] = typeResolvers;
      }
    }
  }
  return extendedResolvers;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/addResolversToSchema.js
function addResolversToSchema({ schema, resolvers: inputResolvers, defaultFieldResolver: defaultFieldResolver2, resolverValidationOptions = {}, inheritResolversFromInterfaces = false, updateResolversInPlace = false }) {
  const { requireResolversToMatchSchema = "error", requireResolversForResolveType } = resolverValidationOptions;
  const resolvers2 = inheritResolversFromInterfaces ? extendResolversFromInterfaces(schema, inputResolvers) : inputResolvers;
  for (const typeName in resolvers2) {
    const resolverValue = resolvers2[typeName];
    const resolverType = typeof resolverValue;
    if (resolverType !== "object") {
      throw new Error(`"${typeName}" defined in resolvers, but has invalid value "${resolverValue}". The resolver's value must be of type object.`);
    }
    const type = schema.getType(typeName);
    if (type == null) {
      if (requireResolversToMatchSchema === "ignore") {
        continue;
      }
      throw new Error(`"${typeName}" defined in resolvers, but not in schema`);
    } else if ((0, import_graphql16.isSpecifiedScalarType)(type)) {
      for (const fieldName in resolverValue) {
        if (fieldName.startsWith("__")) {
          type[fieldName.substring(2)] = resolverValue[fieldName];
        } else {
          type[fieldName] = resolverValue[fieldName];
        }
      }
    } else if ((0, import_graphql16.isEnumType)(type)) {
      const values = type.getValues();
      for (const fieldName in resolverValue) {
        if (!fieldName.startsWith("__") && !values.some((value) => value.name === fieldName) && requireResolversToMatchSchema && requireResolversToMatchSchema !== "ignore") {
          throw new Error(`${type.name}.${fieldName} was defined in resolvers, but not present within ${type.name}`);
        }
      }
    } else if ((0, import_graphql16.isUnionType)(type)) {
      for (const fieldName in resolverValue) {
        if (!fieldName.startsWith("__") && requireResolversToMatchSchema && requireResolversToMatchSchema !== "ignore") {
          throw new Error(`${type.name}.${fieldName} was defined in resolvers, but ${type.name} is not an object or interface type`);
        }
      }
    } else if ((0, import_graphql16.isObjectType)(type) || (0, import_graphql16.isInterfaceType)(type)) {
      for (const fieldName in resolverValue) {
        if (!fieldName.startsWith("__")) {
          const fields = type.getFields();
          const field = fields[fieldName];
          if (field == null) {
            if (requireResolversToMatchSchema && requireResolversToMatchSchema !== "ignore") {
              throw new Error(`${typeName}.${fieldName} defined in resolvers, but not in schema`);
            }
          } else {
            const fieldResolve = resolverValue[fieldName];
            if (typeof fieldResolve !== "function" && typeof fieldResolve !== "object") {
              throw new Error(`Resolver ${typeName}.${fieldName} must be object or function`);
            }
          }
        }
      }
    }
  }
  schema = updateResolversInPlace ? addResolversToExistingSchema(schema, resolvers2, defaultFieldResolver2) : createNewSchemaWithResolvers(schema, resolvers2, defaultFieldResolver2);
  if (requireResolversForResolveType && requireResolversForResolveType !== "ignore") {
    checkForResolveTypeResolver(schema, requireResolversForResolveType);
  }
  return schema;
}
function addResolversToExistingSchema(schema, resolvers2, defaultFieldResolver2) {
  var _a2, _b, _c2, _d2, _e2, _f, _g, _h, _j, _k, _l2, _m;
  const typeMap = schema.getTypeMap();
  for (const typeName in resolvers2) {
    const type = schema.getType(typeName);
    const resolverValue = resolvers2[typeName];
    if ((0, import_graphql16.isScalarType)(type)) {
      for (const fieldName in resolverValue) {
        if (fieldName.startsWith("__")) {
          type[fieldName.substring(2)] = resolverValue[fieldName];
        } else if (fieldName === "astNode" && type.astNode != null) {
          type.astNode = {
            ...type.astNode,
            description: (_b = (_a2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type.astNode.description,
            directives: ((_c2 = type.astNode.directives) !== null && _c2 !== void 0 ? _c2 : []).concat((_e2 = (_d2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d2 === void 0 ? void 0 : _d2.directives) !== null && _e2 !== void 0 ? _e2 : [])
          };
        } else if (fieldName === "extensionASTNodes" && type.extensionASTNodes != null) {
          type.extensionASTNodes = type.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);
        } else if (fieldName === "extensions" && type.extensions != null && resolverValue.extensions != null) {
          type.extensions = Object.assign(/* @__PURE__ */ Object.create(null), type.extensions, resolverValue.extensions);
        } else {
          type[fieldName] = resolverValue[fieldName];
        }
      }
    } else if ((0, import_graphql16.isEnumType)(type)) {
      const config2 = type.toConfig();
      const enumValueConfigMap = config2.values;
      for (const fieldName in resolverValue) {
        if (fieldName.startsWith("__")) {
          config2[fieldName.substring(2)] = resolverValue[fieldName];
        } else if (fieldName === "astNode" && config2.astNode != null) {
          config2.astNode = {
            ...config2.astNode,
            description: (_h = (_g = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _g === void 0 ? void 0 : _g.description) !== null && _h !== void 0 ? _h : config2.astNode.description,
            directives: ((_j = config2.astNode.directives) !== null && _j !== void 0 ? _j : []).concat((_l2 = (_k = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _k === void 0 ? void 0 : _k.directives) !== null && _l2 !== void 0 ? _l2 : [])
          };
        } else if (fieldName === "extensionASTNodes" && config2.extensionASTNodes != null) {
          config2.extensionASTNodes = config2.extensionASTNodes.concat((_m = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _m !== void 0 ? _m : []);
        } else if (fieldName === "extensions" && type.extensions != null && resolverValue.extensions != null) {
          type.extensions = Object.assign(/* @__PURE__ */ Object.create(null), type.extensions, resolverValue.extensions);
        } else if (enumValueConfigMap[fieldName]) {
          enumValueConfigMap[fieldName].value = resolverValue[fieldName];
        }
      }
      typeMap[typeName] = new import_graphql16.GraphQLEnumType(config2);
    } else if ((0, import_graphql16.isUnionType)(type)) {
      for (const fieldName in resolverValue) {
        if (fieldName.startsWith("__")) {
          type[fieldName.substring(2)] = resolverValue[fieldName];
        }
      }
    } else if ((0, import_graphql16.isObjectType)(type) || (0, import_graphql16.isInterfaceType)(type)) {
      for (const fieldName in resolverValue) {
        if (fieldName.startsWith("__")) {
          type[fieldName.substring(2)] = resolverValue[fieldName];
          continue;
        }
        const fields = type.getFields();
        const field = fields[fieldName];
        if (field != null) {
          const fieldResolve = resolverValue[fieldName];
          if (typeof fieldResolve === "function") {
            field.resolve = fieldResolve.bind(resolverValue);
          } else {
            setFieldProperties(field, fieldResolve);
          }
        }
      }
    }
  }
  forEachDefaultValue(schema, serializeInputValue);
  healSchema(schema);
  forEachDefaultValue(schema, parseInputValue);
  if (defaultFieldResolver2 != null) {
    forEachField(schema, (field) => {
      if (!field.resolve) {
        field.resolve = defaultFieldResolver2;
      }
    });
  }
  return schema;
}
function createNewSchemaWithResolvers(schema, resolvers2, defaultFieldResolver2) {
  schema = mapSchema(schema, {
    [MapperKind.SCALAR_TYPE]: (type) => {
      var _a2, _b, _c2, _d2, _e2, _f;
      const config2 = type.toConfig();
      const resolverValue = resolvers2[type.name];
      if (!(0, import_graphql16.isSpecifiedScalarType)(type) && resolverValue != null) {
        for (const fieldName in resolverValue) {
          if (fieldName.startsWith("__")) {
            config2[fieldName.substring(2)] = resolverValue[fieldName];
          } else if (fieldName === "astNode" && config2.astNode != null) {
            config2.astNode = {
              ...config2.astNode,
              description: (_b = (_a2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : config2.astNode.description,
              directives: ((_c2 = config2.astNode.directives) !== null && _c2 !== void 0 ? _c2 : []).concat((_e2 = (_d2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d2 === void 0 ? void 0 : _d2.directives) !== null && _e2 !== void 0 ? _e2 : [])
            };
          } else if (fieldName === "extensionASTNodes" && config2.extensionASTNodes != null) {
            config2.extensionASTNodes = config2.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);
          } else if (fieldName === "extensions" && config2.extensions != null && resolverValue.extensions != null) {
            config2.extensions = Object.assign(/* @__PURE__ */ Object.create(null), type.extensions, resolverValue.extensions);
          } else {
            config2[fieldName] = resolverValue[fieldName];
          }
        }
        return new import_graphql16.GraphQLScalarType(config2);
      }
    },
    [MapperKind.ENUM_TYPE]: (type) => {
      var _a2, _b, _c2, _d2, _e2, _f;
      const resolverValue = resolvers2[type.name];
      const config2 = type.toConfig();
      const enumValueConfigMap = config2.values;
      if (resolverValue != null) {
        for (const fieldName in resolverValue) {
          if (fieldName.startsWith("__")) {
            config2[fieldName.substring(2)] = resolverValue[fieldName];
          } else if (fieldName === "astNode" && config2.astNode != null) {
            config2.astNode = {
              ...config2.astNode,
              description: (_b = (_a2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : config2.astNode.description,
              directives: ((_c2 = config2.astNode.directives) !== null && _c2 !== void 0 ? _c2 : []).concat((_e2 = (_d2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d2 === void 0 ? void 0 : _d2.directives) !== null && _e2 !== void 0 ? _e2 : [])
            };
          } else if (fieldName === "extensionASTNodes" && config2.extensionASTNodes != null) {
            config2.extensionASTNodes = config2.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);
          } else if (fieldName === "extensions" && config2.extensions != null && resolverValue.extensions != null) {
            config2.extensions = Object.assign(/* @__PURE__ */ Object.create(null), type.extensions, resolverValue.extensions);
          } else if (enumValueConfigMap[fieldName]) {
            enumValueConfigMap[fieldName].value = resolverValue[fieldName];
          }
        }
        return new import_graphql16.GraphQLEnumType(config2);
      }
    },
    [MapperKind.UNION_TYPE]: (type) => {
      const resolverValue = resolvers2[type.name];
      if (resolverValue != null) {
        const config2 = type.toConfig();
        if (resolverValue["__resolveType"]) {
          config2.resolveType = resolverValue["__resolveType"];
        }
        return new import_graphql16.GraphQLUnionType(config2);
      }
    },
    [MapperKind.OBJECT_TYPE]: (type) => {
      const resolverValue = resolvers2[type.name];
      if (resolverValue != null) {
        const config2 = type.toConfig();
        if (resolverValue["__isTypeOf"]) {
          config2.isTypeOf = resolverValue["__isTypeOf"];
        }
        return new import_graphql16.GraphQLObjectType(config2);
      }
    },
    [MapperKind.INTERFACE_TYPE]: (type) => {
      const resolverValue = resolvers2[type.name];
      if (resolverValue != null) {
        const config2 = type.toConfig();
        if (resolverValue["__resolveType"]) {
          config2.resolveType = resolverValue["__resolveType"];
        }
        return new import_graphql16.GraphQLInterfaceType(config2);
      }
    },
    [MapperKind.COMPOSITE_FIELD]: (fieldConfig, fieldName, typeName) => {
      const resolverValue = resolvers2[typeName];
      if (resolverValue != null) {
        const fieldResolve = resolverValue[fieldName];
        if (fieldResolve != null) {
          const newFieldConfig = { ...fieldConfig };
          if (typeof fieldResolve === "function") {
            newFieldConfig.resolve = fieldResolve.bind(resolverValue);
          } else {
            setFieldProperties(newFieldConfig, fieldResolve);
          }
          return newFieldConfig;
        }
      }
    }
  });
  if (defaultFieldResolver2 != null) {
    schema = mapSchema(schema, {
      [MapperKind.OBJECT_FIELD]: (fieldConfig) => ({
        ...fieldConfig,
        resolve: fieldConfig.resolve != null ? fieldConfig.resolve : defaultFieldResolver2
      })
    });
  }
  return schema;
}
function setFieldProperties(field, propertiesObj) {
  for (const propertyName in propertiesObj) {
    field[propertyName] = propertiesObj[propertyName];
  }
}

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/makeExecutableSchema.js
var import_graphql28 = __toESM(require_graphql2(), 1);

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/merge-resolvers.js
function mergeResolvers(resolversDefinitions, options) {
  if (!resolversDefinitions || Array.isArray(resolversDefinitions) && resolversDefinitions.length === 0) {
    return {};
  }
  if (!Array.isArray(resolversDefinitions)) {
    return resolversDefinitions;
  }
  if (resolversDefinitions.length === 1) {
    return resolversDefinitions[0] || {};
  }
  const resolvers2 = new Array();
  for (let resolversDefinition of resolversDefinitions) {
    if (Array.isArray(resolversDefinition)) {
      resolversDefinition = mergeResolvers(resolversDefinition);
    }
    if (typeof resolversDefinition === "object" && resolversDefinition) {
      resolvers2.push(resolversDefinition);
    }
  }
  const result = mergeDeep(resolvers2, true);
  if (options === null || options === void 0 ? void 0 : options.exclusions) {
    for (const exclusion of options.exclusions) {
      const [typeName, fieldName] = exclusion.split(".");
      if (!fieldName || fieldName === "*") {
        delete result[typeName];
      } else if (result[typeName]) {
        delete result[typeName][fieldName];
      }
    }
  }
  return result;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/arguments.js
function mergeArguments(args1, args2, config2) {
  const result = deduplicateArguments([...args2, ...args1].filter(isSome), config2);
  if (config2 && config2.sort) {
    result.sort(compareNodes);
  }
  return result;
}
function deduplicateArguments(args, config2) {
  return args.reduce((acc, current) => {
    const dupIndex = acc.findIndex((arg) => arg.name.value === current.name.value);
    if (dupIndex === -1) {
      return acc.concat([current]);
    } else if (!(config2 === null || config2 === void 0 ? void 0 : config2.reverseArguments)) {
      acc[dupIndex] = current;
    }
    return acc;
  }, []);
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js
var import_graphql17 = __toESM(require_graphql2(), 1);
function directiveAlreadyExists(directivesArr, otherDirective) {
  return !!directivesArr.find((directive) => directive.name.value === otherDirective.name.value);
}
function isRepeatableDirective(directive, directives) {
  var _a2;
  return !!((_a2 = directives === null || directives === void 0 ? void 0 : directives[directive.name.value]) === null || _a2 === void 0 ? void 0 : _a2.repeatable);
}
function nameAlreadyExists(name, namesArr) {
  return namesArr.some(({ value }) => value === name.value);
}
function mergeArguments2(a1, a2) {
  const result = [...a2];
  for (const argument of a1) {
    const existingIndex = result.findIndex((a) => a.name.value === argument.name.value);
    if (existingIndex > -1) {
      const existingArg = result[existingIndex];
      if (existingArg.value.kind === "ListValue") {
        const source = existingArg.value.values;
        const target = argument.value.values;
        existingArg.value.values = deduplicateLists(source, target, (targetVal, source2) => {
          const value = targetVal.value;
          return !value || !source2.some((sourceVal) => sourceVal.value === value);
        });
      } else {
        existingArg.value = argument.value;
      }
    } else {
      result.push(argument);
    }
  }
  return result;
}
function deduplicateDirectives(directives, definitions) {
  return directives.map((directive, i, all) => {
    const firstAt = all.findIndex((d) => d.name.value === directive.name.value);
    if (firstAt !== i && !isRepeatableDirective(directive, definitions)) {
      const dup = all[firstAt];
      directive.arguments = mergeArguments2(directive.arguments, dup.arguments);
      return null;
    }
    return directive;
  }).filter(isSome);
}
function mergeDirectives(d1 = [], d2 = [], config2, directives) {
  const reverseOrder = config2 && config2.reverseDirectives;
  const asNext = reverseOrder ? d1 : d2;
  const asFirst = reverseOrder ? d2 : d1;
  const result = deduplicateDirectives([...asNext], directives);
  for (const directive of asFirst) {
    if (directiveAlreadyExists(result, directive) && !isRepeatableDirective(directive, directives)) {
      const existingDirectiveIndex = result.findIndex((d) => d.name.value === directive.name.value);
      const existingDirective = result[existingDirectiveIndex];
      result[existingDirectiveIndex].arguments = mergeArguments2(directive.arguments || [], existingDirective.arguments || []);
    } else {
      result.push(directive);
    }
  }
  return result;
}
function validateInputs(node, existingNode) {
  const printedNode = (0, import_graphql17.print)({
    ...node,
    description: void 0
  });
  const printedExistingNode = (0, import_graphql17.print)({
    ...existingNode,
    description: void 0
  });
  const leaveInputs = new RegExp("(directive @w*d*)|( on .*$)", "g");
  const sameArguments = printedNode.replace(leaveInputs, "") === printedExistingNode.replace(leaveInputs, "");
  if (!sameArguments) {
    throw new Error(`Unable to merge GraphQL directive "${node.name.value}". 
Existing directive:  
	${printedExistingNode} 
Received directive: 
	${printedNode}`);
  }
}
function mergeDirective(node, existingNode) {
  if (existingNode) {
    validateInputs(node, existingNode);
    return {
      ...node,
      locations: [
        ...existingNode.locations,
        ...node.locations.filter((name) => !nameAlreadyExists(name, existingNode.locations))
      ]
    };
  }
  return node;
}
function deduplicateLists(source, target, filterFn) {
  return source.concat(target.filter((val) => filterFn(val, source)));
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/enum-values.js
function mergeEnumValues(first, second, config2, directives) {
  if (config2 === null || config2 === void 0 ? void 0 : config2.consistentEnumMerge) {
    const reversed = [];
    if (first) {
      reversed.push(...first);
    }
    first = second;
    second = reversed;
  }
  const enumValueMap = /* @__PURE__ */ new Map();
  if (first) {
    for (const firstValue of first) {
      enumValueMap.set(firstValue.name.value, firstValue);
    }
  }
  if (second) {
    for (const secondValue of second) {
      const enumValue = secondValue.name.value;
      if (enumValueMap.has(enumValue)) {
        const firstValue = enumValueMap.get(enumValue);
        firstValue.description = secondValue.description || firstValue.description;
        firstValue.directives = mergeDirectives(secondValue.directives, firstValue.directives, directives);
      } else {
        enumValueMap.set(enumValue, secondValue);
      }
    }
  }
  const result = [...enumValueMap.values()];
  if (config2 && config2.sort) {
    result.sort(compareNodes);
  }
  return result;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/enum.js
var import_graphql18 = __toESM(require_graphql2(), 1);
function mergeEnum(e1, e2, config2, directives) {
  if (e2) {
    return {
      name: e1.name,
      description: e1["description"] || e2["description"],
      kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || e1.kind === "EnumTypeDefinition" || e2.kind === "EnumTypeDefinition" ? "EnumTypeDefinition" : "EnumTypeExtension",
      loc: e1.loc,
      directives: mergeDirectives(e1.directives, e2.directives, config2, directives),
      values: mergeEnumValues(e1.values, e2.values, config2)
    };
  }
  return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
    ...e1,
    kind: import_graphql18.Kind.ENUM_TYPE_DEFINITION
  } : e1;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/utils.js
var import_graphql19 = __toESM(require_graphql2(), 1);
function isStringTypes(types) {
  return typeof types === "string";
}
function isSourceTypes(types) {
  return types instanceof import_graphql19.Source;
}
function extractType(type) {
  let visitedType = type;
  while (visitedType.kind === import_graphql19.Kind.LIST_TYPE || visitedType.kind === "NonNullType") {
    visitedType = visitedType.type;
  }
  return visitedType;
}
function isWrappingTypeNode(type) {
  return type.kind !== import_graphql19.Kind.NAMED_TYPE;
}
function isListTypeNode(type) {
  return type.kind === import_graphql19.Kind.LIST_TYPE;
}
function isNonNullTypeNode(type) {
  return type.kind === import_graphql19.Kind.NON_NULL_TYPE;
}
function printTypeNode(type) {
  if (isListTypeNode(type)) {
    return `[${printTypeNode(type.type)}]`;
  }
  if (isNonNullTypeNode(type)) {
    return `${printTypeNode(type.type)}!`;
  }
  return type.name.value;
}
var CompareVal;
(function(CompareVal2) {
  CompareVal2[CompareVal2["A_SMALLER_THAN_B"] = -1] = "A_SMALLER_THAN_B";
  CompareVal2[CompareVal2["A_EQUALS_B"] = 0] = "A_EQUALS_B";
  CompareVal2[CompareVal2["A_GREATER_THAN_B"] = 1] = "A_GREATER_THAN_B";
})(CompareVal || (CompareVal = {}));
function defaultStringComparator(a, b2) {
  if (a == null && b2 == null) {
    return CompareVal.A_EQUALS_B;
  }
  if (a == null) {
    return CompareVal.A_SMALLER_THAN_B;
  }
  if (b2 == null) {
    return CompareVal.A_GREATER_THAN_B;
  }
  if (a < b2)
    return CompareVal.A_SMALLER_THAN_B;
  if (a > b2)
    return CompareVal.A_GREATER_THAN_B;
  return CompareVal.A_EQUALS_B;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/fields.js
function fieldAlreadyExists(fieldsArr, otherField) {
  const resultIndex = fieldsArr.findIndex((field) => field.name.value === otherField.name.value);
  return [resultIndex > -1 ? fieldsArr[resultIndex] : null, resultIndex];
}
function mergeFields(type, f1, f2, config2, directives) {
  const result = [];
  if (f2 != null) {
    result.push(...f2);
  }
  if (f1 != null) {
    for (const field of f1) {
      const [existing, existingIndex] = fieldAlreadyExists(result, field);
      if (existing && !(config2 === null || config2 === void 0 ? void 0 : config2.ignoreFieldConflicts)) {
        const newField = (config2 === null || config2 === void 0 ? void 0 : config2.onFieldTypeConflict) && config2.onFieldTypeConflict(existing, field, type, config2 === null || config2 === void 0 ? void 0 : config2.throwOnConflict) || preventConflicts(type, existing, field, config2 === null || config2 === void 0 ? void 0 : config2.throwOnConflict);
        newField.arguments = mergeArguments(field["arguments"] || [], existing["arguments"] || [], config2);
        newField.directives = mergeDirectives(field.directives, existing.directives, config2, directives);
        newField.description = field.description || existing.description;
        result[existingIndex] = newField;
      } else {
        result.push(field);
      }
    }
  }
  if (config2 && config2.sort) {
    result.sort(compareNodes);
  }
  if (config2 && config2.exclusions) {
    const exclusions = config2.exclusions;
    return result.filter((field) => !exclusions.includes(`${type.name.value}.${field.name.value}`));
  }
  return result;
}
function preventConflicts(type, a, b2, ignoreNullability = false) {
  const aType = printTypeNode(a.type);
  const bType = printTypeNode(b2.type);
  if (aType !== bType) {
    const t1 = extractType(a.type);
    const t2 = extractType(b2.type);
    if (t1.name.value !== t2.name.value) {
      throw new Error(`Field "${b2.name.value}" already defined with a different type. Declared as "${t1.name.value}", but you tried to override with "${t2.name.value}"`);
    }
    if (!safeChangeForFieldType(a.type, b2.type, !ignoreNullability)) {
      throw new Error(`Field '${type.name.value}.${a.name.value}' changed type from '${aType}' to '${bType}'`);
    }
  }
  if (isNonNullTypeNode(b2.type) && !isNonNullTypeNode(a.type)) {
    a.type = b2.type;
  }
  return a;
}
function safeChangeForFieldType(oldType, newType, ignoreNullability = false) {
  if (!isWrappingTypeNode(oldType) && !isWrappingTypeNode(newType)) {
    return oldType.toString() === newType.toString();
  }
  if (isNonNullTypeNode(newType)) {
    const ofType = isNonNullTypeNode(oldType) ? oldType.type : oldType;
    return safeChangeForFieldType(ofType, newType.type);
  }
  if (isNonNullTypeNode(oldType)) {
    return safeChangeForFieldType(newType, oldType, ignoreNullability);
  }
  if (isListTypeNode(oldType)) {
    return isListTypeNode(newType) && safeChangeForFieldType(oldType.type, newType.type) || isNonNullTypeNode(newType) && safeChangeForFieldType(oldType, newType["type"]);
  }
  return false;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/input-type.js
var import_graphql20 = __toESM(require_graphql2(), 1);
function mergeInputType(node, existingNode, config2, directives) {
  if (existingNode) {
    try {
      return {
        name: node.name,
        description: node["description"] || existingNode["description"],
        kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || node.kind === "InputObjectTypeDefinition" || existingNode.kind === "InputObjectTypeDefinition" ? "InputObjectTypeDefinition" : "InputObjectTypeExtension",
        loc: node.loc,
        fields: mergeFields(node, node.fields, existingNode.fields, config2),
        directives: mergeDirectives(node.directives, existingNode.directives, config2, directives)
      };
    } catch (e) {
      throw new Error(`Unable to merge GraphQL input type "${node.name.value}": ${e.message}`);
    }
  }
  return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
    ...node,
    kind: import_graphql20.Kind.INPUT_OBJECT_TYPE_DEFINITION
  } : node;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/interface.js
var import_graphql21 = __toESM(require_graphql2(), 1);

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-named-type-array.js
function alreadyExists(arr, other) {
  return !!arr.find((i) => i.name.value === other.name.value);
}
function mergeNamedTypeArray(first = [], second = [], config2 = {}) {
  const result = [...second, ...first.filter((d) => !alreadyExists(second, d))];
  if (config2 && config2.sort) {
    result.sort(compareNodes);
  }
  return result;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/interface.js
function mergeInterface(node, existingNode, config2, directives) {
  if (existingNode) {
    try {
      return {
        name: node.name,
        description: node["description"] || existingNode["description"],
        kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || node.kind === "InterfaceTypeDefinition" || existingNode.kind === "InterfaceTypeDefinition" ? "InterfaceTypeDefinition" : "InterfaceTypeExtension",
        loc: node.loc,
        fields: mergeFields(node, node.fields, existingNode.fields, config2),
        directives: mergeDirectives(node.directives, existingNode.directives, config2, directives),
        interfaces: node["interfaces"] ? mergeNamedTypeArray(node["interfaces"], existingNode["interfaces"], config2) : void 0
      };
    } catch (e) {
      throw new Error(`Unable to merge GraphQL interface "${node.name.value}": ${e.message}`);
    }
  }
  return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
    ...node,
    kind: import_graphql21.Kind.INTERFACE_TYPE_DEFINITION
  } : node;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-nodes.js
var import_graphql26 = __toESM(require_graphql2(), 1);

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/type.js
var import_graphql22 = __toESM(require_graphql2(), 1);
function mergeType(node, existingNode, config2, directives) {
  if (existingNode) {
    try {
      return {
        name: node.name,
        description: node["description"] || existingNode["description"],
        kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || node.kind === "ObjectTypeDefinition" || existingNode.kind === "ObjectTypeDefinition" ? "ObjectTypeDefinition" : "ObjectTypeExtension",
        loc: node.loc,
        fields: mergeFields(node, node.fields, existingNode.fields, config2),
        directives: mergeDirectives(node.directives, existingNode.directives, config2, directives),
        interfaces: mergeNamedTypeArray(node.interfaces, existingNode.interfaces, config2)
      };
    } catch (e) {
      throw new Error(`Unable to merge GraphQL type "${node.name.value}": ${e.message}`);
    }
  }
  return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
    ...node,
    kind: import_graphql22.Kind.OBJECT_TYPE_DEFINITION
  } : node;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/scalar.js
var import_graphql23 = __toESM(require_graphql2(), 1);
function mergeScalar(node, existingNode, config2, directives) {
  if (existingNode) {
    return {
      name: node.name,
      description: node["description"] || existingNode["description"],
      kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || node.kind === "ScalarTypeDefinition" || existingNode.kind === "ScalarTypeDefinition" ? "ScalarTypeDefinition" : "ScalarTypeExtension",
      loc: node.loc,
      directives: mergeDirectives(node.directives, existingNode.directives, config2, directives)
    };
  }
  return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
    ...node,
    kind: import_graphql23.Kind.SCALAR_TYPE_DEFINITION
  } : node;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/union.js
var import_graphql24 = __toESM(require_graphql2(), 1);
function mergeUnion(first, second, config2, directives) {
  if (second) {
    return {
      name: first.name,
      description: first["description"] || second["description"],
      // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility
      directives: mergeDirectives(first.directives, second.directives, config2, directives),
      kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || first.kind === "UnionTypeDefinition" || second.kind === "UnionTypeDefinition" ? import_graphql24.Kind.UNION_TYPE_DEFINITION : import_graphql24.Kind.UNION_TYPE_EXTENSION,
      loc: first.loc,
      types: mergeNamedTypeArray(first.types, second.types, config2)
    };
  }
  return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
    ...first,
    kind: import_graphql24.Kind.UNION_TYPE_DEFINITION
  } : first;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/schema-def.js
var import_graphql25 = __toESM(require_graphql2(), 1);
var DEFAULT_OPERATION_TYPE_NAME_MAP = {
  query: "Query",
  mutation: "Mutation",
  subscription: "Subscription"
};
function mergeOperationTypes(opNodeList = [], existingOpNodeList = []) {
  const finalOpNodeList = [];
  for (const opNodeType in DEFAULT_OPERATION_TYPE_NAME_MAP) {
    const opNode = opNodeList.find((n) => n.operation === opNodeType) || existingOpNodeList.find((n) => n.operation === opNodeType);
    if (opNode) {
      finalOpNodeList.push(opNode);
    }
  }
  return finalOpNodeList;
}
function mergeSchemaDefs(node, existingNode, config2, directives) {
  if (existingNode) {
    return {
      kind: node.kind === import_graphql25.Kind.SCHEMA_DEFINITION || existingNode.kind === import_graphql25.Kind.SCHEMA_DEFINITION ? import_graphql25.Kind.SCHEMA_DEFINITION : import_graphql25.Kind.SCHEMA_EXTENSION,
      description: node["description"] || existingNode["description"],
      directives: mergeDirectives(node.directives, existingNode.directives, config2, directives),
      operationTypes: mergeOperationTypes(node.operationTypes, existingNode.operationTypes)
    };
  }
  return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
    ...node,
    kind: import_graphql25.Kind.SCHEMA_DEFINITION
  } : node;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-nodes.js
var schemaDefSymbol = "SCHEMA_DEF_SYMBOL";
function isNamedDefinitionNode(definitionNode) {
  return "name" in definitionNode;
}
function mergeGraphQLNodes(nodes, config2, directives = {}) {
  var _a2, _b, _c2;
  const mergedResultMap = directives;
  for (const nodeDefinition of nodes) {
    if (isNamedDefinitionNode(nodeDefinition)) {
      const name = (_a2 = nodeDefinition.name) === null || _a2 === void 0 ? void 0 : _a2.value;
      if (config2 === null || config2 === void 0 ? void 0 : config2.commentDescriptions) {
        collectComment(nodeDefinition);
      }
      if (name == null) {
        continue;
      }
      if (((_b = config2 === null || config2 === void 0 ? void 0 : config2.exclusions) === null || _b === void 0 ? void 0 : _b.includes(name + ".*")) || ((_c2 = config2 === null || config2 === void 0 ? void 0 : config2.exclusions) === null || _c2 === void 0 ? void 0 : _c2.includes(name))) {
        delete mergedResultMap[name];
      } else {
        switch (nodeDefinition.kind) {
          case import_graphql26.Kind.OBJECT_TYPE_DEFINITION:
          case import_graphql26.Kind.OBJECT_TYPE_EXTENSION:
            mergedResultMap[name] = mergeType(nodeDefinition, mergedResultMap[name], config2, directives);
            break;
          case import_graphql26.Kind.ENUM_TYPE_DEFINITION:
          case import_graphql26.Kind.ENUM_TYPE_EXTENSION:
            mergedResultMap[name] = mergeEnum(nodeDefinition, mergedResultMap[name], config2, directives);
            break;
          case import_graphql26.Kind.UNION_TYPE_DEFINITION:
          case import_graphql26.Kind.UNION_TYPE_EXTENSION:
            mergedResultMap[name] = mergeUnion(nodeDefinition, mergedResultMap[name], config2, directives);
            break;
          case import_graphql26.Kind.SCALAR_TYPE_DEFINITION:
          case import_graphql26.Kind.SCALAR_TYPE_EXTENSION:
            mergedResultMap[name] = mergeScalar(nodeDefinition, mergedResultMap[name], config2, directives);
            break;
          case import_graphql26.Kind.INPUT_OBJECT_TYPE_DEFINITION:
          case import_graphql26.Kind.INPUT_OBJECT_TYPE_EXTENSION:
            mergedResultMap[name] = mergeInputType(nodeDefinition, mergedResultMap[name], config2, directives);
            break;
          case import_graphql26.Kind.INTERFACE_TYPE_DEFINITION:
          case import_graphql26.Kind.INTERFACE_TYPE_EXTENSION:
            mergedResultMap[name] = mergeInterface(nodeDefinition, mergedResultMap[name], config2, directives);
            break;
          case import_graphql26.Kind.DIRECTIVE_DEFINITION:
            mergedResultMap[name] = mergeDirective(nodeDefinition, mergedResultMap[name]);
            break;
        }
      }
    } else if (nodeDefinition.kind === import_graphql26.Kind.SCHEMA_DEFINITION || nodeDefinition.kind === import_graphql26.Kind.SCHEMA_EXTENSION) {
      mergedResultMap[schemaDefSymbol] = mergeSchemaDefs(nodeDefinition, mergedResultMap[schemaDefSymbol], config2);
    }
  }
  return mergedResultMap;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-typedefs.js
var import_graphql27 = __toESM(require_graphql2(), 1);
function mergeTypeDefs(typeSource, config2) {
  resetComments();
  const doc = {
    kind: import_graphql27.Kind.DOCUMENT,
    definitions: mergeGraphQLTypes(typeSource, {
      useSchemaDefinition: true,
      forceSchemaDefinition: false,
      throwOnConflict: false,
      commentDescriptions: false,
      ...config2
    })
  };
  let result;
  if (config2 === null || config2 === void 0 ? void 0 : config2.commentDescriptions) {
    result = printWithComments(doc);
  } else {
    result = doc;
  }
  resetComments();
  return result;
}
function visitTypeSources(typeSource, options, allDirectives = [], allNodes = [], visitedTypeSources = /* @__PURE__ */ new Set()) {
  if (typeSource && !visitedTypeSources.has(typeSource)) {
    visitedTypeSources.add(typeSource);
    if (typeof typeSource === "function") {
      visitTypeSources(typeSource(), options, allDirectives, allNodes, visitedTypeSources);
    } else if (Array.isArray(typeSource)) {
      for (const type of typeSource) {
        visitTypeSources(type, options, allDirectives, allNodes, visitedTypeSources);
      }
    } else if ((0, import_graphql27.isSchema)(typeSource)) {
      const documentNode = getDocumentNodeFromSchema(typeSource, options);
      visitTypeSources(documentNode.definitions, options, allDirectives, allNodes, visitedTypeSources);
    } else if (isStringTypes(typeSource) || isSourceTypes(typeSource)) {
      const documentNode = (0, import_graphql27.parse)(typeSource, options);
      visitTypeSources(documentNode.definitions, options, allDirectives, allNodes, visitedTypeSources);
    } else if (typeof typeSource === "object" && (0, import_graphql27.isDefinitionNode)(typeSource)) {
      if (typeSource.kind === import_graphql27.Kind.DIRECTIVE_DEFINITION) {
        allDirectives.push(typeSource);
      } else {
        allNodes.push(typeSource);
      }
    } else if (isDocumentNode(typeSource)) {
      visitTypeSources(typeSource.definitions, options, allDirectives, allNodes, visitedTypeSources);
    } else {
      throw new Error(`typeDefs must contain only strings, documents, schemas, or functions, got ${typeof typeSource}`);
    }
  }
  return { allDirectives, allNodes };
}
function mergeGraphQLTypes(typeSource, config2) {
  var _a2, _b, _c2;
  resetComments();
  const { allDirectives, allNodes } = visitTypeSources(typeSource, config2);
  const mergedDirectives = mergeGraphQLNodes(allDirectives, config2);
  const mergedNodes = mergeGraphQLNodes(allNodes, config2, mergedDirectives);
  if (config2 === null || config2 === void 0 ? void 0 : config2.useSchemaDefinition) {
    const schemaDef = mergedNodes[schemaDefSymbol] || {
      kind: import_graphql27.Kind.SCHEMA_DEFINITION,
      operationTypes: []
    };
    const operationTypes = schemaDef.operationTypes;
    for (const opTypeDefNodeType in DEFAULT_OPERATION_TYPE_NAME_MAP) {
      const opTypeDefNode = operationTypes.find((operationType) => operationType.operation === opTypeDefNodeType);
      if (!opTypeDefNode) {
        const possibleRootTypeName = DEFAULT_OPERATION_TYPE_NAME_MAP[opTypeDefNodeType];
        const existingPossibleRootType = mergedNodes[possibleRootTypeName];
        if (existingPossibleRootType != null && existingPossibleRootType.name != null) {
          operationTypes.push({
            kind: import_graphql27.Kind.OPERATION_TYPE_DEFINITION,
            type: {
              kind: import_graphql27.Kind.NAMED_TYPE,
              name: existingPossibleRootType.name
            },
            operation: opTypeDefNodeType
          });
        }
      }
    }
    if (((_a2 = schemaDef === null || schemaDef === void 0 ? void 0 : schemaDef.operationTypes) === null || _a2 === void 0 ? void 0 : _a2.length) != null && schemaDef.operationTypes.length > 0) {
      mergedNodes[schemaDefSymbol] = schemaDef;
    }
  }
  if ((config2 === null || config2 === void 0 ? void 0 : config2.forceSchemaDefinition) && !((_c2 = (_b = mergedNodes[schemaDefSymbol]) === null || _b === void 0 ? void 0 : _b.operationTypes) === null || _c2 === void 0 ? void 0 : _c2.length)) {
    mergedNodes[schemaDefSymbol] = {
      kind: import_graphql27.Kind.SCHEMA_DEFINITION,
      operationTypes: [
        {
          kind: import_graphql27.Kind.OPERATION_TYPE_DEFINITION,
          operation: "query",
          type: {
            kind: import_graphql27.Kind.NAMED_TYPE,
            name: {
              kind: import_graphql27.Kind.NAME,
              value: "Query"
            }
          }
        }
      ]
    };
  }
  const mergedNodeDefinitions = Object.values(mergedNodes);
  if (config2 === null || config2 === void 0 ? void 0 : config2.sort) {
    const sortFn = typeof config2.sort === "function" ? config2.sort : defaultStringComparator;
    mergedNodeDefinitions.sort((a, b2) => {
      var _a3, _b2;
      return sortFn((_a3 = a.name) === null || _a3 === void 0 ? void 0 : _a3.value, (_b2 = b2.name) === null || _b2 === void 0 ? void 0 : _b2.value);
    });
  }
  return mergedNodeDefinitions;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/extensions.js
function mergeExtensions(extensions) {
  return mergeDeep(extensions);
}
function applyExtensionObject(obj, extensions) {
  if (!obj) {
    return;
  }
  obj.extensions = mergeDeep([obj.extensions || {}, extensions || {}]);
}
function applyExtensions(schema, extensions) {
  applyExtensionObject(schema, extensions.schemaExtensions);
  for (const [typeName, data] of Object.entries(extensions.types || {})) {
    const type = schema.getType(typeName);
    if (type) {
      applyExtensionObject(type, data.extensions);
      if (data.type === "object" || data.type === "interface") {
        for (const [fieldName, fieldData] of Object.entries(data.fields)) {
          const field = type.getFields()[fieldName];
          if (field) {
            applyExtensionObject(field, fieldData.extensions);
            for (const [arg, argData] of Object.entries(fieldData.arguments)) {
              applyExtensionObject(field.args.find((a) => a.name === arg), argData);
            }
          }
        }
      } else if (data.type === "input") {
        for (const [fieldName, fieldData] of Object.entries(data.fields)) {
          const field = type.getFields()[fieldName];
          applyExtensionObject(field, fieldData.extensions);
        }
      } else if (data.type === "enum") {
        for (const [valueName, valueData] of Object.entries(data.values)) {
          const value = type.getValue(valueName);
          applyExtensionObject(value, valueData);
        }
      }
    }
  }
  return schema;
}

// node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/makeExecutableSchema.js
function makeExecutableSchema({ typeDefs, resolvers: resolvers2 = {}, resolverValidationOptions = {}, inheritResolversFromInterfaces = false, updateResolversInPlace = false, schemaExtensions, ...otherOptions }) {
  if (typeof resolverValidationOptions !== "object") {
    throw new Error("Expected `resolverValidationOptions` to be an object");
  }
  if (!typeDefs) {
    throw new Error("Must provide typeDefs");
  }
  let schema;
  if ((0, import_graphql28.isSchema)(typeDefs)) {
    schema = typeDefs;
  } else if (otherOptions === null || otherOptions === void 0 ? void 0 : otherOptions.commentDescriptions) {
    const mergedTypeDefs = mergeTypeDefs(typeDefs, {
      ...otherOptions,
      commentDescriptions: true
    });
    schema = (0, import_graphql28.buildSchema)(mergedTypeDefs, otherOptions);
  } else {
    const mergedTypeDefs = mergeTypeDefs(typeDefs, otherOptions);
    schema = (0, import_graphql28.buildASTSchema)(mergedTypeDefs, otherOptions);
  }
  schema = addResolversToSchema({
    schema,
    resolvers: mergeResolvers(resolvers2),
    resolverValidationOptions,
    inheritResolversFromInterfaces,
    updateResolversInPlace
  });
  if (Object.keys(resolverValidationOptions).length > 0) {
    assertResolversPresent(schema, resolverValidationOptions);
  }
  if (schemaExtensions) {
    schemaExtensions = mergeExtensions(asArray(schemaExtensions));
    applyExtensions(schema, schemaExtensions);
  }
  return schema;
}

// node_modules/@apollo/server/dist/esm/utils/resolvable.js
var resolvable_default = () => {
  let resolve;
  let reject;
  const promise = new Promise((_resolve, _reject) => {
    resolve = _resolve;
    reject = _reject;
  });
  promise.resolve = resolve;
  promise.reject = reject;
  return promise;
};

// node_modules/@apollo/server/dist/esm/ApolloServer.js
var import_graphql40 = __toESM(require_graphql2(), 1);
var import_loglevel = __toESM(require_loglevel(), 1);
var import_negotiator2 = __toESM(require_negotiator(), 1);
init_cachePolicy();

// node_modules/@apollo/server/dist/esm/determineApolloConfig.js
var import_utils16 = __toESM(require_dist3(), 1);
function determineApolloConfig(input, logger) {
  const apolloConfig = {};
  const { APOLLO_KEY, APOLLO_GRAPH_REF, APOLLO_GRAPH_ID, APOLLO_GRAPH_VARIANT } = process.env;
  if (input?.key) {
    apolloConfig.key = input.key.trim();
  } else if (APOLLO_KEY) {
    apolloConfig.key = APOLLO_KEY.trim();
  }
  if ((input?.key ?? APOLLO_KEY) !== apolloConfig.key) {
    logger.warn("The provided API key has unexpected leading or trailing whitespace. Apollo Server will trim the key value before use.");
  }
  if (apolloConfig.key) {
    assertValidHeaderValue(apolloConfig.key);
  }
  if (apolloConfig.key) {
    apolloConfig.keyHash = (0, import_utils16.createHash)("sha512").update(apolloConfig.key).digest("hex");
  }
  if (input?.graphRef) {
    apolloConfig.graphRef = input.graphRef;
  } else if (APOLLO_GRAPH_REF) {
    apolloConfig.graphRef = APOLLO_GRAPH_REF;
  }
  const graphId = input?.graphId ?? APOLLO_GRAPH_ID;
  const graphVariant = input?.graphVariant ?? APOLLO_GRAPH_VARIANT;
  if (apolloConfig.graphRef) {
    if (graphId) {
      throw new Error("Cannot specify both graph ref and graph ID. Please use `apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.");
    }
    if (graphVariant) {
      throw new Error("Cannot specify both graph ref and graph variant. Please use `apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph variant.");
    }
  } else if (graphId) {
    apolloConfig.graphRef = graphVariant ? `${graphId}@${graphVariant}` : graphId;
  }
  return apolloConfig;
}
function assertValidHeaderValue(value) {
  const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/g;
  if (invalidHeaderCharRegex.test(value)) {
    const invalidChars = value.match(invalidHeaderCharRegex);
    throw new Error(`The API key provided to Apollo Server contains characters which are invalid as HTTP header values. The following characters found in the key are invalid: ${invalidChars.join(", ")}. Valid header values may only contain ASCII visible characters. If you think there is an issue with your key, please contact Apollo support.`);
  }
}

// node_modules/@apollo/server/dist/esm/errorNormalize.js
var import_graphql31 = __toESM(require_graphql2(), 1);

// node_modules/@apollo/server/dist/esm/errors/index.js
var ApolloServerErrorCode;
(function(ApolloServerErrorCode2) {
  ApolloServerErrorCode2["INTERNAL_SERVER_ERROR"] = "INTERNAL_SERVER_ERROR";
  ApolloServerErrorCode2["GRAPHQL_PARSE_FAILED"] = "GRAPHQL_PARSE_FAILED";
  ApolloServerErrorCode2["GRAPHQL_VALIDATION_FAILED"] = "GRAPHQL_VALIDATION_FAILED";
  ApolloServerErrorCode2["PERSISTED_QUERY_NOT_FOUND"] = "PERSISTED_QUERY_NOT_FOUND";
  ApolloServerErrorCode2["PERSISTED_QUERY_NOT_SUPPORTED"] = "PERSISTED_QUERY_NOT_SUPPORTED";
  ApolloServerErrorCode2["BAD_USER_INPUT"] = "BAD_USER_INPUT";
  ApolloServerErrorCode2["OPERATION_RESOLUTION_FAILURE"] = "OPERATION_RESOLUTION_FAILURE";
  ApolloServerErrorCode2["BAD_REQUEST"] = "BAD_REQUEST";
})(ApolloServerErrorCode || (ApolloServerErrorCode = {}));
var ApolloServerValidationErrorCode;
(function(ApolloServerValidationErrorCode2) {
  ApolloServerValidationErrorCode2["INTROSPECTION_DISABLED"] = "INTROSPECTION_DISABLED";
})(ApolloServerValidationErrorCode || (ApolloServerValidationErrorCode = {}));

// node_modules/@apollo/server/dist/esm/runHttpQuery.js
var import_graphql30 = __toESM(require_graphql2(), 1);

// node_modules/@apollo/server/dist/esm/internalErrorClasses.js
var import_graphql29 = __toESM(require_graphql2(), 1);

// node_modules/@apollo/server/dist/esm/utils/HeaderMap.js
var HeaderMap = class extends Map {
  constructor() {
    super(...arguments);
    this.__identity = Symbol("HeaderMap");
  }
  set(key, value) {
    return super.set(key.toLowerCase(), value);
  }
  get(key) {
    return super.get(key.toLowerCase());
  }
  delete(key) {
    return super.delete(key.toLowerCase());
  }
  has(key) {
    return super.has(key.toLowerCase());
  }
};

// node_modules/@apollo/server/dist/esm/internalErrorClasses.js
var GraphQLErrorWithCode = class extends import_graphql29.GraphQLError {
  constructor(message, code, options) {
    super(message, {
      ...options,
      extensions: { ...options?.extensions, code }
    });
    this.name = this.constructor.name;
  }
};
var SyntaxError2 = class extends GraphQLErrorWithCode {
  constructor(graphqlError) {
    super(graphqlError.message, ApolloServerErrorCode.GRAPHQL_PARSE_FAILED, {
      source: graphqlError.source,
      positions: graphqlError.positions,
      extensions: { http: newHTTPGraphQLHead(400), ...graphqlError.extensions },
      originalError: graphqlError
    });
  }
};
var ValidationError = class extends GraphQLErrorWithCode {
  constructor(graphqlError) {
    super(graphqlError.message, ApolloServerErrorCode.GRAPHQL_VALIDATION_FAILED, {
      nodes: graphqlError.nodes,
      extensions: {
        http: newHTTPGraphQLHead(400),
        ...graphqlError.extensions
      },
      originalError: graphqlError.originalError ?? graphqlError
    });
  }
};
var getPersistedQueryErrorHttp = () => ({
  status: 200,
  headers: new HeaderMap([
    ["cache-control", "private, no-cache, must-revalidate"]
  ])
});
var PersistedQueryNotFoundError = class extends GraphQLErrorWithCode {
  constructor() {
    super("PersistedQueryNotFound", ApolloServerErrorCode.PERSISTED_QUERY_NOT_FOUND, { extensions: { http: getPersistedQueryErrorHttp() } });
  }
};
var PersistedQueryNotSupportedError = class extends GraphQLErrorWithCode {
  constructor() {
    super("PersistedQueryNotSupported", ApolloServerErrorCode.PERSISTED_QUERY_NOT_SUPPORTED, { extensions: { http: getPersistedQueryErrorHttp() } });
  }
};
var UserInputError = class extends GraphQLErrorWithCode {
  constructor(graphqlError) {
    super(graphqlError.message, ApolloServerErrorCode.BAD_USER_INPUT, {
      nodes: graphqlError.nodes,
      originalError: graphqlError.originalError ?? graphqlError,
      extensions: graphqlError.extensions
    });
  }
};
var OperationResolutionError = class extends GraphQLErrorWithCode {
  constructor(graphqlError) {
    super(graphqlError.message, ApolloServerErrorCode.OPERATION_RESOLUTION_FAILURE, {
      nodes: graphqlError.nodes,
      originalError: graphqlError.originalError ?? graphqlError,
      extensions: {
        http: newHTTPGraphQLHead(400),
        ...graphqlError.extensions
      }
    });
  }
};
var BadRequestError = class extends GraphQLErrorWithCode {
  constructor(message, options) {
    super(message, ApolloServerErrorCode.BAD_REQUEST, {
      ...options,
      extensions: { http: newHTTPGraphQLHead(400), ...options?.extensions }
    });
  }
};

// node_modules/@apollo/server/dist/esm/runHttpQuery.js
var import_negotiator = __toESM(require_negotiator(), 1);
function fieldIfString(o, fieldName) {
  const value = o[fieldName];
  if (typeof value === "string") {
    return value;
  }
  return void 0;
}
function searchParamIfSpecifiedOnce(searchParams, paramName) {
  const values = searchParams.getAll(paramName);
  switch (values.length) {
    case 0:
      return void 0;
    case 1:
      return values[0];
    default:
      throw new BadRequestError(`The '${paramName}' search parameter may only be specified once.`);
  }
}
function jsonParsedSearchParamIfSpecifiedOnce(searchParams, fieldName) {
  const value = searchParamIfSpecifiedOnce(searchParams, fieldName);
  if (value === void 0) {
    return void 0;
  }
  let hopefullyRecord;
  try {
    hopefullyRecord = JSON.parse(value);
  } catch {
    throw new BadRequestError(`The ${fieldName} search parameter contains invalid JSON.`);
  }
  if (!isStringRecord(hopefullyRecord)) {
    throw new BadRequestError(`The ${fieldName} search parameter should contain a JSON-encoded object.`);
  }
  return hopefullyRecord;
}
function fieldIfRecord(o, fieldName) {
  const value = o[fieldName];
  if (isStringRecord(value)) {
    return value;
  }
  return void 0;
}
function isStringRecord(o) {
  return !!o && typeof o === "object" && !Buffer.isBuffer(o) && !Array.isArray(o);
}
function isNonEmptyStringRecord(o) {
  return isStringRecord(o) && Object.keys(o).length > 0;
}
function ensureQueryIsStringOrMissing(query) {
  if (!query || typeof query === "string") {
    return;
  }
  if (query.kind === import_graphql30.Kind.DOCUMENT) {
    throw new BadRequestError("GraphQL queries must be strings. It looks like you're sending the internal graphql-js representation of a parsed query in your request instead of a request in the GraphQL query language. You can convert an AST to a string using the `print` function from `graphql`, or use a client like `apollo-client` which converts the internal representation to a string for you.");
  } else {
    throw new BadRequestError("GraphQL queries must be strings.");
  }
}
async function runHttpQuery({ server, httpRequest, contextValue, schemaDerivedData, internals, sharedResponseHTTPGraphQLHead }) {
  let graphQLRequest;
  switch (httpRequest.method) {
    case "POST": {
      if (!isNonEmptyStringRecord(httpRequest.body)) {
        throw new BadRequestError("POST body missing, invalid Content-Type, or JSON object has no keys.");
      }
      ensureQueryIsStringOrMissing(httpRequest.body.query);
      if (typeof httpRequest.body.variables === "string") {
        throw new BadRequestError("`variables` in a POST body should be provided as an object, not a recursively JSON-encoded string.");
      }
      if (typeof httpRequest.body.extensions === "string") {
        throw new BadRequestError("`extensions` in a POST body should be provided as an object, not a recursively JSON-encoded string.");
      }
      if ("extensions" in httpRequest.body && httpRequest.body.extensions !== null && !isStringRecord(httpRequest.body.extensions)) {
        throw new BadRequestError("`extensions` in a POST body must be an object if provided.");
      }
      if ("variables" in httpRequest.body && httpRequest.body.variables !== null && !isStringRecord(httpRequest.body.variables)) {
        throw new BadRequestError("`variables` in a POST body must be an object if provided.");
      }
      if ("operationName" in httpRequest.body && httpRequest.body.operationName !== null && typeof httpRequest.body.operationName !== "string") {
        throw new BadRequestError("`operationName` in a POST body must be a string if provided.");
      }
      graphQLRequest = {
        query: fieldIfString(httpRequest.body, "query"),
        operationName: fieldIfString(httpRequest.body, "operationName"),
        variables: fieldIfRecord(httpRequest.body, "variables"),
        extensions: fieldIfRecord(httpRequest.body, "extensions"),
        http: httpRequest
      };
      break;
    }
    case "GET": {
      const searchParams = new URLSearchParams(httpRequest.search);
      graphQLRequest = {
        query: searchParamIfSpecifiedOnce(searchParams, "query"),
        operationName: searchParamIfSpecifiedOnce(searchParams, "operationName"),
        variables: jsonParsedSearchParamIfSpecifiedOnce(searchParams, "variables"),
        extensions: jsonParsedSearchParamIfSpecifiedOnce(searchParams, "extensions"),
        http: httpRequest
      };
      break;
    }
    default:
      throw new BadRequestError("Apollo Server supports only GET/POST requests.", {
        extensions: {
          http: {
            status: 405,
            headers: new HeaderMap([["allow", "GET, POST"]])
          }
        }
      });
  }
  const graphQLResponse = await internalExecuteOperation({
    server,
    graphQLRequest,
    internals,
    schemaDerivedData,
    sharedResponseHTTPGraphQLHead
  }, { contextValue });
  if (graphQLResponse.body.kind === "single") {
    if (!graphQLResponse.http.headers.get("content-type")) {
      const contentType = chooseContentTypeForSingleResultResponse(httpRequest);
      if (contentType === null) {
        throw new BadRequestError(`An 'accept' header was provided for this request which does not accept ${MEDIA_TYPES.APPLICATION_JSON} or ${MEDIA_TYPES.APPLICATION_GRAPHQL_RESPONSE_JSON}`, { extensions: { http: { status: 406 } } });
      }
      graphQLResponse.http.headers.set("content-type", contentType);
    }
    return {
      ...graphQLResponse.http,
      body: {
        kind: "complete",
        string: await internals.stringifyResult(orderExecutionResultFields(graphQLResponse.body.singleResult))
      }
    };
  }
  const acceptHeader = httpRequest.headers.get("accept");
  if (!(acceptHeader && new import_negotiator.default({
    headers: { accept: httpRequest.headers.get("accept") }
  }).mediaType([
    MEDIA_TYPES.MULTIPART_MIXED_NO_DEFER_SPEC,
    MEDIA_TYPES.MULTIPART_MIXED_EXPERIMENTAL
  ]) === MEDIA_TYPES.MULTIPART_MIXED_EXPERIMENTAL)) {
    throw new BadRequestError("Apollo server received an operation that uses incremental delivery (@defer or @stream), but the client does not accept multipart/mixed HTTP responses. To enable incremental delivery support, add the HTTP header 'Accept: multipart/mixed; deferSpec=20220824'.", { extensions: { http: { status: 406 } } });
  }
  graphQLResponse.http.headers.set("content-type", 'multipart/mixed; boundary="-"; deferSpec=20220824');
  return {
    ...graphQLResponse.http,
    body: {
      kind: "chunked",
      asyncIterator: writeMultipartBody(graphQLResponse.body.initialResult, graphQLResponse.body.subsequentResults)
    }
  };
}
async function* writeMultipartBody(initialResult, subsequentResults) {
  yield `\r
---\r
content-type: application/json; charset=utf-8\r
\r
${JSON.stringify(orderInitialIncrementalExecutionResultFields(initialResult))}\r
---${initialResult.hasNext ? "" : "--"}\r
`;
  for await (const result of subsequentResults) {
    yield `content-type: application/json; charset=utf-8\r
\r
${JSON.stringify(orderSubsequentIncrementalExecutionResultFields(result))}\r
---${result.hasNext ? "" : "--"}\r
`;
  }
}
function orderExecutionResultFields(result) {
  return {
    errors: result.errors,
    data: result.data,
    extensions: result.extensions
  };
}
function orderInitialIncrementalExecutionResultFields(result) {
  return {
    hasNext: result.hasNext,
    errors: result.errors,
    data: result.data,
    incremental: orderIncrementalResultFields(result.incremental),
    extensions: result.extensions
  };
}
function orderSubsequentIncrementalExecutionResultFields(result) {
  return {
    hasNext: result.hasNext,
    incremental: orderIncrementalResultFields(result.incremental),
    extensions: result.extensions
  };
}
function orderIncrementalResultFields(incremental) {
  return incremental?.map((i) => ({
    hasNext: i.hasNext,
    errors: i.errors,
    path: i.path,
    label: i.label,
    data: i.data,
    items: i.items,
    extensions: i.extensions
  }));
}
function prettyJSONStringify(value) {
  return JSON.stringify(value) + "\n";
}
function newHTTPGraphQLHead(status) {
  return {
    status,
    headers: new HeaderMap()
  };
}
function mergeHTTPGraphQLHead(target, source) {
  if (source.status) {
    target.status = source.status;
  }
  if (source.headers) {
    for (const [name, value] of source.headers) {
      target.headers.set(name, value);
    }
  }
}

// node_modules/@apollo/server/dist/esm/errorNormalize.js
function normalizeAndFormatErrors(errors, options = {}) {
  const formatError2 = options.formatError ?? ((error) => error);
  const httpFromErrors = newHTTPGraphQLHead();
  return {
    httpFromErrors,
    formattedErrors: errors.map((error) => {
      try {
        return formatError2(enrichError(error), error);
      } catch (formattingError) {
        if (options.includeStacktraceInErrorResponses) {
          return enrichError(formattingError);
        } else {
          return {
            message: "Internal server error",
            extensions: { code: ApolloServerErrorCode.INTERNAL_SERVER_ERROR }
          };
        }
      }
    })
  };
  function enrichError(maybeError) {
    const graphqlError = ensureGraphQLError(maybeError);
    const extensions = {
      ...graphqlError.extensions,
      code: graphqlError.extensions.code ?? ApolloServerErrorCode.INTERNAL_SERVER_ERROR
    };
    if (isPartialHTTPGraphQLHead(extensions.http)) {
      mergeHTTPGraphQLHead(httpFromErrors, {
        headers: new HeaderMap(),
        ...extensions.http
      });
      delete extensions.http;
    }
    if (options.includeStacktraceInErrorResponses) {
      extensions.stacktrace = graphqlError.stack?.split("\n");
    }
    return { ...graphqlError.toJSON(), extensions };
  }
}
function ensureError(maybeError) {
  return maybeError instanceof Error ? maybeError : new import_graphql31.GraphQLError("Unexpected error value: " + String(maybeError));
}
function ensureGraphQLError(maybeError, messagePrefixIfNotGraphQLError = "") {
  const error = ensureError(maybeError);
  return error instanceof import_graphql31.GraphQLError ? error : new import_graphql31.GraphQLError(messagePrefixIfNotGraphQLError + error.message, {
    originalError: error
  });
}
function isPartialHTTPGraphQLHead(x2) {
  return !!x2 && typeof x2 === "object" && (!("status" in x2) || typeof x2.status === "number") && (!("headers" in x2) || x2.headers instanceof Map);
}

// node_modules/@apollo/server/dist/esm/httpBatching.js
async function runBatchedHttpQuery({ server, batchRequest, body, contextValue, schemaDerivedData, internals }) {
  if (body.length === 0) {
    throw new BadRequestError("No operations found in request.");
  }
  const sharedResponseHTTPGraphQLHead = newHTTPGraphQLHead();
  const responseBodies = await Promise.all(body.map(async (bodyPiece) => {
    const singleRequest = {
      ...batchRequest,
      body: bodyPiece
    };
    const response = await runHttpQuery({
      server,
      httpRequest: singleRequest,
      contextValue,
      schemaDerivedData,
      internals,
      sharedResponseHTTPGraphQLHead
    });
    if (response.body.kind === "chunked") {
      throw Error("Incremental delivery is not implemented for batch requests");
    }
    return response.body.string;
  }));
  return {
    ...sharedResponseHTTPGraphQLHead,
    body: { kind: "complete", string: `[${responseBodies.join(",")}]` }
  };
}
async function runPotentiallyBatchedHttpQuery(server, httpGraphQLRequest, contextValue, schemaDerivedData, internals) {
  if (!(httpGraphQLRequest.method === "POST" && Array.isArray(httpGraphQLRequest.body))) {
    return await runHttpQuery({
      server,
      httpRequest: httpGraphQLRequest,
      contextValue,
      schemaDerivedData,
      internals,
      sharedResponseHTTPGraphQLHead: null
    });
  }
  if (internals.allowBatchedHttpRequests) {
    return await runBatchedHttpQuery({
      server,
      batchRequest: httpGraphQLRequest,
      body: httpGraphQLRequest.body,
      contextValue,
      schemaDerivedData,
      internals
    });
  }
  throw new BadRequestError("Operation batching disabled.");
}

// node_modules/@apollo/server/dist/esm/ApolloServer.js
init_internalPlugin();

// node_modules/@apollo/server/dist/esm/preventCsrf.js
var import_whatwg_mimetype = __toESM(require_mime_type(), 1);
var recommendedCsrfPreventionRequestHeaders = [
  "x-apollo-operation-name",
  "apollo-require-preflight"
];
var NON_PREFLIGHTED_CONTENT_TYPES = [
  "application/x-www-form-urlencoded",
  "multipart/form-data",
  "text/plain"
];
function preventCsrf(headers, csrfPreventionRequestHeaders) {
  const contentType = headers.get("content-type");
  if (contentType !== void 0) {
    const contentTypeParsed = import_whatwg_mimetype.default.parse(contentType);
    if (contentTypeParsed === null) {
      return;
    }
    if (!NON_PREFLIGHTED_CONTENT_TYPES.includes(contentTypeParsed.essence)) {
      return;
    }
  }
  if (csrfPreventionRequestHeaders.some((header) => {
    const value = headers.get(header);
    return value !== void 0 && value.length > 0;
  })) {
    return;
  }
  throw new BadRequestError(`This operation has been blocked as a potential Cross-Site Request Forgery (CSRF). Please either specify a 'content-type' header (with a type that is not one of ${NON_PREFLIGHTED_CONTENT_TYPES.join(", ")}) or provide a non-empty value for one of the following headers: ${csrfPreventionRequestHeaders.join(", ")}
`);
}

// node_modules/@apollo/server/dist/esm/requestPipeline.js
var import_utils17 = __toESM(require_dist3(), 1);
var import_graphql34 = __toESM(require_graphql2(), 1);

// node_modules/@apollo/server/dist/esm/utils/schemaInstrumentation.js
var import_graphql32 = __toESM(require_graphql2(), 1);
var symbolExecutionDispatcherWillResolveField = Symbol("apolloServerExecutionDispatcherWillResolveField");
var symbolUserFieldResolver = Symbol("apolloServerUserFieldResolver");
var symbolPluginsEnabled = Symbol("apolloServerPluginsEnabled");
function enablePluginsForSchemaResolvers(schema) {
  if (pluginsEnabledForSchemaResolvers(schema)) {
    return schema;
  }
  Object.defineProperty(schema, symbolPluginsEnabled, {
    value: true
  });
  const typeMap = schema.getTypeMap();
  Object.values(typeMap).forEach((type) => {
    if (!(0, import_graphql32.getNamedType)(type).name.startsWith("__") && type instanceof import_graphql32.GraphQLObjectType) {
      const fields = type.getFields();
      Object.values(fields).forEach((field) => {
        wrapField(field);
      });
    }
  });
  return schema;
}
function pluginsEnabledForSchemaResolvers(schema) {
  return !!schema[symbolPluginsEnabled];
}
function wrapField(field) {
  const originalFieldResolve = field.resolve;
  field.resolve = (source, args, contextValue, info) => {
    const willResolveField = contextValue?.[symbolExecutionDispatcherWillResolveField];
    const userFieldResolver = contextValue?.[symbolUserFieldResolver];
    const didResolveField = typeof willResolveField === "function" && willResolveField({ source, args, contextValue, info });
    const fieldResolver = originalFieldResolve || userFieldResolver || import_graphql32.defaultFieldResolver;
    try {
      const result = fieldResolver(source, args, contextValue, info);
      if (typeof didResolveField === "function") {
        whenResultIsFinished(result, didResolveField);
      }
      return result;
    } catch (error) {
      if (typeof didResolveField === "function") {
        didResolveField(error);
      }
      throw error;
    }
  };
}
function isPromise(x2) {
  return x2 && typeof x2.then === "function";
}
function whenResultIsFinished(result, callback) {
  if (isPromise(result)) {
    result.then((r) => whenResultIsFinished(r, callback), (err) => callback(err));
  } else if (Array.isArray(result)) {
    if (result.some(isPromise)) {
      Promise.all(result).then((r) => callback(null, r), (err) => callback(err));
    } else {
      callback(null, result);
    }
  } else {
    callback(null, result);
  }
}

// node_modules/@apollo/server/dist/esm/utils/isDefined.js
function isDefined(t) {
  return t != null;
}

// node_modules/@apollo/server/dist/esm/utils/invokeHooks.js
async function invokeDidStartHook(targets, hook) {
  const didEndHooks = (await Promise.all(targets.map((target) => hook(target)))).filter(isDefined);
  didEndHooks.reverse();
  return async (...args) => {
    for (const didEndHook of didEndHooks) {
      didEndHook(...args);
    }
  };
}
function invokeSyncDidStartHook(targets, hook) {
  const didEndHooks = targets.map((target) => hook(target)).filter(isDefined);
  didEndHooks.reverse();
  return (...args) => {
    for (const didEndHook of didEndHooks) {
      didEndHook(...args);
    }
  };
}
async function invokeHooksUntilDefinedAndNonNull(targets, hook) {
  for (const target of targets) {
    const value = await hook(target);
    if (value != null) {
      return value;
    }
  }
  return null;
}

// node_modules/@apollo/server/dist/esm/utils/makeGatewayGraphQLRequestContext.js
function makeGatewayGraphQLRequestContext(as4RequestContext, server, internals) {
  const request = {};
  if ("query" in as4RequestContext.request) {
    request.query = as4RequestContext.request.query;
  }
  if ("operationName" in as4RequestContext.request) {
    request.operationName = as4RequestContext.request.operationName;
  }
  if ("variables" in as4RequestContext.request) {
    request.variables = as4RequestContext.request.variables;
  }
  if ("extensions" in as4RequestContext.request) {
    request.extensions = as4RequestContext.request.extensions;
  }
  if (as4RequestContext.request.http) {
    const as4http = as4RequestContext.request.http;
    const needQuestion = as4http.search !== "" && !as4http.search.startsWith("?");
    request.http = {
      method: as4http.method,
      url: `https://unknown-url.invalid/${needQuestion ? "?" : ""}${as4http.search}`,
      headers: new FetcherHeadersForHeaderMap(as4http.headers)
    };
  }
  const response = {
    http: {
      headers: new FetcherHeadersForHeaderMap(as4RequestContext.response.http.headers),
      get status() {
        return as4RequestContext.response.http.status;
      },
      set status(newStatus) {
        as4RequestContext.response.http.status = newStatus;
      }
    }
  };
  return {
    request,
    response,
    logger: server.logger,
    schema: as4RequestContext.schema,
    schemaHash: "schemaHash no longer exists in Apollo Server 4",
    context: as4RequestContext.contextValue,
    cache: server.cache,
    queryHash: as4RequestContext.queryHash,
    document: as4RequestContext.document,
    source: as4RequestContext.source,
    operationName: as4RequestContext.operationName,
    operation: as4RequestContext.operation,
    errors: as4RequestContext.errors,
    metrics: as4RequestContext.metrics,
    debug: internals.includeStacktraceInErrorResponses,
    overallCachePolicy: as4RequestContext.overallCachePolicy,
    requestIsBatched: as4RequestContext.requestIsBatched
  };
}
var FetcherHeadersForHeaderMap = class {
  constructor(map) {
    this.map = map;
  }
  append(name, value) {
    if (this.map.has(name)) {
      this.map.set(name, this.map.get(name) + ", " + value);
    } else {
      this.map.set(name, value);
    }
  }
  delete(name) {
    this.map.delete(name);
  }
  get(name) {
    return this.map.get(name) ?? null;
  }
  has(name) {
    return this.map.has(name);
  }
  set(name, value) {
    this.map.set(name, value);
  }
  entries() {
    return this.map.entries();
  }
  keys() {
    return this.map.keys();
  }
  values() {
    return this.map.values();
  }
  [Symbol.iterator]() {
    return this.map.entries();
  }
};

// node_modules/@apollo/server/dist/esm/incrementalDeliveryPolyfill.js
var import_graphql33 = __toESM(require_graphql2(), 1);
var graphqlExperimentalExecuteIncrementally = void 0;
async function tryToLoadGraphQL17() {
  if (graphqlExperimentalExecuteIncrementally !== void 0) {
    return;
  }
  const graphql = await Promise.resolve().then(() => __toESM(require_graphql2(), 1));
  if ("experimentalExecuteIncrementally" in graphql) {
    graphqlExperimentalExecuteIncrementally = graphql.experimentalExecuteIncrementally;
  } else {
    graphqlExperimentalExecuteIncrementally = null;
  }
}
async function executeIncrementally(args) {
  await tryToLoadGraphQL17();
  if (graphqlExperimentalExecuteIncrementally) {
    return graphqlExperimentalExecuteIncrementally(args);
  }
  return (0, import_graphql33.execute)(args);
}

// node_modules/@apollo/server/dist/esm/requestPipeline.js
var APQ_CACHE_PREFIX = "apq:";
function computeQueryHash(query) {
  return (0, import_utils17.createHash)("sha256").update(query).digest("hex");
}
function isBadUserInputGraphQLError(error) {
  return error.nodes?.length === 1 && error.nodes[0].kind === import_graphql34.Kind.VARIABLE_DEFINITION && (error.message.startsWith(`Variable "$${error.nodes[0].variable.name.value}" got invalid value `) || error.message.startsWith(`Variable "$${error.nodes[0].variable.name.value}" of required type `) || error.message.startsWith(`Variable "$${error.nodes[0].variable.name.value}" of non-null type `));
}
async function processGraphQLRequest(schemaDerivedData, server, internals, requestContext) {
  const requestListeners = (await Promise.all(internals.plugins.map((p) => p.requestDidStart?.(requestContext)))).filter(isDefined);
  const request = requestContext.request;
  let { query, extensions } = request;
  let queryHash;
  requestContext.metrics.persistedQueryHit = false;
  requestContext.metrics.persistedQueryRegister = false;
  if (extensions?.persistedQuery) {
    if (!internals.persistedQueries) {
      return await sendErrorResponse([new PersistedQueryNotSupportedError()]);
    } else if (extensions.persistedQuery.version !== 1) {
      return await sendErrorResponse([
        new import_graphql34.GraphQLError("Unsupported persisted query version", {
          extensions: { http: newHTTPGraphQLHead(400) }
        })
      ]);
    }
    queryHash = extensions.persistedQuery.sha256Hash;
    if (query === void 0) {
      query = await internals.persistedQueries.cache.get(queryHash);
      if (query) {
        requestContext.metrics.persistedQueryHit = true;
      } else {
        return await sendErrorResponse([new PersistedQueryNotFoundError()]);
      }
    } else {
      const computedQueryHash = computeQueryHash(query);
      if (queryHash !== computedQueryHash) {
        return await sendErrorResponse([
          new import_graphql34.GraphQLError("provided sha does not match query", {
            extensions: { http: newHTTPGraphQLHead(400) }
          })
        ]);
      }
      requestContext.metrics.persistedQueryRegister = true;
    }
  } else if (query) {
    queryHash = computeQueryHash(query);
  } else {
    return await sendErrorResponse([
      new BadRequestError("GraphQL operations must contain a non-empty `query` or a `persistedQuery` extension.")
    ]);
  }
  requestContext.queryHash = queryHash;
  requestContext.source = query;
  await Promise.all(requestListeners.map((l) => l.didResolveSource?.(requestContext)));
  if (schemaDerivedData.documentStore) {
    try {
      requestContext.document = await schemaDerivedData.documentStore.get(schemaDerivedData.documentStoreKeyPrefix + queryHash);
    } catch (err) {
      server.logger.warn("An error occurred while attempting to read from the documentStore. " + ensureError(err).message);
    }
  }
  if (!requestContext.document) {
    const parsingDidEnd = await invokeDidStartHook(requestListeners, async (l) => l.parsingDidStart?.(requestContext));
    try {
      requestContext.document = (0, import_graphql34.parse)(query, internals.parseOptions);
    } catch (syntaxMaybeError) {
      const error = ensureError(syntaxMaybeError);
      await parsingDidEnd(error);
      return await sendErrorResponse([
        new SyntaxError2(ensureGraphQLError(error))
      ]);
    }
    await parsingDidEnd();
    if (internals.dangerouslyDisableValidation !== true) {
      const validationDidEnd = await invokeDidStartHook(requestListeners, async (l) => l.validationDidStart?.(requestContext));
      const validationErrors = (0, import_graphql34.validate)(schemaDerivedData.schema, requestContext.document, [...import_graphql34.specifiedRules, ...internals.validationRules]);
      if (validationErrors.length === 0) {
        await validationDidEnd();
      } else {
        await validationDidEnd(validationErrors);
        return await sendErrorResponse(validationErrors.map((error) => new ValidationError(error)));
      }
    }
    if (schemaDerivedData.documentStore) {
      Promise.resolve(schemaDerivedData.documentStore.set(schemaDerivedData.documentStoreKeyPrefix + queryHash, requestContext.document)).catch((err) => server.logger.warn("Could not store validated document. " + err?.message || err));
    }
  }
  const operation = (0, import_graphql34.getOperationAST)(requestContext.document, request.operationName);
  requestContext.operation = operation || void 0;
  requestContext.operationName = operation?.name?.value || null;
  if (request.http?.method === "GET" && operation?.operation && operation.operation !== "query") {
    return await sendErrorResponse([
      new BadRequestError(`GET requests only support query operations, not ${operation.operation} operations`, {
        extensions: {
          http: { status: 405, headers: new HeaderMap([["allow", "POST"]]) }
        }
      })
    ]);
  }
  try {
    await Promise.all(requestListeners.map((l) => l.didResolveOperation?.(requestContext)));
  } catch (err) {
    return await sendErrorResponse([ensureGraphQLError(err)]);
  }
  if (requestContext.metrics.persistedQueryRegister && internals.persistedQueries) {
    const ttl = internals.persistedQueries?.ttl;
    Promise.resolve(internals.persistedQueries.cache.set(queryHash, query, ttl !== void 0 ? { ttl: internals.persistedQueries?.ttl } : void 0)).catch(server.logger.warn);
  }
  const responseFromPlugin = await invokeHooksUntilDefinedAndNonNull(requestListeners, async (l) => await l.responseForOperation?.(requestContext));
  if (responseFromPlugin !== null) {
    requestContext.response.body = responseFromPlugin.body;
    mergeHTTPGraphQLHead(requestContext.response.http, responseFromPlugin.http);
  } else {
    const executionListeners = (await Promise.all(requestListeners.map((l) => l.executionDidStart?.(requestContext)))).filter(isDefined);
    executionListeners.reverse();
    if (executionListeners.some((l) => l.willResolveField)) {
      const invokeWillResolveField = (...args) => invokeSyncDidStartHook(executionListeners, (l) => l.willResolveField?.(...args));
      Object.defineProperty(requestContext.contextValue, symbolExecutionDispatcherWillResolveField, { value: invokeWillResolveField });
      if (internals.fieldResolver) {
        Object.defineProperty(requestContext.contextValue, symbolUserFieldResolver, {
          value: internals.fieldResolver
        });
      }
      enablePluginsForSchemaResolvers(schemaDerivedData.schema);
    }
    try {
      const fullResult = await execute2(requestContext);
      const result = "singleResult" in fullResult ? fullResult.singleResult : fullResult.initialResult;
      if (!requestContext.operation) {
        if (!result.errors?.length) {
          throw new Error("Unexpected error: Apollo Server did not resolve an operation but execute did not return errors");
        }
        throw new OperationResolutionError(result.errors[0]);
      }
      const resultErrors = result.errors?.map((e) => {
        if (isBadUserInputGraphQLError(e) && e.extensions?.code == null) {
          return new UserInputError(e);
        }
        return e;
      });
      if (resultErrors) {
        await didEncounterErrors(resultErrors);
      }
      const { formattedErrors, httpFromErrors } = resultErrors ? formatErrors(resultErrors) : { formattedErrors: void 0, httpFromErrors: newHTTPGraphQLHead() };
      if (internals.status400ForVariableCoercionErrors && resultErrors?.length && result.data === void 0 && !httpFromErrors.status) {
        httpFromErrors.status = 400;
      }
      mergeHTTPGraphQLHead(requestContext.response.http, httpFromErrors);
      if ("singleResult" in fullResult) {
        requestContext.response.body = {
          kind: "single",
          singleResult: {
            ...result,
            errors: formattedErrors
          }
        };
      } else {
        requestContext.response.body = {
          kind: "incremental",
          initialResult: {
            ...fullResult.initialResult,
            errors: formattedErrors
          },
          subsequentResults: fullResult.subsequentResults
        };
      }
    } catch (executionMaybeError) {
      const executionError = ensureError(executionMaybeError);
      await Promise.all(executionListeners.map((l) => l.executionDidEnd?.(executionError)));
      return await sendErrorResponse([ensureGraphQLError(executionError)]);
    }
    await Promise.all(executionListeners.map((l) => l.executionDidEnd?.()));
  }
  await invokeWillSendResponse();
  if (!requestContext.response.body) {
    throw Error("got to end of processGraphQLRequest without setting body?");
  }
  return requestContext.response;
  async function execute2(requestContext2) {
    const { request: request2, document } = requestContext2;
    if (internals.__testing_incrementalExecutionResults) {
      return internals.__testing_incrementalExecutionResults;
    } else if (internals.gatewayExecutor) {
      const result = await internals.gatewayExecutor(makeGatewayGraphQLRequestContext(requestContext2, server, internals));
      return { singleResult: result };
    } else {
      const resultOrResults = await executeIncrementally({
        schema: schemaDerivedData.schema,
        document,
        rootValue: typeof internals.rootValue === "function" ? internals.rootValue(document) : internals.rootValue,
        contextValue: requestContext2.contextValue,
        variableValues: request2.variables,
        operationName: request2.operationName,
        fieldResolver: internals.fieldResolver
      });
      if ("initialResult" in resultOrResults) {
        return {
          initialResult: resultOrResults.initialResult,
          subsequentResults: formatErrorsInSubsequentResults(resultOrResults.subsequentResults)
        };
      } else {
        return { singleResult: resultOrResults };
      }
    }
  }
  async function* formatErrorsInSubsequentResults(results) {
    for await (const result of results) {
      const payload = result.incremental ? {
        ...result,
        incremental: await seriesAsyncMap(result.incremental, async (incrementalResult) => {
          const { errors } = incrementalResult;
          if (errors) {
            await Promise.all(requestListeners.map((l) => l.didEncounterSubsequentErrors?.(requestContext, errors)));
            return {
              ...incrementalResult,
              errors: formatErrors(errors).formattedErrors
            };
          }
          return incrementalResult;
        })
      } : result;
      await Promise.all(requestListeners.map((l) => l.willSendSubsequentPayload?.(requestContext, payload)));
      yield payload;
    }
  }
  async function invokeWillSendResponse() {
    await Promise.all(requestListeners.map((l) => l.willSendResponse?.(requestContext)));
  }
  async function didEncounterErrors(errors) {
    requestContext.errors = errors;
    return await Promise.all(requestListeners.map((l) => l.didEncounterErrors?.(requestContext)));
  }
  async function sendErrorResponse(errors) {
    await didEncounterErrors(errors);
    const { formattedErrors, httpFromErrors } = formatErrors(errors);
    requestContext.response.body = {
      kind: "single",
      singleResult: {
        errors: formattedErrors
      }
    };
    mergeHTTPGraphQLHead(requestContext.response.http, httpFromErrors);
    if (!requestContext.response.http.status) {
      requestContext.response.http.status = 500;
    }
    await invokeWillSendResponse();
    return requestContext.response;
  }
  function formatErrors(errors) {
    return normalizeAndFormatErrors(errors, {
      formatError: internals.formatError,
      includeStacktraceInErrorResponses: internals.includeStacktraceInErrorResponses
    });
  }
}
async function seriesAsyncMap(ts2, fn2) {
  const us2 = [];
  for (const t of ts2) {
    const u = await fn2(t);
    us2.push(u);
  }
  return us2;
}

// node_modules/@apollo/server/dist/esm/ApolloServer.js
init_UnreachableCaseError();
init_computeCoreSchemaHash();

// node_modules/@apollo/server/dist/esm/utils/schemaManager.js
var SchemaManager = class {
  constructor(options) {
    this.onSchemaLoadOrUpdateListeners = /* @__PURE__ */ new Set();
    this.isStopped = false;
    this.logger = options.logger;
    this.schemaDerivedDataProvider = options.schemaDerivedDataProvider;
    if ("gateway" in options) {
      this.modeSpecificState = {
        mode: "gateway",
        gateway: options.gateway,
        apolloConfig: options.apolloConfig
      };
    } else {
      this.modeSpecificState = {
        mode: "schema",
        apiSchema: options.apiSchema,
        schemaDerivedData: options.schemaDerivedDataProvider(options.apiSchema)
      };
    }
  }
  async start() {
    if (this.modeSpecificState.mode === "gateway") {
      const gateway = this.modeSpecificState.gateway;
      if (gateway.onSchemaLoadOrUpdate) {
        this.modeSpecificState.unsubscribeFromGateway = gateway.onSchemaLoadOrUpdate((schemaContext) => {
          this.processSchemaLoadOrUpdateEvent(schemaContext);
        });
      } else {
        throw new Error("Unexpectedly couldn't find onSchemaLoadOrUpdate on gateway");
      }
      const config2 = await this.modeSpecificState.gateway.load({
        apollo: this.modeSpecificState.apolloConfig
      });
      return config2.executor;
    } else {
      this.processSchemaLoadOrUpdateEvent({
        apiSchema: this.modeSpecificState.apiSchema
      }, this.modeSpecificState.schemaDerivedData);
      return null;
    }
  }
  onSchemaLoadOrUpdate(callback) {
    if (!this.schemaContext) {
      throw new Error("You must call start() before onSchemaLoadOrUpdate()");
    }
    if (!this.isStopped) {
      try {
        callback(this.schemaContext);
      } catch (e) {
        throw new Error(`An error was thrown from an 'onSchemaLoadOrUpdate' listener: ${e.message}`);
      }
    }
    this.onSchemaLoadOrUpdateListeners.add(callback);
    return () => {
      this.onSchemaLoadOrUpdateListeners.delete(callback);
    };
  }
  getSchemaDerivedData() {
    if (!this.schemaDerivedData) {
      throw new Error("You must call start() before getSchemaDerivedData()");
    }
    return this.schemaDerivedData;
  }
  async stop() {
    this.isStopped = true;
    if (this.modeSpecificState.mode === "gateway") {
      this.modeSpecificState.unsubscribeFromGateway?.();
      await this.modeSpecificState.gateway.stop?.();
    }
  }
  processSchemaLoadOrUpdateEvent(schemaContext, schemaDerivedData) {
    if (!this.isStopped) {
      this.schemaDerivedData = schemaDerivedData ?? this.schemaDerivedDataProvider(schemaContext.apiSchema);
      this.schemaContext = schemaContext;
      this.onSchemaLoadOrUpdateListeners.forEach((listener) => {
        try {
          listener(schemaContext);
        } catch (e) {
          this.logger.error("An error was thrown from an 'onSchemaLoadOrUpdate' listener");
          this.logger.error(e);
        }
      });
    }
  }
};

// node_modules/@apollo/server/dist/esm/ApolloServer.js
var NoIntrospection = (context2) => ({
  Field(node) {
    if (node.name.value === "__schema" || node.name.value === "__type") {
      context2.reportError(new import_graphql40.GraphQLError("GraphQL introspection is not allowed by Apollo Server, but the query contained __schema or __type. To enable introspection, pass introspection: true to ApolloServer in production", {
        nodes: [node],
        extensions: {
          validationErrorCode: ApolloServerValidationErrorCode.INTROSPECTION_DISABLED
        }
      }));
    }
  }
});
function defaultLogger() {
  const loglevelLogger = import_loglevel.default.getLogger("apollo-server");
  loglevelLogger.setLevel(import_loglevel.default.levels.INFO);
  return loglevelLogger;
}
var ApolloServer = class _ApolloServer {
  constructor(config2) {
    const nodeEnv = config2.nodeEnv ?? process.env.NODE_ENV ?? "";
    this.logger = config2.logger ?? defaultLogger();
    const apolloConfig = determineApolloConfig(config2.apollo, this.logger);
    const isDev = nodeEnv !== "production";
    if (config2.cache && config2.cache !== "bounded" && import_utils22.PrefixingKeyValueCache.prefixesAreUnnecessaryForIsolation(config2.cache)) {
      throw new Error("You cannot pass a cache returned from `PrefixingKeyValueCache.cacheDangerouslyDoesNotNeedPrefixesForIsolation`to `new ApolloServer({ cache })`, because Apollo Server may use it for multiple features whose cache keys must be distinct from each other.");
    }
    const state = config2.gateway ? {
      phase: "initialized",
      schemaManager: new SchemaManager({
        gateway: config2.gateway,
        apolloConfig,
        schemaDerivedDataProvider: (schema) => _ApolloServer.generateSchemaDerivedData(schema, config2.documentStore),
        logger: this.logger
      })
    } : {
      phase: "initialized",
      schemaManager: new SchemaManager({
        apiSchema: _ApolloServer.constructSchema(config2),
        schemaDerivedDataProvider: (schema) => _ApolloServer.generateSchemaDerivedData(schema, config2.documentStore),
        logger: this.logger
      })
    };
    const introspectionEnabled = config2.introspection ?? isDev;
    const hideSchemaDetailsFromClientErrors = config2.hideSchemaDetailsFromClientErrors ?? false;
    this.cache = config2.cache === void 0 || config2.cache === "bounded" ? new import_utils22.InMemoryLRUCache() : config2.cache;
    this.internals = {
      formatError: config2.formatError,
      rootValue: config2.rootValue,
      validationRules: [
        ...config2.validationRules ?? [],
        ...introspectionEnabled ? [] : [NoIntrospection]
      ],
      hideSchemaDetailsFromClientErrors,
      dangerouslyDisableValidation: config2.dangerouslyDisableValidation ?? false,
      fieldResolver: config2.fieldResolver,
      includeStacktraceInErrorResponses: config2.includeStacktraceInErrorResponses ?? (nodeEnv !== "production" && nodeEnv !== "test"),
      persistedQueries: config2.persistedQueries === false ? void 0 : {
        ...config2.persistedQueries,
        cache: new import_utils22.PrefixingKeyValueCache(config2.persistedQueries?.cache ?? this.cache, APQ_CACHE_PREFIX)
      },
      nodeEnv,
      allowBatchedHttpRequests: config2.allowBatchedHttpRequests ?? false,
      apolloConfig,
      plugins: config2.plugins ?? [],
      parseOptions: config2.parseOptions ?? {},
      state,
      stopOnTerminationSignals: config2.stopOnTerminationSignals,
      gatewayExecutor: null,
      csrfPreventionRequestHeaders: config2.csrfPrevention === true || config2.csrfPrevention === void 0 ? recommendedCsrfPreventionRequestHeaders : config2.csrfPrevention === false ? null : config2.csrfPrevention.requestHeaders ?? recommendedCsrfPreventionRequestHeaders,
      status400ForVariableCoercionErrors: config2.status400ForVariableCoercionErrors ?? false,
      __testing_incrementalExecutionResults: config2.__testing_incrementalExecutionResults,
      stringifyResult: config2.stringifyResult ?? prettyJSONStringify
    };
  }
  async start() {
    return await this._start(false);
  }
  startInBackgroundHandlingStartupErrorsByLoggingAndFailingAllRequests() {
    this._start(true).catch((e) => this.logStartupError(e));
  }
  async _start(startedInBackground) {
    if (this.internals.state.phase !== "initialized") {
      throw new Error(`You should only call 'start()' or 'startInBackgroundHandlingStartupErrorsByLoggingAndFailingAllRequests()' once on your ApolloServer.`);
    }
    const schemaManager = this.internals.state.schemaManager;
    const barrier = resolvable_default();
    this.internals.state = {
      phase: "starting",
      barrier,
      schemaManager,
      startedInBackground
    };
    try {
      await this.addDefaultPlugins();
      const toDispose = [];
      const executor = await schemaManager.start();
      if (executor) {
        this.internals.gatewayExecutor = executor;
      }
      toDispose.push(async () => {
        await schemaManager.stop();
      });
      const schemaDerivedData = schemaManager.getSchemaDerivedData();
      const service = {
        logger: this.logger,
        cache: this.cache,
        schema: schemaDerivedData.schema,
        apollo: this.internals.apolloConfig,
        startedInBackground
      };
      const taggedServerListeners = (await Promise.all(this.internals.plugins.map(async (plugin) => ({
        serverListener: plugin.serverWillStart && await plugin.serverWillStart(service),
        installedImplicitly: isImplicitlyInstallablePlugin(plugin) && plugin.__internal_installed_implicitly__
      })))).filter((maybeTaggedServerListener) => typeof maybeTaggedServerListener.serverListener === "object");
      taggedServerListeners.forEach(({ serverListener: { schemaDidLoadOrUpdate } }) => {
        if (schemaDidLoadOrUpdate) {
          schemaManager.onSchemaLoadOrUpdate(schemaDidLoadOrUpdate);
        }
      });
      const serverWillStops = taggedServerListeners.map((l) => l.serverListener.serverWillStop).filter(isDefined);
      if (serverWillStops.length) {
        toDispose.push(async () => {
          await Promise.all(serverWillStops.map((serverWillStop) => serverWillStop()));
        });
      }
      const drainServerCallbacks = taggedServerListeners.map((l) => l.serverListener.drainServer).filter(isDefined);
      const drainServers = drainServerCallbacks.length ? async () => {
        await Promise.all(drainServerCallbacks.map((drainServer) => drainServer()));
      } : null;
      let taggedServerListenersWithRenderLandingPage = taggedServerListeners.filter((l) => l.serverListener.renderLandingPage);
      if (taggedServerListenersWithRenderLandingPage.length > 1) {
        taggedServerListenersWithRenderLandingPage = taggedServerListenersWithRenderLandingPage.filter((l) => !l.installedImplicitly);
      }
      let landingPage = null;
      if (taggedServerListenersWithRenderLandingPage.length > 1) {
        throw Error("Only one plugin can implement renderLandingPage.");
      } else if (taggedServerListenersWithRenderLandingPage.length) {
        landingPage = await taggedServerListenersWithRenderLandingPage[0].serverListener.renderLandingPage();
      }
      const toDisposeLast = this.maybeRegisterTerminationSignalHandlers(["SIGINT", "SIGTERM"], startedInBackground);
      this.internals.state = {
        phase: "started",
        schemaManager,
        drainServers,
        landingPage,
        toDispose,
        toDisposeLast
      };
    } catch (maybeError) {
      const error = ensureError(maybeError);
      try {
        await Promise.all(this.internals.plugins.map(async (plugin) => plugin.startupDidFail?.({ error })));
      } catch (pluginError) {
        this.logger.error(`startupDidFail hook threw: ${pluginError}`);
      }
      this.internals.state = {
        phase: "failed to start",
        error
      };
      throw error;
    } finally {
      barrier.resolve();
    }
  }
  maybeRegisterTerminationSignalHandlers(signals, startedInBackground) {
    const toDisposeLast = [];
    if (this.internals.stopOnTerminationSignals === false || this.internals.stopOnTerminationSignals === void 0 && !(import_utils21.isNodeLike && this.internals.nodeEnv !== "test" && !startedInBackground)) {
      return toDisposeLast;
    }
    let receivedSignal = false;
    const signalHandler = async (signal) => {
      if (receivedSignal) {
        return;
      }
      receivedSignal = true;
      try {
        await this.stop();
      } catch (e) {
        this.logger.error(`stop() threw during ${signal} shutdown`);
        this.logger.error(e);
        process.exit(1);
      }
      process.kill(process.pid, signal);
    };
    signals.forEach((signal) => {
      process.on(signal, signalHandler);
      toDisposeLast.push(async () => {
        process.removeListener(signal, signalHandler);
      });
    });
    return toDisposeLast;
  }
  async _ensureStarted() {
    while (true) {
      switch (this.internals.state.phase) {
        case "initialized":
          throw new Error("You need to call `server.start()` before using your Apollo Server.");
        case "starting":
          await this.internals.state.barrier;
          break;
        case "failed to start":
          this.logStartupError(this.internals.state.error);
          throw new Error("This data graph is missing a valid configuration. More details may be available in the server logs.");
        case "started":
        case "draining":
          return this.internals.state;
        case "stopping":
        case "stopped":
          this.logger.warn("A GraphQL operation was received during server shutdown. The operation will fail. Consider draining the HTTP server on shutdown; see https://go.apollo.dev/s/drain for details.");
          throw new Error(`Cannot execute GraphQL operations ${this.internals.state.phase === "stopping" ? "while the server is stopping" : "after the server has stopped"}.'`);
        default:
          throw new UnreachableCaseError(this.internals.state);
      }
    }
  }
  assertStarted(expressionForError) {
    if (this.internals.state.phase !== "started" && this.internals.state.phase !== "draining" && !(this.internals.state.phase === "starting" && this.internals.state.startedInBackground)) {
      throw new Error("You must `await server.start()` before calling `" + expressionForError + "`");
    }
  }
  logStartupError(err) {
    this.logger.error("An error occurred during Apollo Server startup. All GraphQL requests will now fail. The startup error was: " + (err?.message || err));
  }
  static constructSchema(config2) {
    if (config2.schema) {
      return config2.schema;
    }
    const { typeDefs, resolvers: resolvers2 } = config2;
    const augmentedTypeDefs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];
    return makeExecutableSchema({
      typeDefs: augmentedTypeDefs,
      resolvers: resolvers2
    });
  }
  static generateSchemaDerivedData(schema, providedDocumentStore) {
    (0, import_graphql40.assertValidSchema)(schema);
    return {
      schema,
      documentStore: providedDocumentStore === void 0 ? new import_utils22.InMemoryLRUCache() : providedDocumentStore,
      documentStoreKeyPrefix: providedDocumentStore ? `${computeCoreSchemaHash((0, import_graphql40.printSchema)(schema))}:` : ""
    };
  }
  async stop() {
    switch (this.internals.state.phase) {
      case "initialized":
      case "starting":
      case "failed to start":
        throw Error("apolloServer.stop() should only be called after `await apolloServer.start()` has succeeded");
      case "stopped":
        if (this.internals.state.stopError) {
          throw this.internals.state.stopError;
        }
        return;
      case "stopping":
      case "draining": {
        await this.internals.state.barrier;
        const state = this.internals.state;
        if (state.phase !== "stopped") {
          throw Error(`Surprising post-stopping state ${state.phase}`);
        }
        if (state.stopError) {
          throw state.stopError;
        }
        return;
      }
      case "started":
        break;
      default:
        throw new UnreachableCaseError(this.internals.state);
    }
    const barrier = resolvable_default();
    const { schemaManager, drainServers, landingPage, toDispose, toDisposeLast } = this.internals.state;
    this.internals.state = {
      phase: "draining",
      barrier,
      schemaManager,
      landingPage
    };
    try {
      await drainServers?.();
      this.internals.state = { phase: "stopping", barrier };
      await Promise.all([...toDispose].map((dispose) => dispose()));
      await Promise.all([...toDisposeLast].map((dispose) => dispose()));
    } catch (stopError) {
      this.internals.state = {
        phase: "stopped",
        stopError
      };
      barrier.resolve();
      throw stopError;
    }
    this.internals.state = { phase: "stopped", stopError: null };
  }
  async addDefaultPlugins() {
    const { plugins, apolloConfig, nodeEnv, hideSchemaDetailsFromClientErrors } = this.internals;
    const isDev = nodeEnv !== "production";
    const alreadyHavePluginWithInternalId = (id2) => plugins.some((p) => pluginIsInternal(p) && p.__internal_plugin_id__ === id2);
    const pluginsByInternalID = /* @__PURE__ */ new Map();
    for (const p of plugins) {
      if (pluginIsInternal(p)) {
        const id2 = p.__internal_plugin_id__;
        if (!pluginsByInternalID.has(id2)) {
          pluginsByInternalID.set(id2, {
            sawDisabled: false,
            sawNonDisabled: false
          });
        }
        const seen = pluginsByInternalID.get(id2);
        if (p.__is_disabled_plugin__) {
          seen.sawDisabled = true;
        } else {
          seen.sawNonDisabled = true;
        }
        if (seen.sawDisabled && seen.sawNonDisabled) {
          throw new Error(`You have tried to install both ApolloServerPlugin${id2} and ApolloServerPlugin${id2}Disabled in your server. Please choose whether or not you want to disable the feature and install the appropriate plugin for your use case.`);
        }
      }
    }
    {
      if (!alreadyHavePluginWithInternalId("CacheControl")) {
        const { ApolloServerPluginCacheControl: ApolloServerPluginCacheControl2 } = await Promise.resolve().then(() => (init_cacheControl(), cacheControl_exports));
        plugins.push(ApolloServerPluginCacheControl2());
      }
    }
    {
      const alreadyHavePlugin2 = alreadyHavePluginWithInternalId("UsageReporting");
      if (!alreadyHavePlugin2 && apolloConfig.key) {
        if (apolloConfig.graphRef) {
          const { ApolloServerPluginUsageReporting: ApolloServerPluginUsageReporting2 } = await Promise.resolve().then(() => (init_usageReporting(), usageReporting_exports));
          plugins.unshift(ApolloServerPluginUsageReporting2({
            __onlyIfSchemaIsNotSubgraph: true
          }));
        } else {
          this.logger.warn("You have specified an Apollo key but have not specified a graph ref; usage reporting is disabled. To enable usage reporting, set the `APOLLO_GRAPH_REF` environment variable to `your-graph-id@your-graph-variant`. To disable this warning, install `ApolloServerPluginUsageReportingDisabled`.");
        }
      }
    }
    {
      const alreadyHavePlugin2 = alreadyHavePluginWithInternalId("SchemaReporting");
      const enabledViaEnvVar = process.env.APOLLO_SCHEMA_REPORTING === "true";
      if (!alreadyHavePlugin2 && enabledViaEnvVar) {
        if (apolloConfig.key) {
          const { ApolloServerPluginSchemaReporting: ApolloServerPluginSchemaReporting2 } = await Promise.resolve().then(() => (init_schemaReporting(), schemaReporting_exports));
          plugins.push(ApolloServerPluginSchemaReporting2());
        } else {
          throw new Error("You've enabled schema reporting by setting the APOLLO_SCHEMA_REPORTING environment variable to true, but you also need to provide your Apollo API key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})");
        }
      }
    }
    {
      const alreadyHavePlugin2 = alreadyHavePluginWithInternalId("InlineTrace");
      if (!alreadyHavePlugin2) {
        const { ApolloServerPluginInlineTrace: ApolloServerPluginInlineTrace2 } = await Promise.resolve().then(() => (init_inlineTrace(), inlineTrace_exports));
        plugins.push(ApolloServerPluginInlineTrace2({ __onlyIfSchemaIsSubgraph: true }));
      }
    }
    const alreadyHavePlugin = alreadyHavePluginWithInternalId("LandingPageDisabled");
    if (!alreadyHavePlugin) {
      const { ApolloServerPluginLandingPageLocalDefault: ApolloServerPluginLandingPageLocalDefault2, ApolloServerPluginLandingPageProductionDefault: ApolloServerPluginLandingPageProductionDefault2 } = await Promise.resolve().then(() => (init_default(), default_exports));
      const plugin = isDev ? ApolloServerPluginLandingPageLocalDefault2() : ApolloServerPluginLandingPageProductionDefault2();
      if (!isImplicitlyInstallablePlugin(plugin)) {
        throw Error("default landing page plugin should be implicitly installable?");
      }
      plugin.__internal_installed_implicitly__ = true;
      plugins.push(plugin);
    }
    {
      const alreadyHavePlugin2 = alreadyHavePluginWithInternalId("DisableSuggestions");
      if (hideSchemaDetailsFromClientErrors && !alreadyHavePlugin2) {
        const { ApolloServerPluginDisableSuggestions: ApolloServerPluginDisableSuggestions2 } = await Promise.resolve().then(() => (init_disableSuggestions(), disableSuggestions_exports));
        plugins.push(ApolloServerPluginDisableSuggestions2());
      }
    }
  }
  addPlugin(plugin) {
    if (this.internals.state.phase !== "initialized") {
      throw new Error("Can't add plugins after the server has started");
    }
    this.internals.plugins.push(plugin);
  }
  async executeHTTPGraphQLRequest({ httpGraphQLRequest, context: context2 }) {
    try {
      let runningServerState;
      try {
        runningServerState = await this._ensureStarted();
      } catch (error) {
        return await this.errorResponse(error, httpGraphQLRequest);
      }
      if (runningServerState.landingPage && this.prefersHTML(httpGraphQLRequest)) {
        let renderedHtml;
        if (typeof runningServerState.landingPage.html === "string") {
          renderedHtml = runningServerState.landingPage.html;
        } else {
          try {
            renderedHtml = await runningServerState.landingPage.html();
          } catch (maybeError) {
            const error = ensureError(maybeError);
            this.logger.error(`Landing page \`html\` function threw: ${error}`);
            return await this.errorResponse(error, httpGraphQLRequest);
          }
        }
        return {
          headers: new HeaderMap([["content-type", "text/html"]]),
          body: {
            kind: "complete",
            string: renderedHtml
          }
        };
      }
      if (this.internals.csrfPreventionRequestHeaders) {
        preventCsrf(httpGraphQLRequest.headers, this.internals.csrfPreventionRequestHeaders);
      }
      let contextValue;
      try {
        contextValue = await context2();
      } catch (maybeError) {
        const error = ensureError(maybeError);
        try {
          await Promise.all(this.internals.plugins.map(async (plugin) => plugin.contextCreationDidFail?.({
            error
          })));
        } catch (pluginError) {
          this.logger.error(`contextCreationDidFail hook threw: ${pluginError}`);
        }
        return await this.errorResponse(ensureGraphQLError(error, "Context creation failed: "), httpGraphQLRequest);
      }
      return await runPotentiallyBatchedHttpQuery(this, httpGraphQLRequest, contextValue, runningServerState.schemaManager.getSchemaDerivedData(), this.internals);
    } catch (maybeError_) {
      const maybeError = maybeError_;
      if (maybeError instanceof import_graphql40.GraphQLError && maybeError.extensions.code === ApolloServerErrorCode.BAD_REQUEST) {
        try {
          await Promise.all(this.internals.plugins.map(async (plugin) => plugin.invalidRequestWasReceived?.({ error: maybeError })));
        } catch (pluginError) {
          this.logger.error(`invalidRequestWasReceived hook threw: ${pluginError}`);
        }
      }
      return await this.errorResponse(maybeError, httpGraphQLRequest);
    }
  }
  async errorResponse(error, requestHead) {
    const { formattedErrors, httpFromErrors } = normalizeAndFormatErrors([error], {
      includeStacktraceInErrorResponses: this.internals.includeStacktraceInErrorResponses,
      formatError: this.internals.formatError
    });
    return {
      status: httpFromErrors.status ?? 500,
      headers: new HeaderMap([
        ...httpFromErrors.headers,
        [
          "content-type",
          chooseContentTypeForSingleResultResponse(requestHead) ?? MEDIA_TYPES.APPLICATION_JSON
        ]
      ]),
      body: {
        kind: "complete",
        string: await this.internals.stringifyResult({
          errors: formattedErrors
        })
      }
    };
  }
  prefersHTML(request) {
    const acceptHeader = request.headers.get("accept");
    return request.method === "GET" && !!acceptHeader && new import_negotiator2.default({
      headers: { accept: acceptHeader }
    }).mediaType([
      MEDIA_TYPES.APPLICATION_JSON,
      MEDIA_TYPES.APPLICATION_GRAPHQL_RESPONSE_JSON,
      MEDIA_TYPES.MULTIPART_MIXED_EXPERIMENTAL,
      MEDIA_TYPES.MULTIPART_MIXED_NO_DEFER_SPEC,
      MEDIA_TYPES.TEXT_HTML
    ]) === MEDIA_TYPES.TEXT_HTML;
  }
  async executeOperation(request, options = {}) {
    if (this.internals.state.phase === "initialized") {
      await this.start();
    }
    const schemaDerivedData = (await this._ensureStarted()).schemaManager.getSchemaDerivedData();
    const graphQLRequest = {
      ...request,
      query: request.query && typeof request.query !== "string" ? (0, import_graphql40.print)(request.query) : request.query
    };
    const response = await internalExecuteOperation({
      server: this,
      graphQLRequest,
      internals: this.internals,
      schemaDerivedData,
      sharedResponseHTTPGraphQLHead: null
    }, options);
    return response;
  }
};
async function internalExecuteOperation({ server, graphQLRequest, internals, schemaDerivedData, sharedResponseHTTPGraphQLHead }, options) {
  const requestContext = {
    logger: server.logger,
    cache: server.cache,
    schema: schemaDerivedData.schema,
    request: graphQLRequest,
    response: {
      http: sharedResponseHTTPGraphQLHead ?? newHTTPGraphQLHead()
    },
    contextValue: cloneObject(options?.contextValue ?? {}),
    metrics: {},
    overallCachePolicy: newCachePolicy(),
    requestIsBatched: sharedResponseHTTPGraphQLHead !== null
  };
  try {
    return await processGraphQLRequest(schemaDerivedData, server, internals, requestContext);
  } catch (maybeError) {
    const error = ensureError(maybeError);
    await Promise.all(internals.plugins.map(async (plugin) => plugin.unexpectedErrorProcessingRequest?.({
      requestContext,
      error
    })));
    server.logger.error(`Unexpected error processing request: ${error}`);
    throw new Error("Internal server error");
  }
}
function isImplicitlyInstallablePlugin(p) {
  return "__internal_installed_implicitly__" in p;
}
var MEDIA_TYPES = {
  APPLICATION_JSON: "application/json; charset=utf-8",
  APPLICATION_JSON_GRAPHQL_CALLBACK: "application/json; callbackSpec=1.0; charset=utf-8",
  APPLICATION_GRAPHQL_RESPONSE_JSON: "application/graphql-response+json; charset=utf-8",
  MULTIPART_MIXED_NO_DEFER_SPEC: "multipart/mixed",
  MULTIPART_MIXED_EXPERIMENTAL: "multipart/mixed; deferSpec=20220824",
  TEXT_HTML: "text/html"
};
function chooseContentTypeForSingleResultResponse(head) {
  const acceptHeader = head.headers.get("accept");
  if (!acceptHeader) {
    return MEDIA_TYPES.APPLICATION_JSON;
  } else {
    const preferred = new import_negotiator2.default({
      headers: { accept: head.headers.get("accept") }
    }).mediaType([
      MEDIA_TYPES.APPLICATION_JSON,
      MEDIA_TYPES.APPLICATION_GRAPHQL_RESPONSE_JSON,
      MEDIA_TYPES.APPLICATION_JSON_GRAPHQL_CALLBACK
    ]);
    if (preferred) {
      return preferred;
    } else {
      return null;
    }
  }
}
function cloneObject(object) {
  return Object.assign(Object.create(Object.getPrototypeOf(object)), object);
}

// serverless.ts
var import_next = __toESM(require_dist10());
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var isDirectory = (dirPath) => {
  try {
    return import_fs.default.statSync(dirPath).isDirectory();
  } catch (error) {
    console.error(`Error reading directory ${dirPath}:`, error);
    return false;
  }
};
function getAllFiles(dirPath, arrayOfFiles = []) {
  const files = import_fs.default.readdirSync(dirPath);
  files.forEach((file) => {
    const fullPath = import_path.default.join(dirPath, file);
    if (isDirectory(fullPath)) {
      getAllFiles(fullPath, arrayOfFiles);
    } else {
      arrayOfFiles.push(fullPath);
    }
  });
  return arrayOfFiles;
}
console.log("Recursively listing all files:");
console.log(JSON.stringify(getAllFiles(import_path.default.resolve("/")), null, 2));
var main = async () => {
  const server = new ApolloServer({
    typeDefs: await getTypeDefs(),
    resolvers,
    plugins: [
      {
        async serverWillStart() {
          console.info("\u{1F680}  GraphQL Server is starting...");
        }
      }
    ]
  });
  const handler = (0, import_next.startServerAndCreateNextHandler)(server, {
    context: async () => context()
  });
  return handler;
};
var serverless_default = main();
/*! Bundled license information:

@prisma/client/runtime/library.js:
  (*! Bundled license information:
  
  decimal.js/decimal.mjs:
    (*!
     *  decimal.js v10.4.3
     *  An arbitrary-precision Decimal type for JavaScript.
     *  https://github.com/MikeMcl/decimal.js
     *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
     *  MIT Licence
     *)
  *)

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

negotiator/index.js:
  (*!
   * negotiator
   * Copyright(c) 2012 Federico Romero
   * Copyright(c) 2012-2014 Isaac Z. Schlueter
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/
